{"version":3,"sources":["../../../../src/core/FactoryMaker.js"],"names":[],"mappings":"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","file":"FactoryMaker.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @module FactoryMaker\n */\nconst FactoryMaker = (function () {\n\n    let instance;\n    const singletonContexts = [];\n    const singletonFactories = {};\n    const classFactories = {};\n\n    function extend(name, childInstance, override, context) {\n        if (!context[name] && childInstance) {\n            context[name] = {\n                instance: childInstance,\n                override: override\n            };\n        }\n    }\n\n    /**\n     * Use this method from your extended object.  this.factory is injected into your object.\n     * this.factory.getSingletonInstance(this.context, 'VideoModel')\n     * will return the video model for use in the extended object.\n     *\n     * @param {Object} context - injected into extended object as this.context\n     * @param {string} className - string name found in all dash.js objects\n     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.\n     * @returns {*} Context aware instance of specified singleton name.\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function getSingletonInstance(context, className) {\n        for (const i in singletonContexts) {\n            const obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                return obj.instance;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.\n     *\n     * @param {Object} context\n     * @param {string} className\n     * @param {Object} instance\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function setSingletonInstance(context, className, instance) {\n        for (const i in singletonContexts) {\n            const obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                singletonContexts[i].instance = instance;\n                return;\n            }\n        }\n        singletonContexts.push({\n            name: className,\n            context: context,\n            instance: instance\n        });\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Factories storage Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function getFactoryByName(name, factoriesArray) {\n        return factoriesArray[name];\n    }\n\n    function updateFactory(name, factory, factoriesArray) {\n        if (name in factoriesArray) {\n            factoriesArray[name] = factory;\n        }\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Class Factories Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateClassFactory(name, factory) {\n        updateFactory(name, factory, classFactories);\n    }\n\n    function getClassFactoryByName(name) {\n        return getFactoryByName(name, classFactories);\n    }\n\n    function getClassFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);\n\n        if (!factory) {\n            factory = function (context) {\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    create: function () {\n                        return merge(classConstructor, context, arguments);\n                    }\n                };\n            };\n\n            classFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\n        }\n        return factory;\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Singleton Factory MAangement\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateSingletonFactory(name, factory) {\n        updateFactory(name, factory, singletonFactories);\n    }\n\n    function getSingletonFactoryByName(name) {\n        return getFactoryByName(name, singletonFactories);\n    }\n\n    function getSingletonFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);\n        if (!factory) {\n            factory = function (context) {\n                let instance;\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    getInstance: function () {\n                        // If we don't have an instance yet check for one on the context\n                        if (!instance) {\n                            instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);\n                        }\n                        // If there's no instance on the context then create one\n                        if (!instance) {\n                            instance = merge(classConstructor, context, arguments);\n                            singletonContexts.push({\n                                name: classConstructor.__dashjs_factory_name,\n                                context: context,\n                                instance: instance\n                            });\n                        }\n                        return instance;\n                    }\n                };\n            };\n            singletonFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\n        }\n\n        return factory;\n    }\n\n    function merge(classConstructor, context, args) {\n\n        let classInstance;\n        const className = classConstructor.__dashjs_factory_name;\n        const extensionObject = context[className];\n\n        if (extensionObject) {\n\n            let extension = extensionObject.instance;\n\n            if (extensionObject.override) { //Override public methods in parent but keep parent.\n\n                classInstance = classConstructor.apply({context}, args);\n                extension = extension.apply({\n                    context,\n                    factory: instance,\n                    parent: classInstance\n                }, args);\n\n                for (const prop in extension) {\n                    if (classInstance.hasOwnProperty(prop)) {\n                        classInstance[prop] = extension[prop];\n                    }\n                }\n\n            } else { //replace parent object completely with new object. Same as dijon.\n\n                return extension.apply({\n                    context,\n                    factory: instance\n                }, args);\n\n            }\n        } else {\n            // Create new instance of the class\n            classInstance = classConstructor.apply({context}, args);\n        }\n\n        // Add getClassName function to class instance prototype (used by Debug)\n        classInstance.getClassName = function () {return className;};\n\n        return classInstance;\n    }\n\n    instance = {\n        extend: extend,\n        getSingletonInstance: getSingletonInstance,\n        setSingletonInstance: setSingletonInstance,\n        getSingletonFactory: getSingletonFactory,\n        getSingletonFactoryByName: getSingletonFactoryByName,\n        updateSingletonFactory: updateSingletonFactory,\n        getClassFactory: getClassFactory,\n        getClassFactoryByName: getClassFactoryByName,\n        updateClassFactory: updateClassFactory\n    };\n\n    return instance;\n\n}());\n\nexport default FactoryMaker;\n"]}