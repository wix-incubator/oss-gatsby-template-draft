{"version":3,"sources":["../../../../../src/dash/parser/DashParser.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;8LA8ByB,yBAAyB,0FAChC,kBAAkB,6EACb,cAAc,sFACpB,6BAA6B,wGACpB,0BAA0B,kHACxB,4BAA4B,sHAC5B,4BAA4B,qHAC7B,2BAA2B,4HACd,oCAAoC,mIAC/C,yBAAyB,2EAEtD,SAAS,UAAU,EAAG,CAElB,IAAM,OAAO,CAAG,IAAI,CAAC,OAAO,CAAC,AAE7B,IAAI,QAAQ,UAAA,CACR,MAAM,UAAA,CACN,QAAQ,UAAA,CACR,SAAS,UAAA,CACT,UAAU,UAAA,CAAC,AAEf,SAAS,KAAK,EAAG,CACb,MAAM,GAAG,2BAAM,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,AAC1D,QAAQ,GAAG,CACP,0CAAqB,CACrB,0CAAqB,CACrB,yCAAoB,CACpB,wCAAmB;CACtB,CAAC,AAEF,SAAS,GAAG,mCAAS,CACjB,UAAU,CAAU,KAAK,CACzB,eAAe,CAAK,EAAE,CACtB,eAAe,CAAK,UAAU,CAC9B,aAAa,CAAO,QAAQ,CAC5B,gBAAgB,CAAI,KAAK,CACzB,kBAAkB,CAAE,KAAK,CACzB,UAAU,CAAU,IAAI,CACxB,QAAQ,CAAY,QAAQ,CAC/B,CAAC,CAAC,AAEH,UAAU,GAAG,4BAAW,OAAO,CAAC,CAAC,MAAM,CAAC,CACpC,aAAa,CAAE,kDAAiC,CAChD,MAAM,CAAE,uCAAsB,CACjC,CAAC,CAAC,CACN,AAED,SAAS,WAAW,EAAG,CACnB,OAAO,QAAQ,CAAC,CACnB,AAED,SAAS,OAAO,EAAG,CACf,OAAO,UAAU,CAAC,CACrB,AAED,SAAS,KAAK,CAAC,IAAI,CAAE,CACjB,IAAI,QAAQ,UAAA,CAAC,AACb,IAAM,SAAS,CAAG,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,AAE3C,QAAQ,GAAG,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,AAExC,GAAI,CAAC,QAAQ,CAAE,CACX,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC,CAClD,AAED,IAAM,QAAQ,CAAG,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,AAC1C,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,AAEzB,IAAM,UAAU,CAAG,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,AAC5C,MAAM,CAAC,IAAI,CAAC,gCAAgC,GAAG,CAAC,QAAQ,GAAG,SAAS,CAAA,CAAE,WAAW,CAAC,CAAC,CAAC,GAAG,kBAAkB,GAAG,CAAC,UAAU,GAAG,QAAQ,CAAA,CAAE,WAAW,CAAC,CAAC,CAAC,GAAG,aAAa,GAAG,CAAC,CAAC,UAAU,GAAG,SAAS,CAAA,GAAI,IAAI,CAAA,CAAE,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,AAE9N,OAAO,QAAQ,CAAC,CACnB,AAED,QAAQ,GAAG,CACP,KAAK,CAAE,KAAK,CACZ,WAAW,CAAE,WAAW,CACxB,OAAO,CAAE,OAAO,CACnB,CAAC,AAEF,KAAK,EAAE,CAAC,AAER,OAAO,QAAQ,CAAC,CACnB,AAED,UAAU,CAAC,qBAAqB,GAAG,YAAY,CAAC,qBACjC,8BAAa,eAAe,CAAC,UAAU,CAAC","file":"DashParser.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport ObjectIron from './objectiron';\nimport X2JS from '../../../externals/xml2json';\nimport StringMatcher from './matchers/StringMatcher';\nimport DurationMatcher from './matchers/DurationMatcher';\nimport DateTimeMatcher from './matchers/DateTimeMatcher';\nimport NumericMatcher from './matchers/NumericMatcher';\nimport RepresentationBaseValuesMap from './maps/RepresentationBaseValuesMap';\nimport SegmentValuesMap from './maps/SegmentValuesMap';\n\nfunction DashParser() {\n\n    const context = this.context;\n\n    let instance,\n        logger,\n        matchers,\n        converter,\n        objectIron;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        matchers = [\n            new DurationMatcher(),\n            new DateTimeMatcher(),\n            new NumericMatcher(),\n            new StringMatcher()   // last in list to take precedence over NumericMatcher\n        ];\n\n        converter = new X2JS({\n            escapeMode:         false,\n            attributePrefix:    '',\n            arrayAccessForm:    'property',\n            emptyNodeForm:      'object',\n            stripWhitespaces:   false,\n            enableToStringFunc: false,\n            ignoreRoot:         true,\n            matchers:           matchers\n        });\n\n        objectIron = ObjectIron(context).create({\n            adaptationset: new RepresentationBaseValuesMap(),\n            period: new SegmentValuesMap()\n        });\n    }\n\n    function getMatchers() {\n        return matchers;\n    }\n\n    function getIron() {\n        return objectIron;\n    }\n\n    function parse(data) {\n        let manifest;\n        const startTime = window.performance.now();\n\n        manifest = converter.xml_str2json(data);\n\n        if (!manifest) {\n            throw new Error('parsing the manifest failed');\n        }\n\n        const jsonTime = window.performance.now();\n        objectIron.run(manifest);\n\n        const ironedTime = window.performance.now();\n        logger.info('Parsing complete: ( xml2json: ' + (jsonTime - startTime).toPrecision(3) + 'ms, objectiron: ' + (ironedTime - jsonTime).toPrecision(3) + 'ms, total: ' + ((ironedTime - startTime) / 1000).toPrecision(3) + 's)');\n\n        return manifest;\n    }\n\n    instance = {\n        parse: parse,\n        getMatchers: getMatchers,\n        getIron: getIron\n    };\n\n    setup();\n\n    return instance;\n}\n\nDashParser.__dashjs_factory_name = 'DashParser';\nexport default FactoryMaker.getClassFactory(DashParser);\n"]}