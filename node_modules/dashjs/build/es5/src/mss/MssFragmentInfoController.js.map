{"version":3,"sources":["../../../../src/mss/MssFragmentInfoController.js"],"names":[],"mappings":"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","file":"MssFragmentInfoController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MssEvents from './MssEvents';\nimport MSSFragmentMoofProcessor from './MssFragmentMoofProcessor';\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\n\nfunction MssFragmentInfoController(config) {\n\n    config = config || {};\n    const context = this.context;\n\n    let instance;\n    let logger;\n    let fragmentModel;\n    let started;\n    let type;\n    let bufferTimeout;\n    let startTime;\n    let startFragmentTime;\n    let index;\n\n    const streamProcessor = config.streamProcessor;\n    const eventBus = config.eventBus;\n    const metricsModel = config.metricsModel;\n    const playbackController = config.playbackController;\n    const ISOBoxer = config.ISOBoxer;\n    const baseURLController = config.baseURLController;\n    const debug = config.debug;\n    const controllerType = 'MssFragmentInfoController';\n\n    function setup() {\n        logger = debug.getLogger(instance);\n    }\n\n    function initialize() {\n        started = false;\n\n        startTime = null;\n        startFragmentTime = null;\n\n        // Register to StreamProcessor as external controller\n        streamProcessor.registerExternalController(instance);\n        type = streamProcessor.getType();\n        fragmentModel = streamProcessor.getFragmentModel();\n    }\n\n    function doStart() {\n        if (started === true) {\n            return;\n        }\n\n        logger.debug('Do start');\n\n        eventBus.on(MssEvents.FRAGMENT_INFO_LOADING_COMPLETED, onFragmentInfoLoadedCompleted, instance);\n\n        started = true;\n        startTime = new Date().getTime();\n        index = 0;\n\n        loadNextFragmentInfo();\n    }\n\n    function doStop() {\n        if (!started) {\n            return;\n        }\n        logger.debug('Do stop');\n\n        eventBus.off(MssEvents.FRAGMENT_INFO_LOADING_COMPLETED, onFragmentInfoLoadedCompleted, instance);\n\n        // Stop buffering process\n        clearTimeout(bufferTimeout);\n        started = false;\n\n        startTime = null;\n        startFragmentTime = null;\n    }\n\n    function reset() {\n        doStop();\n        streamProcessor.unregisterExternalController(instance);\n    }\n\n    function loadNextFragmentInfo() {\n        // Check if running state\n        if (!started) {\n            return;\n        }\n\n        // Get last segment from SegmentTimeline\n        const representation = getCurrentRepresentation();\n        const manifest = representation.adaptation.period.mpd.manifest;\n        const adaptation = manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index];\n        const segments = adaptation.SegmentTemplate.SegmentTimeline.S_asArray;\n        const segment = segments[segments.length - 1];\n\n        logger.debug('Last fragment time: ' + (segment.t / adaptation.SegmentTemplate.timescale));\n\n        // Generate segment request\n        const request = getRequestForSegment(adaptation, representation, segment);\n\n        // Send segment request\n        requestFragment.call(this, request);\n    }\n\n    function delayLoadNextFragmentInfo(delay) {\n        clearTimeout(bufferTimeout);\n        bufferTimeout = setTimeout(function () {\n            bufferTimeout = null;\n            loadNextFragmentInfo();\n        }, delay * 1000);\n    }\n\n    function getRequestForSegment(adaptation, representation, segment) {\n        let timescale = adaptation.SegmentTemplate.timescale;\n        let request = new FragmentRequest();\n\n        request.mediaType = type;\n        request.type = 'FragmentInfoSegment';\n        // request.range = segment.mediaRange;\n        request.startTime = segment.t / timescale;\n        request.duration = segment.d / timescale;\n        request.timescale = timescale;\n        // request.availabilityStartTime = segment.availabilityStartTime;\n        // request.availabilityEndTime = segment.availabilityEndTime;\n        // request.wallStartTime = segment.wallStartTime;\n        request.quality = representation.index;\n        request.index = index++;\n        request.mediaInfo = streamProcessor.getMediaInfo();\n        request.adaptationIndex = representation.adaptation.index;\n        request.representationId = representation.id;\n        request.url = baseURLController.resolve(representation.path).url + adaptation.SegmentTemplate.media;\n        request.url = request.url.replace('$Bandwidth$', representation.bandwidth);\n        request.url = request.url.replace('$Time$', segment.tManifest ? segment.tManifest : segment.t);\n        request.url = request.url.replace('/Fragments(', '/FragmentInfo(');\n\n        return request;\n    }\n\n    function getCurrentRepresentation() {\n        const representationController = streamProcessor.getRepresentationController();\n        const representation = representationController.getCurrentRepresentation();\n\n        return representation;\n    }\n\n    function requestFragment(request) {\n\n        logger.debug('Load fragment for time: ' + request.startTime);\n        if (streamProcessor.getFragmentModel().isFragmentLoadedOrPending(request)) {\n            // We may have reached end of timeline in case of start-over streams\n            logger.debug('No more fragments');\n            return;\n        }\n\n        fragmentModel.executeRequest(request);\n    }\n\n    function onFragmentInfoLoadedCompleted(e) {\n        if (e.streamProcessor !== streamProcessor) {\n            return;\n        }\n\n        const request = e.fragmentInfo.request;\n        if (!e.fragmentInfo.response) {\n            logger.error('Load error', request.url);\n            return;\n        }\n\n        let deltaFragmentTime,\n            deltaTime;\n\n        logger.debug('FragmentInfo loaded: ', request.url);\n\n        if (!startFragmentTime) {\n            startFragmentTime = request.startTime;\n        }\n\n        try {\n            // Process FramgentInfo in order to update segment timeline (DVR window)\n            const mssFragmentMoofProcessor = MSSFragmentMoofProcessor(context).create({\n                metricsModel: metricsModel,\n                playbackController: playbackController,\n                ISOBoxer: ISOBoxer,\n                eventBus: eventBus,\n                debug: debug\n            });\n            mssFragmentMoofProcessor.updateSegmentList(e.fragmentInfo, streamProcessor);\n\n            deltaTime = (new Date().getTime() - startTime) / 1000;\n            deltaFragmentTime = (request.startTime + request.duration) - startFragmentTime;\n            delayLoadNextFragmentInfo(Math.max(0, (deltaFragmentTime - deltaTime)));\n        } catch (e) {\n            logger.fatal('Internal error while processing fragment info segment ');\n        }\n    }\n\n    function getType() {\n        return type;\n    }\n\n    instance = {\n        initialize: initialize,\n        controllerType: controllerType,\n        start: doStart,\n        getType: getType,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssFragmentInfoController.__dashjs_factory_name = 'MssFragmentInfoController';\nexport default dashjs.FactoryMaker.getClassFactory(MssFragmentInfoController); /* jshint ignore:line */\n"]}