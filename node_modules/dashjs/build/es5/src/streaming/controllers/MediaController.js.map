{"version":3,"sources":["../../../../../src/streaming/controllers/MediaController.js"],"names":[],"mappings":"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","file":"MediaController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport Events from '../../core/events/Events';\nimport EventBus from '../../core/EventBus';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\n\nconst TRACK_SWITCH_MODE_NEVER_REPLACE = 'neverReplace';\nconst TRACK_SWITCH_MODE_ALWAYS_REPLACE = 'alwaysReplace';\nconst TRACK_SELECTION_MODE_HIGHEST_BITRATE = 'highestBitrate';\nconst TRACK_SELECTION_MODE_WIDEST_RANGE = 'widestRange';\nconst DEFAULT_INIT_TRACK_SELECTION_MODE = TRACK_SELECTION_MODE_HIGHEST_BITRATE;\n\nfunction MediaController() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    let instance,\n        logger,\n        tracks,\n        initialSettings,\n        selectionMode,\n        switchMode,\n        errHandler,\n        domStorage;\n\n    const validTrackSwitchModes = [\n        TRACK_SWITCH_MODE_ALWAYS_REPLACE,\n        TRACK_SWITCH_MODE_NEVER_REPLACE\n    ];\n\n    const validTrackSelectionModes = [\n        TRACK_SELECTION_MODE_HIGHEST_BITRATE,\n        TRACK_SELECTION_MODE_WIDEST_RANGE\n    ];\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        reset();\n    }\n\n    /**\n     * @param {string} type\n     * @param {StreamInfo} streamInfo\n     * @memberof MediaController#\n     */\n    function checkInitialMediaSettingsForType(type, streamInfo) {\n        let settings = getInitialSettings(type);\n        const tracksForType = getTracksFor(type, streamInfo);\n        const tracks = [];\n\n        if (type === Constants.FRAGMENTED_TEXT) {\n            // Choose the first track\n            setTrack(tracksForType[0]);\n            return;\n        }\n\n        if (!settings) {\n            settings = domStorage.getSavedMediaSettings(type);\n            setInitialSettings(type, settings);\n        }\n\n        if (!tracksForType || (tracksForType.length === 0)) return;\n\n        if (settings) {\n            tracksForType.forEach(function (track) {\n                if (matchSettings(settings, track)) {\n                    tracks.push(track);\n                }\n            });\n        }\n\n        if (tracks.length === 0) {\n            setTrack(selectInitialTrack(tracksForType));\n        } else {\n            if (tracks.length > 1) {\n                setTrack(selectInitialTrack(tracks));\n            } else {\n                setTrack(tracks[0]);\n            }\n        }\n    }\n\n    /**\n     * @param {MediaInfo} track\n     * @memberof MediaController#\n     */\n    function addTrack(track) {\n        if (!track) return;\n\n        const mediaType = track.type;\n        if (!isMultiTrackSupportedByType(mediaType)) return;\n\n        let streamId = track.streamInfo.id;\n        if (!tracks[streamId]) {\n            tracks[streamId] = createTrackInfo();\n        }\n\n        const mediaTracks = tracks[streamId][mediaType].list;\n        for (let i = 0, len = mediaTracks.length; i < len; ++i) {\n            //track is already set.\n            if (isTracksEqual(mediaTracks[i], track)) {\n                return;\n            }\n        }\n\n        mediaTracks.push(track);\n\n        let initSettings = getInitialSettings(mediaType);\n        if (initSettings && (matchSettings(initSettings, track)) && !getCurrentTrackFor(mediaType, track.streamInfo)) {\n            setTrack(track);\n        }\n    }\n\n    /**\n     * @param {string} type\n     * @param {StreamInfo} streamInfo\n     * @returns {Array}\n     * @memberof MediaController#\n     */\n    function getTracksFor(type, streamInfo) {\n        if (!type || !streamInfo) return [];\n\n        const id = streamInfo.id;\n\n        if (!tracks[id] || !tracks[id][type]) return [];\n\n        return tracks[id][type].list;\n    }\n\n    /**\n     * @param {string} type\n     * @param {StreamInfo} streamInfo\n     * @returns {Object|null}\n     * @memberof MediaController#\n     */\n    function getCurrentTrackFor(type, streamInfo) {\n        if (!type || !streamInfo || (streamInfo && !tracks[streamInfo.id])) return null;\n        return tracks[streamInfo.id][type].current;\n    }\n\n    /**\n     * @param {MediaInfo} track\n     * @returns {boolean}\n     * @memberof MediaController#\n     */\n    function isCurrentTrack(track) {\n        if (!track) {\n            return false;\n        }\n        const type = track.type;\n        const id = track.streamInfo.id;\n\n        return (tracks[id] && tracks[id][type] && isTracksEqual(tracks[id][type].current, track));\n    }\n\n    /**\n     * @param {MediaInfo} track\n     * @memberof MediaController#\n     */\n    function setTrack(track) {\n        if (!track) return;\n\n        const type = track.type;\n        const streamInfo = track.streamInfo;\n        const id = streamInfo.id;\n        const current = getCurrentTrackFor(type, streamInfo);\n\n        if (!tracks[id] || !tracks[id][type] || isTracksEqual(track, current)) return;\n\n        tracks[id][type].current = track;\n\n        if (tracks[id][type].current) {\n            eventBus.trigger(Events.CURRENT_TRACK_CHANGED, {oldMediaInfo: current, newMediaInfo: track, switchMode: switchMode[type]});\n        }\n\n        let settings = extractSettings(track);\n\n        if (!settings || !tracks[id][type].storeLastSettings) return;\n\n        if (settings.roles) {\n            settings.role = settings.roles[0];\n            delete settings.roles;\n        }\n\n        if (settings.accessibility) {\n            settings.accessibility = settings.accessibility[0];\n        }\n\n        if (settings.audioChannelConfiguration) {\n            settings.audioChannelConfiguration = settings.audioChannelConfiguration[0];\n        }\n\n        domStorage.setSavedMediaSettings(type, settings);\n    }\n\n    /**\n     * @param {string} type\n     * @param {Object} value\n     * @memberof MediaController#\n     */\n    function setInitialSettings(type, value) {\n        if (!type || !value) return;\n\n        initialSettings[type] = value;\n    }\n\n    /**\n     * @param {string} type\n     * @returns {Object|null}\n     * @memberof MediaController#\n     */\n    function getInitialSettings(type) {\n        if (!type) return null;\n\n        return initialSettings[type];\n    }\n\n    /**\n     * @param {string} type\n     * @param {string} mode\n     * @memberof MediaController#\n     */\n    function setSwitchMode(type, mode) {\n        const isModeSupported = (validTrackSwitchModes.indexOf(mode) !== -1);\n\n        if (!isModeSupported) {\n            logger.warn('Track switch mode is not supported: ' + mode);\n            return;\n        }\n\n        switchMode[type] = mode;\n    }\n\n    /**\n     * @param {string} type\n     * @returns {string} mode\n     * @memberof MediaController#\n     */\n    function getSwitchMode(type) {\n        return switchMode[type];\n    }\n\n    /**\n     * @param {string} mode\n     * @memberof MediaController#\n     */\n    function setSelectionModeForInitialTrack(mode) {\n        const isModeSupported = (validTrackSelectionModes.indexOf(mode) !== -1);\n\n        if (!isModeSupported) {\n            logger.warn('Track selection mode is not supported: ' + mode);\n            return;\n        }\n        selectionMode = mode;\n    }\n\n    /**\n     * @returns {string} mode\n     * @memberof MediaController#\n     */\n    function getSelectionModeForInitialTrack() {\n        return selectionMode || DEFAULT_INIT_TRACK_SELECTION_MODE;\n    }\n\n    /**\n     * @param {string} type\n     * @returns {boolean}\n     * @memberof MediaController#\n     */\n    function isMultiTrackSupportedByType(type) {\n        return (type === Constants.AUDIO || type === Constants.VIDEO || type === Constants.TEXT ||\n            type === Constants.FRAGMENTED_TEXT || type === Constants.IMAGE);\n    }\n\n    /**\n     * @param {MediaInfo} t1 - first track to compare\n     * @param {MediaInfo} t2 - second track to compare\n     * @returns {boolean}\n     * @memberof MediaController#\n     */\n    function isTracksEqual(t1, t2) {\n        if (!t1 && !t2) {\n            return true;\n        }\n\n        if (!t1 || !t2) {\n            return false;\n        }\n\n        const sameId = t1.id === t2.id;\n        const sameViewpoint = t1.viewpoint === t2.viewpoint;\n        const sameLang = t1.lang === t2.lang;\n        const sameRoles = t1.roles.toString() === t2.roles.toString();\n        const sameAccessibility = t1.accessibility.toString() === t2.accessibility.toString();\n        const sameAudioChannelConfiguration = t1.audioChannelConfiguration.toString() === t2.audioChannelConfiguration.toString();\n\n        return (sameId && sameViewpoint && sameLang && sameRoles && sameAccessibility && sameAudioChannelConfiguration);\n    }\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.errHandler) {\n            errHandler = config.errHandler;\n        }\n\n        if (config.domStorage) {\n            domStorage = config.domStorage;\n        }\n    }\n\n    /**\n     * @memberof MediaController#\n     */\n    function reset() {\n        tracks = {};\n        resetInitialSettings();\n        resetSwitchMode();\n    }\n\n    function extractSettings(mediaInfo) {\n        const settings = {\n            lang: mediaInfo.lang,\n            viewpoint: mediaInfo.viewpoint,\n            roles: mediaInfo.roles,\n            accessibility: mediaInfo.accessibility,\n            audioChannelConfiguration: mediaInfo.audioChannelConfiguration\n        };\n        let notEmpty = settings.lang || settings.viewpoint || (settings.role && settings.role.length > 0) ||\n        (settings.accessibility && settings.accessibility.length > 0) || (settings.audioChannelConfiguration && settings.audioChannelConfiguration.length > 0);\n\n        return notEmpty ? settings : null;\n    }\n\n    function matchSettings(settings, track) {\n        const matchLang = !settings.lang || (settings.lang === track.lang);\n        const matchViewPoint = !settings.viewpoint || (settings.viewpoint === track.viewpoint);\n        const matchRole = !settings.role || !!track.roles.filter(function (item) {\n            return item === settings.role;\n        })[0];\n        let matchAccessibility = !settings.accessibility || !!track.accessibility.filter(function (item) {\n            return item === settings.accessibility;\n        })[0];\n        let matchAudioChannelConfiguration = !settings.audioChannelConfiguration || !!track.audioChannelConfiguration.filter(function (item) {\n            return item === settings.audioChannelConfiguration;\n        })[0];\n\n        return (matchLang && matchViewPoint && matchRole && matchAccessibility && matchAudioChannelConfiguration);\n    }\n\n    function resetSwitchMode() {\n        switchMode = {\n            audio: TRACK_SWITCH_MODE_ALWAYS_REPLACE,\n            video: TRACK_SWITCH_MODE_NEVER_REPLACE\n        };\n    }\n\n    function resetInitialSettings() {\n        initialSettings = {\n            audio: null,\n            video: null\n        };\n    }\n\n    function selectInitialTrack(tracks) {\n        let mode = getSelectionModeForInitialTrack();\n        let tmpArr = [];\n        const getTracksWithHighestBitrate = function (trackArr) {\n            let max = 0;\n            let result = [];\n            let tmp;\n\n            trackArr.forEach(function (track) {\n                tmp = Math.max.apply(Math, track.bitrateList.map(function (obj) { return obj.bandwidth; }));\n\n                if (tmp > max) {\n                    max = tmp;\n                    result = [track];\n                } else if (tmp === max) {\n                    result.push(track);\n                }\n            });\n\n            return result;\n        };\n        const getTracksWithWidestRange = function (trackArr) {\n            let max = 0;\n            let result = [];\n            let tmp;\n\n            trackArr.forEach(function (track) {\n                tmp = track.representationCount;\n\n                if (tmp > max) {\n                    max = tmp;\n                    result = [track];\n                } else if (tmp === max) {\n                    result.push(track);\n                }\n            });\n\n            return result;\n        };\n\n        switch (mode) {\n            case TRACK_SELECTION_MODE_HIGHEST_BITRATE:\n                tmpArr = getTracksWithHighestBitrate(tracks);\n\n                if (tmpArr.length > 1) {\n                    tmpArr = getTracksWithWidestRange(tmpArr);\n                }\n                break;\n            case TRACK_SELECTION_MODE_WIDEST_RANGE:\n                tmpArr = getTracksWithWidestRange(tracks);\n\n                if (tmpArr.length > 1) {\n                    tmpArr = getTracksWithHighestBitrate(tracks);\n                }\n                break;\n            default:\n                logger.warn('Track selection mode is not supported: ' + mode);\n                break;\n        }\n\n        return tmpArr[0];\n    }\n\n    function createTrackInfo() {\n        return {\n            audio: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            video: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            text: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            fragmentedText: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            image: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            }\n        };\n    }\n\n    instance = {\n        checkInitialMediaSettingsForType: checkInitialMediaSettingsForType,\n        addTrack: addTrack,\n        getTracksFor: getTracksFor,\n        getCurrentTrackFor: getCurrentTrackFor,\n        isCurrentTrack: isCurrentTrack,\n        setTrack: setTrack,\n        setInitialSettings: setInitialSettings,\n        getInitialSettings: getInitialSettings,\n        setSwitchMode: setSwitchMode,\n        getSwitchMode: getSwitchMode,\n        setSelectionModeForInitialTrack: setSelectionModeForInitialTrack,\n        getSelectionModeForInitialTrack: getSelectionModeForInitialTrack,\n        isMultiTrackSupportedByType: isMultiTrackSupportedByType,\n        isTracksEqual: isTracksEqual,\n        setConfig: setConfig,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nMediaController.__dashjs_factory_name = 'MediaController';\nconst factory = FactoryMaker.getSingletonFactory(MediaController);\nfactory.TRACK_SWITCH_MODE_NEVER_REPLACE = TRACK_SWITCH_MODE_NEVER_REPLACE;\nfactory.TRACK_SWITCH_MODE_ALWAYS_REPLACE = TRACK_SWITCH_MODE_ALWAYS_REPLACE;\nfactory.TRACK_SELECTION_MODE_HIGHEST_BITRATE = TRACK_SELECTION_MODE_HIGHEST_BITRATE;\nfactory.TRACK_SELECTION_MODE_WIDEST_RANGE = TRACK_SELECTION_MODE_WIDEST_RANGE;\nfactory.DEFAULT_INIT_TRACK_SELECTION_MODE = DEFAULT_INIT_TRACK_SELECTION_MODE;\nFactoryMaker.updateSingletonFactory(MediaController.__dashjs_factory_name, factory);\nexport default factory;\n"]}