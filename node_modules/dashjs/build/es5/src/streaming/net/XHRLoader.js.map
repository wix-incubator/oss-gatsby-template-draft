{"version":3,"sources":["../../../../../src/streaming/net/XHRLoader.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;8LA8ByB,yBAAyB;;;;GAOlD,SAAS,SAAS,CAAC,GAAG,CAAE,CAEpB,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC,AAChB,IAAM,eAAe,CAAG,GAAG,CAAC,eAAe,CAAC,AAE5C,IAAI,QAAQ,UAAA,CAAC,AAEb,SAAS,IAAI,CAAC,WAAW,CAAE;AAGvB,IAAI,aAAa,CAAG,IAAI,CAAC,uBACzB,IAAI,iBAAiB,CAAG,IAAI,CAAC,uBAC7B,IAAI,gBAAgB,CAAG,IAAI,IAAI,EAAE,CAAC,AAClC,IAAI,aAAa,CAAG,gBAAgB,CAAC,uBACrC,IAAI,sBAAsB,CAAG,CAAC,CAAC,uBAE/B,IAAI,OAAO,CAAG,WAAW,CAAC,OAAO,CAAC,AAElC,IAAI,GAAG,CAAG,IAAI,cAAc,EAAE,CAAC,AAC/B,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAE,WAAW,CAAC,GAAG,CAAE,IAAI,CAAC,CAAC,AAEpD,GAAI,OAAO,CAAC,YAAY,CAAE,CACtB,GAAG,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC,CAC3C,AAED,GAAI,OAAO,CAAC,KAAK,CAAE,CACf,GAAG,CAAC,gBAAgB,CAAC,OAAO,CAAE,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAC3D,AAED,GAAI,CAAC,OAAO,CAAC,gBAAgB,CAAE,CAC3B,OAAO,CAAC,gBAAgB,GAAG,gBAAgB,CAAC,CAC/C,AAED,GAAI,eAAe,CAAE,CACjB,GAAG,GAAG,eAAe,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,CAClD,AAED,GAAG,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC,AAElD,GAAG,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,AAChC,GAAG,CAAC,SAAS,GAAG,WAAW,CAAC,KAAK,CAAC,AAClC,GAAG,CAAC,OAAO,GAAG,WAAW,CAAC,OAAO,CAAC,AAClC,GAAG,CAAC,UAAU,GAAG,WAAW,CAAC,QAAQ,CAAC,AACtC,GAAG,CAAC,OAAO,GAAG,WAAW,CAAC,OAAO,CAAC,AAElC,GAAG,CAAC,IAAI,EAAE,CAAC,AAEX,WAAW,CAAC,QAAQ,GAAG,GAAG,CAAC,CAC9B,AAED,SAAS,KAAK,CAAC,OAAO,CAAE,CACpB,IAAM,CAAC,CAAG,OAAO,CAAC,QAAQ,CAAC,AAC3B,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,UAAU,GAAG,SAAS,CAAC;AACnD,CAAC,CAAC,KAAK,EAAE,CAAC,CACb,AAED,QAAQ,GAAG,CACP,IAAI,CAAE,IAAI,CACV,KAAK,CAAE,KAAK,CACf,CAAC,AAEF,OAAO,QAAQ,CAAC,CACnB,AAED,SAAS,CAAC,qBAAqB,GAAG,WAAW,CAAC,AAE9C,IAAM,OAAO,CAAG,8BAAa,eAAe,CAAC,SAAS,CAAC,CAAC,qBACzC,OAAO","file":"XHRLoader.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\n\n/**\n * @module XHRLoader\n * @description Manages download of resources via HTTP.\n * @param {Object} cfg - dependencies from parent\n */\nfunction XHRLoader(cfg) {\n\n    cfg = cfg || {};\n    const requestModifier = cfg.requestModifier;\n\n    let instance;\n\n    function load(httpRequest) {\n\n        // Variables will be used in the callback functions\n        let firstProgress = true; /*jshint ignore:line*/\n        let needFailureReport = true; /*jshint ignore:line*/\n        let requestStartTime = new Date();\n        let lastTraceTime = requestStartTime; /*jshint ignore:line*/\n        let lastTraceReceivedCount = 0; /*jshint ignore:line*/\n\n        let request = httpRequest.request;\n\n        let xhr = new XMLHttpRequest();\n        xhr.open(httpRequest.method, httpRequest.url, true);\n\n        if (request.responseType) {\n            xhr.responseType = request.responseType;\n        }\n\n        if (request.range) {\n            xhr.setRequestHeader('Range', 'bytes=' + request.range);\n        }\n\n        if (!request.requestStartDate) {\n            request.requestStartDate = requestStartTime;\n        }\n\n        if (requestModifier) {\n            xhr = requestModifier.modifyRequestHeader(xhr);\n        }\n\n        xhr.withCredentials = httpRequest.withCredentials;\n\n        xhr.onload = httpRequest.onload;\n        xhr.onloadend = httpRequest.onend;\n        xhr.onerror = httpRequest.onerror;\n        xhr.onprogress = httpRequest.progress;\n        xhr.onabort = httpRequest.onabort;\n\n        xhr.send();\n\n        httpRequest.response = xhr;\n    }\n\n    function abort(request) {\n        const x = request.response;\n        x.onloadend = x.onerror = x.onprogress = undefined; //Ignore events from aborted requests.\n        x.abort();\n    }\n\n    instance = {\n        load: load,\n        abort: abort\n    };\n\n    return instance;\n}\n\nXHRLoader.__dashjs_factory_name = 'XHRLoader';\n\nconst factory = FactoryMaker.getClassFactory(XHRLoader);\nexport default factory;\n"]}