{"version":3,"sources":["../../../../../../src/streaming/rules/scheduling/NextFragmentRequestRule.js"],"names":[],"mappings":"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","file":"NextFragmentRequestRule.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../../constants/Constants';\nimport Debug from '../../../core/Debug';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport FragmentRequest from '../../../streaming/vo/FragmentRequest';\n\nfunction NextFragmentRequestRule(config) {\n\n    config = config || {};\n    const context = this.context;\n    const adapter = config.adapter;\n    const textController = config.textController;\n\n    let instance,\n        logger;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n    }\n\n    function execute(streamProcessor, requestToReplace) {\n        if (!streamProcessor) {\n            return null;\n        }\n        const representationInfo = streamProcessor.getCurrentRepresentationInfo();\n        const mediaInfo = representationInfo.mediaInfo;\n        const mediaType = mediaInfo.type;\n        const scheduleController = streamProcessor.getScheduleController();\n        const seekTarget = scheduleController.getSeekTarget();\n        const hasSeekTarget = !isNaN(seekTarget);\n        const bufferController = streamProcessor.getBufferController();\n        const currentTime = streamProcessor.getPlaybackController().getTime();\n        let time = hasSeekTarget ? seekTarget : adapter.getIndexHandlerTime(streamProcessor);\n        let bufferIsDivided = false;\n        let request;\n\n        if (hasSeekTarget) {\n            scheduleController.setSeekTarget(NaN);\n        }\n\n        if (isNaN(time) || (mediaType === Constants.FRAGMENTED_TEXT && !textController.isTextEnabled())) {\n            return null;\n        }\n        /**\n         * This is critical for IE/Safari/EDGE\n         * */\n        if (bufferController) {\n            let range = bufferController.getRangeAt(time);\n            const playingRange = bufferController.getRangeAt(currentTime);\n            const bufferRanges = bufferController.getBuffer().getAllBufferRanges();\n            const numberOfBuffers = bufferRanges ? bufferRanges.length : 0;\n            if ((range !== null || playingRange !== null) && !hasSeekTarget) {\n                if ( !range || (playingRange && playingRange.start != range.start && playingRange.end != range.end) ) {\n                    if (numberOfBuffers > 1 ) {\n                        streamProcessor.getFragmentModel().removeExecutedRequestsAfterTime(playingRange.end);\n                        bufferIsDivided = true;\n                    }\n                    range = playingRange;\n                }\n                logger.debug('Prior to making a request for time, NextFragmentRequestRule is aligning index handler\\'s currentTime with bufferedRange.end for', mediaType, '.', time, 'was changed to', range.end);\n                time = range.end;\n            }\n        }\n\n        if (requestToReplace) {\n            time = requestToReplace.startTime + (requestToReplace.duration / 2);\n            request = adapter.getFragmentRequestForTime(streamProcessor, representationInfo, time, {\n                timeThreshold: 0,\n                ignoreIsFinished: true\n            });\n        } else {\n            request = adapter.getFragmentRequestForTime(streamProcessor, representationInfo, time, {\n                keepIdx: !hasSeekTarget && !bufferIsDivided\n            });\n\n            // Then, check if this request was downloaded or not\n            while (request && request.action !== FragmentRequest.ACTION_COMPLETE && streamProcessor.getFragmentModel().isFragmentLoaded(request)) {\n                // loop until we found not loaded fragment, or no fragment\n                request = adapter.getNextFragmentRequest(streamProcessor, representationInfo);\n            }\n            if (request) {\n                if (!isNaN(request.startTime + request.duration)) {\n                    adapter.setIndexHandlerTime(streamProcessor, request.startTime + request.duration);\n                }\n                request.delayLoadingTime = new Date().getTime() + scheduleController.getTimeToLoadDelay();\n                scheduleController.setTimeToLoadDelay(0);\n            }\n        }\n\n        return request;\n    }\n\n    instance = {\n        execute: execute\n    };\n\n    setup();\n\n    return instance;\n}\n\nNextFragmentRequestRule.__dashjs_factory_name = 'NextFragmentRequestRule';\nexport default FactoryMaker.getClassFactory(NextFragmentRequestRule);\n"]}