{"version":3,"sources":["../../../../../src/streaming/utils/BoxParser.js"],"names":[],"mappings":"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","file":"BoxParser.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport IsoFile from './IsoFile';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport ISOBoxer from 'codem-isoboxer';\n\nimport IsoBoxSearchInfo from '../vo/IsoBoxSearchInfo';\n\nfunction BoxParser(/*config*/) {\n\n    let instance;\n    let context = this.context;\n\n    /**\n     * @param {ArrayBuffer} data\n     * @returns {IsoFile|null}\n     * @memberof BoxParser#\n     */\n    function parse(data) {\n        if (!data) return null;\n\n        if (data.fileStart === undefined) {\n            data.fileStart = 0;\n        }\n\n        let parsedFile = ISOBoxer.parseBuffer(data);\n        let dashIsoFile = IsoFile(context).create();\n\n        dashIsoFile.setData(parsedFile);\n\n        return dashIsoFile;\n    }\n\n    /**\n     * From the list of type boxes to look for, returns the latest one that is fully completed (header + payload). This\n     * method only looks into the list of top boxes and doesn't analyze nested boxes.\n     * @param {string[]} types\n     * @param {ArrayBuffer|uint8Array} buffer\n     * @param {number} offset\n     * @returns {IsoBoxSearchInfo}\n     * @memberof BoxParser#\n     */\n    function findLastTopIsoBoxCompleted(types, buffer, offset) {\n        if (offset === undefined) {\n            offset = 0;\n        }\n\n        // 8 = size (uint32) + type (4 characters)\n        if (!buffer || offset + 8 >= buffer.byteLength) {\n            return new IsoBoxSearchInfo(0, false);\n        }\n\n        const data = (buffer instanceof ArrayBuffer) ? new Uint8Array(buffer) : buffer;\n        let boxInfo;\n        let lastCompletedOffset = 0;\n        while (offset < data.byteLength) {\n            const boxSize = parseUint32(data, offset);\n            const boxType = parseIsoBoxType(data, offset + 4);\n\n            if (boxSize === 0) {\n                break;\n            }\n\n            if (offset + boxSize <= data.byteLength) {\n                if (types.indexOf(boxType) >= 0) {\n                    boxInfo = new IsoBoxSearchInfo(offset, true, boxSize);\n                } else {\n                    lastCompletedOffset = offset + boxSize;\n                }\n            }\n\n            offset += boxSize;\n        }\n\n        if (!boxInfo) {\n            return new IsoBoxSearchInfo(lastCompletedOffset, false);\n        }\n\n        return boxInfo;\n    }\n\n    function parseUint32(data, offset) {\n        return data[offset + 3] >>> 0 |\n            (data[offset + 2] << 8) >>> 0 |\n            (data[offset + 1] << 16) >>> 0 |\n            (data[offset] << 24) >>> 0;\n    }\n\n    function parseIsoBoxType(data, offset) {\n        return String.fromCharCode(data[offset++]) +\n            String.fromCharCode(data[offset++]) +\n            String.fromCharCode(data[offset++]) +\n            String.fromCharCode(data[offset]);\n    }\n\n    instance = {\n        parse: parse,\n        findLastTopIsoBoxCompleted: findLastTopIsoBoxCompleted\n    };\n\n    return instance;\n}\nBoxParser.__dashjs_factory_name = 'BoxParser';\nexport default FactoryMaker.getSingletonFactory(BoxParser);\n"]}