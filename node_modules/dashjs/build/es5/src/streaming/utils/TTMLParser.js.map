{"version":3,"sources":["../../../../../src/streaming/utils/TTMLParser.js"],"names":[],"mappings":"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","file":"TTMLParser.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport { fromXML, generateISD } from 'imsc';\n\nfunction TTMLParser() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    /*\n     * This TTML parser follows \"EBU-TT-D SUBTITLING DISTRIBUTION FORMAT - tech3380\" spec - https://tech.ebu.ch/docs/tech/tech3380.pdf.\n     * */\n    let instance,\n        logger;\n\n    let cueCounter = 0; // Used to give every cue a unique ID.\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n    }\n\n    function getCueID() {\n        const id = 'cue_TTML_' + cueCounter;\n        cueCounter++;\n        return id;\n    }\n\n\n    /**\n     * Parse the raw data and process it to return the HTML element representing the cue.\n     * Return the region to be processed and controlled (hide/show) by the caption controller.\n     * @param {string} data - raw data received from the TextSourceBuffer\n     * @param {number} offsetTime - offset time to apply to cue time\n     * @param {integer} startTimeSegment - startTime for the current segment\n     * @param {integer} endTimeSegment - endTime for the current segment\n     * @param {Array} images - images array referenced by subs MP4 box\n     */\n    function parse(data, offsetTime, startTimeSegment, endTimeSegment, images) {\n        let i;\n\n        let errorMsg = '';\n        const captionArray = [];\n        let startTime,\n            endTime;\n\n        const content = {};\n\n        const embeddedImages = {};\n        let currentImageId = '';\n        let accumulated_image_data = '';\n        let metadataHandler = {\n\n            onOpenTag: function (ns, name, attrs) {\n                if (name === 'image' && ns === 'http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt') {\n                    if (!attrs[' imagetype'] || attrs[' imagetype'].value !== 'PNG') {\n                        logger.warn('smpte-tt imagetype != PNG. Discarded');\n                        return;\n                    }\n                    currentImageId = attrs['http://www.w3.org/XML/1998/namespace id'].value;\n                }\n            },\n\n            onCloseTag: function () {\n                if (currentImageId) {\n                    embeddedImages[currentImageId] = accumulated_image_data.trim();\n                }\n                accumulated_image_data = '';\n                currentImageId = '';\n            },\n\n            onText: function (contents) {\n                if (currentImageId) {\n                    accumulated_image_data = accumulated_image_data + contents;\n                }\n            }\n        };\n\n        if (!data) {\n            errorMsg = 'no ttml data to parse';\n            throw new Error(errorMsg);\n        }\n\n        content.data = data;\n\n        eventBus.trigger(Events.TTML_TO_PARSE, content);\n\n        const imsc1doc = fromXML(content.data, function (msg) {\n            errorMsg = msg;\n        }, metadataHandler);\n\n        eventBus.trigger(Events.TTML_PARSED, {ttmlString: content.data, ttmlDoc: imsc1doc});\n\n        const mediaTimeEvents = imsc1doc.getMediaTimeEvents();\n\n        for (i = 0; i < mediaTimeEvents.length; i++) {\n            let isd = generateISD(imsc1doc, mediaTimeEvents[i], function (error) {\n                errorMsg = error;\n            });\n\n            if (isd.contents.some(topLevelContents => topLevelContents.contents.length)) {\n                //be sure that mediaTimeEvents values are in the mp4 segment time ranges.\n                startTime = (mediaTimeEvents[i] + offsetTime) < startTimeSegment ? startTimeSegment : (mediaTimeEvents[i] + offsetTime);\n                endTime = (mediaTimeEvents[i + 1] + offsetTime) > endTimeSegment ? endTimeSegment : (mediaTimeEvents[i + 1] + offsetTime);\n\n                if (startTime < endTime) {\n                    captionArray.push({\n                        start: startTime,\n                        end: endTime,\n                        type: 'html',\n                        cueID: getCueID(),\n                        isd: isd,\n                        images: images,\n                        embeddedImages: embeddedImages\n                    });\n                }\n            }\n        }\n\n        if (errorMsg !== '') {\n            logger.error(errorMsg);\n            throw new Error(errorMsg);\n        }\n\n        return captionArray;\n    }\n\n    instance = {\n        parse: parse\n    };\n\n    setup();\n    return instance;\n}\nTTMLParser.__dashjs_factory_name = 'TTMLParser';\nexport\ndefault FactoryMaker.getSingletonFactory(TTMLParser);\n"]}