{"version":3,"sources":["../node_modules/grunt-browserify/node_modules/browser-pack/_prelude.js","core/events/EventsBase.js","streaming/constants/ProtectionConstants.js","streaming/protection/CommonEncryption.js","streaming/protection/Protection.js","streaming/protection/ProtectionEvents.js","streaming/protection/controllers/ProtectionController.js","streaming/protection/controllers/ProtectionKeyController.js","streaming/protection/drm/KeySystemClearKey.js","streaming/protection/drm/KeySystemPlayReady.js","streaming/protection/drm/KeySystemW3CClearKey.js","streaming/protection/drm/KeySystemWidevine.js","streaming/protection/models/ProtectionModel_01b.js","streaming/protection/models/ProtectionModel_21Jan2015.js","streaming/protection/models/ProtectionModel_3Feb2014.js","streaming/protection/servers/ClearKey.js","streaming/protection/servers/DRMToday.js","streaming/protection/servers/PlayReady.js","streaming/protection/servers/Widevine.js","streaming/protection/vo/ClearKeyKeySet.js","streaming/protection/vo/KeyError.js","streaming/protection/vo/KeyMessage.js","streaming/protection/vo/KeyPair.js","streaming/protection/vo/KeySystemAccess.js","streaming/protection/vo/KeySystemConfiguration.js","streaming/protection/vo/MediaCapability.js","streaming/protection/vo/NeedKey.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","dashjs","Protection","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","EventsBase","events","config","override","publicOnly","evt","hasOwnProperty","indexOf","ProtectionConstants","init","CLEARKEY_KEYSTEM_STRING","WIDEVINE_KEYSTEM_STRING","PLAYREADY_KEYSTEM_STRING","constants","CommonEncryption","cpArray","retVal","cp","schemeIdUri","toLowerCase","value","pssh","offset","view","DataView","version","getUint8","getUint32","slice","keySystem","initData","psshList","parsePSSHList","uuid","cpData","BASE64","decodeArray","__text","buffer","data","dv","done","byteCursor","size","undefined","nextBox","systemID","boxStart","byteLength","val","toString","createProtectionSystem","controller","protectionKeyController","_controllersProtectionKeyController2","context","getInstance","setConfig","debug","initialize","protectionModel","getProtectionModel","_controllersProtectionController2","create","eventBus","capabilities","setEncryptedMediaSupported","logger","getLogger","instance","errHandler","videoElement","videoModel","getElement","onencrypted","mediaKeys","getAPI","APIS_ProtectionModel_3Feb2014","info","_modelsProtectionModel_3Feb20142","api","APIS_ProtectionModel_01b","_modelsProtectionModel_01b2","warn","_modelsProtectionModel_21Jan20152","apis","Object","keys","generateKeyRequest","addKey","cancelKeyRequest","needkey","keyerror","keyadded","keymessage","setMediaKeys","MediaKeys","release","error","message","ready","close","__dashjs_factory_name","factory","FactoryMaker","getClassFactory","_ProtectionEvents2","updateClassFactory","ProtectionEvents","_EventsBase","_get","getPrototypeOf","prototype","INTERNAL_KEY_MESSAGE","INTERNAL_KEY_SYSTEM_SELECTED","INTERNAL_KEY_STATUS_CHANGED","KEY_ADDED","KEY_ERROR","KEY_MESSAGE","KEY_SESSION_CLOSED","KEY_SESSION_CREATED","KEY_SESSION_REMOVED","KEY_STATUSES_CHANGED","KEY_SYSTEM_ACCESS_COMPLETE","KEY_SYSTEM_SELECTED","LICENSE_REQUEST_COMPLETE","NEED_KEY","PROTECTION_CREATED","PROTECTION_DESTROYED","SERVER_CERTIFICATE_UPDATED","TEARDOWN_COMPLETE","VIDEO_ELEMENT_SELECTED","protectionEvents","ProtectionController","setup","pendingNeedKeyData","mediaInfoArr","sessionType","robustnessLevel","checkConfig","initializeForMedia","mediaInfo","on","onKeyMessage","onKeyStatusChanged","push","supportedKS","getSupportedKeySystemsFromContentProtection","contentProtection","selectKeySystem","cps","createKeySession","cdmData","initDataForKS","_CommonEncryption2","getPSSHForKeySystem","protData","getProtData","currentInitData","getAllInitData","initDataEquals","getSessionType","trigger","systemString","loadKeySession","sessionID","removeKeySession","sessionToken","closeKeySession","setServerCertificate","serverCertificate","setMediaElement","element","onNeedKey","off","setSessionType","setRobustnessLevel","level","setProtectionData","protDataSet","stop","reset","needkeyRetries","forEach","retryTimeout","clearTimeout","keySystemString","getKeySystemConfiguration","audioCapabilities","videoCapabilities","audioRobustness","videoRobustness","ksSessionType","distinctiveIdentifier","persistentState","media","type","AUDIO","_voMediaCapability2","codec","VIDEO","_voKeySystemConfiguration2","fromManifest","requestedKeySystems","ksIdx","ks","configs","onKeySystemAccessComplete","event","sessionId","requestKeySystemAccess","onKeySystemSelected","keySystemAccess","getKeySystem","isClearKey","kids","clearkeys","TextEncoder","encode","JSON","stringify","sendLicenseRequestCompleteEvent","status","keyMessage","messageType","licenseServerData","getLicenseServer","eventData","getSessionID","processClearKeyLicenseRequest","updateKeySession","xhr","XMLHttpRequest","url","serverURL","laURL","getLicenseServerURLFromInitData","getPSSHData","getServerURLFromMessage","reportError","errorMsg","response","getErrorResponse","statusText","readyState","open","getHTTPMethod","responseType","getResponseType","onload","licenseMessage","getLicenseMessage","onabort","onerror","updateHeaders","headers","key","withCredentials","setRequestHeader","httpRequestHeaders","getRequestHeadersFromMessage","send","getLicenseRequestFromMessage","retry","initDataType","NEEDKEY_BEFORE_INITIALIZE_RETRIES","setTimeout","NEEDKEY_BEFORE_INITIALIZE_TIMEOUT","abInitData","ArrayBuffer","isView","String","fromCharCode","apply","Uint8Array","getSupportedKeySystems","getKeySystems","ProtectionKeyController","keySystems","_drmKeySystemPlayReady2","_drmKeySystemWidevine2","_drmKeySystemClearKey2","clearkeyKeySystem","_drmKeySystemW3CClearKey2","clearkeyW3CKeySystem","getKeySystemBySystemString","initData1","initData2","data1","data2","j","cpIdx","schemeIdURI","getInitData","getCDMData","getSessionId","shouldNotFilterOutKeySystem","_serversDRMToday2","_constantsProtectionConstants2","_serversWidevine2","_serversPlayReady2","_serversClearKey2","getClearKeysFromProtectionData","protectionDataSet","getProtectionData","getSingletonFactory","KeySystemClearKey","protectionData","clearkeySet","jsonMsg","parse","keyPairs","clearkeyID","clearkey","_voKeyPair2","_voClearKeyKeySet2","parseInitDataFromContentProtection","KeySystemPlayReady","msg","xmlDoc","parser","DOMParser","dataview","messageFormat","Uint16Array","parseFromString","headerNameList","getElementsByTagName","headerValueList","childNodes","nodeValue","Content","licenseRequest","Challenge","decode","numRecords","getUint16","recordType","recordLength","recordData","record","laurl","luiurl","PSSHBoxType","playreadySystemID","uint8arraydecodedPROHeader","PROSize","PSSHSize","PSSHBoxBuffer","PSSHBox","PSSHData","pro","prheader","setUint32","set","setPlayReadyMessageFormat","format","customData","cdmDataBytes","charCodeAt","PRCDMData","replace","KeySystemW3CClearKey","KeySystemWidevine","ProtectionModel_01b","pendingSessions","sessions","eventHandler","createEventHandler","removeEventListeners","ksConfigurations","ve","document","createElement","found","supportedAudio","supportedVideo","configIdx","videos","videoIdx","canPlayType","contentType","ksConfig","_voKeySystemAccess2","mediaElement","addEventListener","moreSessionsAllowed","newSession","getExpirationTime","NaN","keyID","handleEvent","_voNeedKey2","findSessionByID","errorCode","systemCode","_voKeyError2","shift","mediaKeyMessageError","_voKeyMessage2","defaultURL","sessionArray","len","removeEventListener","ProtectionModel_21Jan2015","numSessions","session","removeSession","then","closed","closeKeySessionInternal","getUsable","requestKeySystemAccessInternal","mksa","createMediaKeys","mkeys","name","createSession","createSessionToken","dataType","generateRequest","toJWK","update","load","success","remove","idx","navigator","requestMediaKeySystemAccess","mediaKeySystemAccess","configuration","getConfiguration","token","splice","parseKeyStatus","args","keyId","target","keyStatuses","keyStatus","arguments","expiration","getKeyStatuses","usable","ProtectionModel_3Feb2014","audios","audioIdx","isTypeSupported","ksAccess","ksConfiguration","boundDoSetKeys","doSetKeys","bind","keySession","destinationURL","ClearKey","substring","serverResponse","keypair","keyid","kid","k","DRMToday","keySystemStr","license","PlayReady","uintToString","arrayBuffer","encodedString","decodeURIComponent","escape","parseServerResponse","stringResponse","envelope","getElementsByTagNameNS","soap","body","parseErrorResponse","faultstring","statusCode","idStart","idEnd","fault","detail","exception","node","firstChild","lastIndexOf","errorString","Widevine","ClearKeyKeySet","numKeys","jwk","kty","alg","jwkString","buf","bView","KeyError","KeyMessage","KeyPair","KeySystemAccess","KeySystemConfiguration","sessionTypes","initDataTypes","MediaCapability","robustness","NeedKey"],"mappings":";CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,MAAAJ,EAAAK,SAAAL,EAAAK,YAAAC,WAAAX,MAAA,WAAA,MAAA,SAAAY,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAjB,GAAA,GAAAsB,OAAA,uBAAAL,EAAA,IAAA,MAAAjB,GAAAuB,KAAA,mBAAAvB,EAAA,GAAAwB,GAAAV,EAAAG,IAAAhB,WAAAY,GAAAI,GAAA,GAAAQ,KAAAD,EAAAvB,QAAA,SAAAW,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,GAAAF,IAAAY,EAAAA,EAAAvB,QAAAW,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAhB,QAAA,IAAA,GAAAoB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAC,EAAA1B,EAAAD,wZCkCM4B,EAAU,mBAAVA,YAAAA,YAAAA,uBACK,SAACC,EAAQC,GACZ,GAAKD,EAAL,CAEA,GAAIE,KAAWD,GAASA,EAAOC,SAC3BC,IAAaF,GAASA,EAAOE,UAGjC,KAAK,GAAMC,KAAOJ,IACTA,EAAOK,eAAeD,IAASzB,KAAKyB,KAASF,GAC9CC,IAAkD,IAApCH,EAAOI,GAAKE,QAAQ,aACtC3B,KAAKyB,GAAOJ,EAAOI,SAXzBL,eAiBSA,mcCfTQ,EAAmB,WAQT,QARVA,YAAAA,GASE5B,KAAK6B,gBATPD,qBAEG,WACD5B,KAAK8B,wBAA0B,kBAC/B9B,KAAK+B,wBAA0B,qBAC/B/B,KAAKgC,yBAA2B,8BALlCJ,KAaFK,EAAY,GAAIL,aACLK,mcCnBTC,EAAgB,mBAAhBA,YAAAA,YAAAA,EAAgB,6CASc,SAACC,GAE7B,IAAK,GADDC,GAAS,KACJxB,EAAI,EAAGA,EAAIuB,EAAQlB,SAAUL,EAAG,CACrC,GAAIyB,GAAKF,EAAQvB,EACoB,sCAAjCyB,EAAGC,YAAYC,eACgB,SAA3BF,EAAGG,MAAMD,gBACbH,EAASC,GAEjB,MAAOD,8BASO,SAACK,GACf,GAAIC,GAAS,EACTC,EAAO,GAAIC,UAASH,GAGpBI,EAAUF,EAAKG,SAASJ,EAS5B,OAPAA,IAAU,GAENG,EAAU,IACVH,GAAU,EAAK,GAAKC,EAAKI,UAAUL,IAGvCA,GAAU,EACHD,EAAKO,MAAMN,sCAaI,SAACO,EAAWC,GAClC,GAAIC,GAAWjB,EAAiBkB,cAAcF,EAC9C,OAAIC,GAASzB,eAAeuB,EAAUI,KAAKd,eAChCY,EAASF,EAAUI,KAAKd,eAE5B,uDAW8B,SAACe,EAAQC,GAC9C,MAAI,QAAUD,GACHC,EAAOC,YAAYF,EAAOb,KAAKgB,QAAQC,OAE3C,kCAYS,SAACC,GAEjB,GAAa,OAATA,EACA,QAQJ,KANA,GAAIC,GAAK,GAAIhB,UAASe,EAAKD,QAAUC,GACjCE,GAAO,EACPpB,KAGAqB,EAAa,GACTD,GAAM,CAEV,GAAIE,OAAIC,GACJC,MAAOD,GACPnB,MAAOmB,GACPE,MAAQF,GAERG,EAAWL,CAEf,IAAIA,GAAcF,EAAGF,OAAOU,WACxB,KAQJ,IALAL,EAAOH,EAAGb,UAAUe,GACpBG,EAAUH,EAAaC,EACvBD,GAAc,EAGmB,aAA7BF,EAAGb,UAAUe,GAQjB,GAJAA,GAAc,EAIE,KADhBjB,EAAUe,EAAGd,SAASgB,KACW,IAAZjB,EAArB,CAIAiB,IAEAA,GAAc,EAGdI,EAAW,EACX,IAAItD,OAACoD,GAAEK,MAAGL,EACV,KAAKpD,EAAI,EAAGA,EAAI,EAAGA,IACfyD,EAAMT,EAAGd,SAASgB,EAAalD,GAAG0D,SAAS,IAC3CJ,GAA4B,IAAhBG,EAAKpD,OAAgB,IAAMoD,EAAMA,CAIjD,KAFAP,GAAc,EACdI,GAAY,IACPtD,EAAI,EAAGA,EAAI,EAAGA,IACfyD,EAAMT,EAAGd,SAASgB,EAAalD,GAAG0D,SAAS,IAC3CJ,GAA4B,IAAhBG,EAAKpD,OAAgB,IAAMoD,EAAMA,CAIjD,KAFAP,GAAc,EACdI,GAAY,IACPtD,EAAI,EAAGA,EAAI,EAAGA,IACfyD,EAAMT,EAAGd,SAASgB,EAAalD,GAAG0D,SAAS,IAC3CJ,GAA4B,IAAhBG,EAAKpD,OAAgB,IAAMoD,EAAMA,CAIjD,KAFAP,GAAc,EACdI,GAAY,IACPtD,EAAI,EAAGA,EAAI,EAAGA,IACfyD,EAAMT,EAAGd,SAASgB,EAAalD,GAAG0D,SAAS,IAC3CJ,GAA4B,IAAhBG,EAAKpD,OAAgB,IAAMoD,EAAMA,CAIjD,KAFAP,GAAc,EACdI,GAAY,IACPtD,EAAI,EAAGA,EAAI,EAAGA,IACfyD,EAAMT,EAAGd,SAASgB,EAAalD,GAAG0D,SAAS,IAC3CJ,GAA4B,IAAhBG,EAAKpD,OAAgB,IAAMoD,EAAMA,CAEjDP,IAAc,EAEdI,EAAWA,EAAS3B,cAGLqB,EAAGb,UAAUe,GAC5BA,GAAc,EAGdrB,EAAKyB,GAAYN,EAAGF,OAAOV,MAAMmB,EAAUF,GAC3CH,EAAaG,MAhDTH,GAAaG,MARbH,GAAaG,EA2DrB,MAAOxB,OA9KTP,eAkLSA,8GC5Gf,QAAShC,KAYL,QAASqE,GAAuBjD,GAC5B,GAAIkD,GAAa,KAEXC,GAA0B,EAAAC,EAAA,SAAwBC,GAASC,aACjEH,GAAwBI,WAAYC,MAAOxD,EAAOwD,MAAOvB,OAAQjC,EAAOiC,SACxEkB,EAAwBM,YAExB,IAAIC,GAAmBC,EAAmB3D,EAc1C,QAZKkD,GAAcQ,IACfR,GAAa,EAAAU,EAAA,SAAqBP,GAASQ,QACvCH,gBAAiBA,EACjBP,wBAAyBA,EACzBW,SAAU9D,EAAO8D,SACjBN,MAAOxD,EAAOwD,MACdzD,OAAQC,EAAOD,OACfkC,OAAQjC,EAAOiC,OACftB,UAAWX,EAAOW,YAEtBX,EAAO+D,aAAaC,4BAA2B,IAE5Cd,EAGX,QAASS,GAAmB3D,GACxB,GAAMwD,GAAQxD,EAAOwD,MACfS,EAAST,EAAMU,UAAUC,GACzBL,EAAW9D,EAAO8D,SAClBM,EAAapE,EAAOoE,WACpBC,EAAerE,EAAOsE,WAAatE,EAAOsE,WAAWC,aAAe,IAE1E,OAAMF,QAA6C3B,KAA7B2B,EAAaG,aAC7BH,OAA2C3B,KAA3B2B,EAAaI,UAGxBC,EAAOL,EAAcM,IAC5BV,EAAOW,KAAK,gEACL,EAAAC,EAAA,SAAyBxB,GAASQ,QAASL,MAAOA,EAAOM,SAAUA,EAAU/D,OAAQC,EAAOD,OAAQ+E,IAAKJ,EAAOL,EAAcM,MAC9HD,EAAOL,EAAcU,IAC5Bd,EAAOW,KAAK,2DACL,EAAAI,EAAA,SAAoB3B,GAASQ,QAASL,MAAOA,EAAOM,SAAUA,EAAUM,WAAYA,EAAYrE,OAAQC,EAAOD,OAAQ+E,IAAKJ,EAAOL,EAAcU,OAExJd,EAAOgB,KAAK,4GACL,OAVPhB,EAAOW,KAAK,iEACL,EAAAM,EAAA,SAA0B7B,GAASQ,QAASL,MAAOA,EAAOM,SAAUA,EAAU/D,OAAQC,EAAOD,UAa5G,QAAS2E,GAAOL,EAAcc,GAC1B,IAAK,GAAI7F,GAAI,EAAGA,EAAI6F,EAAKxF,OAAQL,IAAK,CAClC,GAAMwF,GAAMK,EAAK7F,EAGjB,IAAsD,kBAA3C+E,GAAaS,EAAIM,OAAOC,KAAKP,GAAK,KAI7C,MAAOA,GAGX,MAAO,MAtEX,GAAIX,OAAQzB,GACNW,EAAU3E,KAAK2E,OA4ErB,OAJAc,IACIlB,uBAAwBA,4DAlJC,cACG,cACP,cACS,eACD,eACL,WAE1B8B,IAIEO,mBAAoB,qBACpBC,OAAQ,SACRC,iBAAkB,mBAGlBC,QAAS,UACTC,SAAU,WACVC,SAAU,WACVC,WAAY,eAKZN,mBAAoB,2BACpBC,OAAQ,eACRC,iBAAkB,yBAGlBC,QAAS,gBACTC,SAAU,iBACVC,SAAU,iBACVC,WAAY,qBAIdjB,IAKEkB,aAAc,eAEdC,UAAW,YAEXC,QAAS,QAGTN,QAAS,UACTO,MAAO,WACPC,QAAS,aACTC,MAAO,WACPC,MAAO,aAKPN,aAAc,iBAEdC,UAAW,cAEXC,QAAS,QAETN,QAAS,YACTO,MAAO,aACPC,QAAS,eACTC,MAAO,aACPC,MAAO,cAqFfvH,GAAWwH,sBAAwB,YACnC,IAAMC,GAAU1H,OAAO2H,aAAaC,gBAAgB3H,EACpDyH,GAAQtG,OAAMyG,EAAA,QACd7H,OAAO2H,aAAaG,mBAAmB7H,EAAWwH,sBAAuBC,aAC1DA,g5BC5JQ,UAKjBK,EAAgB,SAAAC,GAMN,QANVD,YAAAA,GAOEE,EAAAxB,OAAAyB,eAPFH,EAAgBI,WAAA,cAAApI,MAAAgB,KAAAhB,MAedA,KAAKqI,qBAAuB,qBAO5BrI,KAAKsI,6BAA+B,4BAMpCtI,KAAKuI,4BAA8B,2BAWnCvI,KAAKwI,UAAY,kBAMjBxI,KAAKyI,UAAY,kBAOjBzI,KAAK0I,YAAc,oBAOnB1I,KAAK2I,mBAAqB,0BAO1B3I,KAAK4I,oBAAsB,2BAO3B5I,KAAK6I,oBAAsB,2BAO3B7I,KAAK8I,qBAAuB,4BAO5B9I,KAAK+I,2BAA6B,iCAOlC/I,KAAKgJ,oBAAsB,2BAO3BhJ,KAAKiJ,yBAA2B,gCAMhCjJ,KAAKkJ,SAAW,UAMhBlJ,KAAKmJ,mBAAqB,2BAM1BnJ,KAAKoJ,qBAAuB,6BAO5BpJ,KAAKqJ,2BAA6B,2BAOlCrJ,KAAKsJ,kBAAqB,6BAO1BtJ,KAAKuJ,uBAAyB,gCA5IhCvB,EAAgBC,GAAhBD,cAgJFwB,EAAmB,GAAIxB,aACZwB,iHChIf,QAASC,GAAqBnI,GAqB1B,QAASoI,KACLnE,EAAST,EAAMU,UAAUC,GACzBkE,KACAC,KACAC,EAAc,YACdC,EAAkB,GAGtB,QAASC,KACL,KAAK3E,GAAaA,EAAS1D,eAAe,OAAU+C,GAA4BA,EAAwB/C,eAAe,gDACnH,KAAM,IAAIb,OAAM,+BAexB,QAASmJ,GAAmBC,GAKxB,IAAKA,EACD,KAAM,IAAIpJ,OAAM,yCAGpBkJ,KAEA3E,EAAS8E,GAAG7I,EAAOgH,qBAAsB8B,EAAcnK,MACvDoF,EAAS8E,GAAG7I,EAAOkH,4BAA6B6B,EAAoBpK,MAEpE4J,EAAaS,KAAKJ,EAIlB,IAAMK,GAAc7F,EAAwB8F,4CAA4CN,EAAUO,kBAC9FF,IAAeA,EAAYrJ,OAAS,GACpCwJ,EAAgBH,GAAa,GAkBrC,QAASC,GAA4CG,GACjD,MAAOjG,GAAwB8F,4CAA4CG,GAiB/E,QAASC,GAAiBzH,EAAU0H,GAChC,GAAMC,GAAgBC,EAAA,QAAiBC,oBAAoB9H,EAAWC,GAChE8H,EAAWC,EAAYhI,EAC7B,IAAI4H,EAAe,CAIf,IAAK,GADCK,GAAkBlG,EAAgBmG,iBAC/BvK,EAAI,EAAGA,EAAIsK,EAAgBjK,OAAQL,IACxC,GAAI6D,EAAwB2G,eAAeP,EAAeK,EAAgBtK,IAEtE,WADA2E,GAAOgB,KAAK,0DAIpB,KACIvB,EAAgB2F,iBAAiBE,EAAeG,EAAUK,EAAepI,GAAY2H,GACvF,MAAOtD,GACLlC,EAASkG,QAAQjK,EAAOuH,qBAAsBjF,KAAM,KAAM2D,MAAO,+BAAiCA,EAAMC,eAErGrE,GACP8B,EAAgB2F,iBAAiBzH,EAAU8H,EAAUK,EAAepI,GAAY2H,GAEhFxF,EAASkG,QAAQjK,EAAOuH,qBAAsBjF,KAAM,KAAM2D,MAAO,0BAA4BrE,EAAUsI,aAAe,sFAc9H,QAASC,GAAeC,EAAWvI,GAC/B8B,EAAgBwG,eAAeC,EAAWvI,EAAUmI,EAAepI,IAevE,QAASyI,GAAiBC,GACtB3G,EAAgB0G,iBAAiBC,GAarC,QAASC,GAAgBD,GACrB3G,EAAgB4G,gBAAgBD,GAcpC,QAASE,GAAqBC,GAC1B9G,EAAgB6G,qBAAqBC,GAazC,QAASC,GAAgBC,GACjBA,GACAhH,EAAgB+G,gBAAgBC,GAChC5G,EAAS8E,GAAG7I,EAAO6H,SAAU+C,EAAWjM,OACrB,OAAZgM,IACPhH,EAAgB+G,gBAAgBC,GAChC5G,EAAS8G,IAAI7K,EAAO6H,SAAU+C,EAAWjM,OAYjD,QAASmM,GAAe3J,GACpBqH,EAAcrH,EAWlB,QAAS4J,GAAmBC,GACxBvC,EAAkBuC,EAYtB,QAASC,GAAkB3I,GACvB4I,EAAc5I,EACdc,EAAwB6H,kBAAkB3I,GAS9C,QAAS6I,KACDxH,GACAA,EAAgBwH,OAcxB,QAASC,KAELrH,EAAS8G,IAAI7K,EAAOgH,qBAAsB8B,EAAcnK,MACxDoF,EAAS8G,IAAI7K,EAAOkH,4BAA6B6B,EAAoBpK,MAErE+L,EAAgB,MAEhB9I,MAAYe,GAERgB,IACAA,EAAgByH,QAChBzH,EAAkB,MAGtB0H,EAAeC,QAAS,SAAAC,SAAgBC,cAAaD,KACrDF,KAEA9C,KAOJ,QAASqB,GAAYhI,GACjB,GAAI+H,GAAW,IACf,IAAI/H,EAAW,CACX,GAAM6J,GAAkB7J,EAAUsI,YAE9BgB,KACAvB,EAAW8B,IAAoBP,GAAeA,EAAYO,GAAmB,MAGrF,MAAO9B,GAGX,QAAS+B,GAA0B9J,GAC/B,GAAM+H,GAAWC,EAAYhI,GACvB+J,KACAC,KACAC,EAAkBlC,GAAaA,EAASkC,iBAAmBlC,EAASkC,gBAAgBjM,OAAS,EAAK+J,EAASkC,gBAAkBpD,EAC7HqD,EAAkBnC,GAAaA,EAASmC,iBAAmBnC,EAASmC,gBAAgBlM,OAAS,EAAK+J,EAASmC,gBAAkBrD,EAC7HsD,EAAgB/B,EAAepI,GAC/BoK,EAAwBrC,GAAaA,EAASqC,sBAAyBrC,EAASqC,sBAAwB,WACxGC,EAAkBtC,GAAaA,EAASsC,gBAAmBtC,EAASsC,gBAAqC,cAAnBF,EAAkC,WAAa,UAU3I,OARAxD,GAAa+C,QAAQ,SAACY,GACdA,EAAMC,OAASvL,EAAUwL,MACzBT,EAAkB3C,KAAK,GAAAqD,GAAA,QAAoBH,EAAMI,MAAOT,IACjDK,EAAMC,OAASvL,EAAU2L,OAChCX,EAAkB5C,KAAK,GAAAqD,GAAA,QAAoBH,EAAMI,MAAOR,MAIzD,GAAAU,GAAA,QACHb,EAAmBC,EAAmBI,EACtCC,GACCF,IAGT,QAAS/B,GAAepI,GACpB,GAAM+H,GAAWC,EAAYhI,EAE7B,OADsB+H,IAAaA,EAASnB,YAAemB,EAASnB,YAAcA,EAItF,QAASY,GAAgBH,EAAawD,GAClC,GAAM/N,GAAOC,KACP+N,KAEFC,MAAKhK,EACT,IAAIf,GAEA,IAAK+K,EAAQ,EAAGA,EAAQ1D,EAAYrJ,OAAQ+M,IACxC,GAAI/K,IAAcqH,EAAY0D,GAAOC,GAAI,kBAErCF,EAAoB1D,MAAM4D,GAAI3D,EAAY0D,GAAOC,GAAIC,SAAUnB,EAA0B9J,KAIzF,IAAMkL,GAA4B,QAA5BA,GAAsCC,GACxChJ,EAAS8G,IAAI7K,EAAO0H,2BAA4BoF,EAA2BpO,GACvEqO,EAAM9G,MACDwG,GACD1I,EAASkG,QAAQjK,EAAO2H,qBAAsB1B,MAAO,oCAAsC8G,EAAM9G,SAGrG/B,EAAOW,KAAK,iCACZd,EAASkG,QAAQjK,EAAO2H,qBAAsBrF,KAAMyK,EAAMzK,OACtD2G,EAAY0D,GAAOK,UAEnB7C,EAAelB,EAAY0D,GAAOK,UAAW/D,EAAY0D,GAAO9K,UACzDoH,EAAY0D,GAAO9K,UAE1ByH,EAAiBL,EAAY0D,GAAO9K,SAAUoH,EAAY0D,GAAOpD,UAM7E,OAFAxF,GAAS8E,GAAG7I,EAAO0H,2BAA4BoF,EAA2BpO,GAC1EiF,EAAgBsJ,uBAAuBP,GACvC,0BAAA,WAIP,QAAkB/J,KAAdf,EAAyB,IAyB1BsL,eAvBJtL,EAAY,KACZ0G,EAAmBU,KAAKC,EAGxB,KAAK,GAAI1J,GAAI,EAAGA,EAAI0J,EAAYrJ,OAAQL,IACpCmN,EAAoB1D,MAAM4D,GAAI3D,EAAY1J,GAAGqN,GAAIC,SAAUnB,EAA0BzC,EAAY1J,GAAGqN,MAGxG,IAAIO,OAAexK,GACbmK,EAA4B,QAA5BA,GAAsCC,GACxChJ,EAAS8G,IAAI7K,EAAO0H,2BAA4BoF,EAA2BpO,GACvEqO,EAAM9G,OACNrE,MAAYe,GACZoB,EAAS8G,IAAI7K,EAAOiH,6BAA8BiG,EAAqBxO,GAClE+N,GACD1I,EAASkG,QAAQjK,EAAO2H,qBAAsBrF,KAAM,KAAM2D,MAAO,oCAAsC8G,EAAM9G,UAGjHkH,EAAkBJ,EAAMzK,KACxB4B,EAAOW,KAAK,kCAAoCsI,EAAgBvL,UAAUsI,aAAe,+BACzFvG,EAAgByF,gBAAgB+D,IAGpCD,GAAsB,QAAtBA,GAAgCH,GAGhC,GAFAhJ,EAAS8G,IAAI7K,EAAOiH,6BAA8BiG,EAAqBxO,GACvEqF,EAAS8G,IAAI7K,EAAO0H,2BAA4BoF,EAA2BpO,GACtEqO,EAAM9G,MAgCPrE,MAAYe,GACP8J,GACD1I,EAASkG,QAAQjK,EAAO2H,qBAAsBrF,KAAM,KAAM2D,MAAO,uCAAyC8G,EAAM9G,YAlCtG,CACd,IAAKtC,EACD,MAEJ/B,GAAY+B,EAAgByJ,eAC5BrJ,EAASkG,QAAQjK,EAAO2H,qBAAsBrF,KAAM6K,GAEpD,IAAMxD,GAAWC,EAAYhI,EACzB+H,IAAYA,EAASc,mBAAqBd,EAASc,kBAAkB7K,OAAS,GAC9E+D,EAAgB6G,qBAAqBtI,EAAOC,YAAYwH,EAASc,mBAAmBpI,OAExF,KAAK,GAAI9C,GAAI,EAAGA,EAAI+I,EAAmB1I,OAAQL,IAC3C,IAAKoN,EAAQ,EAAGA,EAAQrE,EAAmB/I,GAAGK,OAAQ+M,IAClD,GAAI/K,IAAc0G,EAAmB/I,GAAGoN,GAAOC,GAAI,CAG/C,GAAIxJ,EAAwBiK,WAAWzL,IAAc+H,GAAYA,EAAStJ,eAAe,aAAc,CACnG,GAAMwB,IAAayL,KAAMjI,OAAOC,KAAKqE,EAAS4D,WAC9CjF,GAAmB/I,GAAGoN,GAAO9K,UAAW,GAAI2L,cAAcC,OAAOC,KAAKC,UAAU9L,IAEhFyG,EAAmB/I,GAAGoN,GAAOK,UAE7B7C,EAAe7B,EAAmB/I,GAAGoN,GAAOK,UAAW1E,EAAmB/I,GAAGoN,GAAO9K,UACnC,OAA1CyG,EAAmB/I,GAAGoN,GAAO9K,UAEpCyH,EAAiBhB,EAAmB/I,GAAGoN,GAAO9K,SAAUyG,EAAmB/I,GAAGoN,GAAOpD,QAEzF,UAWpBxF,EAAS8E,GAAG7I,EAAOiH,6BAA8BiG,EAAqBxO,GACtEqF,EAAS8E,GAAG7I,EAAO0H,2BAA4BoF,EAA2BpO,GAC1EiF,EAAgBsJ,uBAAuBP,UAGvCpE,GAAmBU,KAAKC,GAIhC,QAAS2E,GAAgCtL,EAAM2D,GAC3ClC,EAASkG,QAAQjK,EAAO4H,0BAA2BtF,KAAMA,EAAM2D,MAAOA,IAG1E,QAAS8C,GAAmBjK,GACpBA,EAAEmH,MACFlC,EAASkG,QAAQjK,EAAOyH,sBAAuBnF,KAAM,KAAM2D,MAAO,kCAAoCnH,EAAEmH,QAExG/B,EAAOT,MAAM,qBAAuB3E,EAAE+O,QAI9C,QAAS/E,GAAahK,GAElB,GADAoF,EAAOT,MAAM,qBACT3E,EAAEmH,MAEF,WADA/B,GAAO+B,MAAMnH,EAAEmH,MAKnB,IAAM6H,GAAahP,EAAEwD,IACrByB,GAASkG,QAAQjK,EAAOqH,aAAc/E,KAAMwL,GAC5C,IAAMC,GAAcD,EAAYC,YAAeD,EAAWC,YAAc,kBAClE7H,EAAU4H,EAAW5H,QACrBoE,EAAewD,EAAWxD,aAC1BX,EAAWC,EAAYhI,GACvB6J,EAAkB7J,EAAYA,EAAUsI,aAAe,KACvD8D,EAAoB5K,EAAwB6K,iBAAiBrM,EAAW+H,EAAUoE,GAClFG,GAAc5D,aAAcA,EAAcyD,YAAaA,EAG7D,KAAK7H,GAAkC,IAAvBA,EAAQnD,WAEpB,WADA6K,GAAgCM,EAAW,kCAK/C,KAAKF,EAGD,MAFA9J,GAAOT,MAAM,qEAAuE3E,EAAEwD,KAAKyL,YAAc,oBAAsBzD,EAAa6D,oBAC5IP,GAAgCM,EAKpC,IAAI9K,EAAwBiK,WAAWzL,GAAY,CAC/C,GAAM2L,GAAYnK,EAAwBgL,8BAA8BxM,EAAW+H,EAAUzD,EAC7F,IAAIqH,EAIA,MAHArJ,GAAOT,MAAM,yDACbmK,EAAgCM,OAChCvK,GAAgB0K,iBAAiB/D,EAAciD,GAMvD,GAAMe,GAAM,GAAIC,gBAGZC,EAAM,IACV,IAAI7E,GAAYA,EAAS8E,UAAW,CAChC,GAAMA,GAAY9E,EAAS8E,SACF,iBAAdA,IAAwC,KAAdA,EACjCD,EAAMC,EACsB,gBAAdA,IAA0BA,EAAUpO,eAAe0N,KACjES,EAAMC,EAAUV,QAEbpE,IAAYA,EAAS+E,OAA4B,KAAnB/E,EAAS+E,MAE9CF,EAAM7E,EAAS+E,OAEfF,EAAM5M,EAAU+M,gCAAgClF,EAAA,QAAiBmF,YAAYtE,EAAazI,cAEtF2M,EAAM1P,EAAEwD,KAAKoM,MAOrB,MAHAF,EAAMR,EAAkBa,wBAAwBL,EAAKtI,EAAS6H,IAK1D,WADAH,GAAgCM,EAAW,wCAI/C,IAAMY,GAAc,SAAUR,EAAKJ,EAAWzC,EAAiBsC,GAC3D,GAAMgB,GAAYT,EAAKU,SAAYhB,EAAkBiB,iBAAiBX,EAAIU,SAAUvD,EAAiBsC,GAAe,MACpHH,GAAgCM,EAAW,QAAUzC,EAAkB,qCAAuC6C,EAAIY,WAAa,MAAQZ,EAAIT,OAAS,oBAAsBS,EAAIa,WAAa,kBAAoBJ,GAGnNT,GAAIc,KAAKpB,EAAkBqB,cAActB,GAAcS,GAAK,GAC5DF,EAAIgB,aAAetB,EAAkBuB,gBAAgB9D,EAAiBsC,GACtEO,EAAIkB,OAAS,WACT,GAAK7L,EAGL,GAAmB,KAAfhF,KAAKkP,OAAe,CACpB,GAAM4B,GAAiBzB,EAAkB0B,kBAAkB/Q,KAAKqQ,SAAUvD,EAAiBsC,EACpE,QAAnB0B,GACA7B,EAAgCM,GAChCvK,EAAgB0K,iBAAiB/D,EAAcmF,IAE/CX,EAAYnQ,KAAMuP,EAAWzC,EAAiBsC,OAGlDe,GAAYnQ,KAAMuP,EAAWzC,EAAiBsC,IAGtDO,EAAIqB,QAAU,WACV/B,EAAgCM,EAAW,QAAUzC,EAAkB,oCAAsC9M,KAAKuQ,WAAa,MAAQvQ,KAAKkP,OAAS,oBAAsBlP,KAAKwQ,aAEpLb,EAAIsB,QAAU,WACVhC,EAAgCM,EAAW,QAAUzC,EAAkB,kCAAoC9M,KAAKuQ,WAAa,MAAQvQ,KAAKkP,OAAS,oBAAsBlP,KAAKwQ,YAIlL,IAAMU,GAAgB,SAAUC,GAC5B,GAAIA,EACA,IAAK,GAAMC,KAAOD,GACV,kBAAoBC,EAAI7O,gBACxBoN,EAAI0B,iBAAkB,GAE1B1B,EAAI2B,iBAAiBF,EAAKD,EAAQC,IAI1CpG,IACAkG,EAAclG,EAASuG,oBAE3BL,EAAcjO,EAAUuO,6BAA6BjK,IAGjDyD,GAA+C,iBAA5BA,GAASqG,kBAC5B1B,EAAI0B,gBAAkBrG,EAASqG,iBAGnC1B,EAAI8B,KAAKxO,EAAUyO,6BAA6BnK,IAGpD,QAAS0E,GAAUmC,EAAOuD,GAGtB,GAFApM,EAAOT,MAAM,kBAEkB,SAA3BsJ,EAAMgD,IAAIQ,aAEV,WADArM,GAAOgB,KAAK,wEAA4E6H,EAAMgD,IAAIQ,aAItG,IAA4B,IAAxBhI,EAAa3I,SACbsE,EAAOgB,KAAK,4EACZoL,MAAyB,KAAVA,EAAwB,EAAIA,EAAQ,GACvCE,GAIR,WAHAnF,GAAerC,KAAKyH,WAAW,WAC3B7F,EAAUmC,EAAOuD,IAClBI,GAQX,IAAIC,GAAa5D,EAAMgD,IAAIlO,QAM3B,IALI+O,YAAYC,OAAOF,KACnBA,EAAaA,EAAWtO,QAIxBT,EAAW,CACX,GAAM4H,GAAgBC,EAAA,QAAiBC,oBAAoB9H,EAAW+O,EACtE,IAAInH,EAIA,IAAK,GADCK,GAAkBlG,EAAgBmG,iBAC/BvK,EAAI,EAAGA,EAAIsK,EAAgBjK,OAAQL,IACxC,GAAI6D,EAAwB2G,eAAeP,EAAeK,EAAgBtK,IAEtE,WADA2E,GAAOgB,KAAK,2DAO5BhB,EAAOT,MAAM,iBAAkBqN,OAAOC,aAAaC,MAAM,KAAM,GAAIC,YAAWN,IAE9E,IAAM1H,GAAc7F,EAAwB8N,uBAAuBP,EAAYzF,EAC/E,IAA2B,IAAvBjC,EAAYrJ,OAEZ,WADAsE,GAAOT,MAAM,0FAIjB2F,GAAgBH,GAAa,GAGjC,QAASkI,KACL,MAAO/N,GAA0BA,EAAwB+N,mBA5nB7DlR,EAASA,KACT,IAAMmD,GAA0BnD,EAAOmD,wBACnCO,EAAkB1D,EAAO0D,gBACvBI,EAAW9D,EAAO8D,SAClB/D,EAASC,EAAOD,OAChByD,EAAQxD,EAAOwD,MACfvB,EAASjC,EAAOiC,OAChBtB,EAAYX,EAAOW,UACrByK,KAEAjH,MAAQzB,GACRuB,MAAMvB,GACN2F,MAAkB3F,GAClB4F,MAAY5F,GACZuI,MAAWvI,GACX6F,MAAW7F,GACX8F,MAAe9F,GACff,MAASe,EAgoBb,OAlBAyB,IACIuE,mBAAoBA,EACpBW,iBAAkBA,EAClBa,eAAgBA,EAChBE,iBAAkBA,EAClBE,gBAAiBA,EACjBC,qBAAsBA,EACtBE,gBAAiBA,EACjBI,eAAgBA,EAChBC,mBAAoBA,EACpBE,kBAAmBA,EACnB/B,4CAA6CA,EAC7CiI,cAAeA,EACfhG,KAAMA,EACNC,MAAOA,GAGX/C,IACOjE,2DAxqBkB,cACD,eACO,WAE7BoM,EAAoC,EACpCE,EAAoC,GAsqB1CtI,GAAqB/B,sBAAwB,iCAC9BzH,OAAO2H,aAAaC,gBAAgB4B,8HC9pBnD,QAASgJ,KAYL,QAAS5N,GAAUvD,GACVA,IAEDA,EAAOwD,QACPA,EAAQxD,EAAOwD,MACfS,EAAST,EAAMU,UAAUC,IAGzBnE,EAAOiC,SACPA,EAASjC,EAAOiC,SAIxB,QAASwB,KACL2N,IAEA,IAAIzP,OAASe,EAGbf,IAAY,EAAA0P,EAAA,SAAmBhO,GAASC,aAAcrB,OAAQA,IAC9DmP,EAAWrI,KAAKpH,GAGhBA,GAAY,EAAA2P,EAAA,SAAkBjO,GAASC,aAAcrB,OAAQA,IAC7DmP,EAAWrI,KAAKpH,GAGhBA,GAAY,EAAA4P,EAAA,SAAkBlO,GAASC,aAAcrB,OAAQA,IAC7DmP,EAAWrI,KAAKpH,GAChB6P,EAAoB7P,EAGpBA,GAAY,EAAA8P,EAAA,SAAqBpO,GAASC,aAAcrB,OAAQA,EAAQuB,MAAOA,IAC/E4N,EAAWrI,KAAKpH,GAChB+P,EAAuB/P,EAa3B,QAASuP,KACL,MAAOE,GAcX,QAASO,GAA2B1H,GAChC,IAAK,GAAI3K,GAAI,EAAGA,EAAI8R,EAAWzR,OAAQL,IACnC,GAAI8R,EAAW9R,GAAG2K,eAAiBA,EAC/B,MAAOmH,GAAW9R,EAG1B,OAAO,MAiBX,QAAS8N,GAAWzL,GAChB,MAAQA,KAAc6P,GAAqB7P,IAAc+P,EAa7D,QAAS5H,GAAe8H,EAAWC,GAC/B,GAAID,EAAU9O,aAAe+O,EAAU/O,WAAY,CAI/C,IAAK,GAHDgP,GAAQ,GAAId,YAAWY,GACvBG,EAAQ,GAAIf,YAAWa,GAElBG,EAAI,EAAGA,EAAIF,EAAMnS,OAAQqS,IAC9B,GAAIF,EAAME,KAAOD,EAAMC,GACnB,OAAO,CAGf,QAAO,EAEX,OAAO,EAiBX,QAAS/I,GAA4CG,GACjD,GAAIrI,OAAE2B,GAAEiK,MAAEjK,GAAEgK,MAAKhK,GAAEuP,MAAKvP,GACpBsG,IAEJ,IAAII,EACA,IAAKsD,EAAQ,EAAGA,EAAQ0E,EAAWzR,SAAU+M,EAEzC,IADAC,EAAKyE,EAAW1E,GACXuF,EAAQ,EAAGA,EAAQ7I,EAAIzJ,SAAUsS,EAClClR,EAAKqI,EAAI6I,GACLlR,EAAGC,YAAYC,gBAAkB0L,EAAGuF,aAEpClJ,EAAYD,MACR4D,GAAIA,EACJ/K,SAAU+K,EAAGwF,YAAYpR,GACzBuI,QAASqD,EAAGyF,aACZrF,UAAWJ,EAAG0F,aAAatR,IAM/C,OAAOiI,GAmBX,QAASiI,GAAuBrP,EAAUqJ,GAKtC,IAAK,GAJDjC,MACA7H,EAAOqI,EAAA,QAAiB1H,cAAcF,GACtC+K,MAAEjK,GAAE8I,MAAe9I,GAAE4P,MAA2B5P,GAE3CgK,EAAQ,EAAGA,EAAQ0E,EAAWzR,SAAU+M,EAC7CC,EAAKyE,EAAW1E,GAChBlB,EAAkBmB,EAAG1C,aACrBqI,GAA8BrH,GAAgBO,IAAmBP,GAE7D0B,EAAG5K,OAAQZ,IAAQmR,GACnBtJ,EAAYD,MACR4D,GAAIA,EACJ/K,SAAUT,EAAKwL,EAAG5K,MAClBuH,QAASqD,EAAGyF,aACZrF,UAAWJ,EAAG0F,gBAI1B,OAAOrJ,GAoBX,QAASgF,GAAiBrM,EAAW+H,EAAUoE,GAI3C,GAAoB,oBAAhBA,GAAqD,8BAAhBA,EACrC,MAAO,KAGX,IAAIC,GAAoB,IAWxB,OAVIrE,IAAYA,EAAStJ,eAAe,YACpC2N,GAAoB,EAAAwE,EAAA,SAASlP,GAASC,aAAcrB,OAAQA,IACrDN,EAAUsI,eAAiBuI,EAAA,QAAoB/R,wBACtDsN,GAAoB,EAAA0E,EAAA,SAASpP,GAASC,cAC/B3B,EAAUsI,eAAiBuI,EAAA,QAAoB9R,yBACtDqN,GAAoB,EAAA2E,EAAA,SAAUrP,GAASC,cAChC3B,EAAUsI,eAAiBuI,EAAA,QAAoBhS,0BACtDuN,GAAoB,EAAA4E,EAAA,SAAStP,GAASC,eAGnCyK,EAeX,QAASI,GAA8BqD,EAAmB9H,EAAUzD,GAChE,IACI,MAAOuL,GAAkBoB,+BAA+BlJ,EAAUzD,GACpE,MAAOD,GAEL,MADA/B,GAAO+B,MAAM,oDACN,MAIf,QAASgF,GAAkB6H,GASvB,IAAK,GARDC,IAAoB,SAAUtH,GAC9B,GAAI9B,GAAW,IAIf,OAHImJ,KACAnJ,EAAW8B,IAAoBqH,GAAqBA,EAAkBrH,GAAmB,MAEtF9B,IAGFpK,EAAI,EAAGA,EAAI8R,EAAWzR,OAAQL,IAAK,CACxC,GAAIqC,GAAYyP,EAAW9R,EACvBqC,GAAUvB,eAAe,SACzBuB,EAAUpB,KAAKuS,EAAkBnR,EAAUsI,gBAhRvD,GAAI5G,GAAU3E,KAAK2E,QAEfc,MAAQzB,GACRc,MAAKd,GACLuB,MAAMvB,GACN0O,MAAU1O,GACVT,MAAMS,GACN8O,MAAiB9O,GACjBgP,MAAoBhP,EA2RxB,OAdAyB,IACIV,WAAYA,EACZuH,kBAAmBA,EACnBoC,WAAYA,EACZtD,eAAgBA,EAChBoH,cAAeA,EACfS,2BAA4BA,EAC5B1I,4CAA6CA,EAC7CgI,uBAAwBA,EACxBjD,iBAAkBA,EAClBG,8BAA+BA,EAC/B5K,UAAWA,4DAjTU,cACC,cACG,eACH,eACC,cACV,eACC,eACD,eACA,eACW,SA8ShC4N,GAAwB/K,sBAAwB,oCACjCzH,OAAO2H,aAAayM,oBAAoB5B,kKC9SvD,QAAS6B,GAAkBhT,GAgBvB,QAAS4S,GAA+BK,EAAgBhN,GACpD,GAAIiN,GAAc,IAClB,IAAID,EAAgB,CAKhB,IAAK,GAFCE,GAAU1F,KAAK2F,MAAMvC,OAAOC,aAAaC,MAAM,KAAM,GAAIC,YAAW/K,KACpEoN,KACG/T,EAAI,EAAGA,EAAI6T,EAAQ9F,KAAK1N,OAAQL,IAAK,CAC1C,GAAMgU,GAAaH,EAAQ9F,KAAK/N,GAC1BiU,EAAWN,EAAgB3F,WAAa2F,EAAe3F,UAAUlN,eAAekT,GAAeL,EAAe3F,UAAUgG,GAAc,IAC5I,KAAKC,EACD,KAAM,IAAIhU,OAAM,wBAA0B+T,EAAa,kBAG3DD,GAAStK,KAAK,GAAAyK,GAAA,QAAYF,EAAYC,IAE1CL,EAAc,GAAAO,GAAA,QAAmBJ,GAErC,MAAOH,GAGX,QAASf,GAAYpR,GACjB,MAAOyI,GAAA,QAAiBkK,mCAAmC3S,EAAIkB,GAGnE,QAASiO,KACL,MAAO,MAGX,QAASE,GAA6BnK,GAClC,MAAO,IAAI+K,YAAW/K,GAG1B,QAASyI,KACL,MAAO,MAGX,QAAS0D,KACL,MAAO,MAGX,QAASC,KACL,MAAO,MAxDXrS,EAASA,KACT,IACMiC,GAASjC,EAAOiC,MAsEtB,QAZIF,KAAMA,EACNmQ,YAAaA,EACbjI,aAAcA,EACdkI,YAAaA,EACbjC,6BAA8BA,EAC9BE,6BAA8BA,EAC9B1B,gCAAiCA,EACjC0D,WAAYA,EACZC,aAAcA,EACdO,+BAAgCA,4DAhFpB,eACO,eACE,cACG,UAE1B7Q,EAAO,uCACPkI,EAAeuI,EAAA,QAAoBhS,wBACnC0R,EAAc,YAAcnQ,CA+ElCiR,GAAkB5M,sBAAwB,8BAC3BzH,OAAO2H,aAAayM,oBAAoBC,kICxEvD,QAASW,GAAmB3T,GAOxB,QAASyI,KACL,IAAKxG,IAAWA,EAAO7B,eAAe,iBAAmB6B,EAAO7B,eAAe,eAC3E,KAAM,IAAIb,OAAM,+BAIxB,QAAS2Q,GAA6BjK,GAClC,GAAI2N,OAAGlR,GACHmR,MAAMnR,GACJmN,KACAiE,EAAS,GAAIC,WACbC,EAA8B,UAAnBC,EAA8B,GAAIC,aAAYjO,GAAW,GAAI+K,YAAW/K,EAEzF2N,GAAM/C,OAAOC,aAAaC,MAAM,KAAMiD,GACtCH,EAASC,EAAOK,gBAAgBP,EAAK,kBAIrC,KAAK,GAFCQ,GAAiBP,EAAOQ,qBAAqB,QAC7CC,EAAkBT,EAAOQ,qBAAqB,SAC3C/U,EAAI,EAAGA,EAAI8U,EAAezU,OAAQL,IACvCuQ,EAAQuE,EAAe9U,GAAGiV,WAAW,GAAGC,WAAaF,EAAgBhV,GAAGiV,WAAW,GAAGC,SAa1F,OARI3E,GAAQzP,eAAe,aACvByP,EAAQ,gBAAkBA,EAAQ4E,cAC3B5E,GAAQ4E,SAGd5E,EAAQzP,eAAe,kBACxByP,EAAQ,gBAAkB,qBAAuBoE,GAE9CpE,EAGX,QAASO,GAA6BnK,GAClC,GAAIyO,GAAiB,KACfZ,EAAS,GAAIC,WACbC,EAA8B,UAAnBC,EAA8B,GAAIC,aAAYjO,GAAW,GAAI+K,YAAW/K,EAEzFwC,IACA,IAAMmL,GAAM/C,OAAOC,aAAaC,MAAM,KAAMiD,GACtCH,EAASC,EAAOK,gBAAgBP,EAAK,kBAE3C,IAAIC,EAAOQ,qBAAqB,aAAa,GAAI,CAC7C,GAAMM,GAAYd,EAAOQ,qBAAqB,aAAa,GAAGE,WAAW,GAAGC,SACxEG,KACAD,EAAiBzS,EAAO2S,OAAOD,QAEhC,IAAId,EAAOQ,qBAAqB,eAAe1U,OAIlD,MAAOsG,EAGX,OAAOyO,GAGX,QAAShG,GAAgC9M,GACrC,GAAIA,EAMA,IAAK,GALCS,GAAO,GAAIf,UAASM,GACpBiT,EAAaxS,EAAKyS,UAAU,GAAG,GACjC1T,EAAS,EACP0S,EAAS,GAAIC,WAEVzU,EAAI,EAAGA,EAAIuV,EAAYvV,IAAK,CAEjC,GAAMyV,GAAa1S,EAAKyS,UAAU1T,GAAQ,EAC1CA,IAAU,CACV,IAAM4T,GAAe3S,EAAKyS,UAAU1T,GAAQ,EAE5C,IADAA,GAAU,EACS,IAAf2T,EAAJ,CAKA,GAAME,GAAarT,EAASF,MAAMN,EAAQA,EAAS4T,GAC7CE,EAASrE,OAAOC,aAAaC,MAAM,KAAM,GAAImD,aAAYe,IACzDpB,EAASC,EAAOK,gBAAgBe,EAAQ,kBAG9C,IAAIrB,EAAOQ,qBAAqB,UAAU,GAAI,CAC1C,GAAMc,GAAQtB,EAAOQ,qBAAqB,UAAU,GAAGE,WAAW,GAAGC,SACrE,IAAIW,EACA,MAAOA,GAKf,GAAItB,EAAOQ,qBAAqB,WAAW,GAAI,CAC3C,GAAMe,GAASvB,EAAOQ,qBAAqB,WAAW,GAAGE,WAAW,GAAGC,SACvE,IAAIY,EACA,MAAOA,QApBXhU,IAAU4T,EA0BtB,MAAO,MAGX,QAAS7C,GAAYnQ,GASjB,GAAMqT,GAAc,GAAIrE,aAAY,IAAM,IAAM,IAAM,IAAM,EAAM,EAAM,EAAM,IACxEsE,EAAoB,GAAItE,aAAY,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,MAEhIxO,EAAa,EACb+S,EAA6B,KAE7BC,MAAO9S,GACP+S,MAAQ/S,GACRgT,MAAahT,GACbiT,MAAOjT,GACPkT,MAAQlT,EAIZ,IAFA+F,IAEI,QAAUzG,GACV,MAAOwH,GAAA,QAAiBkK,mCAAmC1R,EAAQC,EAGvE,IAAI,OAASD,GACTuT,EAA6BtT,EAAOC,YAAYF,EAAO6T,IAAI1T,YAE1D,CAAA,KAAI,YAAcH,IAInB,MAAO,KAHPuT,GAA6BtT,EAAOC,YAAYF,EAAO8T,SAAS3T,QA6BpE,MAvBAqT,GAAUD,EAA2B5V,OACrC8V,EAAW,EAAMJ,EAAY1V,OAAS2V,EAAkB3V,OAAS,EAAM6V,EAEvEE,EAAgB,GAAI/E,aAAY8E,GAEhCE,EAAU,GAAI3E,YAAW0E,GACzBE,EAAW,GAAItU,UAASoU,GAExBE,EAASG,UAAUvT,EAAYiT,GAC/BjT,GAAc,EAEdmT,EAAQK,IAAIX,EAAa7S,GACzBA,GAAc6S,EAAY1V,OAE1BgW,EAAQK,IAAIV,EAAmB9S,GAC/BA,GAAc8S,EAAkB3V,OAEhCiW,EAASG,UAAUvT,EAAYgT,GAC/BhT,GAAc,EAEdmT,EAAQK,IAAIT,EAA4B/S,GACxCA,GAAcgT,EAEPG,EAAQvT,OAWnB,QAAS6T,GAA0BC,GAC/B,GAAe,SAAXA,GAAgC,UAAXA,EACrB,KAAM,IAAI3W,OAAM,wCAA0C2W,EAE9DjC,GAAgBiC,EAOpB,QAAS3V,GAAK0S,GACNA,IACAvJ,EAAWuJ,GAQnB,QAASb,KACL,GAAI+D,OAAUzT,GACV4G,MAAO5G,GACP0T,MAAY1T,GACZpD,MAACoD,EAGL,IADA+F,IACIiB,GAAYA,EAASJ,QAAS,CAG9B,IADA6M,KACK7W,EAAI,EAAGA,EAAIoK,EAASJ,QAAQ3J,SAAUL,EACvC6W,EAAWpN,KAAKW,EAASJ,QAAQ+M,WAAW/W,IAC5C6W,EAAWpN,KAAK,EAapB,KAXAoN,EAAatF,OAAOC,aAAaC,MAAM,KAAMoF,GAG7CA,EAAalU,EAAOuL,OAAO2I,GAI3B7M,EAAUgN,EAAUC,QAAQ,eAAgBJ,GAG5CC,KACK9W,EAAI,EAAGA,EAAIgK,EAAQ3J,SAAUL,EAC9B8W,EAAarN,KAAKO,EAAQ+M,WAAW/W,IACrC8W,EAAarN,KAAK,EAGtB,OAAO,IAAIiI,YAAWoF,GAAchU,OAGxC,MAAO,MAGX,QAASiQ,KACL,MAAO,MA5OXrS,EAASA,KACT,IACIiU,GAAgB,QACdhS,EAASjC,EAAOiC,MA0PtB,QAbIF,KAAMA,EACNmQ,YAAaA,EACbjI,aAAcA,EACdkI,YAAaA,EACbjC,6BAA8BA,EAC9BE,6BAA8BA,EAC9B1B,gCAAiCA,EACjC0D,WAAYA,EACZC,aAAcA,EACd4D,0BAA2BA,EAC3B1V,KAAMA,4DArQe,cACG,UAE1BwB,EAAO,uCACPkI,EAAeuI,EAAA,QAAoB9R,yBACnCwR,EAAc,YAAcnQ,EAC5BuU,EAAY,yMACd5M,MAAQhH,EAoQZiR,GAAmBvN,sBAAwB,+BAC5BzH,OAAO2H,aAAayM,oBAAoBY,uHCzQvD,QAAS6C,GAAqBxW,GAc1B,QAAS4S,GAA+BK,EAAgBhN,GACpD,GAAIiN,GAAc,IAClB,IAAID,EAAgB,CAKhB,IAAK,GAFCE,GAAU1F,KAAK2F,MAAMvC,OAAOC,aAAaC,MAAM,KAAM,GAAIC,YAAW/K,KACpEoN,KACG/T,EAAI,EAAGA,EAAI6T,EAAQ9F,KAAK1N,OAAQL,IAAK,CAC1C,GAAMgU,GAAaH,EAAQ9F,KAAK/N,GAC1BiU,EAAWN,EAAgB3F,WAAa2F,EAAe3F,UAAUlN,eAAekT,GAAeL,EAAe3F,UAAUgG,GAAc,IAC5I,KAAKC,EACD,KAAM,IAAIhU,OAAM,wBAA0B+T,EAAa,kBAG3DD,GAAStK,KAAK,GAAAyK,GAAA,QAAYF,EAAYC,IAE1CL,EAAc,GAAAO,GAAA,QAAmBJ,GAEjCpP,EAAOgB,KAAK,6JAEhB,MAAOiO,GAGX,QAASf,GAAYpR,GACjB,MAAOyI,GAAA,QAAiBkK,mCAAmC3S,EAAIkB,GAGnE,QAASiO,KACL,MAAO,MAGX,QAASE,GAA6BnK,GAClC,MAAO,IAAI+K,YAAW/K,GAG1B,QAASyI,KACL,MAAO,MAGX,QAAS0D,KACL,MAAO,MAGX,QAASC,KACL,MAAO,MAzDX,GAAIlO,OAAQzB,GACNT,EAASjC,EAAOiC,OAChBgC,EAASjE,EAAOwD,MAAMU,UAAUC,EAuEtC,OAbAA,IACIpC,KAAMA,EACNmQ,YAAaA,EACbjI,aAAcA,EACdkI,YAAaA,EACbjC,6BAA8BA,EAC9BE,6BAA8BA,EAC9B1B,gCAAiCA,EACjC0D,WAAYA,EACZC,aAAcA,EACdO,+BAAgCA,4DAhFpB,eACO,eACE,cACG,UAE1B7Q,EAAO,uCACPkI,EAAeuI,EAAA,QAAoBhS,wBACnC0R,EAAc,YAAcnQ,CA+ElCyU,GAAqBpQ,sBAAwB,iCAC9BzH,OAAO2H,aAAayM,oBAAoByD,mICzEvD,QAASC,GAAkBzW,GAOvB,QAASO,GAAK0S,GACNA,IACAvJ,EAAWuJ,GAInB,QAASd,GAAYpR,GACjB,MAAOyI,GAAA,QAAiBkK,mCAAmC3S,EAAIkB,GAGnE,QAASiO,KACL,MAAO,MAGX,QAASE,GAA6BnK,GAClC,MAAO,IAAI+K,YAAW/K,GAG1B,QAASyI,KACL,MAAO,MAGX,QAAS0D,KACL,MAAO,MAGX,QAASC,GAAatR,GAElB,MAAI2I,IAAYA,EAASqD,UACdrD,EAASqD,UACThM,GAAMA,EAAGgM,UACThM,EAAGgM,UAEP,KAtCX/M,EAASA,KACT,IACI0J,GAAW,KACTzH,EAASjC,EAAOiC,MAmDtB,QAZIF,KAAMA,EACNmQ,YAAaA,EACbjI,aAAcA,EACd1J,KAAMA,EACN4R,YAAaA,EACbjC,6BAA8BA,EAC9BE,6BAA8BA,EAC9B1B,gCAAiCA,EACjC0D,WAAYA,EACZC,aAAcA,4DA5DO,cACG,UAE1BtQ,EAAO,uCACPkI,EAAeuI,EAAA,QAAoB/R,wBACnCyR,EAAc,YAAcnQ,CA6DlC0U,GAAkBrQ,sBAAwB,8BAC3BzH,OAAO2H,aAAayM,oBAAoB0D,uHC3DvD,QAASC,GAAoB1W,GAuCzB,QAASoI,KACLnE,EAAST,EAAMU,UAAUC,GACzBE,EAAe,KACf1C,EAAY,KACZgV,KACAC,KACAzT,GAA0B,EAAAC,EAAA,SAAwBC,GAASC,cAC3DuT,EAAeC,IAGnB,QAAS3L,KACD9G,GACA0S,GAEJ,KAAK,GAAIzX,GAAI,EAAGA,EAAIsX,EAASjX,OAAQL,IACjCgL,EAAgBsM,EAAStX,GAE7BwE,GAASkG,QAAQjK,EAAOiI,mBAG5B,QAASmF,KACL,MAAOxL,GAGX,QAASkI,KAEL,IAAK,GADC/I,MACGxB,EAAI,EAAGA,EAAIqX,EAAgBhX,OAAQL,IACxCwB,EAAOiI,KAAK4N,EAAgBrX,GAAGsC,SAEnC,KAAK,GAAItC,GAAI,EAAGA,EAAIsX,EAASjX,OAAQL,IACjCwB,EAAOiI,KAAK6N,EAAStX,GAAGsC,SAE5B,OAAOd,GAGX,QAASkM,GAAuBgK,GAC5B,GAAIC,GAAK5S,CACJ4S,KACDA,EAAKC,SAASC,cAAc,SAMhC,KAAK,GADDC,IAAQ,EACH1K,EAAQ,EAAGA,EAAQsK,EAAiBrX,OAAQ+M,IAQjD,IAAK,GAPCzC,GAAe+M,EAAiBtK,GAAOC,GAAG1C,aAC1C2C,EAAUoK,EAAiBtK,GAAOE,QACpCyK,EAAiB,KACjBC,EAAiB,KAIZC,EAAY,EAAGA,EAAY3K,EAAQjN,OAAQ4X,IAAa,CAE7D,GAAMC,GAAS5K,EAAQ2K,GAAW5L,iBAElC,IAAI6L,GAA4B,IAAlBA,EAAO7X,OAAc,CAC/B2X,IACA,KAAK,GAAIG,GAAW,EAAGA,EAAWD,EAAO7X,OAAQ8X,IACsB,KAA/DR,EAAGS,YAAYF,EAAOC,GAAUE,YAAa1N,IAC7CqN,EAAevO,KAAKyO,EAAOC,IAOvC,MAAMJ,IAAmBC,GACpBD,GAA4C,IAA1BA,EAAe1X,QACjC2X,GAA4C,IAA1BA,EAAe3X,QAFtC,CAOAyX,GAAQ,CACR,IAAMQ,GAAW,GAAArL,GAAA,QAA2B8K,EAAgBC,GACtD3K,EAAKxJ,EAAwBwO,2BAA2B1H,EAC9DnG,GAASkG,QAAQjK,EAAO0H,4BAA8BpF,KAAM,GAAAwV,GAAA,QAAoBlL,EAAIiL,IACpF,QAGHR,GACDtT,EAASkG,QAAQjK,EAAO0H,4BAA6BzB,MAAO,uFAIpE,QAASmD,GAAgB+D,GACrBvL,EAAYuL,EAAgBvL,UAC5BmC,EAASkG,QAAQjK,EAAOiH,8BAG5B,QAASyD,GAAgBqN,GACjBzT,IAAiByT,IAKjBzT,GACA0S,KAGJ1S,EAAeyT,KAIXzT,EAAa0T,iBAAiBjT,EAAIY,SAAUmR,GAC5CxS,EAAa0T,iBAAiBjT,EAAIW,QAASoR,GAC3CxS,EAAa0T,iBAAiBjT,EAAIc,WAAYiR,GAC9CxS,EAAa0T,iBAAiBjT,EAAIa,SAAUkR,GAC5C/S,EAASkG,QAAQjK,EAAOkI,0BAIhC,QAASoB,GAAiBzH,GACtB,IAAKD,EACD,KAAM,IAAIpC,OAAM,+DAIpB,IAAIyY,GAA2C,IAApBpB,EAASjX,OAAc,CAC9C,GAAMsY,IACF9N,UAAW,KACXvI,SAAUA,EACVsM,aAAc,WACV,MAAOxP,MAAKyL,WAGhB+N,kBAAmB,WACf,MAAOC,MAGXpO,eAAgB,WACZ,MAAO,aAQf,OALA4M,GAAgB5N,KAAKkP,GAGrB5T,EAAaS,EAAIQ,oBAAoB3D,EAAUsI,aAAc,GAAI+G,YAAWpP,IAErEqW,EAGP,KAAM,IAAI1Y,OAAM,kCAKxB,QAAS6O,GAAiB/D,EAAcpE,GACpC,GAAMkE,GAAYE,EAAaF,SAC/B,IAAKhH,EAAwBiK,WAAWzL,GAMpC,IAAK,GAAIrC,GAAI,EAAGA,EAAI2G,EAAQoN,SAAS1T,OAAQL,IACzC+E,EAAaS,EAAIS,QAAQ5D,EAAUsI,aAC/BhE,EAAQoN,SAAS/T,GAAGwQ,IAAK7J,EAAQoN,SAAS/T,GAAG8Y,MAAOjO,OAN5D9F,GAAaS,EAAIS,QAAQ5D,EAAUsI,aAC/B,GAAI+G,YAAW/K,GAAU,GAAI+K,YAAW3G,EAAazI,UAAWuI,GAU5E,QAASG,GAAgBD,GAErB,IACIhG,EAAaS,EAAIU,kBAAkB7D,EAAUsI,aAAcI,EAAaF,WAC1E,MAAOnE,GACLlC,EAASkG,QAAQjK,EAAOsH,oBAAqBhF,KAAM,KAAM2D,MAAO,0BAA4BqE,EAAaF,UAAY,KAAOnE,EAAMC,WAI1I,QAASsE,MACT,QAASL,MACT,QAASE,MAET,QAAS0M,KACL,OACIuB,YAAa,SAAUvL,GACnB,GAAIzC,GAAe,IACnB,QAAQyC,EAAMZ,MACV,IAAKpH,GAAIW,QACL,GAAI7D,GAAW+O,YAAYC,OAAO9D,EAAMlL,UAAYkL,EAAMlL,SAASQ,OAAS0K,EAAMlL,QAClFkC,GAASkG,QAAQjK,EAAO6H,UAAWkI,IAAK,GAAAwI,GAAA,QAAY1W,EAAU,SAC9D,MAAM,KAELkD,GAAIY,SAML,GALA2E,EAAekO,EAAgB3B,EAAU9J,EAAMC,WAC1C1C,IACDA,EAAekO,EAAgB5B,EAAiB7J,EAAMC,YAGtD1C,EAAc,CACd,GAAIuJ,GAAM,EACV,QAAQ9G,EAAM0L,UAAUhZ,MACpB,IAAK,GACDoU,GAAO,8HACP,MAAM,KACL,GACDA,GAAO,yEACP,MAAM,KACL,GACDA,GAAO,oGACP,MAAM,KACL,GACDA,GAAO,gIACP,MAAM,KACL,GACDA,GAAO,kGACP,MAAM,KACL,GACDA,GAAO,mJAGfA,GAAO,mBAAqB9G,EAAM2L,WAElC3U,EAASkG,QAAQjK,EAAOoH,WAAY9E,KAAM,GAAAqW,GAAA,QAAarO,EAAcuJ,SAErE3P,GAAO+B,MAAM,uCAEjB,MAAM,KAELlB,GAAIa,SACL0E,EAAekO,EAAgB3B,EAAU9J,EAAMC,WAC1C1C,IACDA,EAAekO,EAAgB5B,EAAiB7J,EAAMC,YAGtD1C,GACApG,EAAOT,MAAM,mBACbM,EAASkG,QAAQjK,EAAOmH,WAAY7E,KAAMgI,KAE1CpG,EAAOT,MAAM,uCAEjB,MAAM,KAELsB,GAAIc,WA4BL,GAzBAoS,EAA2C,OAArBlL,EAAOC,eAA4CrK,KAApBoK,EAAMC,UAGvDiL,IAEA3N,EAAekO,EAAgB3B,EAAU9J,EAAMC,aAC1B4J,EAAgBhX,OAAS,IAI1C0K,EAAesM,EAAgBgC,QAC/B/B,EAAS7N,KAAKsB,GACdA,EAAaF,UAAY2C,EAAMC,UAE/BjJ,EAASkG,QAAQjK,EAAOuH,qBAAsBjF,KAAMgI,KAEjDsM,EAAgBhX,OAAS,IAChC0K,EAAesM,EAAgBgC,QAC/B/B,EAAS7N,KAAKsB,GAEiB,IAA3BsM,EAAgBhX,QAChByE,EAAWwU,qBAAqB,0HAIpCvO,EAAc,CACd,GAAIpE,GAAU0K,YAAYC,OAAO9D,EAAM7G,SAAW6G,EAAM7G,QAAQ7D,OAAS0K,EAAM7G,OAK/EoE,GAAawD,WAAa5H,EAC1BnC,EAASkG,QAAQjK,EAAOgH,sBAAuB1E,KAAM,GAAAwW,GAAA,QAAexO,EAAcpE,EAAS6G,EAAMgM,kBAGjG7U,GAAOgB,KAAK,6CAiBpC,QAASsT,GAAgBQ,EAAc5O,GACnC,GAAKA,GAAc4O,EAEZ,CAEH,IAAK,GADCC,GAAMD,EAAapZ,OAChBL,EAAI,EAAGA,EAAI0Z,EAAK1Z,IACrB,GAAIyZ,EAAazZ,GAAG6K,WAAaA,EAC7B,MAAO4O,GAAazZ,EAG5B,OAAO,MARP,MAAO,MAYf,QAASyX,KACL1S,EAAa4U,oBAAoBnU,EAAIY,SAAUmR,GAC/CxS,EAAa4U,oBAAoBnU,EAAIW,QAASoR,GAC9CxS,EAAa4U,oBAAoBnU,EAAIc,WAAYiR,GACjDxS,EAAa4U,oBAAoBnU,EAAIa,SAAUkR,GA1VnD7W,EAASA,KACT,IAAMqD,GAAU3E,KAAK2E,QACfS,EAAW9D,EAAO8D,SAClB/D,EAASC,EAAOD,OAChByD,EAAQxD,EAAOwD,MACfsB,EAAM9E,EAAO8E,IACbV,EAAapE,EAAOoE,WAEtBD,MAAQzB,GACRuB,MAAMvB,GACN2B,MAAY3B,GACZf,MAASe,GACTS,MAAuBT,GAQvBiU,MAAejU,GAIfkU,MAAQlU,GAMRsV,MAAmBtV,GAKnBmU,MAAYnU,EA4UhB,OAlBAyB,IACI0F,eAAgBA,EAChBmD,uBAAwBA,EACxBG,aAAcA,EACdhE,gBAAiBA,EACjBsB,gBAAiBA,EACjBpB,iBAAkBA,EAClB+E,iBAAkBA,EAClB9D,gBAAiBA,EACjBC,qBAAsBA,EACtBL,eAAgBA,EAChBE,iBAAkBA,EAClBc,KAAMC,EACNA,MAAOA,GAGX/C,IAEOjE,2DAxXyB,cAChB,eACC,eACE,eACY,eACP,UAsX5BuS,GAAoBtQ,sBAAwB,gCAC7BzH,OAAO2H,aAAaC,gBAAgBmQ;gGCrXnD,QAASwC,GAA0BlZ,GAiB/B,QAASoI,KACLnE,EAAST,EAAMU,UAAUC,GACzBxC,EAAY,KACZ0C,EAAe,KACfI,EAAY,KACZmS,KACAzT,GAA0B,EAAAC,EAAA,SAAwBC,GAASC,cAC3DuT,EAAeC,IAGnB,QAAS3L,KACL,GAAMgO,GAAcvC,EAASjX,OACzByZ,MAAO1W,EAES,KAAhByW,aAeA,IAAK,GAbC5W,GAAO,SAAU6W,GACnBC,EAAcD,GACU,IAApBxC,EAASjX,SACL0E,GACAA,EAAa4U,oBAAoB,YAAapC,GAC9CxS,EAAawB,aAAa,MAAMyT,KAAK,WACjCxV,EAASkG,QAAQjK,EAAOiI,sBAG5BlE,EAASkG,QAAQjK,EAAOiI,qBAI3B1I,EAAI,EAAGA,EAAI6Z,EAAa7Z,IAC7B8Z,EAAUxC,EAAStX,GACnB,SAAWL,GAEPma,EAAQA,QAAQG,OAAOD,KAAK,WACxB/W,EAAKtD,KAITua,EAAwBJ,GAAQ,MAAO,WACnC7W,EAAKtD,MAGVma,MAGPtV,EAASkG,QAAQjK,EAAOiI,mBAIhC,QAASkD,KAGL,IAAK,GADDkO,OAAO1W,GACFpD,EAAI,EAAGA,EAAIsX,EAASjX,OAAQL,IACjC8Z,EAAUxC,EAAStX,GACd8Z,EAAQK,cACTJ,EAAcD,GACdI,EAAwBJ,IAKpC,QAASjM,KACL,MAAOxL,GAGX,QAASkI,KAEL,IAAK,GADC/I,MACGxB,EAAI,EAAGA,EAAIsX,EAASjX,OAAQL,IAC7BsX,EAAStX,GAAGsC,UACZd,EAAOiI,KAAK6N,EAAStX,GAAGsC,SAGhC,OAAOd,GAGX,QAASkM,GAAuBgK,GAC5B0C,EAA+B1C,EAAkB,GAGrD,QAAS7N,GAAgB+D,GACrBA,EAAgByM,KAAKC,kBAAkBN,KAAK,SAAUO,GAClDlY,EAAYuL,EAAgBvL,UAC5B8C,EAAYoV,EACRxV,EACAA,EAAawB,aAAapB,GAAW6U,KAAK,WACtCxV,EAASkG,QAAQjK,EAAOiH,gCAG5BlD,EAASkG,QAAQjK,EAAOiH,gCAG9B,MAAO,WACLlD,EAASkG,QAAQjK,EAAOiH,8BAA+BhB,MAAO,gCAAkCkH,EAAgBvL,UAAUsI,aAAe,4CAIjJ,QAASQ,GAAgBqN,GACjBzT,IAAiByT,IAIjBzT,IACAA,EAAa4U,oBAAoB,YAAapC,GAC1CxS,EAAawB,cACbxB,EAAawB,aAAa,QAIlCxB,EAAeyT,KAIXzT,EAAa0T,iBAAiB,YAAalB,GACvCxS,EAAawB,cAAgBpB,GAC7BJ,EAAawB,aAAapB,KAKtC,QAAS8F,GAAqBC,GAC1B,IAAK7I,IAAc8C,EACf,KAAM,IAAIlF,OAAM,sEAEpBkF,GAAU8F,qBAAqBC,GAAmB8O,KAAK,WACnDrV,EAAOW,KAAK,yDACZd,EAASkG,QAAQjK,EAAOgI,8BAC1B,MAAO,SAAU/B,GACflC,EAASkG,QAAQjK,EAAOgI,4BAA6B/B,MAAO,wCAA0CA,EAAM8T,SAIpH,QAASzQ,GAAiBzH,EAAU8H,EAAUnB,GAC1C,IAAK5G,IAAc8C,EACf,KAAM,IAAIlF,OAAM,+DAGpB,IAAM6Z,GAAU3U,EAAUsV,cAAcxR,GAClC8B,EAAe2P,EAAmBZ,EAASxX,EAAU2G,GACrDoE,EAAKjO,KAAKyO,eAIV8M,EAAWtN,EAAG1C,eAAiBuI,EAAA,QAAoBhS,yBAA2BkJ,GAAYA,EAAS4D,UAAY,SAAW,MAChI8L,GAAQc,gBAAgBD,EAAUrY,GAAU0X,KAAK,WAC7CrV,EAAOT,MAAM,sCAAwC6G,EAAa6D,gBAClEpK,EAASkG,QAAQjK,EAAOuH,qBAAsBjF,KAAMgI,MACtD,MAAO,SAAUrE,GAEfqT,EAAchP,GACdvG,EAASkG,QAAQjK,EAAOuH,qBAAsBjF,KAAM,KAAM2D,MAAO,mCAAqCA,EAAM8T,SAIpH,QAAS1L,GAAiB/D,EAAcpE,GACpC,GAAMmT,GAAU/O,EAAa+O,OAGzBjW,GAAwBiK,WAAWzL,KACnCsE,EAAUA,EAAQkU,SAEtBf,EAAQgB,OAAOnU,GAAQ,MAAO,SAAUD,GACpClC,EAASkG,QAAQjK,EAAOoH,WAAY9E,KAAM,GAAAqW,GAAA,QAAarO,EAAc,mCAAqCrE,EAAM8T,UAIxH,QAAS5P,GAAeC,EAAWvI,EAAU2G,GACzC,IAAK5G,IAAc8C,EACf,KAAM,IAAIlF,OAAM,6DAIpB,KAAK,GAAID,GAAI,EAAGA,EAAIsX,EAASjX,OAAQL,IACjC,GAAI6K,IAAcyM,EAAStX,GAAGyN,UAE1B,WADA9I,GAAOgB,KAAK,4DAKpB,IAAMmU,GAAU3U,EAAUsV,cAAcxR,GAClC8B,EAAe2P,EAAmBZ,EAASxX,EAAU2G,EAAa4B,EAGxEiP,GAAQiB,KAAKlQ,GAAWmP,KAAK,SAAUgB,GAC/BA,GACArW,EAAOT,MAAM,qCAAuC6G,EAAa6D,gBACjEpK,EAASkG,QAAQjK,EAAOuH,qBAAsBjF,KAAMgI,MAEpDgP,EAAchP,GACdvG,EAASkG,QAAQjK,EAAOuH,qBAAsBjF,KAAM,KAAM2D,MAAO,+CAAiDmE,EAAY,SAEpI,MAAO,SAAUnE,GACfqT,EAAchP,GACdvG,EAASkG,QAAQjK,EAAOuH,qBAAsBjF,KAAM,KAAM2D,MAAO,2BAA6BmE,EAAY,MAAQnE,EAAM8T,SAIhI,QAAS1P,GAAiBC,GACNA,EAAa+O,QAErBmB,SAASjB,KAAK,WAClBrV,EAAOT,MAAM,sCAAwC6G,EAAa6D,gBAClEpK,EAASkG,QAAQjK,EAAOwH,qBAAsBlF,KAAMgI,EAAa6D,kBAClE,SAAUlI,GACTlC,EAASkG,QAAQjK,EAAOwH,qBAAsBlF,KAAM,KAAM2D,MAAO,2BAA6BqE,EAAa6D,eAAiB,MAAQlI,EAAM8T,SAKlJ,QAASxP,GAAgBD,GAErBmP,EAAwBnP,GAAa,MAAO,SAAUrE,GAClDqT,EAAchP,GACdvG,EAASkG,QAAQjK,EAAOsH,oBAAqBhF,KAAM,KAAM2D,MAAO,0BAA4BqE,EAAa6D,eAAiB,KAAOlI,EAAM8T,SAI/I,QAASJ,GAA+B1C,EAAkBwD,GAEtD,OAA8C9X,KAA1C+X,UAAUC,6BACuC,kBAA1CD,WAAUC,4BAEjB,WADA5W,GAASkG,QAAQjK,EAAO0H,4BAA6BzB,MAAO,sCAIhE,SAAW1G,GACP,GAAMqC,GAAYqV,EAAiB1X,GAAGqN,GAChCC,EAAUoK,EAAiB1X,GAAGsN,OACpC6N,WAAUC,4BAA4B/Y,EAAUsI,aAAc2C,GAAS0M,KAAK,SAAUqB,GAElF,GAAMC,GAAkE,kBAA1CD,GAAqBE,iBAC3CF,EAAqBE,mBAAqB,KAC5C3N,EAAkB,GAAA2K,GAAA,QAAoBlW,EAAWiZ,EACvD1N,GAAgByM,KAAOgB,EACvB7W,EAASkG,QAAQjK,EAAO0H,4BAA6BpF,KAAM6K,MAE7D,MAAO,SAAUlH,KACT1G,EAAI0X,EAAiBrX,OACvB+Z,EAA+B1C,EAAkB1X,GAEjDwE,EAASkG,QAAQjK,EAAO0H,4BAA6BzB,MAAO,6BAA+BA,EAAMC,aAG1GuU,GAGP,QAAShB,GAAwBnP,GAC7B,GAAM+O,GAAU/O,EAAa+O,OAO7B,OAJAA,GAAQH,oBAAoB,oBAAqB5O,GACjD+O,EAAQH,oBAAoB,UAAW5O,GAGhC+O,EAAQjT,QAMnB,QAAS2Q,KACL,OACIuB,YAAa,SAAUvL,GACnB,OAAQA,EAAMZ,MACV,IAAK,YACD,GAAIY,EAAMlL,SAAU,CAChB,GAAIA,GAAW+O,YAAYC,OAAO9D,EAAMlL,UAAYkL,EAAMlL,SAASQ,OAAS0K,EAAMlL,QAClFkC,GAASkG,QAAQjK,EAAO6H,UAAWkI,IAAK,GAAAwI,GAAA,QAAY1W,EAAUkL,EAAMwD,oBAQ5F,QAAS+I,GAAcyB,GAEnB,IAAK,GAAIxb,GAAI,EAAGA,EAAIsX,EAASjX,OAAQL,IACjC,GAAIsX,EAAStX,KAAOwb,EAAO,CACvBlE,EAASmE,OAAOzb,EAAE,GAClB2E,EAAOT,MAAM,sCAAwCsX,EAAM5M,eAC3D,QAKZ,QAAS8M,GAAeC,GAEpB,GAAIrN,OAAMlL,GAAEwY,MAAKxY,EAkBjB,OAjBIuY,IAAQA,EAAKtb,OAAS,IAClBsb,EAAK,KACkB,gBAAZA,GAAK,GACZrN,EAASqN,EAAK,GAEdC,EAAQD,EAAK,IAIjBA,EAAK,KACkB,gBAAZA,GAAK,GACZrN,EAASqN,EAAK,GAEdC,EAAQD,EAAK,MAKrBrN,OAAQA,EACRsN,MAAOA,GAMf,QAASlB,GAAmBZ,EAASxX,EAAU2G,EAAa4B,GACxD,GAAM2Q,IACF1B,QAASA,EACTxX,SAAUA,EACVmL,UAAW5C,EAKXkO,YAAa,SAAUvL,GACnB,OAAQA,EAAMZ,MACV,IAAK,oBACDpI,EAASkG,QAAQjK,EAAOyH,sBAAuBnF,KAAM3D,OACrDoO,EAAMqO,OAAOC,YAAY/P,QAAQ,WAC7B,GAAIgQ,GAAYL,EAAeM,UAC/B,QAAQD,EAAUzN,QACd,IAAK,UACD9J,EAASkG,QAAQjK,EAAOkH,6BAA8BjB,MAAO,uBAC7D,MAAM,SAENlC,EAASkG,QAAQjK,EAAOkH,4BAA6BoU,KAIjE,MAAM,KAEL,UACD,GAAIpV,GAAU0K,YAAYC,OAAO9D,EAAM7G,SAAW6G,EAAM7G,QAAQ7D,OAAS0K,EAAM7G,OAC/EnC,GAASkG,QAAQjK,EAAOgH,sBAAuB1E,KAAM,GAAAwW,GAAA,QAAena,KAAMuH,MAASvD,GAAWoK,EAAMgB,iBAKhHI,aAAc,WACV,MAAOkL,GAAQrM,WAGnBmL,kBAAmB,WACf,MAAOkB,GAAQmC,YAGnBC,eAAgB,WACZ,MAAOpC,GAAQgC,aAGnB3B,UAAW,WACP,GAAIgC,IAAU,CAOd,OANArC,GAAQgC,YAAY/P,QAAQ,WAEC,WADT2P,EAAeM,WACjB1N,SACV6N,GAAS,KAGVA,GAGX1R,eAAgB,WACZ,MAAOxB,IAkBf,OAbA6Q,GAAQrB,iBAAiB,oBAAqB+C,GAC9C1B,EAAQrB,iBAAiB,UAAW+C,GAGpC1B,EAAQG,OAAOD,KAAK,WAChBD,EAAcyB,GACd7W,EAAOT,MAAM,qCAAuCsX,EAAM5M,gBAC1DpK,EAASkG,QAAQjK,EAAOsH,oBAAqBhF,KAAMyY,EAAM5M,mBAI7D0I,EAAS7N,KAAK+R,GAEPA,EAnZX9a,EAASA,KACT,IAAMqD,GAAU3E,KAAK2E,QACfS,EAAW9D,EAAO8D,SAClB/D,EAASC,EAAOD,OAChByD,EAAQxD,EAAOwD,MAEjBW,MAAQzB,GACRuB,MAAMvB,GACNf,MAASe,GACT2B,MAAY3B,GACZ+B,MAAS/B,GACTkU,MAAQlU,GACRmU,MAAYnU,GACZS,MAAuBT,EA2Z3B,OAlBAyB,IACI0F,eAAgBA,EAChBmD,uBAAwBA,EACxBG,aAAcA,EACdhE,gBAAiBA,EACjBsB,gBAAiBA,EACjBF,qBAAsBA,EACtBlB,iBAAkBA,EAClB+E,iBAAkBA,EAClBlE,eAAgBA,EAChBE,iBAAkBA,EAClBE,gBAAiBA,EACjBY,KAAMA,EACNC,MAAOA,GAGX/C,IAEOjE,2DAjbyB,cAChB,eACC,eACE,eACK,eACI,SA+ahC+U,GAA0B9S,sBAAwB,sCACnCzH,OAAO2H,aAAaC,gBAAgB2S,+IC7anD,QAASwC,GAAyB1b,GAmB9B,QAASoI,KACLnE,EAAST,EAAMU,UAAUC,GACzBE,EAAe,KACf1C,EAAY,KACZ8C,EAAY,KACZyI,EAAkB,KAClB0J,KACAzT,GAA0B,EAAAC,EAAA,SAAwBC,GAASC,cAC3DuT,EAAeC,IAGnB,QAAS3L,KACL,IACI,IAAK,GAAI7L,GAAI,EAAGA,EAAIsX,EAASjX,OAAQL,IACjCgL,EAAgBsM,EAAStX,GAEzB+E,IACAA,EAAa4U,oBAAoBnU,EAAIW,QAASoR,GAElD/S,EAASkG,QAAQjK,EAAOiI,mBAC1B,MAAOhC,GACLlC,EAASkG,QAAQjK,EAAOiI,mBAAqBhC,MAAO,qDAAuDA,EAAMC,WAIzH,QAASkH,KACL,MAAOxL,GAGX,QAASkI,KAEL,IAAK,GADC/I,MACGxB,EAAI,EAAGA,EAAIsX,EAASjX,OAAQL,IACjCwB,EAAOiI,KAAK6N,EAAStX,GAAGsC,SAE5B,OAAOd,GAGX,QAASkM,GAAuBgK,GAK5B,IAAK,GADDI,IAAQ,EACH1K,EAAQ,EAAGA,EAAQsK,EAAiBrX,OAAQ+M,IAQjD,IAAK,GAPCzC,GAAe+M,EAAiBtK,GAAOC,GAAG1C,aAC1C2C,EAAUoK,EAAiBtK,GAAOE,QACpCyK,EAAiB,KACjBC,EAAiB,KAIZC,EAAY,EAAGA,EAAY3K,EAAQjN,OAAQ4X,IAAa,CAC7D,GAAMoE,GAAS/O,EAAQ2K,GAAW7L,kBAC5B8L,EAAS5K,EAAQ2K,GAAW5L,iBAGlC,IAAIgQ,GAA4B,IAAlBA,EAAOhc,OAAc,CAC/B0X,IACA,KAAK,GAAIuE,GAAW,EAAGA,EAAWD,EAAOhc,OAAQic,IACzCrd,OAAOuG,EAAIgB,WAAW+V,gBAAgB5R,EAAc0R,EAAOC,GAAUjE,cACrEN,EAAetO,KAAK4S,EAAOC,IAMvC,GAAIpE,GAA4B,IAAlBA,EAAO7X,OAAc,CAC/B2X,IACA,KAAK,GAAIG,GAAW,EAAGA,EAAWD,EAAO7X,OAAQ8X,IACzClZ,OAAOuG,EAAIgB,WAAW+V,gBAAgB5R,EAAcuN,EAAOC,GAAUE,cACrEL,EAAevO,KAAKyO,EAAOC,IAOvC,MAAMJ,IAAmBC,GACpBD,GAA4C,IAA1BA,EAAe1X,QACjC2X,GAA4C,IAA1BA,EAAe3X,QAFtC,CAOAyX,GAAQ,CACR,IAAMQ,GAAW,GAAArL,GAAA,QAA2B8K,EAAgBC,GACtD3K,EAAKxJ,EAAwBwO,2BAA2B1H,EAC9DnG,GAASkG,QAAQjK,EAAO0H,4BAA8BpF,KAAM,GAAAwV,GAAA,QAAoBlL,EAAIiL,IACpF,QAGHR,GACDtT,EAASkG,QAAQjK,EAAO0H,4BAA8BzB,MAAO,uFAIrE,QAASmD,GAAgB2S,GACrB,IACIrX,EAAYqX,EAASrX,UAAY,GAAIlG,QAAOuG,EAAIgB,WAAWgW,EAASna,UAAUsI,cAC9EtI,EAAYma,EAASna,UACrBuL,EAAkB4O,EACdzX,GACAwB,IAEJ/B,EAASkG,QAAQjK,EAAOiH,8BAC1B,MAAOhB,GACLlC,EAASkG,QAAQjK,EAAOiH,8BAAgChB,MAAO,gCAAkCrE,EAAUsI,aAAe,2CAIlI,QAASQ,GAAgBqN,GACjBzT,IAAiByT,IAIjBzT,GACAA,EAAa4U,oBAAoBnU,EAAIW,QAASoR,IAGlDxS,EAAeyT,KAIXzT,EAAa0T,iBAAiBjT,EAAIW,QAASoR,GACvCpS,GACAoB,MAKZ,QAASwD,GAAiBzH,EAAU8H,EAAUnB,EAAae,GACvD,IAAK3H,IAAc8C,IAAcyI,EAC7B,KAAM,IAAI3N,OAAM,+DAOpB,IAAIwE,GAAe,IAUnB,IARImJ,EAAgB6O,gBAAgBpQ,mBAAqBuB,EAAgB6O,gBAAgBpQ,kBAAkBhM,OAAS,IAChHoE,EAAemJ,EAAgB6O,gBAAgBpQ,kBAAkB,IAGhD,OAAjB5H,GAAyBmJ,EAAgB6O,gBAAgBrQ,mBAAqBwB,EAAgB6O,gBAAgBrQ,kBAAkB/L,OAAS,IACzIoE,EAAemJ,EAAgB6O,gBAAgBrQ,kBAAkB,IAGhD,OAAjB3H,EACA,KAAM,IAAIxE,OAAM,qDAGpB,IAAMoY,GAAc5T,EAAa4T,YAC3ByB,EAAU3U,EAAUsV,cAAcpC,EAAa,GAAI3G,YAAWpP,GAAW0H,EAAU,GAAI0H,YAAW1H,GAAW,MAC7Ge,EAAe2P,EAAmBZ,EAASxX,EAGjDwX,GAAQrB,iBAAiBjT,EAAIkB,MAAOqE,GACpC+O,EAAQrB,iBAAiBjT,EAAImB,QAASoE,GACtC+O,EAAQrB,iBAAiBjT,EAAIoB,MAAOmE,GACpC+O,EAAQrB,iBAAiBjT,EAAIqB,MAAOkE,GAGpCuM,EAAS7N,KAAKsB,GACdpG,EAAOT,MAAM,sCAAwC6G,EAAa6D,gBAClEpK,EAASkG,QAAQjK,EAAOuH,qBAAuBjF,KAAMgI,IAGzD,QAAS+D,GAAiB/D,EAAcpE,GACpC,GAAMmT,GAAU/O,EAAa+O,OAExBjW,GAAwBiK,WAAWzL,GAKpCyX,EAAQgB,OAAO,GAAIpJ,YAAW/K,EAAQkU,UAHtCf,EAAQgB,OAAO,GAAIpJ,YAAW/K,IAatC,QAASqE,GAAgBD,GACrB,GAAM+O,GAAU/O,EAAa+O,OAG7BA,GAAQH,oBAAoBnU,EAAIkB,MAAOqE,GACvC+O,EAAQH,oBAAoBnU,EAAImB,QAASoE,GACzC+O,EAAQH,oBAAoBnU,EAAIoB,MAAOmE,GACvC+O,EAAQH,oBAAoBnU,EAAIqB,MAAOkE,EAGvC,KAAK,GAAI/K,GAAI,EAAGA,EAAIsX,EAASjX,OAAQL,IACjC,GAAIsX,EAAStX,KAAO+K,EAAc,CAC9BuM,EAASmE,OAAOzb,EAAG,EACnB,OAKR8Z,EAAQtU,EAAIiB,WAGhB,QAASwE,MACT,QAASL,MACT,QAASE,MAGT,QAAS0M,KACL,OACIuB,YAAa,SAAUvL,GACnB,OAAQA,EAAMZ,MAEV,IAAKpH,GAAIW,QACL,GAAIqH,EAAMlL,SAAU,CAChB,GAAMA,GAAW+O,YAAYC,OAAO9D,EAAMlL,UAAYkL,EAAMlL,SAASQ,OAAS0K,EAAMlL,QACpFkC,GAASkG,QAAQjK,EAAO6H,UAAYkI,IAAK,GAAAwI,GAAA,QAAY1W,EAAU,cAYvF,QAASiE,KACL,GAAImW,GAAiB,KACfC,EAAY,WACd5X,EAAa4U,oBAAoB,iBAAkB+C,GACnD3X,EAAaS,EAAIe,cAAcpB,GAC/BX,EAASkG,QAAQjK,EAAOkI,wBAExB5D,GAAa6K,YAAc,EAC3B+M,KAEAD,EAAiBC,EAAUC,KAAKxd,MAChC2F,EAAa0T,iBAAiB,iBAAkBiE,IAOxD,QAAShC,GAAmBmC,EAAYva,GACpC,OAEIwX,QAAS+C,EACTva,SAAUA,EAEVsM,aAAc,WACV,MAAOxP,MAAK0a,QAAQrM,WAGxBmL,kBAAmB,WACf,MAAOC,MAGXpO,eAAgB,WACZ,MAAO,aAKXsO,YAAa,SAAUvL,GACnB,OAAQA,EAAMZ,MACV,IAAKpH,GAAIkB,MAELlC,EAASkG,QAAQjK,EAAOoH,WAAa9E,KAAM,GAAAqW,GAAA,QAAaha,KADzC,aAEf,MAAM,KACLoG,GAAImB,QACL,GAAIA,GAAU0K,YAAYC,OAAO9D,EAAM7G,SAAW6G,EAAM7G,QAAQ7D,OAAS0K,EAAM7G,OAC/EnC,GAASkG,QAAQjK,EAAOgH,sBAAwB1E,KAAM,GAAAwW,GAAA,QAAena,KAAMuH,EAAS6G,EAAMsP,iBAC1F,MAAM,KACLtX,GAAIoB,MACLjC,EAAOT,MAAM,mBACbM,EAASkG,QAAQjK,EAAOmH,UACxB,MAAM,KAELpC,GAAIqB,MACLlC,EAAOT,MAAM,qCAAuC9E,KAAKwP,gBACzDpK,EAASkG,QAAQjK,EAAOsH,oBAAsBhF,KAAM3D,KAAKwP,oBAhT7ElO,EAASA,KACT,IAAMqD,GAAU3E,KAAK2E,QACfS,EAAW9D,EAAO8D,SAClB/D,EAASC,EAAOD,OAChByD,EAAQxD,EAAOwD,MACfsB,EAAM9E,EAAO8E,IAEfX,MAAQzB,GACRuB,MAAMvB,GACN2B,MAAY3B,GACZf,MAASe,GACT+B,MAAS/B,GACTwK,MAAexK,GACfkU,MAAQlU,GACRmU,MAAYnU,GACZS,MAAuBT,EA0T3B,OAlBAyB,IACI0F,eAAgBA,EAChBmD,uBAAwBA,EACxBG,aAAcA,EACdhE,gBAAiBA,EACjBsB,gBAAiBA,EACjBpB,iBAAkBA,EAClB+E,iBAAkBA,EAClB9D,gBAAiBA,EACjBC,qBAAsBA,EACtBL,eAAgBA,EAChBE,iBAAkBA,EAClBc,KAAMC,EACNA,MAAOA,GAGX/C,IAEOjE,2DAlVyB,cAChB,eACC,eACE,eACY,eACP,UAgV5BuX,GAAyBtV,sBAAwB,qCAClCzH,OAAO2H,aAAaC,gBAAgBmV,iJCnVnD,QAASW,KAIL,QAASzN,GAAwBL,EAAKtI,GAElC,GAAMkN,GAAU1F,KAAK2F,MAAMvC,OAAOC,aAAaC,MAAM,KAAM,GAAIC,YAAW/K,IAC1EsI,IAAO,IACP,KAAK,GAAIjP,GAAI,EAAGA,EAAI6T,EAAQ9F,KAAK1N,OAAQL,IACrCiP,GAAO4E,EAAQ9F,KAAK/N,GAAK,GAG7B,OADAiP,GAAMA,EAAI+N,UAAU,EAAG/N,EAAI5O,OAAS,GAIxC,QAASyP,KACL,MAAO,MAGX,QAASE,KACL,MAAO,OAGX,QAASG,GAAkB8M,GACvB,IAAKA,EAAenc,eAAe,QAC/B,MAAO,KAGX,KAAK,GADDiT,MACK/T,EAAI,EAAGA,EAAIid,EAAelX,KAAK1F,OAAQL,IAAK,CACjD,GAAIkd,GAAUD,EAAelX,KAAK/F,GAC9Bmd,EAAQD,EAAQE,IAAInG,QAAQ,KAAM,IAClCzG,EAAM0M,EAAQG,EAAEpG,QAAQ,KAAM,GAElClD,GAAStK,KAAK,GAAAyK,GAAA,QAAYiJ,EAAO3M,IAErC,MAAO,IAAA2D,GAAA,QAAmBJ,GAG9B,QAASrE,GAAiBuN,GACtB,MAAO1L,QAAOC,aAAaC,MAAM,KAAM,GAAIC,YAAWuL,IAW1D,OAPI3N,wBAAyBA,EACzBQ,cAAeA,EACfE,gBAAiBA,EACjBG,kBAAmBA,EACnBT,iBAAkBA,4DAlDN,eACO,UAuD3BqN,GAASjW,sBAAwB,qBAClBzH,OAAO2H,aAAayM,oBAAoBsJ,2HCzDvD,QAASO,GAAS5c,GA2Bd,QAASyI,KACL,IAAKxG,IAAWA,EAAO7B,eAAe,eAClC,KAAM,IAAIb,OAAM,+BAIxB,QAASqP,GAAwBL,GAC7B,MAAOA,GAGX,QAASa,KACL,MAAO,OAGX,QAASE,GAAgBuN,GACrB,MAAOzL,GAAWyL,GAAcxN,aAGpC,QAASI,GAAkB8M,EAAgBM,GAEvC,MADApU,KACO2I,EAAWyL,GAAcpN,kBAAkB8M,GAGtD,QAASvN,GAAiBuN,EAAgBM,GACtC,MAAOzL,GAAWyL,GAAc7N,iBAAiBuN,GAjDrDvc,EAASA,KACT,IAAMiC,GAASjC,EAAOiC,OAEhBmP,IACNA,GAAWoB,EAAA,QAAoB/R,0BAC3B4O,aAAc,OACdI,kBAAmB,SAAUV,GACzB,MAAO9M,GAAOC,YAAY6M,EAAS+N,UAEvC9N,iBAAkB,SAAUD,GACxB,MAAOA,KAGfqC,EAAWoB,EAAA,QAAoB9R,2BAC3B2O,aAAc,cACdI,kBAAmB,SAAUV,GACzB,MAAOA,IAEXC,iBAAkB,SAAUD,GACxB,MAAO8B,QAAOC,aAAaC,MAAM,KAAM,GAAIC,YAAWjC,KAyC9D,QAPIH,wBAAyBA,EACzBQ,cAAeA,EACfE,gBAAiBA,EACjBG,kBAAmBA,EACnBT,iBAAkBA,4DA7DM,SAmEhC4N,GAASxW,sBAAwB,qBAClBzH,OAAO2H,aAAayM,oBAAoB6J,+DChEvD,SAASG,KAML,QAASC,GAAaC,GAClB,GAAMC,GAAgBrM,OAAOC,aAAaC,MAAM,KAAM,GAAIC,YAAWiM,GAErE,OADsBE,oBAAmBC,OAAOF,IAIpD,QAASG,GAAoBd,GACzB,GAAIhe,OAAOwV,UAAW,CAClB,GAAMuJ,GAAiBN,EAAaT,GAC9BzI,EAAS,GAAIvV,QAAOwV,UACpBF,EAASC,EAAOK,gBAAgBmJ,EAAgB,YAChDC,EAAW1J,EAASA,EAAO2J,uBAAuBC,EAAM,YAAY,GAAK,KACzEC,EAAOH,EAAWA,EAASC,uBAAuBC,EAAM,QAAQ,GAAK,IAG3E,IAFcC,EAAOA,EAAKF,uBAAuBC,EAAM,SAAS,GAAK,KAGjE,MAAO,MAGf,MAAOlB,GAGX,QAASoB,GAAmBpB,GACxB,GAAIqB,GAAc,GACdC,EAAa,GACb5X,EAAU,GACV6X,GAAW,EACXC,GAAS,CAEb,IAAIxf,OAAOwV,UAAW,CAClB,GAAMuJ,GAAiBN,EAAaT,GAC9BzI,EAAS,GAAIvV,QAAOwV,UACpBF,EAASC,EAAOK,gBAAgBmJ,EAAgB,YAChDC,EAAW1J,EAASA,EAAO2J,uBAAuBC,EAAM,YAAY,GAAK,KACzEC,EAAOH,EAAWA,EAASC,uBAAuBC,EAAM,QAAQ,GAAK,KACrEO,EAAQN,EAAOA,EAAKF,uBAAuBC,EAAM,SAAS,GAAK,KAC/DQ,EAASD,EAAQA,EAAM3J,qBAAqB,UAAU,GAAK,KAC3D6J,EAAYD,EAASA,EAAO5J,qBAAqB,aAAa,GAAK,KACrE8J,EAAO,IAEX,IAAc,OAAVH,EACA,MAAOV,EAGXa,GAAOH,EAAM3J,qBAAqB,eAAe,GAAG+J,WACpDR,EAAcO,EAAOA,EAAK3J,UAAY,KAEpB,OAAd0J,IACAC,EAAOD,EAAU7J,qBAAqB,cAAc,GACpDwJ,EAAaM,EAAOA,EAAKC,WAAW5J,UAAY,KAChD2J,EAAOD,EAAU7J,qBAAqB,WAAW,GACjDpO,EAAUkY,EAAOA,EAAKC,WAAW5J,UAAY,KAC7CsJ,EAAU7X,EAAUA,EAAQoY,YAAY,KAAO,GAAK,EACpDN,EAAQ9X,EAAUA,EAAQ5F,QAAQ,MAAQ,EAC1C4F,EAAUA,EAAUA,EAAQqW,UAAUwB,EAASC,GAAS,IAIhE,GAAIO,GAAW,SAAYT,EAAU,WAAWD,CAKhD,OAJI3X,KACAqY,GAAW,cAAkBrY,GAG1BqY,EAGX,QAAS1P,GAAwBL,GAC7B,MAAOA,GAGX,QAASa,KACL,MAAO,OAGX,QAASE,KACL,MAAO,cAGX,QAASG,GAAkB8M,GACvB,MAAOc,GAAoB3d,KAAKhB,KAAM6d,GAG1C,QAASvN,GAAiBuN,GACtB,MAAOoB,GAAmBje,KAAKhB,KAAM6d,GAvFzC,GAEMkB,GAAO,2CAgGb,QAPI7O,wBAAyBA,EACzBQ,cAAeA,EACfE,gBAAiBA,EACjBG,kBAAmBA,EACnBT,iBAAkBA,oDAM1B+N,EAAU3W,sBAAwB,sBACnBzH,OAAO2H,aAAayM,oBAAoBgK,4DCnHvD,SAASwB,KAIL,QAAS3P,GAAwBL,GAC7B,MAAOA,GAGX,QAASa,KACL,MAAO,OAGX,QAASE,KACL,MAAO,cAGX,QAASG,GAAkB8M,GACvB,MAAOA,GAGX,QAASvN,GAAiBuN,GACtB,MAAO1L,QAAOC,aAAaC,MAAM,KAAM,GAAIC,YAAWuL,IAW1D,OAPI3N,wBAAyBA,EACzBQ,cAAeA,EACfE,gBAAiBA,EACjBG,kBAAmBA,EACnBT,iBAAkBA,oDAM1BuP,EAASnY,sBAAwB,qBAClBzH,OAAO2H,aAAayM,oBAAoBwL,qcC/BjDC,EAAc,WAQL,QARTA,GAQUnL,EAAUnH,GAClB,UATFsS,GASMtS,GAAiB,eAATA,GAAkC,cAATA,EACjC,KAAM,IAAI3M,OAAM,6EACpBb,MAAK2U,SAAWA,EAChB3U,KAAKwN,KAAOA,WAZdsS,sBAoBG,WACD,GAAIlf,OAACoD,GACD+b,EAAU/f,KAAK2U,SAAS1T,OACxB+e,GAAOrZ,QAEX,KAAK/F,EAAI,EAAGA,EAAImf,EAASnf,IAAK,CAC1B,GAAIwQ,IACA6O,IAAK,MACLC,IAAK,SACLlC,IAAKhe,KAAK2U,SAAS/T,GAAG8Y,MACtBuE,EAAGje,KAAK2U,SAAS/T,GAAGwQ,IAExB4O,GAAIrZ,KAAK0D,KAAK+G,GAEdpR,KAAKwN,OACLwS,EAAIxS,KAAOxN,KAAKwN,KAEpB,IAAI2S,GAAYpR,KAAKC,UAAUgR,GACzB1F,EAAM6F,EAAUlf,OAGlBmf,EAAM,GAAInO,aAAYqI,GACtB+F,EAAQ,GAAI/N,YAAW8N,EAC3B,KAAKxf,EAAI,EAAGA,EAAI0Z,EAAK1Z,IACjByf,EAAMzf,GAAKuf,EAAUxI,WAAW/W,EACpC,OAAOwf,OA7CTN,eAiDSA,8MClDTQ,GAOS,QAPTA,GAOU3U,EAAciU,UAPxBU,GAQEtgB,KAAK2L,aAAeA,EACpB3L,KAAKsH,MAAQsY,aAINU,8MCdTC,GAUS,QAVTA,GAUU5U,EAAcpE,EAAS6S,EAAYhL,UAV7CmR,GAWEvgB,KAAK2L,aAAeA,EACpB3L,KAAKuH,QAAUA,EACfvH,KAAKoa,WAAaA,EAClBpa,KAAKoP,YAAcA,GAA4B,6BAIxCmR,8MClBTC,GAOS,QAPTA,GAOU9G,EAAOtI,UAPjBoP,GAQExgB,KAAK0Z,MAAQA,EACb1Z,KAAKoR,IAAMA,aAIJoP,8MCXTC,GASS,QATTA,GASUxd,EAAWoa,UATrBoD,GAUEzgB,KAAKiD,UAAYA,EACjBjD,KAAKqd,gBAAkBA,aAIhBoD,8MCfTC,GAgBS,QAhBTA,GAgBU1T,EAAmBC,EAAmBI,EAAuBC,EAAiBqT,UAhBxFD,GAiBE1gB,KAAK4gB,eAAkB,QACnB5T,GAAqBA,EAAkB/L,SACvCjB,KAAKgN,kBAAoBA,GAEzBC,GAAqBA,EAAkBhM,SACvCjB,KAAKiN,kBAAoBA,GAE7BjN,KAAKqN,sBAAwBA,EAC7BrN,KAAKsN,gBAAkBA,EACvBtN,KAAK2gB,aAAeA,aAIbD,8MChCTG,GAOS,QAPTA,GAOU5H,EAAa6H,UAPvBD,GAQE7gB,KAAKiZ,YAAcA,EACnBjZ,KAAK8gB,WAAaA,aAIXD,8MCbTE,GAMS,QANTA,GAMU7d,EAAU0O,UANpBmP,GAOE/gB,KAAKkD,SAAWA,EAChBlD,KAAK4R,aAAeA,aAIbmP","file":"dash.protection.min.js","sourceRoot":"./src/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass EventsBase {\n    extend (events, config) {\n        if (!events) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const evt in events) {\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\n            this[evt] = events[evt];\n\n        }\n    }\n}\n\nexport default EventsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Protection Constants declaration\n * @class\n * @ignore\n */\nclass ProtectionConstants {\n\n    init () {\n        this.CLEARKEY_KEYSTEM_STRING = 'org.w3.clearkey';\n        this.WIDEVINE_KEYSTEM_STRING = 'com.widevine.alpha';\n        this.PLAYREADY_KEYSTEM_STRING = 'com.microsoft.playready';\n    }\n\n    constructor () {\n        this.init();\n    }\n}\n\nlet constants = new ProtectionConstants();\nexport default constants;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nclass CommonEncryption {\n    /**\n     * Find and return the ContentProtection element in the given array\n     * that indicates support for MPEG Common Encryption\n     *\n     * @param {Array} cpArray array of content protection elements\n     * @returns {Object|null} the Common Encryption content protection element or\n     * null if one was not found\n     */\n    static findCencContentProtection(cpArray) {\n        let retVal = null;\n        for (let i = 0; i < cpArray.length; ++i) {\n            let cp = cpArray[i];\n            if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' &&\n                    cp.value.toLowerCase() === 'cenc')\n                retVal = cp;\n        }\n        return retVal;\n    }\n\n    /**\n     * Returns just the data portion of a single PSSH\n     *\n     * @param {ArrayBuffer} pssh - the PSSH\n     * @return {ArrayBuffer} data portion of the PSSH\n     */\n    static getPSSHData(pssh) {\n        let offset = 8; // Box size and type fields\n        let view = new DataView(pssh);\n\n        // Read version\n        let version = view.getUint8(offset);\n\n        offset += 20; // Version (1), flags (3), system ID (16)\n\n        if (version > 0) {\n            offset += 4 + (16 * view.getUint32(offset)); // Key ID count (4) and All key IDs (16*count)\n        }\n\n        offset += 4; // Data size\n        return pssh.slice(offset);\n    }\n\n    /**\n     * Returns the PSSH associated with the given key system from the concatenated\n     * list of PSSH boxes in the given initData\n     *\n     * @param {KeySystem} keySystem the desired\n     * key system\n     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\n     * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\n     * or null if a valid association could not be found.\n     */\n    static getPSSHForKeySystem(keySystem, initData) {\n        let psshList = CommonEncryption.parsePSSHList(initData);\n        if (psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\n            return psshList[keySystem.uuid.toLowerCase()];\n        }\n        return null;\n    }\n\n    /**\n     * Parse a standard common encryption PSSH which contains a simple\n     * base64-encoding of the init data\n     *\n     * @param {Object} cpData the ContentProtection element\n     * @param {BASE64} BASE64 reference\n     * @returns {ArrayBuffer|null} the init data or null if not found\n     */\n    static parseInitDataFromContentProtection(cpData, BASE64) {\n        if ('pssh' in cpData) {\n            return BASE64.decodeArray(cpData.pssh.__text).buffer;\n        }\n        return null;\n    }\n\n    /**\n     * Parses list of PSSH boxes into keysystem-specific PSSH data\n     *\n     * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\n     * CDM as initialization data when CommonEncryption content is detected\n     * @returns {Object|Array} an object that has a property named according to each of\n     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\n     * and a ArrayBuffer (the entire PSSH box) as the property value\n     */\n    static parsePSSHList(data) {\n\n        if (data === null)\n            return [];\n\n        let dv = new DataView(data.buffer || data); // data.buffer first for Uint8Array support\n        let done = false;\n        let pssh = {};\n\n        // TODO: Need to check every data read for end of buffer\n        let byteCursor = 0;\n        while (!done) {\n\n            let size,\n                nextBox,\n                version,\n                systemID,\n                psshDataSize;\n            let boxStart = byteCursor;\n\n            if (byteCursor >= dv.buffer.byteLength)\n                break;\n\n            /* Box size */\n            size = dv.getUint32(byteCursor);\n            nextBox = byteCursor + size;\n            byteCursor += 4;\n\n            /* Verify PSSH */\n            if (dv.getUint32(byteCursor) !== 0x70737368) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor += 4;\n\n            /* Version must be 0 or 1 */\n            version = dv.getUint8(byteCursor);\n            if (version !== 0 && version !== 1) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor++;\n\n            byteCursor += 3; /* skip flags */\n\n            // 16-byte UUID/SystemID\n            systemID = '';\n            let i, val;\n            for (i = 0; i < 4; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 4;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 6; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 6;\n\n            systemID = systemID.toLowerCase();\n\n            /* PSSH Data Size */\n            psshDataSize = dv.getUint32(byteCursor);\n            byteCursor += 4;\n\n            /* PSSH Data */\n            pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\n            byteCursor = nextBox;\n        }\n\n        return pssh;\n    }\n}\n\nexport default CommonEncryption;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport ProtectionController from './controllers/ProtectionController';\nimport ProtectionKeyController from './controllers/ProtectionKeyController';\nimport ProtectionEvents from './ProtectionEvents';\nimport ProtectionModel_21Jan2015 from './models/ProtectionModel_21Jan2015';\nimport ProtectionModel_3Feb2014 from './models/ProtectionModel_3Feb2014';\nimport ProtectionModel_01b from './models/ProtectionModel_01b';\n\nconst APIS_ProtectionModel_01b = [\n    // Un-prefixed as per spec\n    {\n        // Video Element\n        generateKeyRequest: 'generateKeyRequest',\n        addKey: 'addKey',\n        cancelKeyRequest: 'cancelKeyRequest',\n\n        // Events\n        needkey: 'needkey',\n        keyerror: 'keyerror',\n        keyadded: 'keyadded',\n        keymessage: 'keymessage'\n    },\n    // Webkit-prefixed (early Chrome versions and Chrome with EME disabled in chrome://flags)\n    {\n        // Video Element\n        generateKeyRequest: 'webkitGenerateKeyRequest',\n        addKey: 'webkitAddKey',\n        cancelKeyRequest: 'webkitCancelKeyRequest',\n\n        // Events\n        needkey: 'webkitneedkey',\n        keyerror: 'webkitkeyerror',\n        keyadded: 'webkitkeyadded',\n        keymessage: 'webkitkeymessage'\n    }\n];\n\nconst APIS_ProtectionModel_3Feb2014 = [\n    // Un-prefixed as per spec\n    // Chrome 38-39 (and some earlier versions) with chrome://flags -- Enable Encrypted Media Extensions\n    {\n        // Video Element\n        setMediaKeys: 'setMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MediaKeys',\n        // MediaKeySession\n        release: 'close',\n\n        // Events\n        needkey: 'needkey',\n        error: 'keyerror',\n        message: 'keymessage',\n        ready: 'keyadded',\n        close: 'keyclose'\n    },\n    // MS-prefixed (IE11, Windows 8.1)\n    {\n        // Video Element\n        setMediaKeys: 'msSetMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MSMediaKeys',\n        // MediaKeySession\n        release: 'close',\n        // Events\n        needkey: 'msneedkey',\n        error: 'mskeyerror',\n        message: 'mskeymessage',\n        ready: 'mskeyadded',\n        close: 'mskeyclose'\n    }\n];\n\nfunction Protection() {\n    let instance;\n    const context = this.context;\n\n    /**\n     * Create a ProtectionController and associated ProtectionModel for use with\n     * a single piece of content.\n     *\n     * @param {Object} config\n     * @return {ProtectionController} protection controller\n     *\n     */\n    function createProtectionSystem(config) {\n        let controller = null;\n\n        const protectionKeyController = ProtectionKeyController(context).getInstance();\n        protectionKeyController.setConfig({ debug: config.debug, BASE64: config.BASE64 });\n        protectionKeyController.initialize();\n\n        let protectionModel =  getProtectionModel(config);\n\n        if (!controller && protectionModel) {//TODO add ability to set external controller if still needed at all?\n            controller = ProtectionController(context).create({\n                protectionModel: protectionModel,\n                protectionKeyController: protectionKeyController,\n                eventBus: config.eventBus,\n                debug: config.debug,\n                events: config.events,\n                BASE64: config.BASE64,\n                constants: config.constants\n            });\n            config.capabilities.setEncryptedMediaSupported(true);\n        }\n        return controller;\n    }\n\n    function getProtectionModel(config) {\n        const debug = config.debug;\n        const logger = debug.getLogger(instance);\n        const eventBus = config.eventBus;\n        const errHandler = config.errHandler;\n        const videoElement = config.videoModel ? config.videoModel.getElement() : null;\n\n        if ((!videoElement || videoElement.onencrypted !== undefined) &&\n            (!videoElement || videoElement.mediaKeys !== undefined)) {\n            logger.info('EME detected on this user agent! (ProtectionModel_21Jan2015)');\n            return ProtectionModel_21Jan2015(context).create({ debug: debug, eventBus: eventBus, events: config.events });\n        } else if (getAPI(videoElement, APIS_ProtectionModel_3Feb2014)) {\n            logger.info('EME detected on this user agent! (ProtectionModel_3Feb2014)');\n            return ProtectionModel_3Feb2014(context).create({ debug: debug, eventBus: eventBus, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_3Feb2014) });\n        } else if (getAPI(videoElement, APIS_ProtectionModel_01b)) {\n            logger.info('EME detected on this user agent! (ProtectionModel_01b)');\n            return ProtectionModel_01b(context).create({ debug: debug, eventBus: eventBus, errHandler: errHandler, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_01b) });\n        } else {\n            logger.warn('No supported version of EME detected on this user agent! - Attempts to play encrypted content will fail!');\n            return null;\n        }\n    }\n\n    function getAPI(videoElement, apis) {\n        for (let i = 0; i < apis.length; i++) {\n            const api = apis[i];\n            // detect if api is supported by browser\n            // check only first function in api -> should be fine\n            if (typeof videoElement[api[Object.keys(api)[0]]] !== 'function') {\n                continue;\n            }\n\n            return api;\n        }\n\n        return null;\n    }\n\n    instance = {\n        createProtectionSystem: createProtectionSystem\n    };\n\n    return instance;\n}\n\nProtection.__dashjs_factory_name = 'Protection';\nconst factory = dashjs.FactoryMaker.getClassFactory(Protection); /* jshint ignore:line */\nfactory.events = ProtectionEvents;\ndashjs.FactoryMaker.updateClassFactory(Protection.__dashjs_factory_name, factory); /* jshint ignore:line */\nexport default factory;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../../core/events/EventsBase';\n/**\n * @class\n *\n */\nclass ProtectionEvents extends EventsBase {\n    /**\n     * @description Public facing external events to be used when including protection package.\n     * All public events will be aggregated into the MediaPlayerEvents Class and can be accessed\n     * via MediaPlayer.events.  public_ is the prefix that we use to move event names to MediaPlayerEvents.\n     */\n    constructor () {\n        super();\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         *\n         * @ignore\n         */\n        this.INTERNAL_KEY_MESSAGE = 'internalKeyMessage';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @ignore\n         */\n        this.INTERNAL_KEY_SYSTEM_SELECTED = 'internalKeySystemSelected';\n\n        /**\n         * Event ID for events delivered when the status of one decryption keys has changed\n         * @ignore\n         */\n        this.INTERNAL_KEY_STATUS_CHANGED = 'internalkeyStatusChanged';\n\n        /**\n         * Event ID for events delivered when a new key has been added\n         *\n         * @constant\n         * @deprecated The latest versions of the EME specification no longer\n         * use this event.  {@MediaPlayer.models.protectionModel.eventList.KEY_STATUSES_CHANGED}\n         * is preferred.\n         * @event ProtectionEvents#KEY_ADDED\n         */\n        this.KEY_ADDED = 'public_keyAdded';\n        /**\n         * Event ID for events delivered when an error is encountered by the CDM\n         * while processing a license server response message\n         * @event ProtectionEvents#KEY_ERROR\n         */\n        this.KEY_ERROR = 'public_keyError';\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         * @event ProtectionEvents#KEY_MESSAGE\n         */\n        this.KEY_MESSAGE = 'public_keyMessage';\n\n        /**\n         * Event ID for events delivered when a key session close\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CLOSED\n         */\n        this.KEY_SESSION_CLOSED = 'public_keySessionClosed';\n\n        /**\n         * Event ID for events delivered when a new key sessions creation\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CREATED\n         */\n        this.KEY_SESSION_CREATED = 'public_keySessionCreated';\n\n        /**\n         * Event ID for events delivered when a key session removal\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_REMOVED\n         */\n        this.KEY_SESSION_REMOVED = 'public_keySessionRemoved';\n\n        /**\n         * Event ID for events delivered when the status of one or more\n         * decryption keys has changed\n         * @event ProtectionEvents#KEY_STATUSES_CHANGED\n         */\n        this.KEY_STATUSES_CHANGED = 'public_keyStatusesChanged';\n\n        /**\n         * Event ID for events delivered when a key system access procedure\n         * has completed\n         * @ignore\n         */\n        this.KEY_SYSTEM_ACCESS_COMPLETE = 'public_keySystemAccessComplete';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @event ProtectionEvents#KEY_SYSTEM_SELECTED\n         */\n        this.KEY_SYSTEM_SELECTED = 'public_keySystemSelected';\n\n        /**\n         * Event ID for events delivered when a license request procedure\n         * has completed\n         * @event ProtectionEvents#LICENSE_REQUEST_COMPLETE\n         */\n        this.LICENSE_REQUEST_COMPLETE = 'public_licenseRequestComplete';\n\n        /**\n         * Event ID for needkey/encrypted events\n         * @ignore\n         */\n        this.NEED_KEY = 'needkey';\n\n        /**\n         * Event ID for events delivered when the Protection system is detected and created.\n         * @event ProtectionEvents#PROTECTION_CREATED\n         */\n        this.PROTECTION_CREATED = 'public_protectioncreated';\n\n        /**\n         * Event ID for events delivered when the Protection system is destroyed.\n         * @event ProtectionEvents#PROTECTION_DESTROYED\n         */\n        this.PROTECTION_DESTROYED = 'public_protectiondestroyed';\n\n        /**\n         * Event ID for events delivered when a new server certificate has\n         * been delivered to the CDM\n         * @ignore\n         */\n        this.SERVER_CERTIFICATE_UPDATED = 'serverCertificateUpdated';\n\n        /**\n         * Event ID for events delivered when the process of shutting down\n         * a protection set has completed\n         * @ignore\n         */\n        this.TEARDOWN_COMPLETE =  'protectionTeardownComplete';\n\n        /**\n         * Event ID for events delivered when a HTMLMediaElement has been\n         * associated with the protection set\n         * @ignore\n         */\n        this.VIDEO_ELEMENT_SELECTED = 'videoElementSelected';\n    }\n}\n\nlet protectionEvents = new ProtectionEvents();\nexport default protectionEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport MediaCapability from '../vo/MediaCapability';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\n\nconst NEEDKEY_BEFORE_INITIALIZE_RETRIES = 5;\nconst NEEDKEY_BEFORE_INITIALIZE_TIMEOUT = 500;\n\n/**\n * @module ProtectionController\n * @description Provides access to media protection information and functionality.  Each\n * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}\n * which encapsulates a set of protection information (EME APIs, selected key system,\n * key sessions).  The APIs of ProtectionController mostly align with the latest EME\n * APIs.  Key system selection is mostly automated when combined with app-overrideable\n * functionality provided in {@link ProtectionKeyController}.\n * @todo ProtectionController does almost all of its tasks automatically after init() is\n * called.  Applications might want more control over this process and want to go through\n * each step manually (key system selection, session creation, session maintenance).\n * @param {Object} config\n */\n\nfunction ProtectionController(config) {\n\n    config = config || {};\n    const protectionKeyController = config.protectionKeyController;\n    let protectionModel = config.protectionModel;\n    const eventBus = config.eventBus;\n    const events = config.events;\n    const debug = config.debug;\n    const BASE64 = config.BASE64;\n    const constants = config.constants;\n    let needkeyRetries = [];\n\n    let instance,\n        logger,\n        pendingNeedKeyData,\n        mediaInfoArr,\n        protDataSet,\n        sessionType,\n        robustnessLevel,\n        keySystem;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        pendingNeedKeyData = [];\n        mediaInfoArr = [];\n        sessionType = 'temporary';\n        robustnessLevel = '';\n    }\n\n    function checkConfig() {\n        if (!eventBus || !eventBus.hasOwnProperty('on') || !protectionKeyController || !protectionKeyController.hasOwnProperty('getSupportedKeySystemsFromContentProtection')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    /**\n     * Initialize this protection system with a given audio\n     * or video stream information.\n     *\n     * @param {StreamInfo} [mediaInfo] Media information\n     * @memberof module:ProtectionController\n     * @instance\n     * @todo This API will change when we have better support for allowing applications\n     * to select different adaptation sets for playback.  Right now it is clunky for\n     * applications to create {@link StreamInfo} with the right information,\n     */\n    function initializeForMedia(mediaInfo) {\n        // Not checking here if a session for similar KS/KID combination is already created\n        // because still don't know which keysystem will be selected.\n        // Once Keysystem is selected and before creating the session, we will do that check\n        // so we create the strictly necessary DRM sessions\n        if (!mediaInfo) {\n            throw new Error('mediaInfo can not be null or undefined');\n        }\n\n        checkConfig();\n\n        eventBus.on(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        eventBus.on(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\n\n        mediaInfoArr.push(mediaInfo);\n\n        // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio\n        // and video will be the same.  Just use one valid MediaInfo object\n        const supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);\n        if (supportedKS && supportedKS.length > 0) {\n            selectKeySystem(supportedKS, true);\n        }\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps);\n    }\n\n    /**\n     * Create a new key session associated with the given initialization data from\n     * the MPD or from the PSSH box in the media\n     *\n     * @param {ArrayBuffer} initData the initialization data\n     * @param {Uint8Array} cdmData the custom data to provide to licenser\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     * @todo In older versions of the EME spec, there was a one-to-one relationship between\n     * initialization data and key sessions.  That is no longer true in the latest APIs.  This\n     * API will need to modified (and a new \"generateRequest(keySession, initData)\" API created)\n     * to come up to speed with the latest EME standard\n     */\n    function createKeySession(initData, cdmData) {\n        const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, initData);\n        const protData = getProtData(keySystem);\n        if (initDataForKS) {\n\n            // Check for duplicate initData\n            const currentInitData = protectionModel.getAllInitData();\n            for (let i = 0; i < currentInitData.length; i++) {\n                if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\n                    logger.warn('DRM: Ignoring initData because we have already seen it!');\n                    return;\n                }\n            }\n            try {\n                protectionModel.createKeySession(initDataForKS, protData, getSessionType(keySystem), cdmData);\n            } catch (error) {\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Error creating key session! ' + error.message});\n            }\n        } else if (initData) {\n            protectionModel.createKeySession(initData, protData, getSessionType(keySystem), cdmData);\n        } else {\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Selected key system is ' + keySystem.systemString + '.  needkey/encrypted event contains no initData corresponding to that key system!'});\n        }\n    }\n\n    /**\n     * Loads a key session with the given session ID from persistent storage.  This\n     * essentially creates a new key session\n     *\n     * @param {string} sessionID\n     * @param {string} initData\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     */\n    function loadKeySession(sessionID, initData) {\n        protectionModel.loadKeySession(sessionID, initData, getSessionType(keySystem));\n    }\n\n    /**\n     * Removes the given key session from persistent storage and closes the session\n     * as if {@link ProtectionController#closeKeySession}\n     * was called\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionRemoved\n     * @fires ProtectionController#KeySessionClosed\n     */\n    function removeKeySession(sessionToken) {\n        protectionModel.removeKeySession(sessionToken);\n    }\n\n    /**\n     * Closes the key session and releases all associated decryption keys.  These\n     * keys will no longer be available for decrypting media\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionClosed\n     */\n    function closeKeySession(sessionToken) {\n        protectionModel.closeKeySession(sessionToken);\n    }\n\n    /**\n     * Sets a server certificate for use by the CDM when signing key messages\n     * intended for a particular license server.  This will fire\n     * an error event if a key system has not yet been selected.\n     *\n     * @param {ArrayBuffer} serverCertificate a CDM-specific license server\n     * certificate\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#ServerCertificateUpdated\n     */\n    function setServerCertificate(serverCertificate) {\n        protectionModel.setServerCertificate(serverCertificate);\n    }\n\n    /**\n     * Associate this protection system with the given HTMLMediaElement.  This\n     * causes the system to register for needkey/encrypted events from the given\n     * element and provides a destination for setting of MediaKeys\n     *\n     * @param {HTMLMediaElement} element the media element to which the protection\n     * system should be associated\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setMediaElement(element) {\n        if (element) {\n            protectionModel.setMediaElement(element);\n            eventBus.on(events.NEED_KEY, onNeedKey, this);\n        } else if (element === null) {\n            protectionModel.setMediaElement(element);\n            eventBus.off(events.NEED_KEY, onNeedKey, this);\n        }\n    }\n\n    /**\n     * Sets the session type to use when creating key sessions.  Either \"temporary\" or\n     * \"persistent-license\".  Default is \"temporary\".\n     *\n     * @param {string} value the session type\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setSessionType(value) {\n        sessionType = value;\n    }\n\n    /**\n     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.\n     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.\n     *\n     * @param {string} level the robustness level\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setRobustnessLevel(level) {\n        robustnessLevel = level;\n    }\n\n    /**\n     * Attach KeySystem-specific data to use for license acquisition with EME\n     *\n     * @param {Object} data an object containing property names corresponding to\n     * key system name strings (e.g. \"org.w3.clearkey\") and associated values\n     * being instances of {@link ProtectionData}\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setProtectionData(data) {\n        protDataSet = data;\n        protectionKeyController.setProtectionData(data);\n    }\n\n    /**\n     * Stop method is called when current playback is stopped/resetted.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function stop() {\n        if (protectionModel) {\n            protectionModel.stop();\n        }\n    }\n\n\n    /**\n     * Destroys all protection data associated with this protection set.  This includes\n     * deleting all key sessions. In the case of persistent key sessions, the sessions\n     * will simply be unloaded and not deleted.  Additionally, if this protection set is\n     * associated with a HTMLMediaElement, it will be detached from that element.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function reset() {\n\n        eventBus.off(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        eventBus.off(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\n\n        setMediaElement(null);\n\n        keySystem = undefined;//TODO-Refactor look at why undefined is needed for this. refactor\n\n        if (protectionModel) {\n            protectionModel.reset();\n            protectionModel = null;\n        }\n\n        needkeyRetries.forEach( retryTimeout => clearTimeout(retryTimeout));\n        needkeyRetries = [];\n\n        mediaInfoArr = [];\n    }\n\n    ///////////////\n    // Private\n    ///////////////\n\n    function getProtData(keySystem) {\n        let protData = null;\n        if (keySystem) {\n            const keySystemString = keySystem.systemString;\n\n            if (protDataSet) {\n                protData = (keySystemString in protDataSet) ? protDataSet[keySystemString] : null;\n            }\n        }\n        return protData;\n    }\n\n    function getKeySystemConfiguration(keySystem) {\n        const protData = getProtData(keySystem);\n        const audioCapabilities = [];\n        const videoCapabilities = [];\n        const audioRobustness = (protData && protData.audioRobustness && protData.audioRobustness.length > 0) ? protData.audioRobustness : robustnessLevel;\n        const videoRobustness = (protData && protData.videoRobustness && protData.videoRobustness.length > 0) ? protData.videoRobustness : robustnessLevel;\n        const ksSessionType = getSessionType(keySystem);\n        const distinctiveIdentifier = (protData && protData.distinctiveIdentifier) ? protData.distinctiveIdentifier : 'optional';\n        const persistentState = (protData && protData.persistentState) ? protData.persistentState : (ksSessionType === 'temporary') ? 'optional' : 'required';\n\n        mediaInfoArr.forEach((media) => {\n            if (media.type === constants.AUDIO) {\n                audioCapabilities.push(new MediaCapability(media.codec, audioRobustness));\n            } else if (media.type === constants.VIDEO) {\n                videoCapabilities.push(new MediaCapability(media.codec, videoRobustness));\n            }\n        });\n\n        return new KeySystemConfiguration(\n            audioCapabilities, videoCapabilities, distinctiveIdentifier,\n            persistentState,\n            [ksSessionType]);\n    }\n\n    function getSessionType(keySystem) {\n        const protData = getProtData(keySystem);\n        const ksSessionType = (protData && protData.sessionType) ? protData.sessionType : sessionType;\n        return ksSessionType;\n    }\n\n    function selectKeySystem(supportedKS, fromManifest) {\n        const self = this;\n        const requestedKeySystems = [];\n\n        let ksIdx;\n        if (keySystem) {\n            // We have a key system\n            for (ksIdx = 0; ksIdx < supportedKS.length; ksIdx++) {\n                if (keySystem === supportedKS[ksIdx].ks) {\n\n                    requestedKeySystems.push({ks: supportedKS[ksIdx].ks, configs: [getKeySystemConfiguration(keySystem)]});\n\n                    // Ensure that we would be granted key system access using the key\n                    // system and codec information\n                    const onKeySystemAccessComplete = function (event) {\n                        eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                        if (event.error) {\n                            if (!fromManifest) {\n                                eventBus.trigger(events.KEY_SYSTEM_SELECTED, {error: 'DRM: KeySystem Access Denied! -- ' + event.error});\n                            }\n                        } else {\n                            logger.info('DRM: KeySystem Access Granted');\n                            eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: event.data});\n                            if (supportedKS[ksIdx].sessionId) {\n                                // Load MediaKeySession with sessionId\n                                loadKeySession(supportedKS[ksIdx].sessionId, supportedKS[ksIdx].initData);\n                            } else if (supportedKS[ksIdx].initData) {\n                                // Create new MediaKeySession with initData\n                                createKeySession(supportedKS[ksIdx].initData, supportedKS[ksIdx].cdmData);\n                            }\n                        }\n                    };\n                    eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                    protectionModel.requestKeySystemAccess(requestedKeySystems);\n                    break;\n                }\n            }\n        }\n        else if (keySystem === undefined) {\n            // First time through, so we need to select a key system\n            keySystem = null;\n            pendingNeedKeyData.push(supportedKS);\n\n            // Add all key systems to our request list since we have yet to select a key system\n            for (let i = 0; i < supportedKS.length; i++) {\n                requestedKeySystems.push({ks: supportedKS[i].ks, configs: [getKeySystemConfiguration(supportedKS[i].ks)]});\n            }\n\n            let keySystemAccess;\n            const onKeySystemAccessComplete = function (event) {\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (event.error) {\n                    keySystem = undefined;\n                    eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n                    if (!fromManifest) {\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: null, error: 'DRM: KeySystem Access Denied! -- ' + event.error});\n                    }\n                } else {\n                    keySystemAccess = event.data;\n                    logger.info('DRM: KeySystem Access Granted (' + keySystemAccess.keySystem.systemString + ')!  Selecting key system...');\n                    protectionModel.selectKeySystem(keySystemAccess);\n                }\n            };\n            var onKeySystemSelected = function (event) {\n                eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (!event.error) {\n                    if (!protectionModel) {\n                        return;\n                    }\n                    keySystem = protectionModel.getKeySystem();\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: keySystemAccess});\n                    // Set server certificate from protData\n                    const protData = getProtData(keySystem);\n                    if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {\n                        protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);\n                    }\n                    for (let i = 0; i < pendingNeedKeyData.length; i++) {\n                        for (ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {\n                            if (keySystem === pendingNeedKeyData[i][ksIdx].ks) {\n                                // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\n                                // initData and overwrite possible initData indicated in encrypted event (EME)\n                                if (protectionKeyController.isClearKey(keySystem) && protData && protData.hasOwnProperty('clearkeys')) {\n                                    const initData = { kids: Object.keys(protData.clearkeys) };\n                                    pendingNeedKeyData[i][ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\n                                }\n                                if (pendingNeedKeyData[i][ksIdx].sessionId) {\n                                    // Load MediaKeySession with sessionId\n                                    loadKeySession(pendingNeedKeyData[i][ksIdx].sessionId, pendingNeedKeyData[i][ksIdx].initData);\n                                } else if (pendingNeedKeyData[i][ksIdx].initData !== null) {\n                                    // Create new MediaKeySession with initData\n                                    createKeySession(pendingNeedKeyData[i][ksIdx].initData, pendingNeedKeyData[i][ksIdx].cdmData);\n                                }\n                                break;\n                            }\n                        }\n                    }\n                } else {\n                    keySystem = undefined;\n                    if (!fromManifest) {\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: null, error: 'DRM: Error selecting key system! -- ' + event.error});\n                    }\n                }\n            };\n            eventBus.on(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n            eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n            protectionModel.requestKeySystemAccess(requestedKeySystems);\n        } else {\n            // We are in the process of selecting a key system, so just save the data\n            pendingNeedKeyData.push(supportedKS);\n        }\n    }\n\n    function sendLicenseRequestCompleteEvent(data, error) {\n        eventBus.trigger(events.LICENSE_REQUEST_COMPLETE, {data: data, error: error});\n    }\n\n    function onKeyStatusChanged(e) {\n        if (e.error) {\n            eventBus.trigger(events.KEY_STATUSES_CHANGED, {data: null, error: 'DRM: KeyStatusChange error! -- ' + e.error});\n        } else {\n            logger.debug('DRM: key status = ' + e.status);\n        }\n    }\n\n    function onKeyMessage(e) {\n        logger.debug('DRM: onKeyMessage');\n        if (e.error) {\n            logger.error(e.error);\n            return;\n        }\n\n        // Dispatch event to applications indicating we received a key message\n        const keyMessage = e.data;\n        eventBus.trigger(events.KEY_MESSAGE, {data: keyMessage});\n        const messageType = (keyMessage.messageType) ? keyMessage.messageType : 'license-request';\n        const message = keyMessage.message;\n        const sessionToken = keyMessage.sessionToken;\n        const protData = getProtData(keySystem);\n        const keySystemString = keySystem ? keySystem.systemString : null;\n        const licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType);\n        const eventData = { sessionToken: sessionToken, messageType: messageType };\n\n        // Ensure message from CDM is not empty\n        if (!message || message.byteLength === 0) {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: Empty key message from CDM');\n            return;\n        }\n\n        // Message not destined for license server\n        if (!licenseServerData) {\n            logger.debug('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionID());\n            sendLicenseRequestCompleteEvent(eventData);\n            return;\n        }\n\n        // Perform any special handling for ClearKey\n        if (protectionKeyController.isClearKey(keySystem)) {\n            const clearkeys = protectionKeyController.processClearKeyLicenseRequest(keySystem, protData, message);\n            if (clearkeys)  {\n                logger.debug('DRM: ClearKey license request handled by application!');\n                sendLicenseRequestCompleteEvent(eventData);\n                protectionModel.updateKeySession(sessionToken, clearkeys);\n                return;\n            }\n        }\n\n        // All remaining key system scenarios require a request to a remote license server\n        const xhr = new XMLHttpRequest();\n\n        // Determine license server URL\n        let url = null;\n        if (protData && protData.serverURL) {\n            const serverURL = protData.serverURL;\n            if (typeof serverURL === 'string' && serverURL !== '') {\n                url = serverURL;\n            } else if (typeof serverURL === 'object' && serverURL.hasOwnProperty(messageType)) {\n                url = serverURL[messageType];\n            }\n        } else if (protData && protData.laURL && protData.laURL !== '') {\n            // TODO: Deprecated!\n            url = protData.laURL;\n        } else {\n            url = keySystem.getLicenseServerURLFromInitData(CommonEncryption.getPSSHData(sessionToken.initData));\n            if (!url) {\n                url = e.data.laURL;\n            }\n        }\n        // Possibly update or override the URL based on the message\n        url = licenseServerData.getServerURLFromMessage(url, message, messageType);\n\n        // Ensure valid license server URL\n        if (!url) {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: No license server URL specified!');\n            return;\n        }\n\n        const reportError = function (xhr, eventData, keySystemString, messageType) {\n            const errorMsg = ((xhr.response) ? licenseServerData.getErrorResponse(xhr.response, keySystemString, messageType) : 'NONE');\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: ' + keySystemString + ' update, XHR complete. status is \"' + xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState + '.  Response is ' + errorMsg);\n        };\n\n        xhr.open(licenseServerData.getHTTPMethod(messageType), url, true);\n        xhr.responseType = licenseServerData.getResponseType(keySystemString, messageType);\n        xhr.onload = function () {\n            if (!protectionModel) {\n                return;\n            }\n            if (this.status == 200) {\n                const licenseMessage = licenseServerData.getLicenseMessage(this.response, keySystemString, messageType);\n                if (licenseMessage !== null) {\n                    sendLicenseRequestCompleteEvent(eventData);\n                    protectionModel.updateKeySession(sessionToken, licenseMessage);\n                } else {\n                    reportError(this, eventData, keySystemString, messageType);\n                }\n            } else {\n                reportError(this, eventData, keySystemString, messageType);\n            }\n        };\n        xhr.onabort = function () {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: ' + keySystemString + ' update, XHR aborted. status is \"' + this.statusText + '\" (' + this.status + '), readyState is ' + this.readyState);\n        };\n        xhr.onerror = function () {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: ' + keySystemString + ' update, XHR error. status is \"' + this.statusText + '\" (' + this.status + '), readyState is ' + this.readyState);\n        };\n\n        // Set optional XMLHttpRequest headers from protection data and message\n        const updateHeaders = function (headers) {\n            if (headers) {\n                for (const key in headers) {\n                    if ('authorization' === key.toLowerCase()) {\n                        xhr.withCredentials = true;\n                    }\n                    xhr.setRequestHeader(key, headers[key]);\n                }\n            }\n        };\n        if (protData) {\n            updateHeaders(protData.httpRequestHeaders);\n        }\n        updateHeaders(keySystem.getRequestHeadersFromMessage(message));\n\n        // Overwrite withCredentials property from protData if present\n        if (protData && typeof protData.withCredentials == 'boolean') {\n            xhr.withCredentials = protData.withCredentials;\n        }\n\n        xhr.send(keySystem.getLicenseRequestFromMessage(message));\n    }\n\n    function onNeedKey(event, retry) {\n        logger.debug('DRM: onNeedKey');\n        // Ignore non-cenc initData\n        if (event.key.initDataType !== 'cenc') {\n            logger.warn('DRM:  Only \\'cenc\\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);\n            return;\n        }\n\n        if (mediaInfoArr.length === 0) {\n            logger.warn('DRM: onNeedKey called before initializeForMedia, wait until initialized');\n            retry = typeof retry === 'undefined' ? 1 : retry + 1;\n            if (retry < NEEDKEY_BEFORE_INITIALIZE_RETRIES) {\n                needkeyRetries.push(setTimeout(() => {\n                    onNeedKey(event, retry);\n                }, NEEDKEY_BEFORE_INITIALIZE_TIMEOUT));\n                return;\n            }\n\n        }\n\n        // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).\n        // Convert to ArrayBuffer\n        let abInitData = event.key.initData;\n        if (ArrayBuffer.isView(abInitData)) {\n            abInitData = abInitData.buffer;\n        }\n\n        // If key system has already been selected and initData already seen, then do nothing\n        if (keySystem) {\n            const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, abInitData);\n            if (initDataForKS) {\n\n                // Check for duplicate initData\n                const currentInitData = protectionModel.getAllInitData();\n                for (let i = 0; i < currentInitData.length; i++) {\n                    if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\n                        logger.warn('DRM: Ignoring initData because we have already seen it!');\n                        return;\n                    }\n                }\n            }\n        }\n\n        logger.debug('DRM: initData:', String.fromCharCode.apply(null, new Uint8Array(abInitData)));\n\n        const supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);\n        if (supportedKS.length === 0) {\n            logger.debug('DRM: Received needkey event with initData, but we don\\'t support any of the key systems!');\n            return;\n        }\n\n        selectKeySystem(supportedKS, false);\n    }\n\n    function getKeySystems() {\n        return protectionKeyController ? protectionKeyController.getKeySystems() : [];\n    }\n\n    instance = {\n        initializeForMedia: initializeForMedia,\n        createKeySession: createKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        setMediaElement: setMediaElement,\n        setSessionType: setSessionType,\n        setRobustnessLevel: setRobustnessLevel,\n        setProtectionData: setProtectionData,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getKeySystems: getKeySystems,\n        stop: stop,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nProtectionController.__dashjs_factory_name = 'ProtectionController';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport CommonEncryption from './../CommonEncryption';\nimport KeySystemClearKey from './../drm/KeySystemClearKey';\nimport KeySystemW3CClearKey from './../drm/KeySystemW3CClearKey';\nimport KeySystemWidevine from './../drm/KeySystemWidevine';\nimport KeySystemPlayReady from './../drm/KeySystemPlayReady';\nimport DRMToday from './../servers/DRMToday';\nimport PlayReady from './../servers/PlayReady';\nimport Widevine from './../servers/Widevine';\nimport ClearKey from './../servers/ClearKey';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\n/**\n * @module ProtectionKeyController\n * @description Media protection key system functionality that can be modified/overridden by applications\n */\nfunction ProtectionKeyController() {\n\n    let context = this.context;\n\n    let instance,\n        debug,\n        logger,\n        keySystems,\n        BASE64,\n        clearkeyKeySystem,\n        clearkeyW3CKeySystem;\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.debug) {\n            debug = config.debug;\n            logger = debug.getLogger(instance);\n        }\n\n        if (config.BASE64) {\n            BASE64 = config.BASE64;\n        }\n    }\n\n    function initialize() {\n        keySystems = [];\n\n        let keySystem;\n\n        // PlayReady\n        keySystem = KeySystemPlayReady(context).getInstance({ BASE64: BASE64 });\n        keySystems.push(keySystem);\n\n        // Widevine\n        keySystem = KeySystemWidevine(context).getInstance({ BASE64: BASE64 });\n        keySystems.push(keySystem);\n\n        // ClearKey\n        keySystem = KeySystemClearKey(context).getInstance({ BASE64: BASE64 });\n        keySystems.push(keySystem);\n        clearkeyKeySystem = keySystem;\n\n        // W3C ClearKey\n        keySystem = KeySystemW3CClearKey(context).getInstance({ BASE64: BASE64, debug: debug });\n        keySystems.push(keySystem);\n        clearkeyW3CKeySystem = keySystem;\n    }\n\n    /**\n     * Returns a prioritized list of key systems supported\n     * by this player (not necessarily those supported by the\n     * user agent)\n     *\n     * @returns {Array.<KeySystem>} a prioritized\n     * list of key systems\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystems() {\n        return keySystems;\n    }\n\n    /**\n     * Returns the key system associated with the given key system string\n     * name (i.e. 'org.w3.clearkey')\n     *\n     * @param {string} systemString the system string\n     * @returns {KeySystem|null} the key system\n     * or null if no supported key system is associated with the given key\n     * system string\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystemBySystemString(systemString) {\n        for (let i = 0; i < keySystems.length; i++) {\n            if (keySystems[i].systemString === systemString) {\n                return keySystems[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Determines whether the given key system is ClearKey.  This is\n     * necessary because the EME spec defines ClearKey and its method\n     * for providing keys to the key session; and this method has changed\n     * between the various API versions.  Our EME-specific ProtectionModels\n     * must know if the system is ClearKey so that it can format the keys\n     * according to the particular spec version.\n     *\n     * @param {Object} keySystem the key\n     * @returns {boolean} true if this is the ClearKey key system, false\n     * otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function isClearKey(keySystem) {\n        return (keySystem === clearkeyKeySystem || keySystem === clearkeyW3CKeySystem);\n    }\n\n    /**\n     * Check equality of initData array buffers.\n     *\n     * @param {ArrayBuffer} initData1 - first initData\n     * @param {ArrayBuffer} initData2 - second initData\n     * @returns {boolean} true if the initData arrays are equal in size and\n     * contents, false otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function initDataEquals(initData1, initData2) {\n        if (initData1.byteLength === initData2.byteLength) {\n            let data1 = new Uint8Array(initData1);\n            let data2 = new Uint8Array(initData2);\n\n            for (let j = 0; j < data1.length; j++) {\n                if (data1[j] !== data2[j]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        let cp, ks, ksIdx, cpIdx;\n        let supportedKS = [];\n\n        if (cps) {\n            for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n                ks = keySystems[ksIdx];\n                for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {\n                    cp = cps[cpIdx];\n                    if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {\n                        // Look for DRM-specific ContentProtection\n                        supportedKS.push({\n                            ks: ks,\n                            initData: ks.getInitData(cp),\n                            cdmData: ks.getCDMData(),\n                            sessionId: ks.getSessionId(cp)\n                        });\n                    }\n                }\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns key systems supported by this player for the given PSSH\n     * initializationData. Only key systems supported by this player\n     * that have protection data present will be returned.  Key systems are returned in priority order\n     * (highest priority first)\n     *\n     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs\n     * supported by the content\n     * @param {ProtectionData} protDataSet user specified protection data - license server url etc\n     * supported by the content\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystems(initData, protDataSet) {\n        let supportedKS = [];\n        let pssh = CommonEncryption.parsePSSHList(initData);\n        let ks, keySystemString, shouldNotFilterOutKeySystem;\n\n        for (let ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n            ks = keySystems[ksIdx];\n            keySystemString = ks.systemString;\n            shouldNotFilterOutKeySystem = (protDataSet) ? keySystemString in protDataSet : true;\n\n            if (ks.uuid in pssh && shouldNotFilterOutKeySystem) {\n                supportedKS.push({\n                    ks: ks,\n                    initData: pssh[ks.uuid],\n                    cdmData: ks.getCDMData(),\n                    sessionId: ks.getSessionId()\n                });\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns the license server implementation data that should be used for this request.\n     *\n     * @param {KeySystem} keySystem the key system\n     * associated with this license request\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {string} [messageType=\"license-request\"] the message type associated with this\n     * request.  Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @returns {LicenseServer|null} the license server\n     * implementation that should be used for this request or null if the player should not\n     * pass messages of the given type to a license server\n     * @memberof module:ProtectionKeyController\n     * @instance\n     *\n     */\n    function getLicenseServer(keySystem, protData, messageType) {\n\n        // Our default server implementations do not do anything with \"license-release\" or\n        // \"individualization-request\" messages, so we just send a success event\n        if (messageType === 'license-release' || messageType === 'individualization-request') {\n            return null;\n        }\n\n        let licenseServerData = null;\n        if (protData && protData.hasOwnProperty('drmtoday')) {\n            licenseServerData = DRMToday(context).getInstance({ BASE64: BASE64 });\n        } else if (keySystem.systemString === ProtectionConstants.WIDEVINE_KEYSTEM_STRING) {\n            licenseServerData = Widevine(context).getInstance();\n        } else if (keySystem.systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING) {\n            licenseServerData = PlayReady(context).getInstance();\n        } else if (keySystem.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING) {\n            licenseServerData = ClearKey(context).getInstance();\n        }\n\n        return licenseServerData;\n    }\n\n    /**\n     * Allows application-specific retrieval of ClearKey keys.\n     *\n     * @param {KeySystem} clearkeyKeySystem They exact ClearKey System to be used\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {ArrayBuffer} message the key message from the CDM\n     * @return {ClearKeyKeySet|null} the clear keys associated with\n     * the request or null if no keys can be returned by this function\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function processClearKeyLicenseRequest(clearkeyKeySystem, protData, message) {\n        try {\n            return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);\n        } catch (error) {\n            logger.error('Failed to retrieve clearkeys from ProtectionData');\n            return null;\n        }\n    }\n\n    function setProtectionData(protectionDataSet) {\n        var getProtectionData = function (keySystemString) {\n            var protData = null;\n            if (protectionDataSet) {\n                protData = (keySystemString in protectionDataSet) ? protectionDataSet[keySystemString] : null;\n            }\n            return protData;\n        };\n\n        for (var i = 0; i < keySystems.length; i++) {\n            var keySystem = keySystems[i];\n            if (keySystem.hasOwnProperty('init')) {\n                keySystem.init(getProtectionData(keySystem.systemString));\n            }\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        setProtectionData: setProtectionData,\n        isClearKey: isClearKey,\n        initDataEquals: initDataEquals,\n        getKeySystems: getKeySystems,\n        getKeySystemBySystemString: getKeySystemBySystemString,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getSupportedKeySystems: getSupportedKeySystems,\n        getLicenseServer: getLicenseServer,\n        processClearKeyLicenseRequest: processClearKeyLicenseRequest,\n        setConfig: setConfig\n    };\n\n    return instance;\n}\n\nProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';\nexport default dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = 'e2719d58-a985-b3c9-781a-b030af78d30e';\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemClearKey(config) {\n\n    config = config || {};\n    let instance;\n    const BASE64 = config.BASE64;\n\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionData} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            const keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                const clearkeyID = jsonMsg.kids[i];\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(/*cp*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Microsoft PlayReady DRM\n *\n * @class\n * @implements KeySystem\n */\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\nconst systemString = ProtectionConstants.PLAYREADY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\nconst PRCDMData = '<PlayReadyCDMData type=\"LicenseAcquisition\"><LicenseAcquisition version=\"1.0\" Proactive=\"false\"><CustomData encoding=\"base64encoded\">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';\nlet protData;\n\nfunction KeySystemPlayReady(config) {\n\n    config = config || {};\n    let instance;\n    let messageFormat = 'utf16';\n    const BASE64 = config.BASE64;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray') || !BASE64.hasOwnProperty('decodeArray') ) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getRequestHeadersFromMessage(message) {\n        let msg,\n            xmlDoc;\n        const headers = {};\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        msg = String.fromCharCode.apply(null, dataview);\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        const headerNameList = xmlDoc.getElementsByTagName('name');\n        const headerValueList = xmlDoc.getElementsByTagName('value');\n        for (let i = 0; i < headerNameList.length; i++) {\n            headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\n        }\n        // some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\n        // this is NOT w3c conform and license servers may reject the request!\n        // -> rename it to proper w3c definition!\n        if (headers.hasOwnProperty('Content')) {\n            headers['Content-Type'] = headers.Content;\n            delete headers.Content;\n        }\n        // some devices (Ex: LG SmartTVs) require content-type to be defined\n        if (!headers.hasOwnProperty('Content-Type')) {\n            headers['Content-Type'] = 'text/xml; charset=' + messageFormat;\n        }\n        return headers;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        let licenseRequest = null;\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        checkConfig();\n        const msg = String.fromCharCode.apply(null, dataview);\n        const xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        if (xmlDoc.getElementsByTagName('Challenge')[0]) {\n            const Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\n            if (Challenge) {\n                licenseRequest = BASE64.decode(Challenge);\n            }\n        } else if (xmlDoc.getElementsByTagName('parsererror').length) {\n            // In case it is not an XML doc, return the message itself\n            // There are CDM implementations of some devices (example: some smartTVs) that\n            // return directly the challenge without wrapping it in an xml doc\n            return message;\n        }\n\n        return licenseRequest;\n    }\n\n    function getLicenseServerURLFromInitData(initData) {\n        if (initData) {\n            const data = new DataView(initData);\n            const numRecords = data.getUint16(4, true);\n            let offset = 6;\n            const parser = new DOMParser();\n\n            for (let i = 0; i < numRecords; i++) {\n                // Parse the PlayReady Record header\n                const recordType = data.getUint16(offset, true);\n                offset += 2;\n                const recordLength = data.getUint16(offset, true);\n                offset += 2;\n                if (recordType !== 0x0001) {\n                    offset += recordLength;\n                    continue;\n                }\n\n                const recordData = initData.slice(offset, offset + recordLength);\n                const record = String.fromCharCode.apply(null, new Uint16Array(recordData));\n                const xmlDoc = parser.parseFromString(record, 'application/xml');\n\n                // First try <LA_URL>\n                if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\n                    const laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\n                    if (laurl) {\n                        return laurl;\n                    }\n                }\n\n                // Optionally, try <LUI_URL>\n                if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\n                    const luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\n                    if (luiurl) {\n                        return luiurl;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    function getInitData(cpData) {\n        // * desc@ getInitData\n        // *   generate PSSH data from PROHeader defined in MPD file\n        // *   PSSH format:\n        // *   size (4)\n        // *   box type(PSSH) (8)\n        // *   Protection SystemID (16)\n        // *   protection system data size (4) - length of decoded PROHeader\n        // *   decoded PROHeader data from MPD file\n        const PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\n        const playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\n\n        let byteCursor = 0;\n        let uint8arraydecodedPROHeader = null;\n\n        let PROSize,\n            PSSHSize,\n            PSSHBoxBuffer,\n            PSSHBox,\n            PSSHData;\n\n        checkConfig();\n        // Handle common encryption PSSH\n        if ('pssh' in cpData) {\n            return CommonEncryption.parseInitDataFromContentProtection(cpData, BASE64);\n        }\n        // Handle native MS PlayReady ContentProtection elements\n        if ('pro' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\n        }\n        else if ('prheader' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\n        }\n        else {\n            return null;\n        }\n\n        PROSize = uint8arraydecodedPROHeader.length;\n        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\n\n        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\n\n        PSSHBox = new Uint8Array(PSSHBoxBuffer);\n        PSSHData = new DataView(PSSHBoxBuffer);\n\n        PSSHData.setUint32(byteCursor, PSSHSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(PSSHBoxType, byteCursor);\n        byteCursor += PSSHBoxType.length;\n\n        PSSHBox.set(playreadySystemID, byteCursor);\n        byteCursor += playreadySystemID.length;\n\n        PSSHData.setUint32(byteCursor, PROSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\n        byteCursor += PROSize;\n\n        return PSSHBox.buffer;\n    }\n\n    /**\n     * It seems that some PlayReady implementations return their XML-based CDM\n     * messages using UTF16, while others return them as UTF8.  Use this function\n     * to modify the message format to expect when parsing CDM messages.\n     *\n     * @param {string} format the expected message format.  Either \"utf8\" or \"utf16\".\n     * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\n     */\n    function setPlayReadyMessageFormat(format) {\n        if (format !== 'utf8' && format !== 'utf16') {\n            throw new Error('Illegal PlayReady message format! -- ' + format);\n        }\n        messageFormat = format;\n    }\n\n    /**\n     * Initialize the Key system with protection data\n     * @param {Object} protectionData the protection data\n     */\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n\n    /**\n     * Get Playready Custom data\n     */\n    function getCDMData() {\n        let customData,\n            cdmData,\n            cdmDataBytes,\n            i;\n\n        checkConfig();\n        if (protData && protData.cdmData) {\n            // Convert custom data into multibyte string\n            customData = [];\n            for (i = 0; i < protData.cdmData.length; ++i) {\n                customData.push(protData.cdmData.charCodeAt(i));\n                customData.push(0);\n            }\n            customData = String.fromCharCode.apply(null, customData);\n\n            // Encode in Base 64 the custom data string\n            customData = BASE64.encode(customData);\n\n            // Initialize CDM data with Base 64 encoded custom data\n            // (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)\n            cdmData = PRCDMData.replace('%CUSTOMDATA%', customData);\n\n            // Convert CDM data into multibyte characters\n            cdmDataBytes = [];\n            for (i = 0; i < cdmData.length; ++i) {\n                cdmDataBytes.push(cdmData.charCodeAt(i));\n                cdmDataBytes.push(0);\n            }\n\n            return new Uint8Array(cdmDataBytes).buffer;\n        }\n\n        return null;\n    }\n\n    function getSessionId(/*cp*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        setPlayReadyMessageFormat: setPlayReadyMessageFormat,\n        init: init\n    };\n\n    return instance;\n}\n\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemW3CClearKey(config) {\n    let instance;\n    const BASE64 = config.BASE64;\n    const logger = config.debug.getLogger(instance);\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionData} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            const keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                const clearkeyID = jsonMsg.kids[i];\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n\n            logger.warn('ClearKey schemeIdURI is using W3C Common PSSH systemID (1077efec-c0b2-4d02-ace3-3c1e52e2fb4b) in Content Protection. See DASH-IF IOP v4.1 section 7.6.2.4');\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(/*cp*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemW3CClearKey.__dashjs_factory_name = 'KeySystemW3CClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemW3CClearKey); /* jshint ignore:line */\n\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Google Widevine DRM\n *\n * @class\n * @implements MediaPlayer.dependencies.protection.KeySystem\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = 'edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\nconst systemString = ProtectionConstants.WIDEVINE_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemWidevine(config) {\n\n    config = config || {};\n    let instance;\n    let protData = null;\n    const BASE64 = config.BASE64;\n\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage( /*message*/ ) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData( /*initData*/ ) {\n        return null;\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(cp) {\n        // Get sessionId from protectionData or from manifest\n        if (protData && protData.sessionId) {\n            return protData.sessionId;\n        } else if (cp && cp.sessionId) {\n            return cp.sessionId;\n        }\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        init: init,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId\n    };\n\n    return instance;\n}\n\nKeySystemWidevine.__dashjs_factory_name = 'KeySystemWidevine';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemWidevine); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Initial implementation of EME\n *\n * Implemented by Google Chrome prior to v36\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport KeyError from '../vo/KeyError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\n\nfunction ProtectionModel_01b(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n    const api = config.api;\n    const errHandler = config.errHandler;\n\n    let instance,\n        logger,\n        videoElement,\n        keySystem,\n        protectionKeyController,\n\n        // With this version of the EME APIs, sessionIDs are not assigned to\n        // sessions until the first key message is received.  We are assuming\n        // that in the case of multiple sessions, key messages will be received\n        // in the order that generateKeyRequest() is called.\n        // Holding spot for newly-created sessions until we determine whether or\n        // not the CDM supports sessionIDs\n        pendingSessions,\n\n        // List of sessions that have been initialized.  Only the first position will\n        // be used in the case that the CDM does not support sessionIDs\n        sessions,\n\n        // Not all CDMs support the notion of sessionIDs.  Without sessionIDs\n        // there is no way for us to differentiate between sessions, therefore\n        // we must only allow a single session.  Once we receive the first key\n        // message we can set this flag to determine if more sessions are allowed\n        moreSessionsAllowed,\n\n        // This is our main event handler for all desired HTMLMediaElement events\n        // related to EME.  These events are translated into our API-independent\n        // versions of the same events\n        eventHandler;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        videoElement = null;\n        keySystem = null;\n        pendingSessions = [];\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        if (videoElement) {\n            removeEventListeners();\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            closeKeySession(sessions[i]);\n        }\n        eventBus.trigger(events.TEARDOWN_COMPLETE);\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < pendingSessions.length; i++) {\n            retVal.push(pendingSessions[i].initData);\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        let ve = videoElement;\n        if (!ve) { // Must have a video element to do this capability tests\n            ve = document.createElement('video');\n        }\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\n            const configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                //let audios = configs[configIdx].audioCapabilities;\n                const videos = configs[configIdx].videoCapabilities;\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== '') {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied! -- No valid audio/video content configurations detected!'});\n        }\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystem = keySystemAccess.keySystem;\n        eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement) {\n            return;\n        }\n\n        // Replacing the previous element\n        if (videoElement) {\n            removeEventListeners();\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.keyerror, eventHandler);\n            videoElement.addEventListener(api.needkey, eventHandler);\n            videoElement.addEventListener(api.keymessage, eventHandler);\n            videoElement.addEventListener(api.keyadded, eventHandler);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        }\n    }\n\n    function createKeySession(initData /*, protData, keySystemType */) {\n        if (!keySystem) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Determine if creating a new session is allowed\n        if (moreSessionsAllowed || sessions.length === 0) {\n            const newSession = { // Implements SessionToken\n                sessionID: null,\n                initData: initData,\n                getSessionID: function () {\n                    return this.sessionID;\n                },\n\n                getExpirationTime: function () {\n                    return NaN;\n                },\n\n                getSessionType: function () {\n                    return 'temporary';\n                }\n            };\n            pendingSessions.push(newSession);\n\n            // Send our request to the CDM\n            videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(initData));\n\n            return newSession;\n\n        } else {\n            throw new Error('Multiple sessions not allowed!');\n        }\n\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const sessionID = sessionToken.sessionID;\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the CDM\n            videoElement[api.addKey](keySystem.systemString,\n                new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionID);\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            for (let i = 0; i < message.keyPairs.length; i++) {\n                videoElement[api.addKey](keySystem.systemString,\n                    message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID);\n            }\n        }\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the CDM\n        try {\n            videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionID);\n        } catch (error) {\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {data: null, error: 'Error closing session (' + sessionToken.sessionID + ') ' + error.message});\n        }\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                let sessionToken = null;\n                switch (event.type) {\n                    case api.needkey:\n                        let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                        eventBus.trigger(events.NEED_KEY, {key: new NeedKey(initData, 'cenc')});\n                        break;\n\n                    case api.keyerror:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            let msg = '';\n                            switch (event.errorCode.code) {\n                                case 1:\n                                    msg += 'MEDIA_KEYERR_UNKNOWN - An unspecified error occurred. This value is used for errors that don\\'t match any of the other codes.';\n                                    break;\n                                case 2:\n                                    msg += 'MEDIA_KEYERR_CLIENT - The Key System could not be installed or updated.';\n                                    break;\n                                case 3:\n                                    msg += 'MEDIA_KEYERR_SERVICE - The message passed into update indicated an error from the license service.';\n                                    break;\n                                case 4:\n                                    msg += 'MEDIA_KEYERR_OUTPUT - There is no available output device with the required characteristics for the content protection system.';\n                                    break;\n                                case 5:\n                                    msg += 'MEDIA_KEYERR_HARDWARECHANGE - A hardware configuration change caused a content protection error.';\n                                    break;\n                                case 6:\n                                    msg += 'MEDIA_KEYERR_DOMAIN - An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.';\n                                    break;\n                            }\n                            msg += '  System Code = ' + event.systemCode;\n                            // TODO: Build error string based on key error\n                            eventBus.trigger(events.KEY_ERROR, {data: new KeyError(sessionToken, msg)});\n                        } else {\n                            logger.error('No session token found for key error');\n                        }\n                        break;\n\n                    case api.keyadded:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            logger.debug('DRM: Key added.');\n                            eventBus.trigger(events.KEY_ADDED, {data: sessionToken});//TODO not sure anything is using sessionToken? why there?\n                        } else {\n                            logger.debug('No session token found for key added');\n                        }\n                        break;\n\n                    case api.keymessage:\n                        // If this CDM does not support session IDs, we will be limited\n                        // to a single session\n                        moreSessionsAllowed = (event.sessionId !== null) && (event.sessionId !== undefined);\n\n                        // SessionIDs supported\n                        if (moreSessionsAllowed) {\n                            // Attempt to find an uninitialized token with this sessionID\n                            sessionToken = findSessionByID(sessions, event.sessionId);\n                            if (!sessionToken && pendingSessions.length > 0) {\n\n                                // This is the first message for our latest session, so set the\n                                // sessionID and add it to our list\n                                sessionToken = pendingSessions.shift();\n                                sessions.push(sessionToken);\n                                sessionToken.sessionID = event.sessionId;\n\n                                eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\n                            }\n                        } else if (pendingSessions.length > 0) { // SessionIDs not supported\n                            sessionToken = pendingSessions.shift();\n                            sessions.push(sessionToken);\n\n                            if (pendingSessions.length !== 0) {\n                                errHandler.mediaKeyMessageError('Multiple key sessions were creates with a user-agent that does not support sessionIDs!! Unpredictable behavior ahead!');\n                            }\n                        }\n\n                        if (sessionToken) {\n                            let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n\n                            // For ClearKey, the spec mandates that you pass this message to the\n                            // addKey method, so we always save it to the token since there is no\n                            // way to tell which key system is in use\n                            sessionToken.keyMessage = message;\n                            eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(sessionToken, message, event.defaultURL)});\n\n                        } else {\n                            logger.warn('No session token found for key message');\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    /**\n     * Helper function to retrieve the stored session token based on a given\n     * sessionID value\n     *\n     * @param {Array} sessionArray - the array of sessions to search\n     * @param {*} sessionID - the sessionID to search for\n     * @returns {*} the session token with the given sessionID\n     */\n    function findSessionByID(sessionArray, sessionID) {\n        if (!sessionID || !sessionArray) {\n            return null;\n        } else {\n            const len = sessionArray.length;\n            for (let i = 0; i < len; i++) {\n                if (sessionArray[i].sessionID == sessionID) {\n                    return sessionArray[i];\n                }\n            }\n            return null;\n        }\n    }\n\n    function removeEventListeners() {\n        videoElement.removeEventListener(api.keyerror, eventHandler);\n        videoElement.removeEventListener(api.needkey, eventHandler);\n        videoElement.removeEventListener(api.keymessage, eventHandler);\n        videoElement.removeEventListener(api.keyadded, eventHandler);\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        stop: reset,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_01b.__dashjs_factory_name = 'ProtectionModel_01b';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_01b); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Most recent EME implementation\n *\n * Implemented by Google Chrome v36+ (Windows, OSX, Linux)\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport KeyError from '../vo/KeyError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nfunction ProtectionModel_21Jan2015(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n\n    let instance,\n        logger,\n        keySystem,\n        videoElement,\n        mediaKeys,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        keySystem = null;\n        videoElement = null;\n        mediaKeys = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        const numSessions = sessions.length;\n        let session;\n\n        if (numSessions !== 0) {\n            // Called when we are done closing a session.  Success or fail\n            const done = function (session) {\n                removeSession(session);\n                if (sessions.length === 0) {\n                    if (videoElement) {\n                        videoElement.removeEventListener('encrypted', eventHandler);\n                        videoElement.setMediaKeys(null).then(function () {\n                            eventBus.trigger(events.TEARDOWN_COMPLETE);\n                        });\n                    } else {\n                        eventBus.trigger(events.TEARDOWN_COMPLETE);\n                    }\n                }\n            };\n            for (let i = 0; i < numSessions; i++) {\n                session = sessions[i];\n                (function (s) {\n                    // Override closed promise resolver\n                    session.session.closed.then(function () {\n                        done(s);\n                    });\n                    // Close the session and handle errors, otherwise promise\n                    // resolver above will be called\n                    closeKeySessionInternal(session).catch(function () {\n                        done(s);\n                    });\n\n                })(session);\n            }\n        } else {\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\n        }\n    }\n\n    function stop() {\n        // Close and remove not usable sessions\n        let session;\n        for (let i = 0; i < sessions.length; i++) {\n            session = sessions[i];\n            if (!session.getUsable()) {\n                removeSession(session);\n                closeKeySessionInternal(session);\n            }\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i].initData) {\n                retVal.push(sessions[i].initData);\n            }\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        requestKeySystemAccessInternal(ksConfigurations, 0);\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystemAccess.mksa.createMediaKeys().then(function (mkeys) {\n            keySystem = keySystemAccess.keySystem;\n            mediaKeys = mkeys;\n            if (videoElement) {\n                videoElement.setMediaKeys(mediaKeys).then(function () {\n                    eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n                });\n            } else {\n                eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n            }\n\n        }).catch(function () {\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, {error: 'Error selecting keys system (' + keySystemAccess.keySystem.systemString + ')! Could not create MediaKeys -- TODO'});\n        });\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener('encrypted', eventHandler);\n            if (videoElement.setMediaKeys) {\n                videoElement.setMediaKeys(null);\n            }\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener('encrypted', eventHandler);\n            if (videoElement.setMediaKeys && mediaKeys) {\n                videoElement.setMediaKeys(mediaKeys);\n            }\n        }\n    }\n\n    function setServerCertificate(serverCertificate) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not set server certificate until you have selected a key system');\n        }\n        mediaKeys.setServerCertificate(serverCertificate).then(function () {\n            logger.info('DRM: License server certificate successfully updated.');\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED);\n        }).catch(function (error) {\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED, {error: 'Error updating server certificate -- ' + error.name});\n        });\n    }\n\n    function createKeySession(initData, protData, sessionType) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        const session = mediaKeys.createSession(sessionType);\n        const sessionToken = createSessionToken(session, initData, sessionType);\n        const ks = this.getKeySystem();\n\n        // Generate initial key request.\n        // keyids type is used for clearkey when keys are provided directly in the protection data and then request to a license server is not needed\n        const dataType = ks.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING && protData && protData.clearkeys ? 'keyids' : 'cenc';\n        session.generateRequest(dataType, initData).then(function () {\n            logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\n        }).catch(function (error) {\n            // TODO: Better error string\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Error generating key request -- ' + error.name});\n        });\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const session = sessionToken.session;\n\n        // Send our request to the key session\n        if (protectionKeyController.isClearKey(keySystem)) {\n            message = message.toJWK();\n        }\n        session.update(message).catch(function (error) {\n            eventBus.trigger(events.KEY_ERROR, {data: new KeyError(sessionToken, 'Error sending update() message! ' + error.name)});\n        });\n    }\n\n    function loadKeySession(sessionID, initData, sessionType) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not load sessions until you have selected a key system');\n        }\n\n        // Check if session Id is not already loaded or loading\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessionID === sessions[i].sessionId) {\n                logger.warn('DRM: Ignoring session ID because we have already seen it!');\n                return;\n            }\n        }\n\n        const session = mediaKeys.createSession(sessionType);\n        const sessionToken = createSessionToken(session, initData, sessionType, sessionID);\n\n        // Load persisted session data into our newly created session object\n        session.load(sessionID).then(function (success) {\n            if (success) {\n                logger.debug('DRM: Session loaded.  SessionID = ' + sessionToken.getSessionID());\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\n            } else {\n                removeSession(sessionToken);\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Could not load session! Invalid Session ID (' + sessionID + ')'});\n            }\n        }).catch(function (error) {\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Could not load session (' + sessionID + ')! ' + error.name});\n        });\n    }\n\n    function removeKeySession(sessionToken) {\n        const session = sessionToken.session;\n\n        session.remove().then(function () {\n            logger.debug('DRM: Session removed.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {data: sessionToken.getSessionID()});\n        }, function (error) {\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {data: null, error: 'Error removing session (' + sessionToken.getSessionID() + '). ' + error.name});\n\n        });\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the key session\n        closeKeySessionInternal(sessionToken).catch(function (error) {\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {data: null, error: 'Error closing session (' + sessionToken.getSessionID() + ') ' + error.name});\n        });\n    }\n\n    function requestKeySystemAccessInternal(ksConfigurations, idx) {\n\n        if (navigator.requestMediaKeySystemAccess === undefined ||\n            typeof navigator.requestMediaKeySystemAccess !== 'function') {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Insecure origins are not allowed'});\n            return;\n        }\n\n        (function (i) {\n            const keySystem = ksConfigurations[i].ks;\n            const configs = ksConfigurations[i].configs;\n            navigator.requestMediaKeySystemAccess(keySystem.systemString, configs).then(function (mediaKeySystemAccess) {\n                // Chrome 40 does not currently implement MediaKeySystemAccess.getConfiguration()\n                const configuration = (typeof mediaKeySystemAccess.getConfiguration === 'function') ?\n                        mediaKeySystemAccess.getConfiguration() : null;\n                const keySystemAccess = new KeySystemAccess(keySystem, configuration);\n                keySystemAccess.mksa = mediaKeySystemAccess;\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {data: keySystemAccess});\n\n            }).catch(function (error) {\n                if (++i < ksConfigurations.length) {\n                    requestKeySystemAccessInternal(ksConfigurations, i);\n                } else {\n                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied! ' + error.message});\n                }\n            });\n        })(idx);\n    }\n\n    function closeKeySessionInternal(sessionToken) {\n        const session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener('keystatuseschange', sessionToken);\n        session.removeEventListener('message', sessionToken);\n\n        // Send our request to the key session\n        return session.close();\n    }\n\n    // This is our main event handler for all desired HTMLMediaElement events\n    // related to EME.  These events are translated into our API-independent\n    // versions of the same events\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case 'encrypted':\n                        if (event.initData) {\n                            let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(events.NEED_KEY, {key: new NeedKey(initData, event.initDataType)});\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n    function removeSession(token) {\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === token) {\n                sessions.splice(i,1);\n                logger.debug('DRM: Session removed.  SessionID = ' + token.getSessionID());\n                break;\n            }\n        }\n    }\n\n    function parseKeyStatus(args) {\n        // Edge and Chrome implement different version of keystatues, param are not on same order\n        let status, keyId;\n        if (args && args.length > 0) {\n            if (args[0]) {\n                if (typeof args[0] === 'string') {\n                    status = args[0];\n                } else {\n                    keyId = args[0];\n                }\n            }\n\n            if (args[1]) {\n                if (typeof args[1] === 'string') {\n                    status = args[1];\n                } else {\n                    keyId = args[1];\n                }\n            }\n        }\n        return {\n            status: status,\n            keyId: keyId\n        };\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(session, initData, sessionType, sessionID) {\n        const token = { // Implements SessionToken\n            session: session,\n            initData: initData,\n            sessionId: sessionID,\n\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case 'keystatuseschange':\n                        eventBus.trigger(events.KEY_STATUSES_CHANGED, {data: this});\n                        event.target.keyStatuses.forEach(function () {\n                            let keyStatus = parseKeyStatus(arguments);\n                            switch (keyStatus.status) {\n                                case 'expired':\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, {error: 'License has expired'});\n                                    break;\n                                default:\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, keyStatus);\n                                    break;\n                            }\n                        });\n                        break;\n\n                    case 'message':\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(this, message, undefined, event.messageType)});\n                        break;\n                }\n            },\n\n            getSessionID: function () {\n                return session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return session.expiration;\n            },\n\n            getKeyStatuses: function () {\n                return session.keyStatuses;\n            },\n\n            getUsable: function () {\n                let usable  = false;\n                session.keyStatuses.forEach(function () {\n                    let keyStatus = parseKeyStatus(arguments);\n                    if (keyStatus.status === 'usable') {\n                        usable = true;\n                    }\n                });\n                return usable;\n            },\n\n            getSessionType: function () {\n                return sessionType;\n            }\n        };\n\n        // Add all event listeners\n        session.addEventListener('keystatuseschange', token);\n        session.addEventListener('message', token);\n\n        // Register callback for session closed Promise\n        session.closed.then(function () {\n            removeSession(token);\n            logger.debug('DRM: Session closed.  SessionID = ' + token.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {data: token.getSessionID()});\n        });\n\n        // Add to our session list\n        sessions.push(token);\n\n        return token;\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        setServerCertificate: setServerCertificate,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        stop: stop,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_21Jan2015.__dashjs_factory_name = 'ProtectionModel_21Jan2015';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_21Jan2015); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.\n *\n * Implemented by Internet Explorer 11 (Windows 8.1)\n *\n * @implements ProtectionModel\n * @class\n */\n\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport KeyError from '../vo/KeyError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\n\nfunction ProtectionModel_3Feb2014(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n    const api = config.api;\n\n    let instance,\n        logger,\n        videoElement,\n        keySystem,\n        mediaKeys,\n        keySystemAccess,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        videoElement = null;\n        keySystem = null;\n        mediaKeys = null;\n        keySystemAccess = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        try {\n            for (let i = 0; i < sessions.length; i++) {\n                closeKeySession(sessions[i]);\n            }\n            if (videoElement) {\n                videoElement.removeEventListener(api.needkey, eventHandler);\n            }\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\n        } catch (error) {\n            eventBus.trigger(events.TEARDOWN_COMPLETE, { error: 'Error tearing down key sessions and MediaKeys! -- ' + error.message });\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\n            const configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                const audios = configs[configIdx].audioCapabilities;\n                const videos = configs[configIdx].videoCapabilities;\n\n                // Look for supported audio container/codecs\n                if (audios && audios.length !== 0) {\n                    supportedAudio = []; // Indicates that we have a requested audio config\n                    for (let audioIdx = 0; audioIdx < audios.length; audioIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType)) {\n                            supportedAudio.push(audios[audioIdx]);\n                        }\n                    }\n                }\n\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType)) {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! -- No valid audio/video content configurations detected!' });\n        }\n    }\n\n    function selectKeySystem(ksAccess) {\n        try {\n            mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);\n            keySystem = ksAccess.keySystem;\n            keySystemAccess = ksAccess;\n            if (videoElement) {\n                setMediaKeys();\n            }\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n        } catch (error) {\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, { error: 'Error selecting keys system (' + keySystem.systemString + ')! Could not create MediaKeys -- TODO' });\n        }\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener(api.needkey, eventHandler);\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.needkey, eventHandler);\n            if (mediaKeys) {\n                setMediaKeys();\n            }\n        }\n    }\n\n    function createKeySession(initData, protData, sessionType, cdmData) {\n        if (!keySystem || !mediaKeys || !keySystemAccess) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Use the first video capability for the contentType.\n        // TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format\n\n        // If player is trying to playback Audio only stream - don't error out.\n        let capabilities = null;\n\n        if (keySystemAccess.ksConfiguration.videoCapabilities && keySystemAccess.ksConfiguration.videoCapabilities.length > 0) {\n            capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0];\n        }\n\n        if (capabilities === null && keySystemAccess.ksConfiguration.audioCapabilities && keySystemAccess.ksConfiguration.audioCapabilities.length > 0) {\n            capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0];\n        }\n\n        if (capabilities === null) {\n            throw new Error('Can not create sessions for unknown content types.');\n        }\n\n        const contentType = capabilities.contentType;\n        const session = mediaKeys.createSession(contentType, new Uint8Array(initData), cdmData ? new Uint8Array(cdmData) : null);\n        const sessionToken = createSessionToken(session, initData);\n\n        // Add all event listeners\n        session.addEventListener(api.error, sessionToken);\n        session.addEventListener(api.message, sessionToken);\n        session.addEventListener(api.ready, sessionToken);\n        session.addEventListener(api.close, sessionToken);\n\n        // Add to our session list\n        sessions.push(sessionToken);\n        logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n        eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const session = sessionToken.session;\n\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the key session\n            session.update(new Uint8Array(message));\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            session.update(new Uint8Array(message.toJWK()));\n        }\n    }\n\n    /**\n     * Close the given session and release all associated keys.  Following\n     * this call, the sessionToken becomes invalid\n     *\n     * @param {Object} sessionToken - the session token\n     */\n    function closeKeySession(sessionToken) {\n        const session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener(api.error, sessionToken);\n        session.removeEventListener(api.message, sessionToken);\n        session.removeEventListener(api.ready, sessionToken);\n        session.removeEventListener(api.close, sessionToken);\n\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === sessionToken) {\n                sessions.splice(i, 1);\n                break;\n            }\n        }\n\n        // Send our request to the key session\n        session[api.release]();\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case api.needkey:\n                        if (event.initData) {\n                            const initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, 'cenc') });\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    // IE11 does not let you set MediaKeys until it has entered a certain\n    // readyState, so we need this logic to ensure we don't set the keys\n    // too early\n    function setMediaKeys() {\n        let boundDoSetKeys = null;\n        const doSetKeys = function () {\n            videoElement.removeEventListener('loadedmetadata', boundDoSetKeys);\n            videoElement[api.setMediaKeys](mediaKeys);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        };\n        if (videoElement.readyState >= 1) {\n            doSetKeys();\n        } else {\n            boundDoSetKeys = doSetKeys.bind(this);\n            videoElement.addEventListener('loadedmetadata', boundDoSetKeys);\n        }\n\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(keySession, initData) {\n        return {\n            // Implements SessionToken\n            session: keySession,\n            initData: initData,\n\n            getSessionID: function () {\n                return this.session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return NaN;\n            },\n\n            getSessionType: function () {\n                return 'temporary';\n            },\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case api.error:\n                        let errorStr = 'KeyError'; // TODO: Make better string from event\n                        eventBus.trigger(events.KEY_ERROR, { data: new KeyError(this, errorStr) });\n                        break;\n                    case api.message:\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, event.destinationURL) });\n                        break;\n                    case api.ready:\n                        logger.debug('DRM: Key added.');\n                        eventBus.trigger(events.KEY_ADDED);\n                        break;\n\n                    case api.close:\n                        logger.debug('DRM: Session closed.  SessionID = ' + this.getSessionID());\n                        eventBus.trigger(events.KEY_SESSION_CLOSED, { data: this.getSessionID() });\n                        break;\n                }\n            }\n        };\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        stop: reset,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_3Feb2014.__dashjs_factory_name = 'ProtectionModel_3Feb2014';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_3Feb2014); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CableLabs ClearKey license server implementation\n *\n * For testing purposes and evaluating potential uses for ClearKey, we have developed\n * a dirt-simple API for requesting ClearKey licenses from a remote server.\n *\n * @implements LicenseServer\n * @class\n */\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\n\nfunction ClearKey() {\n\n    let instance;\n\n    function getServerURLFromMessage(url, message/*, messageType*/) {\n        // Build ClearKey server query string\n        const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n        url += '/?';\n        for (let i = 0; i < jsonMsg.kids.length; i++) {\n            url += jsonMsg.kids[i] + '&';\n        }\n        url = url.substring(0, url.length - 1);\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'GET';\n    }\n\n    function getResponseType(/*keySystemStr*/) {\n        return 'json';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        if (!serverResponse.hasOwnProperty('keys')) {\n            return null;\n        }\n        let keyPairs = [];\n        for (let i = 0; i < serverResponse.keys.length; i++) {\n            let keypair = serverResponse.keys[i];\n            let keyid = keypair.kid.replace(/=/g, '');\n            let key = keypair.k.replace(/=/g, '');\n\n            keyPairs.push(new KeyPair(keyid, key));\n        }\n        return new ClearKeyKeySet(keyPairs);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nClearKey.__dashjs_factory_name = 'ClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(ClearKey); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CastLabs DRMToday License Server implementation\n *\n * @implements LicenseServer\n * @class\n */\n\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nfunction DRMToday(config) {\n\n    config = config || {};\n    const BASE64 = config.BASE64;\n\n    const keySystems = {};\n    keySystems[ProtectionConstants.WIDEVINE_KEYSTEM_STRING] = {\n        responseType: 'json',\n        getLicenseMessage: function (response) {\n            return BASE64.decodeArray(response.license);\n        },\n        getErrorResponse: function (response) {\n            return response;\n        }\n    };\n    keySystems[ProtectionConstants.PLAYREADY_KEYSTEM_STRING] = {\n        responseType: 'arraybuffer',\n        getLicenseMessage: function (response) {\n            return response;\n        },\n        getErrorResponse: function (response) {\n            return String.fromCharCode.apply(null, new Uint8Array(response));\n        }\n    };\n\n    let instance;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].responseType;\n    }\n\n    function getLicenseMessage(serverResponse, keySystemStr/*, messageType*/) {\n        checkConfig();\n        return keySystems[keySystemStr].getLicenseMessage(serverResponse);\n    }\n\n    function getErrorResponse(serverResponse, keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].getErrorResponse(serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nDRMToday.__dashjs_factory_name = 'DRMToday';\nexport default dashjs.FactoryMaker.getSingletonFactory(DRMToday); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global escape: true */\n\n/**\n * Microsoft PlayReady Test License Server\n *\n * For testing content that uses the PlayReady test server at\n *\n * @implements LicenseServer\n * @class\n */\n\nfunction PlayReady() {\n\n    let instance;\n\n    const soap = 'http://schemas.xmlsoap.org/soap/envelope/';\n\n    function uintToString(arrayBuffer) {\n        const encodedString = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\n        const decodedString = decodeURIComponent(escape(encodedString));\n        return decodedString;\n    }\n\n    function parseServerResponse(serverResponse) {\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n\n            if (fault) {\n                return null;\n            }\n        }\n        return serverResponse;\n    }\n\n    function parseErrorResponse(serverResponse) {\n        let faultstring = '';\n        let statusCode = '';\n        let message = '';\n        let idStart = -1;\n        let idEnd = -1;\n\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n            const detail = fault ? fault.getElementsByTagName('detail')[0] : null;\n            const exception = detail ? detail.getElementsByTagName('Exception')[0] : null;\n            let node = null;\n\n            if (fault === null) {\n                return stringResponse;\n            }\n\n            node = fault.getElementsByTagName('faultstring')[0].firstChild;\n            faultstring = node ? node.nodeValue : null;\n\n            if (exception !== null) {\n                node = exception.getElementsByTagName('StatusCode')[0];\n                statusCode = node ? node.firstChild.nodeValue : null;\n                node = exception.getElementsByTagName('Message')[0];\n                message = node ? node.firstChild.nodeValue : null;\n                idStart = message ? message.lastIndexOf('[') + 1 : -1;\n                idEnd = message ? message.indexOf(']') : -1;\n                message = message ? message.substring(idStart, idEnd) : '';\n            }\n        }\n\n        let errorString = `code: ${statusCode}, name: ${faultstring}`;\n        if (message) {\n            errorString += `, message: ${message}`;\n        }\n\n        return errorString;\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return parseServerResponse.call(this, serverResponse);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return parseErrorResponse.call(this, serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nPlayReady.__dashjs_factory_name = 'PlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(PlayReady); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nfunction Widevine() {\n\n    let instance;\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return serverResponse;\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nWidevine.__dashjs_factory_name = 'Widevine';\nexport default dashjs.FactoryMaker.getSingletonFactory(Widevine); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc A collection of ClearKey encryption keys with an (optional) associated\n *  type\n * @ignore\n */\nclass ClearKeyKeySet {\n    /**\n     * @param {Array.<KeyPair>} keyPairs\n     * @param {string} type the type of keys in this set.  One of either 'persistent'\n     * or 'temporary'.  Can also be null or undefined.\n     * @class\n     * @ignore\n     */\n    constructor(keyPairs, type) {\n        if (type && type !== 'persistent' && type !== 'temporary')\n            throw new Error('Invalid ClearKey key set type!  Must be one of \\'persistent\\' or \\'temporary\\'');\n        this.keyPairs = keyPairs;\n        this.type = type;\n    }\n\n    /**\n     * Convert this key set to its JSON Web Key (JWK) representation\n     *\n     * @return {ArrayBuffer} JWK object UTF-8 encoded as ArrayBuffer\n     */\n    toJWK() {\n        let i;\n        let numKeys = this.keyPairs.length;\n        let jwk = {keys: []};\n\n        for (i = 0; i < numKeys; i++) {\n            let key = {\n                kty: 'oct',\n                alg: 'A128KW',\n                kid: this.keyPairs[i].keyID,\n                k: this.keyPairs[i].key\n            };\n            jwk.keys.push(key);\n        }\n        if (this.type) {\n            jwk.type = this.type;\n        }\n        let jwkString = JSON.stringify(jwk);\n        const len = jwkString.length;\n\n        // Convert JSON string to ArrayBuffer\n        let buf = new ArrayBuffer(len);\n        let bView = new Uint8Array(buf);\n        for (i = 0; i < len; i++)\n            bView[i] = jwkString.charCodeAt(i);\n        return buf;\n    }\n}\n\nexport default ClearKeyKeySet;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc EME-independent KeyError\n * @ignore\n */\nclass KeyError {\n    /**\n     * @param {Object} sessionToken the key session to which this error is associated\n     * @param {string} errorString an informational error message\n     * @class\n     * @deprecated Newest versions of EME APIs will not use this error object\n     */\n    constructor(sessionToken, errorString) {\n        this.sessionToken = sessionToken;\n        this.error = errorString;\n    }\n}\n\nexport default KeyError;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc EME-independent KeyMessage\n * @ignore\n */\nclass KeyMessage {\n    /**\n     * @param {SessionToken} sessionToken the session\n     * to which the key message is associated\n     * @param {ArrayBuffer} message the key message\n     * @param {string} defaultURL license acquisition URL provided by the CDM\n     * @param {string} messageType Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @class\n     */\n    constructor(sessionToken, message, defaultURL, messageType) {\n        this.sessionToken = sessionToken;\n        this.message = message;\n        this.defaultURL = defaultURL;\n        this.messageType = messageType ? messageType : 'license-request';\n    }\n}\n\nexport default KeyMessage;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Represents a 128-bit keyID and 128-bit encryption key\n * @ignore\n */\nclass KeyPair {\n    /**\n     * @param {string} keyID 128-bit key ID, base64 encoded, with no padding\n     * @param {string} key 128-bit encryption key, base64 encoded, with no padding\n     * @class\n     * @ignore\n     */\n    constructor(keyID, key) {\n        this.keyID = keyID;\n        this.key = key;\n    }\n}\n\nexport default KeyPair;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Creates a new key system access token.  Represents a valid key system for\n * given piece of content and key system requirements.  Used to initialize license\n * acquisition operations.\n * @ignore\n */\nclass KeySystemAccess {\n    /**\n     * @param {MediaPlayer.dependencies.protection.KeySystem} keySystem the key system\n     * @param {KeySystemConfiguration} ksConfiguration the\n     * subset of configurations passed to the key system access request that are supported\n     * by this user agent\n     * @class\n     * @ignore\n     */\n    constructor(keySystem, ksConfiguration) {\n        this.keySystem = keySystem;\n        this.ksConfiguration = ksConfiguration;\n    }\n}\n\nexport default KeySystemAccess;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc Represents a set of configurations that describe the capabilities desired for\n *  support by a given CDM\n * @ignore\n */\nclass KeySystemConfiguration {\n    /**\n     * @param {Array.<MediaCapability>} audioCapabilities array of\n     * desired audio capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {Array.<MediaCapability>} videoCapabilities array of\n     * desired video capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {string} distinctiveIdentifier desired use of distinctive identifiers.\n     * One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {string} persistentState desired support for persistent storage of\n     * key systems.  One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {Array.<string>} sessionTypes List of session types that must\n     * be supported by the key system\n     * @class\n     */\n    constructor(audioCapabilities, videoCapabilities, distinctiveIdentifier, persistentState, sessionTypes) {\n        this.initDataTypes = [ 'cenc' ];\n        if (audioCapabilities && audioCapabilities.length) {\n            this.audioCapabilities = audioCapabilities;\n        }\n        if (videoCapabilities && videoCapabilities.length) {\n            this.videoCapabilities = videoCapabilities;\n        }\n        this.distinctiveIdentifier = distinctiveIdentifier;\n        this.persistentState = persistentState;\n        this.sessionTypes = sessionTypes;\n    }\n}\n\nexport default KeySystemConfiguration;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc A media capability\n * @ignore\n */\nclass MediaCapability {\n    /**\n     * @param {string} contentType MIME type and codecs (RFC6386)\n     * @param {string} robustness\n     * @class\n     * @ignore\n     */\n    constructor(contentType, robustness) {\n        this.contentType = contentType;\n        this.robustness = robustness;\n    }\n}\n\nexport default MediaCapability;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc NeedKey\n * @ignore\n */\nclass NeedKey {\n    /**\n     * @param {ArrayBuffer} initData the initialization data\n     * @param {string} initDataType initialization data type\n     * @class\n     */\n    constructor(initData, initDataType) {\n        this.initData = initData;\n        this.initDataType = initDataType;\n    }\n}\n\nexport default NeedKey;\n"]}