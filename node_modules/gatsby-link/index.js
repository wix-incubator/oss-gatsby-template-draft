"use strict";

exports.__esModule = true;
exports.navigateTo = undefined;

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _objectWithoutProperties2 = require("babel-runtime/helpers/objectWithoutProperties");

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactRouterDom = require("react-router-dom");

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var pathPrefix = ""; /*global __PREFIX_PATHS__, __PATH_PREFIX__ */

if (typeof __PREFIX_PATHS__ !== "undefined" && __PREFIX_PATHS__) {
  pathPrefix = __PATH_PREFIX__;
}

var NavLinkPropTypes = {
  activeClassName: _propTypes2.default.string,
  activeStyle: _propTypes2.default.object,
  exact: _propTypes2.default.bool,
  strict: _propTypes2.default.bool,
  isActive: _propTypes2.default.func,
  location: _propTypes2.default.object
};

var GatsbyLink = function (_React$Component) {
  (0, _inherits3.default)(GatsbyLink, _React$Component);

  function GatsbyLink(props) {
    (0, _classCallCheck3.default)(this, GatsbyLink);

    var _this = (0, _possibleConstructorReturn3.default)(this, _React$Component.call(this));

    _this.state = {
      to: pathPrefix + props.to
    };
    return _this;
  }

  GatsbyLink.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (this.props.to !== nextProps.to) {
      this.setState({
        to: pathPrefix + nextProps.to
      });
      ___loader.enqueue(this.state.to);
    }
  };

  GatsbyLink.prototype.componentDidMount = function componentDidMount() {
    ___loader.enqueue(this.state.to);
  };

  GatsbyLink.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        onClick = _props.onClick,
        rest = (0, _objectWithoutProperties3.default)(_props, ["onClick"]);

    if ((0, _keys2.default)(NavLinkPropTypes).some(function (propName) {
      return _this2.props[propName];
    })) {
      var El = _reactRouterDom.NavLink;
    } else {
      var El = _reactRouterDom.Link;
    }

    return _react2.default.createElement(El, (0, _extends3.default)({
      onClick: function (_onClick) {
        function onClick(_x) {
          return _onClick.apply(this, arguments);
        }

        onClick.toString = function () {
          return _onClick.toString();
        };

        return onClick;
      }(function (e) {
        onClick && onClick(e);
        if (e.button === 0 && // ignore right clicks
        !_this2.props.target && // let browser handle "target=_blank"
        !e.defaultPrevented && // onClick prevented default
        !e.metaKey && // ignore clicks with modifier keys...
        !e.altKey && !e.ctrlKey && !e.shiftKey) {
          // Is this link pointing to a hash on the same page? If so,
          // just scroll there.
          var pathname = _this2.state.to;
          if (pathname.split("#").length > 1) {
            pathname = pathname.split("#").slice(0, -1).join("");
          }
          if (pathname === window.location.pathname) {
            var hashFragment = _this2.state.to.split("#").slice(1).join("#");
            var element = document.getElementById(hashFragment);
            if (element !== null) {
              element.scrollIntoView();
              return true;
            }
          }

          // In production, make sure the necessary scripts are
          // loaded before continuing.
          if (process.env.NODE_ENV === "production") {
            e.preventDefault();
            window.___navigateTo(_this2.state.to);
          }
        }
      })
    }, rest, {
      to: this.state.to
    }));
  };

  return GatsbyLink;
}(_react2.default.Component);

GatsbyLink.contextTypes = {
  router: _propTypes2.default.object
};

exports.default = GatsbyLink;
var navigateTo = exports.navigateTo = function navigateTo(pathname) {
  window.___navigateTo(pathPrefix + pathname);
};