"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var grayMatter = require("gray-matter");
var crypto = require("crypto");

module.exports = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(_ref2) {
    var node = _ref2.node,
        getNode = _ref2.getNode,
        loadNodeContent = _ref2.loadNodeContent,
        boundActionCreators = _ref2.boundActionCreators;
    var createNode, createParentChildLink, content, data, contentDigest, markdownNode;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            createNode = boundActionCreators.createNode, createParentChildLink = boundActionCreators.createParentChildLink;

            // We only care about markdown content.

            if (!(node.internal.mediaType !== "text/x-markdown")) {
              _context.next = 3;
              break;
            }

            return _context.abrupt("return");

          case 3:
            _context.next = 5;
            return loadNodeContent(node);

          case 5:
            content = _context.sent;
            data = grayMatter(content);
            contentDigest = crypto.createHash("md5").update((0, _stringify2.default)(data)).digest("hex");
            markdownNode = {
              id: node.id + " >>> MarkdownRemark",
              children: [],
              parent: node.id,
              internal: {
                content: content,
                contentDigest: contentDigest,
                type: "MarkdownRemark"
              }
            };

            markdownNode.frontmatter = (0, _extends3.default)({
              title: "" }, data.data, {
              parent: node.id

              // Add path to the markdown file path
            });if (node.internal.type === "File") {
              markdownNode.fileAbsolutePath = node.absolutePath;
            }

            createNode(markdownNode);
            createParentChildLink({ parent: node, child: markdownNode });

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  function onCreateNode(_x) {
    return _ref.apply(this, arguments);
  }

  return onCreateNode;
}();