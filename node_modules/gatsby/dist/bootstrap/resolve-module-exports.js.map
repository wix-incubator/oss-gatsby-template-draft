{"version":3,"sources":["../../src/bootstrap/resolve-module-exports.js"],"names":["fs","require","babylon","traverse","default","module","exports","modulePath","resolver","resolve","absPath","exportNames","err","code","readFileSync","babylonOpts","sourceType","allowImportExportEverywhere","plugins","ast","parse","AssignmentExpression","astPath","node","left","type","object","name","push","property"],"mappings":";;AACA,IAAMA,KAAKC,QAAS,IAAT,CAAX;AACA,IAAMC,UAAUD,QAAS,SAAT,CAAhB;AACA,IAAME,WAAWF,QAAS,gBAAT,EAA0BG,OAA3C;;AAEA;;;;;;;;;AASAC,OAAOC,OAAP,GAAiB,UAACC,UAAD,EAA4C;AAAA,MAA/BC,QAA+B,uEAApBP,QAAQQ,OAAY;;AAC3D,MAAIC,gBAAJ;AACA,MAAMC,cAAc,EAApB;;AAEA,MAAI;AACFD,cAAUF,SAASD,UAAT,CAAV;AACD,GAFD,CAEE,OAAOK,GAAP,EAAY;AACZ,WAAOD,WAAP,CADY,CACO;AACpB;AACD,MAAME,OAAOb,GAAGc,YAAH,CAAgBJ,OAAhB,EAA0B,MAA1B,CAAb,CAT2D,CASb;;AAE9C,MAAMK,cAAc;AAClBC,gBAAa,QADK;AAElBC,iCAA6B,IAFX;AAGlBC,aAAS,CACN,KADM,EAEN,eAFM,EAGN,kBAHM,EAIN,YAJM,EAKN,iBALM,EAMN,kBANM,EAON,iBAPM,EAQN,cARM,EASN,cATM,EAUN,eAVM,EAWN,MAXM;AAHS,GAApB;;AAkBA,MAAMC,MAAMjB,QAAQkB,KAAR,CAAcP,IAAd,EAAoBE,WAApB,CAAZ;;AAEA;AACAZ,WAASgB,GAAT,EAAc;AACZE,0BAAsB,SAASA,oBAAT,CAA8BC,OAA9B,EAAuC;AAC3D,UACEA,QAAQC,IAAR,CAAaC,IAAb,CAAkBC,IAAlB,KAA4B,kBAA5B,IACAH,QAAQC,IAAR,CAAaC,IAAb,CAAkBE,MAAlB,CAAyBC,IAAzB,KAAmC,SAFrC,EAGE;AACAhB,oBAAYiB,IAAZ,CAAiBN,QAAQC,IAAR,CAAaC,IAAb,CAAkBK,QAAlB,CAA2BF,IAA5C;AACD;AACF;AARW,GAAd;;AAWA,SAAOhB,WAAP;AACD,CA5CD","file":"resolve-module-exports.js","sourcesContent":["// @flow\nconst fs = require(`fs`)\nconst babylon = require(`babylon`)\nconst traverse = require(`babel-traverse`).default\n\n/**\n * Given a `require.resolve()` compatible path pointing to a JS module,\n * return an array listing the names of the module's exports.\n *\n * Returns [] for invalid paths and modules without exports.\n *\n * @param {string} modulePath\n * @param {function} resolver\n */\nmodule.exports = (modulePath, resolver = require.resolve) => {\n  let absPath\n  const exportNames = []\n\n  try {\n    absPath = resolver(modulePath)\n  } catch (err) {\n    return exportNames // doesn't exist\n  }\n  const code = fs.readFileSync(absPath, `utf8`) // get file contents\n\n  const babylonOpts = {\n    sourceType: `module`,\n    allowImportExportEverywhere: true,\n    plugins: [\n      `jsx`,\n      `doExpressions`,\n      `objectRestSpread`,\n      `decorators`,\n      `classProperties`,\n      `exportExtensions`,\n      `asyncGenerators`,\n      `functionBind`,\n      `functionSent`,\n      `dynamicImport`,\n      `flow`,\n    ],\n  }\n\n  const ast = babylon.parse(code, babylonOpts)\n\n  // extract names of exports from file\n  traverse(ast, {\n    AssignmentExpression: function AssignmentExpression(astPath) {\n      if (\n        astPath.node.left.type === `MemberExpression` &&\n        astPath.node.left.object.name === `exports`\n      ) {\n        exportNames.push(astPath.node.left.property.name)\n      }\n    },\n  })\n\n  return exportNames\n}\n"]}