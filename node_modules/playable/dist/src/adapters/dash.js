"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//@ts-ignore
var index_mediaplayerOnly_1 = require("dashjs/build/es5/index_mediaplayerOnly");
var video_data_1 = require("../utils/video-data");
var environment_detection_1 = require("../utils/environment-detection");
var index_1 = require("../index");
var INITIAL_BITRATE = 5000;
var DashEvents = index_mediaplayerOnly_1.MediaPlayer.events;
var DashAdapter = /** @class */ (function () {
    function DashAdapter(eventEmitter) {
        this.eventEmitter = eventEmitter;
        this.dashPlayer = null;
        this.mediaStream = null;
        this.videoElement = null;
        this._bindCallbacks();
    }
    DashAdapter.isSupported = function () {
        return environment_detection_1.NativeEnvironmentSupport.MSE;
    };
    DashAdapter.prototype.canPlay = function (mediaType) {
        return mediaType === index_1.MEDIA_STREAM_TYPES.DASH;
    };
    Object.defineProperty(DashAdapter.prototype, "mediaStreamDeliveryPriority", {
        get: function () {
            return index_1.MEDIA_STREAM_DELIVERY_PRIORITY.ADAPTIVE_VIA_MSE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashAdapter.prototype, "currentUrl", {
        get: function () {
            return this.mediaStream.url;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashAdapter.prototype, "syncWithLiveTime", {
        //@ts-ignore
        get: function () {
            // TODO: implement syncWithLiveTime for `dash`
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashAdapter.prototype, "isDynamicContent", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashAdapter.prototype, "isDynamicContentEnded", {
        get: function () {
            // TODO: implement isDynamicContentEnded
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashAdapter.prototype, "isSyncWithLive", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashAdapter.prototype, "isSeekAvailable", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashAdapter.prototype, "debugInfo", {
        get: function () {
            var currentStream = this.dashPlayer.getActiveStream();
            var currentTime = 0;
            if (currentStream) {
                currentTime = this.dashPlayer.time(currentStream.getId());
            }
            var bitrates = this.dashPlayer
                .getBitrateInfoListFor('video')
                .map(function (bitrates) { return bitrates.bitrate; });
            var currentBitrate = null;
            if (this.dashPlayer.getQualityFor('video') && bitrates) {
                currentBitrate = bitrates[this.dashPlayer.getQualityFor('video')];
            }
            var overallBufferLength = this.dashPlayer.getBufferLength('video');
            var currentTrack = this.dashPlayer.getCurrentTrackFor('video');
            var nearestBufferSegInfo = video_data_1.getNearestBufferSegmentInfo(this.dashPlayer.getVideoElement().buffered, currentTime);
            var bwEstimate = this.dashPlayer.getAverageThroughput('video');
            return tslib_1.__assign({}, this.mediaStream, { bwEstimate: bwEstimate, deliveryPriority: this.mediaStreamDeliveryPriority, bitrates: bitrates,
                currentBitrate: currentBitrate,
                overallBufferLength: overallBufferLength,
                currentTrack: currentTrack,
                nearestBufferSegInfo: nearestBufferSegInfo });
        },
        enumerable: true,
        configurable: true
    });
    DashAdapter.prototype._bindCallbacks = function () {
        this._broadcastError = this._broadcastError.bind(this);
    };
    DashAdapter.prototype.setMediaStreams = function (mediaStreams) {
        if (mediaStreams.length === 1) {
            this.mediaStream = mediaStreams[0];
        }
        else {
            throw new Error("Can only handle a single DASH stream. Received " + mediaStreams.length + " streams.");
        }
    };
    DashAdapter.prototype._logError = function (error, errorEvent) {
        this.eventEmitter.emit(index_1.VIDEO_EVENTS.ERROR, {
            errorType: error,
            streamType: index_1.MEDIA_STREAM_TYPES.DASH,
            streamProvider: 'dash.js',
            errorInstance: errorEvent,
        });
    };
    DashAdapter.prototype._broadcastError = function (errorEvent) {
        if (!errorEvent) {
            return;
        }
        if (errorEvent.error === 'download') {
            switch (errorEvent.event.id) {
                case 'manifest':
                    this._logError(index_1.ERRORS.MANIFEST_LOAD, errorEvent);
                    break;
                case 'content':
                    this._logError(index_1.ERRORS.CONTENT_LOAD, errorEvent);
                    break;
                case 'initialization':
                    this._logError(index_1.ERRORS.LEVEL_LOAD, errorEvent);
                    break;
                default:
                    this._logError(index_1.ERRORS.UNKNOWN, errorEvent);
            }
        }
        else if (errorEvent.error === 'manifestError') {
            switch (errorEvent.event.id) {
                case 'codec':
                    this._logError(index_1.ERRORS.MANIFEST_INCOMPATIBLE, errorEvent);
                    break;
                case 'parse':
                    this._logError(index_1.ERRORS.MANIFEST_PARSE, errorEvent);
                    break;
                default:
                    this._logError(index_1.ERRORS.UNKNOWN, errorEvent);
            }
        }
        else if (errorEvent.error === 'mediasource') {
            this._logError(index_1.ERRORS.MEDIA, errorEvent);
        }
        else {
            this._logError(index_1.ERRORS.UNKNOWN, errorEvent);
        }
    };
    DashAdapter.prototype.attach = function (videoElement) {
        if (!this.mediaStream) {
            return;
        }
        this.videoElement = videoElement;
        this.dashPlayer = index_mediaplayerOnly_1.MediaPlayer().create();
        this.dashPlayer.getDebug().setLogToBrowserConsole(false);
        this.dashPlayer.on(DashEvents.ERROR, this._broadcastError);
        if (videoElement.preload === 'none') {
            this._startDelayedInitPlayer();
        }
        else {
            this._initPlayer();
        }
    };
    DashAdapter.prototype._delayedInitPlayer = function () {
        this._stopDelayedInitPlayer();
        this._initPlayer(true);
    };
    DashAdapter.prototype._startDelayedInitPlayer = function () {
        this.eventEmitter.on(index_1.VIDEO_EVENTS.PLAY_REQUEST_TRIGGERED, this._delayedInitPlayer, this);
    };
    DashAdapter.prototype._stopDelayedInitPlayer = function () {
        this.eventEmitter.off(index_1.VIDEO_EVENTS.PLAY_REQUEST_TRIGGERED, this._delayedInitPlayer, this);
    };
    DashAdapter.prototype._initPlayer = function (forceAutoplay) {
        this.dashPlayer.initialize(this.videoElement, this.mediaStream.url, forceAutoplay || this.videoElement.autoplay);
        this.dashPlayer.setInitialBitrateFor('video', INITIAL_BITRATE);
    };
    DashAdapter.prototype.detach = function () {
        this._stopDelayedInitPlayer();
        if (!this.mediaStream) {
            return;
        }
        this.dashPlayer.reset();
        this.dashPlayer.off(DashEvents.ERROR, this._broadcastError);
        this.dashPlayer = null;
        this.videoElement.removeAttribute('src');
        this.videoElement = null;
    };
    return DashAdapter;
}());
exports.default = DashAdapter;
//# sourceMappingURL=dash.js.map