"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("jsdom-global/register");
var chai_1 = require("chai");
//@ts-ignore
var sinon = tslib_1.__importStar(require("sinon"));
var player_factory_1 = require("./player-factory");
describe('registerModule', function () {
    it('should add additional module', function () {
        var spy = sinon.spy();
        var ClassA = /** @class */ (function () {
            function ClassA() {
                spy();
            }
            return ClassA;
        }());
        player_factory_1.registerModule('ClassA', ClassA);
        /*const player = */ player_factory_1.create();
        chai_1.expect(spy.called).to.be.true;
        player_factory_1.clearAdditionalModules();
    });
});
describe('Player', function () {
    var player;
    beforeEach(function () {
        player = player_factory_1.create();
    });
    describe('constructor', function () {
        it('should create instance ', function () {
            chai_1.expect(player).to.exist;
            chai_1.expect(player._defaultModules.engine).to.exist;
            chai_1.expect(player.node).to.exist;
            chai_1.expect(player._defaultModules.eventEmitter).to.exist;
        });
        it('should create separate instances', function () {
            var player2 = player_factory_1.create();
            chai_1.expect(player._defaultModules.engine).to.not.be.equal(player2._defaultModules.engine);
            chai_1.expect(player.node).to.not.be.equal(player2.node);
            chai_1.expect(player._defaultModules.eventEmitter).to.not.be.equal(player2._defaultModules.eventEmitter);
        });
    });
    describe('API methods', function () {
        it('should have method for set autoplay flag', function () {
            chai_1.expect(player.setAutoPlay).to.exist;
            player.setAutoPlay(true);
            chai_1.expect(player.getAutoPlay()).to.be.true;
            player.setAutoPlay(false);
            chai_1.expect(player.getAutoPlay()).to.be.false;
        });
        it('should have method for set autoplay flag', function () {
            chai_1.expect(player.setLoop).to.exist;
            player.setLoop(true);
            chai_1.expect(player.getLoop()).to.be.true;
            player.setLoop(false);
            chai_1.expect(player.getLoop()).to.be.false;
        });
        it('should have method for set autoplay flag', function () {
            chai_1.expect(player.setMute).to.exist;
            player.setMute(true);
            chai_1.expect(player.getMute()).to.be.true;
            player.setMute(false);
            chai_1.expect(player.getMute()).to.be.false;
        });
        it('should have method for set volume', function () {
            chai_1.expect(player.setVolume).to.exist;
            player.setVolume(50);
            chai_1.expect(player.getVolume()).to.be.equal(50);
        });
        it('should have method for set preload', function () {
            chai_1.expect(player.setPreload).to.exist;
            player.setPreload('none');
            chai_1.expect(player.getPreload()).to.be.equal('none');
            player.setPreload(false);
            chai_1.expect(player.getPreload()).to.be.equal('auto');
        });
        it('should have method for get autoplay flag', function () {
            chai_1.expect(player.getAutoPlay).to.exist;
            player.setAutoPlay(false);
            chai_1.expect(player.getAutoPlay()).to.be.false;
        });
        it('should have method for get loop flag', function () {
            chai_1.expect(player.getLoop).to.exist;
            player.setLoop(false);
            chai_1.expect(player.getLoop()).to.be.false;
        });
        it('should have method for get mute flag', function () {
            chai_1.expect(player.getMute).to.exist;
            player.setMute(false);
            chai_1.expect(player.getMute()).to.be.false;
        });
        it('should have method for get preload', function () {
            var preload = 'metadata';
            chai_1.expect(player.getPreload).to.exist;
            player.setPreload(preload);
            chai_1.expect(player.getPreload()).to.be.equal(preload);
        });
        it('should have method for get volume', function () {
            var volume = 30;
            chai_1.expect(player.getVolume).to.exist;
            player.setVolume(volume);
            chai_1.expect(player.getVolume()).to.be.equal(volume);
        });
        it('should have method for start playback of video', function () {
            chai_1.expect(player.play).to.exist;
        });
        it('should have method for stop playback of video', function () {
            chai_1.expect(player.pause).to.exist;
        });
        it('should have method for destroying player', function () {
            chai_1.expect(player.destroy).to.exist;
            player.destroy();
            chai_1.expect(player.node).to.not.exist;
        });
        it('should have method for setting loading cover', function () {
            chai_1.expect(player.setLoadingCover);
        });
        it('should have method for subscribing on events', function () {
            chai_1.expect(player.on).to.exist;
        });
        it('should have method for unsubscribing from events', function () {
            chai_1.expect(player.off).to.exist;
        });
    });
});
//# sourceMappingURL=player-factory.spec.js.map