"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var index_1 = tslib_1.__importStar(require("../index"));
var environment_detection_1 = require("../utils/environment-detection");
var types_1 = require("../modules/playback-engine/types");
/* ignore coverage */
describe('Playback e2e test', function () {
    this.timeout(10000);
    var node = document.createElement('div');
    var formatsToTest = [
        {
            type: 'MP4',
            url: 'https://storage.googleapis.com/video-player-media-server-static/sample.mp4',
            supportedByEnv: environment_detection_1.NativeEnvironmentSupport.MP4,
        },
        {
            type: 'WEBM',
            url: 'https://storage.googleapis.com/video-player-media-server-static/sample.webm',
            supportedByEnv: environment_detection_1.NativeEnvironmentSupport.WEBM,
        },
    ];
    formatsToTest.forEach(function (formatToTest) {
        if (formatToTest.supportedByEnv) {
            it("allows playback of " + formatToTest.type, function (done) {
                // TODO: describe `@playerApi` methods in `Player` with TS
                var player = index_1.default.create();
                player.attachToElement(node);
                player.on(index_1.VIDEO_EVENTS.STATE_CHANGED, function (_a) {
                    var nextState = _a.nextState;
                    if (nextState === index_1.ENGINE_STATES.PLAYING) {
                        player.off(index_1.VIDEO_EVENTS.STATE_CHANGED);
                        player.destroy();
                        done();
                    }
                });
                player.setSrc(formatToTest.url);
                player.play();
            });
            it("allows playback of " + formatToTest.type + " when preload = none", function (done) {
                var player = index_1.default.create({
                    preload: types_1.PreloadTypes.NONE,
                });
                player.attachToElement(node);
                player.on(index_1.VIDEO_EVENTS.STATE_CHANGED, function (_a) {
                    var nextState = _a.nextState;
                    if (nextState === index_1.ENGINE_STATES.PLAYING) {
                        player.off(index_1.VIDEO_EVENTS.STATE_CHANGED);
                        player.destroy();
                        done();
                    }
                });
                player.setSrc(formatToTest.url);
                player.play();
            });
        }
    });
});
//# sourceMappingURL=playback-test.js.map