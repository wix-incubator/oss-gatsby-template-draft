"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("../../constants");
exports.REPORT_REASONS = {
    LONG_INITIAL_VIDEO_PARTS_LOADING: 'long-initial-video-parts-loading',
    LONG_METADATA_LOADING: 'long-metadata-loading',
    LONG_SEEK_PROCESSING: 'long-seek-processing',
    BUFFER_EMPTY_FOR_CURRENT_SEGMENT: 'buffer-empty-for-current-segment',
    LONG_PLAY_REQUESTED_PROCESSING: 'long-play-requested-processing',
};
var INITIAL_VIDEO_PARTS_LOADING = {
    id: '_initialVideoPartsLoading',
    timeoutTime: 5000,
};
var METADATA_LOADING = {
    id: '_metadataLoading',
    timeoutTime: 5000,
};
var RUNTIME_LOADING = {
    id: '_runtimeLoading',
    timeoutTime: 5000,
};
exports.DELAYED_REPORT_TYPES = {
    INITIAL_VIDEO_PARTS_LOADING: INITIAL_VIDEO_PARTS_LOADING,
    METADATA_LOADING: METADATA_LOADING,
    RUNTIME_LOADING: RUNTIME_LOADING,
};
var AnomalyBloodhound = /** @class */ (function () {
    function AnomalyBloodhound(_a) {
        var engine = _a.engine, eventEmitter = _a.eventEmitter, config = _a.config;
        this._config = tslib_1.__assign({}, config.anomalyBloodhound);
        this._engine = engine;
        this._eventEmitter = eventEmitter;
        this._timeoutContainer = Object.create(null);
        this._bindEvents();
    }
    AnomalyBloodhound.prototype._bindEvents = function () {
        this._unbindEvents = this._eventEmitter.bindEvents([[constants_1.VIDEO_EVENTS.STATE_CHANGED, this._processStateChange]], this);
    };
    AnomalyBloodhound.prototype._processStateChange = function (_a) {
        var prevState = _a.prevState, nextState = _a.nextState;
        switch (nextState) {
            case constants_1.EngineState.LOAD_STARTED:
                if (this._engine.isAutoPlayAvailable ||
                    this._engine.isPreloadAvailable) {
                    this.startDelayedReport(exports.DELAYED_REPORT_TYPES.METADATA_LOADING, exports.REPORT_REASONS.LONG_METADATA_LOADING);
                }
                break;
            case constants_1.EngineState.METADATA_LOADED:
                if (this.isDelayedReportExist(exports.DELAYED_REPORT_TYPES.METADATA_LOADING)) {
                    this.stopDelayedReport(exports.DELAYED_REPORT_TYPES.METADATA_LOADING);
                    if (this._engine.getPreload() !== 'metadata') {
                        this.startDelayedReport(exports.DELAYED_REPORT_TYPES.INITIAL_VIDEO_PARTS_LOADING, exports.REPORT_REASONS.LONG_INITIAL_VIDEO_PARTS_LOADING);
                    }
                }
                break;
            case constants_1.EngineState.READY_TO_PLAY:
                if (this.isDelayedReportExist(exports.DELAYED_REPORT_TYPES.INITIAL_VIDEO_PARTS_LOADING)) {
                    this.stopDelayedReport(exports.DELAYED_REPORT_TYPES.INITIAL_VIDEO_PARTS_LOADING);
                }
                if (this.isDelayedReportExist(exports.DELAYED_REPORT_TYPES.RUNTIME_LOADING)) {
                    this.stopDelayedReport(exports.DELAYED_REPORT_TYPES.RUNTIME_LOADING);
                }
                break;
            case constants_1.EngineState.SEEK_IN_PROGRESS:
                if (prevState === constants_1.EngineState.PAUSED) {
                    this.startDelayedReport(exports.DELAYED_REPORT_TYPES.RUNTIME_LOADING, exports.REPORT_REASONS.LONG_SEEK_PROCESSING);
                }
                break;
            case constants_1.EngineState.WAITING:
                switch (prevState) {
                    case constants_1.EngineState.PLAYING: {
                        this.reportDebugInfo({
                            reason: exports.REPORT_REASONS.BUFFER_EMPTY_FOR_CURRENT_SEGMENT,
                        });
                        break;
                    }
                    case constants_1.EngineState.PLAY_REQUESTED:
                        if (!this.isDelayedReportExist(exports.DELAYED_REPORT_TYPES.RUNTIME_LOADING)) {
                            this.startDelayedReport(exports.DELAYED_REPORT_TYPES.RUNTIME_LOADING, exports.REPORT_REASONS.LONG_PLAY_REQUESTED_PROCESSING);
                        }
                        break;
                    /* ignore coverage */
                    default:
                        break;
                }
                break;
            case constants_1.EngineState.PLAYING:
                if (this.isDelayedReportExist(exports.DELAYED_REPORT_TYPES.RUNTIME_LOADING)) {
                    this.stopDelayedReport(exports.DELAYED_REPORT_TYPES.RUNTIME_LOADING);
                }
                break;
            default:
                break;
        }
    };
    AnomalyBloodhound.prototype.isDelayedReportExist = function (type) {
        return Boolean(this._timeoutContainer[type.id]);
    };
    AnomalyBloodhound.prototype.startDelayedReport = function (type, reason) {
        var _this = this;
        if (this.isDelayedReportExist(type)) {
            this.stopDelayedReport(type);
        }
        var startTS = Date.now();
        this._timeoutContainer[type.id] = window.setTimeout(function () {
            var endTS = Date.now();
            delete _this._timeoutContainer;
            _this.reportDebugInfo({
                reason: reason,
                startTS: startTS,
                endTS: endTS,
            });
        }, type.timeoutTime);
    };
    AnomalyBloodhound.prototype.stopDelayedReport = function (type) {
        window.clearTimeout(this._timeoutContainer[type.id]);
        delete this._timeoutContainer[type.id];
    };
    AnomalyBloodhound.prototype.stopAllDelayedReports = function () {
        var _this = this;
        Object.keys(this._timeoutContainer).forEach(function (key) {
            window.clearTimeout(_this._timeoutContainer[key]);
            delete _this._timeoutContainer[key];
        });
    };
    AnomalyBloodhound.prototype.reportDebugInfo = function (_a) {
        var reason = _a.reason, startTS = _a.startTS, endTS = _a.endTS;
        if (typeof this._config.callback === 'function') {
            this._config.callback(tslib_1.__assign({ reason: reason,
                startTS: startTS,
                endTS: endTS }, this._engine.getDebugInfo()));
        }
    };
    AnomalyBloodhound.prototype.destroy = function () {
        this.stopAllDelayedReports();
        this._unbindEvents();
        this._eventEmitter = null;
        this._engine = null;
        this._timeoutContainer = null;
        this._config = null;
    };
    AnomalyBloodhound.moduleName = 'anomalyBloodhound';
    AnomalyBloodhound.dependencies = ['eventEmitter', 'engine', 'config'];
    return AnomalyBloodhound;
}());
exports.default = AnomalyBloodhound;
//# sourceMappingURL=anomaly-bloodhound.js.map