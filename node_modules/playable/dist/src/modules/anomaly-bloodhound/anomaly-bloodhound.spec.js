"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("jsdom-global/register");
var chai_1 = require("chai");
//@ts-ignore
var sinon = tslib_1.__importStar(require("sinon"));
var anomaly_bloodhound_1 = tslib_1.__importStar(require("./anomaly-bloodhound"));
var playback_engine_1 = tslib_1.__importDefault(require("../playback-engine/playback-engine"));
var event_emitter_1 = tslib_1.__importDefault(require("../event-emitter/event-emitter"));
var constants_1 = require("../../constants");
describe('AnomalyBloodhound', function () {
    var anomalyBloodhound;
    var eventEmitter;
    var engine;
    var callback = sinon.spy();
    var config = {
        anomalyBloodhound: {
            callback: callback,
        },
    };
    beforeEach(function () {
        eventEmitter = new event_emitter_1.default();
        engine = new playback_engine_1.default({
            config: config,
            eventEmitter: eventEmitter,
            availablePlaybackAdapters: [],
        });
        anomalyBloodhound = new anomaly_bloodhound_1.default({
            eventEmitter: eventEmitter,
            engine: engine,
            config: config,
        });
    });
    afterEach(function () {
        callback.reset();
    });
    describe('reaction on changed state', function () {
        it('should be based on event', function () {
            var spy = sinon.spy(anomalyBloodhound, '_processStateChange');
            anomalyBloodhound._bindEvents();
            eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {});
            chai_1.expect(spy.called).to.be.true;
            anomalyBloodhound._processStateChange.restore();
        });
        describe('for LOAD_STARTED', function () {
            it('should not schedule report if preload is not available and autoPlay is false', function () {
                engine.setPreload('none');
                engine.setAutoPlay(false);
                anomalyBloodhound._processStateChange({
                    nextState: constants_1.EngineState.LOAD_STARTED,
                });
                chai_1.expect(anomalyBloodhound.isDelayedReportExist(anomaly_bloodhound_1.DELAYED_REPORT_TYPES.METADATA_LOADING)).to.be.false;
            });
            it('should not schedule report if preload is autoPlay is true', function () {
                engine.setAutoPlay(true);
                anomalyBloodhound._processStateChange({
                    nextState: constants_1.EngineState.LOAD_STARTED,
                });
                chai_1.expect(anomalyBloodhound.isDelayedReportExist(anomaly_bloodhound_1.DELAYED_REPORT_TYPES.METADATA_LOADING)).to.be.true;
            });
            it('should schedule report if preload available as metadata', function () {
                engine.setPreload('metadata');
                anomalyBloodhound._processStateChange({
                    nextState: constants_1.EngineState.LOAD_STARTED,
                });
                chai_1.expect(anomalyBloodhound.isDelayedReportExist(anomaly_bloodhound_1.DELAYED_REPORT_TYPES.METADATA_LOADING)).to.be.true;
            });
            it('should schedule report if preload available as auto', function () {
                engine.setPreload('metadata');
                anomalyBloodhound._processStateChange({
                    nextState: constants_1.EngineState.LOAD_STARTED,
                });
                chai_1.expect(anomalyBloodhound.isDelayedReportExist(anomaly_bloodhound_1.DELAYED_REPORT_TYPES.METADATA_LOADING)).to.be.true;
            });
        });
        it('should start delayed report on METADATA_LOADED', function () {
            anomalyBloodhound._processStateChange({
                nextState: constants_1.EngineState.LOAD_STARTED,
            });
            anomalyBloodhound._processStateChange({
                nextState: constants_1.EngineState.METADATA_LOADED,
            });
            chai_1.expect(anomalyBloodhound.isDelayedReportExist(anomaly_bloodhound_1.DELAYED_REPORT_TYPES.METADATA_LOADING)).to.be.false;
            chai_1.expect(anomalyBloodhound.isDelayedReportExist(anomaly_bloodhound_1.DELAYED_REPORT_TYPES.INITIAL_VIDEO_PARTS_LOADING)).to.be.true;
            anomalyBloodhound.stopAllDelayedReports();
            engine.setPreload('metadata');
            anomalyBloodhound._processStateChange({
                nextState: constants_1.EngineState.METADATA_LOADED,
            });
            chai_1.expect(anomalyBloodhound.isDelayedReportExist(anomaly_bloodhound_1.DELAYED_REPORT_TYPES.INITIAL_VIDEO_PARTS_LOADING)).to.be.false;
        });
        it('should start delayed report on SEEK_IN_PROGRESS', function () {
            anomalyBloodhound._processStateChange({
                nextState: constants_1.EngineState.SEEK_IN_PROGRESS,
                prevState: constants_1.EngineState.PAUSED,
            });
            chai_1.expect(anomalyBloodhound.isDelayedReportExist(anomaly_bloodhound_1.DELAYED_REPORT_TYPES.RUNTIME_LOADING)).to.be.true;
        });
        it('should clear delayed report on READY_TO_PLAY', function () {
            anomalyBloodhound.startDelayedReport(anomaly_bloodhound_1.DELAYED_REPORT_TYPES.INITIAL_VIDEO_PARTS_LOADING);
            anomalyBloodhound._processStateChange({
                nextState: constants_1.EngineState.READY_TO_PLAY,
            });
            chai_1.expect(anomalyBloodhound.isDelayedReportExist(anomaly_bloodhound_1.DELAYED_REPORT_TYPES.INITIAL_VIDEO_PARTS_LOADING)).to.be.false;
            anomalyBloodhound.startDelayedReport(anomaly_bloodhound_1.DELAYED_REPORT_TYPES.RUNTIME_LOADING);
            anomalyBloodhound._processStateChange({
                nextState: constants_1.EngineState.READY_TO_PLAY,
            });
            chai_1.expect(anomalyBloodhound.isDelayedReportExist(anomaly_bloodhound_1.DELAYED_REPORT_TYPES.RUNTIME_LOADING)).to.be.false;
        });
        it('should clear delayed report on PLAYING', function () {
            anomalyBloodhound.startDelayedReport(anomaly_bloodhound_1.DELAYED_REPORT_TYPES.RUNTIME_LOADING);
            anomalyBloodhound._processStateChange({
                nextState: constants_1.EngineState.PLAYING,
            });
            chai_1.expect(anomalyBloodhound.isDelayedReportExist(anomaly_bloodhound_1.DELAYED_REPORT_TYPES.RUNTIME_LOADING)).to.be.false;
        });
        it('should start delayed report on WAITING', function () {
            anomalyBloodhound._processStateChange({
                nextState: constants_1.EngineState.WAITING,
                prevState: constants_1.EngineState.PLAY_REQUESTED,
            });
            chai_1.expect(anomalyBloodhound.isDelayedReportExist(anomaly_bloodhound_1.DELAYED_REPORT_TYPES.RUNTIME_LOADING)).to.be.true;
            anomalyBloodhound.stopAllDelayedReports();
            anomalyBloodhound._processStateChange({
                nextState: constants_1.EngineState.WAITING,
                prevState: constants_1.EngineState.PLAYING,
            });
            chai_1.expect(callback.called).to.be.true;
        });
        it('delayed report should be resolved', function (done) {
            anomaly_bloodhound_1.DELAYED_REPORT_TYPES.___test = {
                id: '___test',
                timeout: 5,
            };
            window.setTimeout(function () {
                chai_1.expect(callback.calledOnce).to.be.true;
                done();
            }, 10);
            anomalyBloodhound.startDelayedReport(anomaly_bloodhound_1.DELAYED_REPORT_TYPES.___test);
            anomalyBloodhound.startDelayedReport(anomaly_bloodhound_1.DELAYED_REPORT_TYPES.___test);
        }, 100);
    });
});
//# sourceMappingURL=anomaly-bloodhound.spec.js.map