"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var eventemitter3_1 = require("eventemitter3");
var player_api_decorator_1 = tslib_1.__importDefault(require("../../core/player-api-decorator"));
var EventEmitterModule = /** @class */ (function (_super) {
    tslib_1.__extends(EventEmitterModule, _super);
    function EventEmitterModule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Method for adding listeners of events inside player.
     * You can check all events inside `Playable.UI_EVENTS` and `Playable.VIDEO_EVENTS`
     *
     * @param event - The Event name, such as `Playable.UI_EVENTS.PLAY_TRIGGERED`
     * @param fn - A function callback to execute when the event is triggered.
     * @param context - Value to use as `this` (i.e the reference Object) when executing callback.
     *
     * @example
     * const Playable = require('playable');
     * const player = Playable.create();
     *
     * player.on(Playable.UI_EVENTS.PLAY_TRIGGERED, () => {
     *   // Will be executed after you will click on play button
     * });
     *
     * // To supply a context value for `this` when the callback is invoked,
     * // pass the optional context argument
     * player.on(Playable.VIDEO_EVENTS.UPLOAD_STALLED, this.handleStalledUpload, this);
     */
    EventEmitterModule.prototype.on = function (event, fn, context) {
        return _super.prototype.on.call(this, event, fn, context);
    };
    /**
     * Method for removing listeners of events inside player.
     *
     * @param event - The Event name, such as `Playable.UI_EVENTS.PLAY_TRIGGERED`
     * @param fn - Only remove the listeners that match this function.
     * @param context - Only remove the listeners that have this context.
     * @param once - Only remove one-time listeners.
     *
     * @example
     * const Playable = require('playable');
     * const player = Playable.create();
     *
     * const callback = function() {
     *   // Code to handle some kind of event
     * };
     *
     * // ... Now callback will be called when some one will pause the video ...
     * player.on(Playable.UI_EVENTS.PAUSE_TRIGGERED, callback);
     *
     * // ... callback will no longer be called.
     * player.off(Playable.UI_EVENTS.PAUSE_TRIGGERED, callback);
     *
     * // ... remove all handlers for event UI_EVENTS.PAUSE_TRIGGERED.
     * player.off(Playable.UI_EVENTS.PAUSE_TRIGGERED);
     */
    EventEmitterModule.prototype.off = function (event, fn, context, once) {
        return _super.prototype.off.call(this, event, fn, context, once);
    };
    /**
     * Method for binding array of listeners with events inside player.
     *
     * @example
     *
     * this._unbindEvents = this._eventEmitter.bindEvents([
     *     [VIDEO_EVENTS.STATE_CHANGED, this._processStateChange],
     *     [VIDEO_EVENTS.LIVE_STATE_CHANGED, this._processLiveStateChange],
     *     [VIDEO_EVENTS.CHUNK_LOADED, this._updateBufferIndicator],
     *     [VIDEO_EVENTS.DURATION_UPDATED, this._updateAllIndicators],
     *   ],
     *   this,
     * );
     *
     * //...
     *
     * this._unbindEvents()
     *
     * @param eventsMap
     * @param defaultFnContext
     * @returns unbindEvents
     */
    EventEmitterModule.prototype.bindEvents = function (eventsMap, defaultFnContext) {
        var _this = this;
        var events = [];
        eventsMap.forEach(function (_a) {
            var eventName = _a[0], fn = _a[1], _b = _a[2], fnContext = _b === void 0 ? defaultFnContext : _b;
            _this.on(eventName, fn, fnContext);
            events.push(function () {
                _this.off(eventName, fn, fnContext);
            });
        });
        return function unbindEvents() {
            events.forEach(function (unbindEvent) {
                unbindEvent();
            });
        };
    };
    EventEmitterModule.prototype.destroy = function () {
        this.removeAllListeners();
    };
    EventEmitterModule.moduleName = 'eventEmitter';
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], EventEmitterModule.prototype, "on", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], EventEmitterModule.prototype, "off", null);
    return EventEmitterModule;
}(eventemitter3_1.EventEmitter));
exports.default = EventEmitterModule;
//# sourceMappingURL=event-emitter.js.map