"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var device_detection_1 = require("../../utils/device-detection");
var player_api_decorator_1 = tslib_1.__importDefault(require("../../core/player-api-decorator"));
var desktop_1 = tslib_1.__importDefault(require("./desktop"));
var ios_1 = tslib_1.__importDefault(require("./ios"));
var constants_1 = require("../../constants");
var DEFAULT_CONFIG = {
    exitFullScreenOnEnd: true,
    enterFullScreenOnPlay: false,
    exitFullScreenOnPause: false,
    pauseVideoOnFullScreenExit: false,
};
var FullScreenManager = /** @class */ (function () {
    function FullScreenManager(_a) {
        var eventEmitter = _a.eventEmitter, engine = _a.engine, rootContainer = _a.rootContainer, config = _a.config;
        this._exitFullScreenOnEnd = false;
        this._enterFullScreenOnPlay = false;
        this._exitFullScreenOnPause = false;
        this._pauseVideoOnFullScreenExit = false;
        this._eventEmitter = eventEmitter;
        this._engine = engine;
        if (config.fullScreen === false) {
            this._isEnabled = false;
        }
        else {
            this._isEnabled = true;
            var _config = tslib_1.__assign({}, DEFAULT_CONFIG, (typeof config.fullScreen === 'object' ? config.fullScreen : {}));
            this._exitFullScreenOnEnd = _config.exitFullScreenOnEnd;
            this._enterFullScreenOnPlay = _config.enterFullScreenOnPlay;
            this._exitFullScreenOnPause = _config.exitFullScreenOnPause;
            this._pauseVideoOnFullScreenExit = _config.pauseVideoOnFullScreenExit;
        }
        this._onChange = this._onChange.bind(this);
        if (device_detection_1.isIOS()) {
            this._helper = new ios_1.default(this._engine.getNode(), this._onChange);
        }
        else {
            this._helper = new desktop_1.default(rootContainer.node, this._onChange);
        }
        this._bindEvents();
    }
    FullScreenManager.prototype._onChange = function () {
        if (!this._helper.isInFullScreen && this._pauseVideoOnFullScreenExit) {
            this._engine.pause();
        }
        this._eventEmitter.emit(constants_1.UI_EVENTS.FULLSCREEN_STATUS_CHANGED, this._helper.isInFullScreen);
    };
    FullScreenManager.prototype._bindEvents = function () {
        this._unbindEvents = this._eventEmitter.bindEvents([
            [constants_1.VIDEO_EVENTS.STATE_CHANGED, this._processNextStateFromEngine],
            [constants_1.VIDEO_EVENTS.PLAY_REQUEST_TRIGGERED, this._enterOnPlayRequested],
        ], this);
    };
    FullScreenManager.prototype._exitOnEnd = function () {
        if (this._exitFullScreenOnEnd && this.isInFullScreen) {
            this.exitFullScreen();
        }
    };
    FullScreenManager.prototype._enterOnPlayRequested = function () {
        if (this._enterFullScreenOnPlay && !this.isInFullScreen) {
            this.enterFullScreen();
        }
    };
    FullScreenManager.prototype._exitOnPauseRequested = function () {
        if (this._exitFullScreenOnPause && this.isInFullScreen) {
            this.exitFullScreen();
        }
    };
    FullScreenManager.prototype._processNextStateFromEngine = function (_a) {
        var nextState = _a.nextState;
        switch (nextState) {
            case constants_1.EngineState.ENDED: {
                this._exitOnEnd();
                break;
            }
            case constants_1.EngineState.PAUSED: {
                this._exitOnPauseRequested();
                break;
            }
            /* ignore coverage */
            default:
                break;
        }
    };
    /**
     * Player would try to enter fullscreen mode.
     * Behavior of fullscreen mode on different platforms may differ.
     * @example
     * player.enterFullScreen();
     */
    FullScreenManager.prototype.enterFullScreen = function () {
        if (!this.isEnabled) {
            return;
        }
        this._helper.request();
    };
    /**
     * Player would try to exit fullscreen mode.
     * @example
     * player.exitFullScreen();
     */
    FullScreenManager.prototype.exitFullScreen = function () {
        if (!this.isEnabled) {
            return;
        }
        this._helper.exit();
    };
    Object.defineProperty(FullScreenManager.prototype, "isInFullScreen", {
        /**
         * Return true if player is in full screen
         * @example
         * console.log(player.isInFullScreen); // false
         */
        get: function () {
            if (!this.isEnabled) {
                return false;
            }
            return this._helper.isInFullScreen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FullScreenManager.prototype, "isEnabled", {
        get: function () {
            return this._helper.isEnabled && this._isEnabled;
        },
        enumerable: true,
        configurable: true
    });
    FullScreenManager.prototype.destroy = function () {
        this._unbindEvents();
        this._helper.destroy();
        this._helper = null;
        this._eventEmitter = null;
        this._engine = null;
    };
    FullScreenManager.moduleName = 'fullScreenManager';
    FullScreenManager.dependencies = ['eventEmitter', 'engine', 'rootContainer', 'config'];
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], FullScreenManager.prototype, "enterFullScreen", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], FullScreenManager.prototype, "exitFullScreen", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], FullScreenManager.prototype, "isInFullScreen", null);
    return FullScreenManager;
}());
exports.default = FullScreenManager;
//# sourceMappingURL=full-screen-manager.js.map