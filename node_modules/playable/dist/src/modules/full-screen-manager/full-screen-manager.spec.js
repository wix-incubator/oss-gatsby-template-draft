"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("jsdom-global/register");
var chai_1 = require("chai");
//@ts-ignore
var sinon = tslib_1.__importStar(require("sinon"));
var full_screen_manager_1 = tslib_1.__importDefault(require("./full-screen-manager"));
var desktop_1 = tslib_1.__importDefault(require("./desktop"));
var ios_1 = tslib_1.__importDefault(require("./ios"));
var playback_engine_1 = tslib_1.__importDefault(require("../playback-engine/playback-engine"));
var event_emitter_1 = tslib_1.__importDefault(require("../event-emitter/event-emitter"));
var root_container_1 = tslib_1.__importDefault(require("../root-container/root-container"));
var testkit_1 = require("../../testkit");
var constants_1 = require("../../constants");
var mockedFullscreenHelper = {
    isInFullScreen: false,
    isEnabled: true,
    request: sinon.spy(),
    exit: sinon.spy(),
    destroy: sinon.spy(),
    _reset: function () {
        this.isInFullScreen = false;
        this.isEnabled = true;
        this.request.reset();
        this.exit.reset();
        this.destroy.reset();
    },
};
describe('FullScreenManager', function () {
    var fullScreenManager;
    var eventEmitter;
    var engine;
    var rootContainer;
    var config = {};
    beforeEach(function () {
        eventEmitter = new event_emitter_1.default();
        engine = new playback_engine_1.default({
            config: config,
            eventEmitter: eventEmitter,
            availablePlaybackAdapters: [],
        });
        rootContainer = new root_container_1.default({
            config: config,
            eventEmitter: eventEmitter,
        });
        fullScreenManager = new full_screen_manager_1.default({
            eventEmitter: eventEmitter,
            engine: engine,
            rootContainer: rootContainer,
            config: config,
        });
        fullScreenManager._helper = mockedFullscreenHelper;
    });
    afterEach(function () {
        mockedFullscreenHelper._reset();
    });
    describe('chosen helper', function () {
        afterEach(function () {
            testkit_1.resetProperty(navigator, 'userAgent');
        });
        it('should be for desktop if not on iOS', function () {
            testkit_1.setProperty(navigator, 'userAgent', 'Computer');
            fullScreenManager = new full_screen_manager_1.default({
                eventEmitter: eventEmitter,
                engine: engine,
                rootContainer: rootContainer,
                config: config,
            });
            chai_1.expect(fullScreenManager._helper instanceof desktop_1.default).to.be.true;
        });
        it('should be for iPhone', function () {
            testkit_1.setProperty(navigator, 'userAgent', 'iPhone');
            fullScreenManager = new full_screen_manager_1.default({
                eventEmitter: eventEmitter,
                engine: engine,
                rootContainer: rootContainer,
                config: config,
            });
            chai_1.expect(fullScreenManager._helper instanceof ios_1.default).to.be.true;
        });
        it('should be for iPod', function () {
            testkit_1.setProperty(navigator, 'userAgent', 'iPod');
            fullScreenManager = new full_screen_manager_1.default({
                eventEmitter: eventEmitter,
                engine: engine,
                rootContainer: rootContainer,
                config: config,
            });
            chai_1.expect(fullScreenManager._helper instanceof ios_1.default).to.be.true;
        });
        it('should be for iPad', function () {
            testkit_1.setProperty(navigator, 'userAgent', 'iPad');
            fullScreenManager = new full_screen_manager_1.default({
                eventEmitter: eventEmitter,
                engine: engine,
                rootContainer: rootContainer,
                config: config,
            });
            chai_1.expect(fullScreenManager._helper instanceof ios_1.default).to.be.true;
        });
    });
    describe('enable status', function () {
        it('should be based on helper status and config', function () {
            chai_1.expect(fullScreenManager.isEnabled).to.be.true;
            mockedFullscreenHelper.isEnabled = false;
            chai_1.expect(fullScreenManager.isEnabled).to.be.false;
        });
        it('should return false in disabled flag passed in config', function () {
            mockedFullscreenHelper.isEnabled = true;
            fullScreenManager._isEnabled = false;
            chai_1.expect(fullScreenManager.isEnabled).to.be.false;
        });
    });
    describe('full screen status', function () {
        it('should return status of helper', function () {
            mockedFullscreenHelper.isInFullScreen = true;
            chai_1.expect(fullScreenManager.isInFullScreen).to.be.true;
        });
        it('should return false if disabled', function () {
            mockedFullscreenHelper.isEnabled = false;
            mockedFullscreenHelper.isInFullScreen = true;
            chai_1.expect(fullScreenManager.isInFullScreen).to.be.false;
        });
    });
    describe('method for entering full screen', function () {
        it("should call helper's method for request full screen", function () {
            fullScreenManager.enterFullScreen();
            chai_1.expect(mockedFullscreenHelper.request.called).to.be.true;
        });
        it('should do nothing if full screen is not enable', function () {
            mockedFullscreenHelper.isEnabled = false;
            fullScreenManager.enterFullScreen();
            chai_1.expect(mockedFullscreenHelper.request.called).to.be.false;
        });
    });
    describe('method for exiting full screen', function () {
        it("should call helper's method for request full screen", function () {
            fullScreenManager.exitFullScreen();
            chai_1.expect(mockedFullscreenHelper.exit.called).to.be.true;
        });
        it('should do nothing if full screen is not enable', function () {
            mockedFullscreenHelper.isEnabled = false;
            fullScreenManager.exitFullScreen();
            chai_1.expect(mockedFullscreenHelper.exit.called).to.be.false;
        });
    });
    describe('due to reaction on fullscreen change', function () {
        it('should trigger proper event', function () {
            var spy = sinon.spy(eventEmitter, 'emit');
            mockedFullscreenHelper.isInFullScreen = true;
            fullScreenManager._onChange();
            chai_1.expect(spy.calledWith(constants_1.UI_EVENTS.FULLSCREEN_STATUS_CHANGED, mockedFullscreenHelper.isInFullScreen)).to.be.true;
            eventEmitter.emit.restore();
        });
        it('should pause video on exit from full screen if proper config passed', function () {
            var spy = sinon.spy(engine, 'pause');
            fullScreenManager._pauseVideoOnFullScreenExit = true;
            mockedFullscreenHelper.isInFullScreen = false;
            fullScreenManager._onChange();
            chai_1.expect(spy.called).to.be.true;
            engine.pause.restore();
        });
    });
    describe('due to reaction on play request', function () {
        it('should enter full screen if proper config passed', function () {
            var spy = sinon.spy(fullScreenManager, 'enterFullScreen');
            eventEmitter.emit(constants_1.VIDEO_EVENTS.PLAY_REQUEST_TRIGGERED);
            fullScreenManager._enterFullScreenOnPlay = true;
            mockedFullscreenHelper.isInFullScreen = false;
            eventEmitter.emit(constants_1.VIDEO_EVENTS.PLAY_REQUEST_TRIGGERED);
            chai_1.expect(spy.calledOnce).to.be.true;
            fullScreenManager.enterFullScreen.restore();
        });
    });
    describe('due to reaction on state changed', function () {
        describe('to end state', function () {
            it('should exit full screen if config passed', function () {
                var spy = sinon.spy(fullScreenManager, 'exitFullScreen');
                eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                    nextState: constants_1.EngineState.ENDED,
                });
                fullScreenManager._exitFullScreenOnEnd = true;
                mockedFullscreenHelper.isInFullScreen = true;
                eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                    nextState: constants_1.EngineState.ENDED,
                });
                chai_1.expect(spy.calledOnce).to.be.true;
                fullScreenManager.exitFullScreen.restore();
            });
        });
        describe('to pause state', function () {
            it('should exit full screen if config passed', function () {
                var spy = sinon.spy(fullScreenManager, 'exitFullScreen');
                eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                    nextState: constants_1.EngineState.PAUSED,
                });
                fullScreenManager._exitFullScreenOnPause = true;
                mockedFullscreenHelper.isInFullScreen = true;
                eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                    nextState: constants_1.EngineState.PAUSED,
                });
                chai_1.expect(spy.calledOnce).to.be.true;
                fullScreenManager.exitFullScreen.restore();
            });
        });
    });
});
//# sourceMappingURL=full-screen-manager.spec.js.map