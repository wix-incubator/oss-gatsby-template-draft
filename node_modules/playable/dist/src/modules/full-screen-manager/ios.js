"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HAVE_METADATA = 1;
var isFullScreenRequested = false;
var IOSFullScreen = /** @class */ (function () {
    function IOSFullScreen(elem, callback) {
        this._elem = elem;
        this._callback = callback;
        this._bindEvents();
        this._enterWhenHasMetaData = this._enterWhenHasMetaData.bind(this);
    }
    Object.defineProperty(IOSFullScreen.prototype, "isAPIExist", {
        get: function () {
            return Boolean(this._elem && this._elem.webkitSupportsFullscreen);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IOSFullScreen.prototype, "isInFullScreen", {
        get: function () {
            return Boolean(this._elem && this._elem.webkitDisplayingFullscreen);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IOSFullScreen.prototype, "isEnabled", {
        get: function () {
            return this.isAPIExist;
        },
        enumerable: true,
        configurable: true
    });
    IOSFullScreen.prototype._bindEvents = function () {
        this._elem.addEventListener('webkitbeginfullscreen', this._callback);
        this._elem.addEventListener('webkitendfullscreen', this._callback);
    };
    IOSFullScreen.prototype._unbindEvents = function () {
        this._elem.removeEventListener('webkitbeginfullscreen', this._callback);
        this._elem.removeEventListener('webkitendfullscreen', this._callback);
        this._elem.removeEventListener('loadedmetadata', this._enterWhenHasMetaData);
    };
    IOSFullScreen.prototype._enterWhenHasMetaData = function () {
        this._elem.removeEventListener('loadedmetadata', this._enterWhenHasMetaData);
        isFullScreenRequested = false;
        this._elem.webkitEnterFullscreen();
    };
    IOSFullScreen.prototype.request = function () {
        if (!this.isEnabled || this.isInFullScreen) {
            return false;
        }
        try {
            this._elem.webkitEnterFullscreen();
        }
        catch (e) {
            if (this._elem.readyState < HAVE_METADATA) {
                if (isFullScreenRequested) {
                    return;
                }
                this._elem.addEventListener('loadedmetadata', this._enterWhenHasMetaData);
                isFullScreenRequested = true;
            }
        }
    };
    IOSFullScreen.prototype.exit = function () {
        if (!this.isEnabled || !this.isInFullScreen) {
            return false;
        }
        this._elem.webkitExitFullscreen();
    };
    IOSFullScreen.prototype.destroy = function () {
        this._unbindEvents();
        this._elem = null;
        this._callback = null;
    };
    return IOSFullScreen;
}());
exports.default = IOSFullScreen;
//# sourceMappingURL=ios.js.map