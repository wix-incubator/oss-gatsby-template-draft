"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("jsdom-global/register");
var chai_1 = require("chai");
//@ts-ignore
var sinon = tslib_1.__importStar(require("sinon"));
var ios_1 = tslib_1.__importDefault(require("./ios"));
describe('IOSFullScreen', function () {
    var callback = sinon.spy();
    var element;
    var fullScreen;
    beforeEach(function () {
        element = document.createElement('div');
        fullScreen = new ios_1.default(element, callback);
    });
    afterEach(function () {
        callback.reset();
    });
    describe('enable status', function () {
        it('should return true in native status is true', function () {
            element.webkitSupportsFullscreen = true;
            chai_1.expect(fullScreen.isEnabled).to.be.true;
        });
        it('should return false in native status is false', function () {
            element.webkitSupportsFullscreen = false;
            chai_1.expect(fullScreen.isEnabled).to.be.false;
        });
    });
    describe('full screen status', function () {
        it('should return true in native status is true', function () {
            element.webkitDisplayingFullscreen = true;
            chai_1.expect(fullScreen.isInFullScreen).to.be.true;
        });
        it('should return false in native status is false', function () {
            element.webkitDisplayingFullscreen = false;
            chai_1.expect(fullScreen.isInFullScreen).to.be.false;
        });
    });
    describe('method for entering full screen', function () {
        it('should use native method', function () {
            element.webkitSupportsFullscreen = true;
            element.webkitEnterFullscreen = sinon.spy();
            fullScreen.request();
            chai_1.expect(element.webkitEnterFullscreen.called).to.be.true;
        });
        it('should make postpone enter if do not have metadata', function () {
            element.webkitSupportsFullscreen = true;
            element.readyState = 0;
            var metadataEvent = new Event('loadedmetadata');
            element.webkitEnterFullscreen = function () {
                throw new Error('Catch');
            };
            fullScreen.request();
            fullScreen.request();
            element.webkitEnterFullscreen = sinon.spy();
            element.dispatchEvent(metadataEvent);
            chai_1.expect(element.webkitEnterFullscreen.calledOnce).to.be.true;
        });
        it('should do nothing if not enabled', function () {
            element.webkitSupportsFullscreen = false;
            element.webkitEnterFullscreen = sinon.spy();
            fullScreen.request();
            chai_1.expect(element.webkitEnterFullscreen.called).to.be.false;
        });
        it('should do nothing if already in full screen', function () {
            element.webkitDisplayingFullscreen = true;
            element.webkitEnterFullscreen = sinon.spy();
            fullScreen.request();
            chai_1.expect(element.webkitEnterFullscreen.called).to.be.false;
        });
    });
    describe('method for exit full screen', function () {
        it('should use native method', function () {
            element.webkitSupportsFullscreen = true;
            element.webkitDisplayingFullscreen = true;
            element.webkitExitFullscreen = sinon.spy();
            fullScreen.exit();
            chai_1.expect(element.webkitExitFullscreen.called).to.be.true;
        });
        it('should do nothing if not enabled', function () {
            element.webkitSupportsFullscreen = false;
            element.webkitExitFullscreen = sinon.spy();
            fullScreen.exit();
            chai_1.expect(element.webkitExitFullscreen.called).to.be.false;
        });
        it('should do nothing if not in full screen', function () {
            element.webkitDisplayingFullscreen = false;
            element.webkitExitFullscreen = sinon.spy();
            fullScreen.exit();
            chai_1.expect(element.webkitExitFullscreen.called).to.be.false;
        });
    });
    describe('due to reaction on native full screen change', function () {
        it('should call callback if enter', function () {
            var enterEvent = new Event('webkitbeginfullscreen');
            element.dispatchEvent(enterEvent);
            chai_1.expect(callback.called).to.be.true;
        });
        it('should call callback if exit', function () {
            var exitEvent = new Event('webkitendfullscreen');
            element.dispatchEvent(exitEvent);
            chai_1.expect(callback.called).to.be.true;
        });
    });
    describe('destroy method', function () {
        it('should clear loadedmetadata listener', function () {
            var metadataEvent = new Event('loadedmetadata');
            element.webkitSupportsFullscreen = true;
            element.readyState = 0;
            element.webkitEnterFullscreen = function () {
                throw new Error('Catch');
            };
            fullScreen.request();
            element.webkitEnterFullscreen = sinon.spy();
            fullScreen.destroy();
            element.dispatchEvent(metadataEvent);
            chai_1.expect(element.webkitEnterFullscreen.called).to.be.false;
        });
        it('should clear webkitbeginfullscreen listener', function () {
            var enterEvent = new Event('webkitbeginfullscreen');
            element.webkitSupportsFullscreen = true;
            fullScreen.destroy();
            element.dispatchEvent(enterEvent);
            chai_1.expect(callback.called).to.be.false;
        });
        it('should clear webkitendfullscreen listener', function () {
            var exitEvent = new Event('webkitendfullscreen');
            element.webkitSupportsFullscreen = true;
            fullScreen.destroy();
            element.dispatchEvent(exitEvent);
            chai_1.expect(callback.called).to.be.false;
        });
    });
});
//# sourceMappingURL=ios.spec.js.map