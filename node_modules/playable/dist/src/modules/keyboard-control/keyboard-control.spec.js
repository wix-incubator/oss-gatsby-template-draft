"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("jsdom-global/register");
var chai_1 = require("chai");
//@ts-ignore
var sinon = tslib_1.__importStar(require("sinon"));
var keyboard_interceptor_1 = require("../../utils/keyboard-interceptor");
var constants_1 = require("../../constants");
var playback_engine_1 = tslib_1.__importDefault(require("../playback-engine/playback-engine"));
var event_emitter_1 = tslib_1.__importDefault(require("../event-emitter/event-emitter"));
var root_container_1 = tslib_1.__importDefault(require("../root-container/root-container"));
var keyboard_control_1 = tslib_1.__importStar(require("./keyboard-control"));
describe('KeyboardControl', function () {
    var keyDownEvent = new Event('keydown');
    keyDownEvent.preventDefault = sinon.spy();
    var config;
    var engine;
    var eventEmitter;
    var rootContainer;
    var keyboardControl;
    beforeEach(function () {
        config = {};
        eventEmitter = new event_emitter_1.default();
        engine = new playback_engine_1.default({
            eventEmitter: eventEmitter,
            config: config,
            availablePlaybackAdapters: [],
        });
        engine._adapterStrategy._attachedAdapter = {
            isSeekAvailable: true,
            attach: function () { },
            detach: function () { },
        };
        rootContainer = new root_container_1.default({
            eventEmitter: eventEmitter,
            config: config,
        });
        keyboardControl = new keyboard_control_1.default({
            eventEmitter: eventEmitter,
            engine: engine,
            rootContainer: rootContainer,
            config: config,
        });
    });
    afterEach(function () {
        keyDownEvent.preventDefault.reset();
        eventEmitter.destroy();
        engine.destroy();
        rootContainer.destroy();
    });
    describe('as a reaction on press of key', function () {
        beforeEach(function () {
            sinon.spy(eventEmitter, 'emit');
            delete keyDownEvent.keyCode;
        });
        afterEach(function () {
            eventEmitter.emit.restore();
            keyboardControl.destroy();
        });
        it('should do stuff if key was TAB', function () {
            keyDownEvent.keyCode = keyboard_interceptor_1.KEYCODES.TAB;
            rootContainer.node.dispatchEvent(keyDownEvent);
            chai_1.expect(eventEmitter.emit.calledWith(constants_1.UI_EVENTS.KEYBOARD_KEYDOWN_INTERCEPTED)).to.be.true;
        });
        it('should do stuff if key was TAB', function () {
            keyDownEvent.keyCode = keyboard_interceptor_1.KEYCODES.TAB;
            rootContainer.node.dispatchEvent(keyDownEvent);
            chai_1.expect(eventEmitter.emit.calledWith(constants_1.UI_EVENTS.KEYBOARD_KEYDOWN_INTERCEPTED)).to.be.true;
        });
        it('should do stuff if key was SPACE_BAR', function () {
            sinon.spy(engine, 'togglePlayback');
            keyDownEvent.keyCode = keyboard_interceptor_1.KEYCODES.SPACE_BAR;
            rootContainer.node.dispatchEvent(keyDownEvent);
            chai_1.expect(keyDownEvent.preventDefault.called).to.be.true;
            chai_1.expect(eventEmitter.emit.calledWith(constants_1.UI_EVENTS.KEYBOARD_KEYDOWN_INTERCEPTED)).to.be.true;
            chai_1.expect(eventEmitter.emit.calledWith(constants_1.UI_EVENTS.TOGGLE_PLAYBACK_WITH_KEYBOARD_TRIGGERED)).to.be.true;
            chai_1.expect(engine.togglePlayback.called).to.be.true;
            engine.togglePlayback.restore();
        });
        it('should do stuff if key was LEFT_ARROW', function () {
            sinon.spy(engine, 'goBackward');
            keyDownEvent.keyCode = keyboard_interceptor_1.KEYCODES.LEFT_ARROW;
            rootContainer.node.dispatchEvent(keyDownEvent);
            chai_1.expect(keyDownEvent.preventDefault.called).to.be.true;
            chai_1.expect(eventEmitter.emit.calledWith(constants_1.UI_EVENTS.KEYBOARD_KEYDOWN_INTERCEPTED)).to.be.true;
            chai_1.expect(eventEmitter.emit.calledWith(constants_1.UI_EVENTS.GO_BACKWARD_WITH_KEYBOARD_TRIGGERED)).to.be.true;
            chai_1.expect(engine.goBackward.calledWith(keyboard_control_1.AMOUNT_TO_SKIP_SECONDS)).to.be.true;
            engine.goBackward.restore();
        });
        it('should do stuff if key was RIGHT_ARROW', function () {
            sinon.spy(engine, 'goForward');
            keyDownEvent.keyCode = keyboard_interceptor_1.KEYCODES.RIGHT_ARROW;
            rootContainer.node.dispatchEvent(keyDownEvent);
            chai_1.expect(keyDownEvent.preventDefault.called).to.be.true;
            chai_1.expect(eventEmitter.emit.calledWith(constants_1.UI_EVENTS.KEYBOARD_KEYDOWN_INTERCEPTED)).to.be.true;
            chai_1.expect(eventEmitter.emit.calledWith(constants_1.UI_EVENTS.GO_FORWARD_WITH_KEYBOARD_TRIGGERED)).to.be.true;
            chai_1.expect(engine.goForward.calledWith(keyboard_control_1.AMOUNT_TO_SKIP_SECONDS)).to.be.true;
            engine.goForward.restore();
        });
        it('should do stuff if key was UP_ARROW', function () {
            sinon.spy(engine, 'increaseVolume');
            keyDownEvent.keyCode = keyboard_interceptor_1.KEYCODES.UP_ARROW;
            rootContainer.node.dispatchEvent(keyDownEvent);
            chai_1.expect(keyDownEvent.preventDefault.called).to.be.true;
            chai_1.expect(eventEmitter.emit.calledWith(constants_1.UI_EVENTS.KEYBOARD_KEYDOWN_INTERCEPTED)).to.be.true;
            chai_1.expect(eventEmitter.emit.calledWith(constants_1.UI_EVENTS.INCREASE_VOLUME_WITH_KEYBOARD_TRIGGERED)).to.be.true;
            chai_1.expect(engine.increaseVolume.calledWith(keyboard_control_1.AMOUNT_TO_CHANGE_VOLUME)).to.be
                .true;
            engine.increaseVolume.restore();
        });
        it('should do stuff if key was DOWN_ARROW', function () {
            sinon.spy(engine, 'decreaseVolume');
            keyDownEvent.keyCode = keyboard_interceptor_1.KEYCODES.DOWN_ARROW;
            rootContainer.node.dispatchEvent(keyDownEvent);
            chai_1.expect(keyDownEvent.preventDefault.called).to.be.true;
            chai_1.expect(eventEmitter.emit.calledWith(constants_1.UI_EVENTS.KEYBOARD_KEYDOWN_INTERCEPTED)).to.be.true;
            chai_1.expect(eventEmitter.emit.calledWith(constants_1.UI_EVENTS.DECREASE_VOLUME_WITH_KEYBOARD_TRIGGERED)).to.be.true;
            chai_1.expect(engine.decreaseVolume.calledWith(keyboard_control_1.AMOUNT_TO_CHANGE_VOLUME)).to.be
                .true;
            engine.decreaseVolume.restore();
        });
    });
    describe('after destroy', function () {
        it('should not react on key down', function () {
            sinon.spy(eventEmitter, 'emit');
            keyboardControl.destroy();
            keyDownEvent.keyCode = keyboard_interceptor_1.KEYCODES.TAB;
            rootContainer.node.dispatchEvent(keyDownEvent);
            chai_1.expect(eventEmitter.emit.called).to.be.false;
            eventEmitter.emit.restore();
        });
    });
});
//# sourceMappingURL=keyboard-control.spec.js.map