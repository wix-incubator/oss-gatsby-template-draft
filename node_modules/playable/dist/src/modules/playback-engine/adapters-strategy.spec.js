"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("jsdom-global/register");
var chai_1 = require("chai");
//@ts-ignore
var sinon = tslib_1.__importStar(require("sinon"));
var eventemitter3_1 = require("eventemitter3");
var native_1 = tslib_1.__importDefault(require("./adapters/native"));
var adapters_strategy_1 = tslib_1.__importDefault(require("./adapters-strategy"));
var constants_1 = require("../../constants");
describe('AdapterStrategy', function () {
    var video = document.createElement('video');
    var strategy;
    var eventEmitter;
    var playbackAdapters;
    beforeEach(function () {
        eventEmitter = new eventemitter3_1.EventEmitter();
        strategy = new adapters_strategy_1.default(eventEmitter, video);
    });
    it('should do nothing if src not passed', function () {
        strategy.connectAdapter();
        chai_1.expect(strategy.attachedAdapter).to.be.null;
    });
    it('should generate list of available stream creator in env on construction', function () {
        var availableStream = native_1.default(constants_1.MediaStreamTypes.HLS, constants_1.MediaStreamDeliveryPriority.NATIVE_ADAPTIVE);
        var unavailableStream = native_1.default(constants_1.MediaStreamTypes.DASH, constants_1.MediaStreamDeliveryPriority.NATIVE_ADAPTIVE);
        availableStream.isSupported = function () { return true; };
        unavailableStream.isSupported = function () { return false; };
        var newStrategy = new adapters_strategy_1.default(eventEmitter, video, [
            availableStream,
            unavailableStream,
        ]);
        chai_1.expect(newStrategy._availableAdapters.length).to.be.equal(1);
        chai_1.expect(newStrategy._availableAdapters[0].constructor).to.be.equal(availableStream);
    });
    it('should choose proper media stream for proper format', function () {
        playbackAdapters = [
            native_1.default(constants_1.MediaStreamTypes.HLS, constants_1.MediaStreamDeliveryPriority.NATIVE_ADAPTIVE),
            native_1.default(constants_1.MediaStreamTypes.DASH, constants_1.MediaStreamDeliveryPriority.NATIVE_ADAPTIVE),
            native_1.default(constants_1.MediaStreamTypes.MP4, constants_1.MediaStreamDeliveryPriority.NATIVE_ADAPTIVE),
        ];
        playbackAdapters.forEach(function (adapter) {
            return strategy._availableAdapters.push(new adapter(strategy._eventEmitter));
        });
        strategy.connectAdapter('http://www.dash.com/dash.mpd');
        chai_1.expect(strategy.attachedAdapter.mediaStreamType).to.be.equal(constants_1.MediaStreamTypes.DASH);
        strategy.connectAdapter('http://www.hls.com/hls.m3u8');
        chai_1.expect(strategy.attachedAdapter.mediaStreamType).to.be.equal(constants_1.MediaStreamTypes.HLS);
        strategy.connectAdapter({
            url: 'http://www.mp4.com/mp4.mp4',
            type: constants_1.MediaStreamTypes.MP4,
        });
    });
    it('should choose proper media stream based on priority', function () {
        playbackAdapters = [
            native_1.default(constants_1.MediaStreamTypes.DASH, constants_1.MediaStreamDeliveryPriority.NATIVE_PROGRESSIVE),
            native_1.default(constants_1.MediaStreamTypes.DASH, constants_1.MediaStreamDeliveryPriority.NATIVE_ADAPTIVE),
        ];
        playbackAdapters.forEach(function (adapter) {
            return strategy._availableAdapters.push(new adapter(strategy._eventEmitter));
        });
        strategy.connectAdapter('http://www.dash.com/dash.mpd');
        chai_1.expect(strategy.attachedAdapter.mediaStreamDeliveryPriority).to.be.equal(constants_1.MediaStreamDeliveryPriority.NATIVE_ADAPTIVE);
        playbackAdapters = [
            native_1.default(constants_1.MediaStreamTypes.HLS, constants_1.MediaStreamDeliveryPriority.NATIVE_ADAPTIVE),
            native_1.default(constants_1.MediaStreamTypes.HLS, constants_1.MediaStreamDeliveryPriority.NATIVE_PROGRESSIVE),
        ];
        playbackAdapters.forEach(function (adapter) {
            return strategy._availableAdapters.push(new adapter(strategy._eventEmitter));
        });
        strategy.connectAdapter('http://www.hls.com/hls.m3u8');
        chai_1.expect(strategy.attachedAdapter.mediaStreamDeliveryPriority).to.be.equal(constants_1.MediaStreamDeliveryPriority.NATIVE_ADAPTIVE);
    });
    it('should detach current stream on changing of stream and destroy', function () {
        playbackAdapters = [
            native_1.default(constants_1.MediaStreamTypes.DASH, constants_1.MediaStreamDeliveryPriority.NATIVE_ADAPTIVE),
        ];
        playbackAdapters.forEach(function (adapter) {
            return strategy._availableAdapters.push(new adapter(strategy._eventEmitter));
        });
        strategy.connectAdapter('http://www.dash.com/dash.mpd');
        var attachedAdapter = strategy.attachedAdapter;
        sinon.spy(attachedAdapter, 'detach');
        strategy.connectAdapter('http://www.dash.com/dash2.mpd');
        chai_1.expect(attachedAdapter.detach.called).to.be.true;
    });
    it('should detach current stream on destroy', function () {
        playbackAdapters = [
            native_1.default(constants_1.MediaStreamTypes.DASH, constants_1.MediaStreamDeliveryPriority.NATIVE_ADAPTIVE),
        ];
        playbackAdapters.forEach(function (adapter) {
            return strategy._availableAdapters.push(new adapter(strategy._eventEmitter));
        });
        strategy.connectAdapter('http://www.dash.com/dash.mpd');
        var attachedAdapter = strategy.attachedAdapter;
        sinon.spy(attachedAdapter, 'detach');
        strategy.destroy();
        chai_1.expect(attachedAdapter.detach.called).to.be.true;
    });
});
//# sourceMappingURL=adapters-strategy.spec.js.map