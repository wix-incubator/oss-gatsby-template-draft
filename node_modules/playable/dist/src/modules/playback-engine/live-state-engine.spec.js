"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var chai_1 = require("chai");
//@ts-ignore
var sinon = tslib_1.__importStar(require("sinon"));
var constants_1 = require("../../constants");
var testkit_1 = tslib_1.__importStar(require("../../testkit"));
describe('LiveStateEngine', function () {
    var testkit;
    var engine;
    var liveStateEngine;
    var eventEmitter;
    beforeEach(function () {
        testkit = testkit_1.default();
        engine = testkit.getModule('engine');
        liveStateEngine = testkit.getModule('liveStateEngine');
        eventEmitter = testkit.getModule('eventEmitter');
        sinon.spy(eventEmitter, 'emit');
    });
    afterEach(function () {
        eventEmitter.emit.restore();
    });
    it('should reset state on `STATES.SRC_SET`', function () {
        var prevState = constants_1.LiveState.NOT_SYNC;
        liveStateEngine._setState(prevState);
        chai_1.expect(liveStateEngine.state, 'not `LiveState.NONE` before `SRC_SET`').to.not.equal(constants_1.LiveState.NONE);
        eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
            nextState: constants_1.EngineState.SRC_SET,
        });
        chai_1.expect(liveStateEngine.state).to.equal(constants_1.LiveState.NONE);
        chai_1.expect(eventEmitter.emit.lastCall.calledWith(constants_1.VIDEO_EVENTS.LIVE_STATE_CHANGED, {
            prevState: prevState,
            nextState: constants_1.LiveState.NONE,
        }), 'new live state emitted').to.equal(true);
    });
    describe('with dynamic content', function () {
        beforeEach(function () {
            testkit_1.setProperty(engine, 'isDynamicContent', true);
        });
        afterEach(function () {
            testkit_1.resetProperty(engine, 'isDynamicContent');
        });
        it('should set `INITIAL` state on `METADATA_LOADED`', function () {
            eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                nextState: constants_1.EngineState.SRC_SET,
            });
            chai_1.expect(liveStateEngine.state, '`LiveState.NONE` before `METADATA_LOADED`').to.equal(constants_1.LiveState.NONE);
            eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                nextState: constants_1.EngineState.METADATA_LOADED,
            });
            chai_1.expect(liveStateEngine.state).to.equal(constants_1.LiveState.INITIAL);
            chai_1.expect(eventEmitter.emit.lastCall.calledWith(constants_1.VIDEO_EVENTS.LIVE_STATE_CHANGED, {
                prevState: constants_1.LiveState.NONE,
                nextState: constants_1.LiveState.INITIAL,
            }), 'new live state emitted').to.equal(true);
        });
        describe('after `INITIAL`', function () {
            beforeEach(function () {
                eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                    nextState: constants_1.EngineState.SRC_SET,
                });
                eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                    nextState: constants_1.EngineState.METADATA_LOADED,
                });
            });
            it('should sync to live on `PLAY_REQUESTED`', function () {
                var syncWithLiveSpy = sinon.spy(engine, 'syncWithLive');
                eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                    nextState: constants_1.EngineState.PLAY_REQUESTED,
                });
                chai_1.expect(syncWithLiveSpy.called).to.equal(true);
                syncWithLiveSpy.restore();
            });
            describe('on `PLAYING`', function () {
                it('should set `SYNC` if `isSyncWithLive`', function () {
                    testkit_1.setProperty(engine, 'isSyncWithLive', true);
                    eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                        nextState: constants_1.EngineState.PLAYING,
                    });
                    chai_1.expect(liveStateEngine.state).to.equal(constants_1.LiveState.SYNC);
                    chai_1.expect(eventEmitter.emit.lastCall.calledWith(constants_1.VIDEO_EVENTS.LIVE_STATE_CHANGED, {
                        prevState: constants_1.LiveState.INITIAL,
                        nextState: constants_1.LiveState.SYNC,
                    }), 'new live state emitted').to.equal(true);
                    testkit_1.resetProperty(engine, 'isSyncWithLive');
                });
                it('should set `NOT_SYNC` if not `isSyncWithLive`', function () {
                    testkit_1.setProperty(engine, 'isSyncWithLive', false);
                    eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                        nextState: constants_1.EngineState.PLAYING,
                    });
                    chai_1.expect(liveStateEngine.state).to.equal(constants_1.LiveState.NOT_SYNC);
                    chai_1.expect(eventEmitter.emit.lastCall.calledWith(constants_1.VIDEO_EVENTS.LIVE_STATE_CHANGED, {
                        prevState: constants_1.LiveState.INITIAL,
                        nextState: constants_1.LiveState.NOT_SYNC,
                    }), 'new live state emitted').to.equal(true);
                    testkit_1.resetProperty(engine, 'isSyncWithLive');
                });
            });
        });
        describe('after `NOT_SYNC` on `PLAYING`', function () {
            beforeEach(function () {
                liveStateEngine._setState(constants_1.LiveState.NOT_SYNC);
            });
            it('should set `SYNC` if `isSyncWithLive`', function () {
                testkit_1.setProperty(engine, 'isSyncWithLive', true);
                eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                    nextState: constants_1.EngineState.PLAYING,
                });
                chai_1.expect(liveStateEngine.state).to.equal(constants_1.LiveState.SYNC);
                chai_1.expect(eventEmitter.emit.lastCall.calledWith(constants_1.VIDEO_EVENTS.LIVE_STATE_CHANGED, {
                    prevState: constants_1.LiveState.NOT_SYNC,
                    nextState: constants_1.LiveState.SYNC,
                }), 'new live state emitted').to.equal(true);
                testkit_1.resetProperty(engine, 'isSyncWithLive');
            });
            it('should ignore if not `isSyncWithLive`', function () {
                testkit_1.setProperty(engine, 'isSyncWithLive', false);
                // reset spy state before test
                eventEmitter.emit.reset();
                eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                    nextState: constants_1.EngineState.PLAYING,
                });
                chai_1.expect(liveStateEngine.state).to.equal(constants_1.LiveState.NOT_SYNC);
                // NOTE: ensure emit is not called with new `LiveState`
                chai_1.expect(eventEmitter.emit.callCount).to.equal(1);
                testkit_1.resetProperty(engine, 'isSyncWithLive');
            });
        });
        describe('on `PLAYING` after seek', function () {
            beforeEach(function () {
                engine._stateEngine.setState(constants_1.EngineState.PLAYING);
                liveStateEngine._setState(constants_1.LiveState.SYNC);
                // emulate seek by UI
                eventEmitter.emit(constants_1.UI_EVENTS.PROGRESS_CHANGE_TRIGGERED);
            });
            it('should ignore if `isSyncWithLive`', function () {
                testkit_1.setProperty(engine, 'isSyncWithLive', true);
                // reset spy state before test
                eventEmitter.emit.reset();
                eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                    nextState: constants_1.EngineState.PLAYING,
                });
                chai_1.expect(liveStateEngine.state).to.equal(constants_1.LiveState.SYNC);
                // NOTE: ensure emit is not called with new `LiveState`
                chai_1.expect(eventEmitter.emit.callCount).to.equal(1);
                testkit_1.resetProperty(engine, 'isSyncWithLive');
            });
            it('should set `NOT_SYNC` if not `isSyncWithLive`', function () {
                testkit_1.setProperty(engine, 'isSyncWithLive', false);
                eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                    nextState: constants_1.EngineState.PLAYING,
                });
                chai_1.expect(liveStateEngine.state).to.equal(constants_1.LiveState.NOT_SYNC);
                chai_1.expect(eventEmitter.emit.lastCall.calledWith(constants_1.VIDEO_EVENTS.LIVE_STATE_CHANGED, {
                    prevState: constants_1.LiveState.SYNC,
                    nextState: constants_1.LiveState.NOT_SYNC,
                }), 'new live state emitted').to.equal(true);
                testkit_1.resetProperty(engine, 'isSyncWithLive');
            });
        });
        it('should set `NOT_SYNC` on `PAUSE` by UI', function () {
            liveStateEngine._setState(constants_1.LiveState.SYNC);
            eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                prevState: constants_1.EngineState.PLAYING,
                nextState: constants_1.EngineState.PAUSED,
            });
            chai_1.expect(liveStateEngine.state).to.equal(constants_1.LiveState.NOT_SYNC);
            chai_1.expect(eventEmitter.emit.lastCall.calledWith(constants_1.VIDEO_EVENTS.LIVE_STATE_CHANGED, {
                prevState: constants_1.LiveState.SYNC,
                nextState: constants_1.LiveState.NOT_SYNC,
            }), 'new live state emitted').to.equal(true);
        });
        it('should set `ENDED` on stream ended', function () {
            liveStateEngine._setState(constants_1.LiveState.SYNC);
            eventEmitter.emit(constants_1.VIDEO_EVENTS.DYNAMIC_CONTENT_ENDED);
            chai_1.expect(liveStateEngine.state).to.equal(constants_1.LiveState.ENDED);
            chai_1.expect(eventEmitter.emit.lastCall.calledWith(constants_1.VIDEO_EVENTS.LIVE_STATE_CHANGED, {
                prevState: constants_1.LiveState.SYNC,
                nextState: constants_1.LiveState.ENDED,
            }), 'new live state emitted').to.equal(true);
        });
    });
    it('should ignore events if not `isDynamicContent`', function () {
        testkit_1.setProperty(engine, 'isDynamicContent', false);
        eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
            nextState: constants_1.EngineState.SRC_SET,
        });
        chai_1.expect(liveStateEngine.state, '`LiveState.NONE` before `METADATA_LOADED`').to.equal(constants_1.LiveState.NONE);
        // reset spy state before test
        eventEmitter.emit.reset();
        eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
            nextState: constants_1.EngineState.METADATA_LOADED,
        });
        chai_1.expect(liveStateEngine.state).to.equal(constants_1.LiveState.NONE);
        // NOTE: ensure emit is not called with new `LiveState`
        chai_1.expect(eventEmitter.emit.callCount).to.equal(1);
        testkit_1.resetProperty(engine, 'isDynamicContent');
    });
});
//# sourceMappingURL=live-state-engine.spec.js.map