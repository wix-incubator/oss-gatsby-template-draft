"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../../constants");
exports.NATIVE_VIDEO_TO_BROADCAST = [
    'progress',
    'error',
    'stalled',
    'suspend',
    'durationchange',
    'timeupdate',
    'volumechange',
    'seeking',
];
var NativeEventsBroadcaster = /** @class */ (function () {
    function NativeEventsBroadcaster(eventEmitter, video) {
        this._eventEmitter = eventEmitter;
        this._video = video;
        this._currentMute = this._video.muted;
        this._currentVolume = this._video.volume;
        this._bindCallbacks();
        this._bindEvents();
    }
    NativeEventsBroadcaster.prototype._bindCallbacks = function () {
        this._processEventFromVideo = this._processEventFromVideo.bind(this);
    };
    NativeEventsBroadcaster.prototype._bindEvents = function () {
        var _this = this;
        exports.NATIVE_VIDEO_TO_BROADCAST.forEach(function (event) {
            return _this._video.addEventListener(event, _this._processEventFromVideo);
        });
    };
    NativeEventsBroadcaster.prototype._unbindEvents = function () {
        var _this = this;
        exports.NATIVE_VIDEO_TO_BROADCAST.forEach(function (event) {
            return _this._video.removeEventListener(event, _this._processEventFromVideo);
        });
    };
    NativeEventsBroadcaster.prototype._processEventFromVideo = function (event) {
        if (event === void 0) { event = {}; }
        var videoEl = this._video;
        switch (event.type) {
            case 'progress': {
                this._eventEmitter.emit(constants_1.VIDEO_EVENTS.CHUNK_LOADED);
                break;
            }
            case 'stalled': {
                this._eventEmitter.emit(constants_1.VIDEO_EVENTS.UPLOAD_STALLED);
                break;
            }
            case 'suspend': {
                this._eventEmitter.emit(constants_1.VIDEO_EVENTS.UPLOAD_SUSPEND);
                break;
            }
            case 'seeking': {
                this._eventEmitter.emit(constants_1.VIDEO_EVENTS.SEEK_IN_PROGRESS, videoEl.currentTime);
                break;
            }
            case 'durationchange': {
                this._eventEmitter.emit(constants_1.VIDEO_EVENTS.DURATION_UPDATED, videoEl.duration);
                break;
            }
            case 'timeupdate': {
                this._eventEmitter.emit(constants_1.VIDEO_EVENTS.CURRENT_TIME_UPDATED, videoEl.currentTime);
                break;
            }
            case 'volumechange': {
                if (this._currentVolume !== videoEl.volume) {
                    this._currentVolume = videoEl.volume * 100;
                    this._eventEmitter.emit(constants_1.VIDEO_EVENTS.VOLUME_CHANGED, this._currentVolume);
                }
                if (this._currentMute !== videoEl.muted) {
                    this._currentMute = videoEl.muted;
                    this._eventEmitter.emit(constants_1.VIDEO_EVENTS.MUTE_CHANGED, this._currentMute);
                }
                this._eventEmitter.emit(constants_1.VIDEO_EVENTS.VOLUME_STATUS_CHANGED, {
                    volume: videoEl.volume,
                    muted: videoEl.muted,
                });
                break;
            }
            default:
                break;
        }
    };
    NativeEventsBroadcaster.prototype.destroy = function () {
        this._unbindEvents();
        this._video = null;
        this._eventEmitter = null;
    };
    return NativeEventsBroadcaster;
}());
exports.default = NativeEventsBroadcaster;
//# sourceMappingURL=native-events-broadcaster.js.map