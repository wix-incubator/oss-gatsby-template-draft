"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var player_api_decorator_1 = tslib_1.__importDefault(require("../../core/player-api-decorator"));
var state_engine_1 = tslib_1.__importDefault(require("./state-engine"));
var native_events_broadcaster_1 = tslib_1.__importDefault(require("./native-events-broadcaster"));
var adapters_strategy_1 = tslib_1.__importDefault(require("./adapters-strategy"));
var device_detection_1 = require("../../utils/device-detection");
var constants_1 = require("../../constants");
//TODO: Find source of problem with native HLS on Safari, when playing state triggered but actual playing is delayed
var Engine = /** @class */ (function () {
    function Engine(_a) {
        var eventEmitter = _a.eventEmitter, config = _a.config, _b = _a.availablePlaybackAdapters, availablePlaybackAdapters = _b === void 0 ? [] : _b;
        this._eventEmitter = eventEmitter;
        this._currentSrc = null;
        this._createVideoTag(config.videoElement);
        this._stateEngine = new state_engine_1.default(eventEmitter, this._video);
        this._nativeEventsBroadcaster = new native_events_broadcaster_1.default(eventEmitter, this._video);
        this._adapterStrategy = new adapters_strategy_1.default(this._eventEmitter, this._video, availablePlaybackAdapters);
        this._applyConfig(config);
    }
    Engine.prototype._createVideoTag = function (videoElement) {
        if (videoElement && videoElement.tagName === 'VIDEO') {
            this._video = videoElement;
        }
        else {
            this._video = document.createElement('video');
        }
    };
    Engine.prototype._applyConfig = function (config) {
        if (config === void 0) { config = {}; }
        var preload = config.preload, autoPlay = config.autoPlay, loop = config.loop, muted = config.muted, volume = config.volume, playInline = config.playInline, crossOrigin = config.crossOrigin, src = config.src;
        this.setPreload(preload);
        this.setAutoPlay(autoPlay);
        this.setLoop(loop);
        this.setMute(muted);
        this.setVolume(volume);
        this.setPlayInline(playInline);
        this.setCrossOrigin(crossOrigin);
        this.setSrc(src);
    };
    Engine.prototype.getNode = function () {
        return this._video;
    };
    Engine.prototype._getViewDimensions = function () {
        return {
            width: this._video.offsetWidth,
            height: this._video.offsetHeight,
        };
    };
    Object.defineProperty(Engine.prototype, "isDynamicContent", {
        get: function () {
            if (!this.attachedAdapter) {
                return false;
            }
            return this.attachedAdapter.isDynamicContent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Engine.prototype, "isDynamicContentEnded", {
        get: function () {
            if (!this.attachedAdapter) {
                return false;
            }
            return this.attachedAdapter.isDynamicContentEnded;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Engine.prototype, "isSeekAvailable", {
        get: function () {
            if (!this.attachedAdapter) {
                return false;
            }
            return this.attachedAdapter.isSeekAvailable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Engine.prototype, "isMetadataLoaded", {
        get: function () {
            return this._stateEngine.isMetadataLoaded;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Engine.prototype, "isPreloadAvailable", {
        get: function () {
            if (device_detection_1.isIPad() || device_detection_1.isIPhone() || device_detection_1.isIPod() || device_detection_1.isAndroid()) {
                return false;
            }
            return this.getPreload() !== 'none';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Engine.prototype, "isAutoPlayAvailable", {
        get: function () {
            if (device_detection_1.isIPad() || device_detection_1.isIPhone() || device_detection_1.isIPod() || device_detection_1.isAndroid()) {
                return false;
            }
            return this.getAutoPlay();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Engine.prototype, "isSyncWithLive", {
        get: function () {
            if (!this.attachedAdapter) {
                return false;
            }
            return this.attachedAdapter.isSyncWithLive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Engine.prototype, "attachedAdapter", {
        get: function () {
            return this._adapterStrategy.attachedAdapter;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Method for setting source of video to player.
     * @param src Array with multiple sources
     * @example
     * player.setSrc([
     *   'https://my-url/video.mp4',
     *   'https://my-url/video.webm',
     *   'https://my-url/video.m3u8'
     * ]);
     * @note
     * Read more about [video source](/video-source)
     */
    Engine.prototype.setSrc = function (src) {
        if (src === this._currentSrc) {
            return;
        }
        this._stateEngine.clearTimestamps();
        this._currentSrc = src;
        this._adapterStrategy.connectAdapter(this._currentSrc);
        this._stateEngine.setState(constants_1.EngineState.SRC_SET);
    };
    /**
     * Return current source of video
     * @example
     * player.getSrc(); // ['https://my-url/video.mp4']
     */
    Engine.prototype.getSrc = function () {
        return this._currentSrc;
    };
    Engine.prototype.reset = function () {
        this.pause();
        this.setCurrentTime(0);
        this._eventEmitter.emit(constants_1.VIDEO_EVENTS.RESET);
    };
    /**
     * Method for starting playback of video
     * @example
     * player.play();
     */
    Engine.prototype.play = function () {
        var _this = this;
        //Workaround for triggering functionality that requires user event pipe
        this._eventEmitter.emit(constants_1.VIDEO_EVENTS.PLAY_REQUEST_TRIGGERED);
        this._pauseRequested = false;
        if (!this._playPromise) {
            this._playPromise = this._video.play();
            if (this._playPromise !== undefined) {
                this._playPromise
                    .then(function () {
                    _this._playPromise = null;
                    if (_this._pauseRequested) {
                        _this.pause();
                    }
                })
                    .catch(function (event) {
                    _this._eventEmitter.emit(constants_1.VIDEO_EVENTS.PLAY_ABORTED, event);
                    _this._playPromise = null;
                });
            }
        }
    };
    /**
     * Method for pausing playback of video
     * @example
     * player.pause();
     */
    Engine.prototype.pause = function () {
        if (this._playPromise) {
            this._pauseRequested = true;
        }
        else {
            this._video.pause();
            this._pauseRequested = false;
        }
    };
    /**
     * Method for toggling(play\pause) playback of video
     * @example
     * player.togglePlayback();
     */
    Engine.prototype.togglePlayback = function () {
        if (this.isVideoPaused) {
            this.play();
        }
        else {
            this.pause();
        }
    };
    /**
     * Method for reseting playback of video
     * @example
     * player.play();
     * console.log(player.isVideoPaused); // false
     * ...
     * player.resetPlayback();
     * console.log(player.isVideoPaused); // true;
     * console.log(player.getCurrentTime()); //0;
     */
    Engine.prototype.resetPlayback = function () {
        this.pause();
        this.setCurrentTime(0);
        this._eventEmitter.emit(constants_1.VIDEO_EVENTS.RESET);
    };
    Object.defineProperty(Engine.prototype, "isVideoPaused", {
        /**
         * High level status of video playback. Returns true if playback is paused.
         * For more advance state use `getCurrentPlaybackState`
         * @example
         * player.play();
         * console.log(player.isVideoPaused);
         */
        get: function () {
            return this._video.paused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Engine.prototype, "isVideoEnded", {
        /**
         * High level status of video playback. Returns true if playback is ended. Also note, that `isPaused` will return `true` if playback is ended also.
         * For more advance state use `getCurrentPlaybackState`
         * @example
         * player.play();
         * console.log(player.isVideoEnded);
         */
        get: function () {
            return this._video.ended;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Method for synchronize current playback with live point. Available only if you playing live source.
     * @example
     * player.syncWithLive();
     */
    Engine.prototype.syncWithLive = function () {
        if (this.attachedAdapter &&
            this.attachedAdapter.isDynamicContent &&
            !this.attachedAdapter.isDynamicContentEnded &&
            !this.isSyncWithLive) {
            this.setCurrentTime(this.attachedAdapter.syncWithLiveTime);
            this.play();
        }
    };
    /**
     * Method for going forward in playback by your value
     * @param sec - Value in seconds
     * @example
     * player.goForward(5);
     */
    Engine.prototype.goForward = function (sec) {
        var duration = this.getDurationTime();
        if (duration) {
            var current = this.getCurrentTime();
            this.setCurrentTime(Math.min(current + sec, duration));
        }
    };
    /**
     * Method for going backward in playback by your value
     * @param sec - Value in seconds
     * @example
     * player.goBackward(5);
     */
    Engine.prototype.goBackward = function (sec) {
        var duration = this.getDurationTime();
        if (duration) {
            var current = this.getCurrentTime();
            this.setCurrentTime(Math.max(current - sec, 0));
        }
    };
    /**
     * Set volume
     * @param volume - Volume value `0..100`
     * @example
     * player.setVolume(50);
     */
    Engine.prototype.setVolume = function (volume) {
        var parsedVolume = Number(volume);
        this._video.volume = isNaN(parsedVolume)
            ? 1
            : Math.max(0, Math.min(Number(volume) / 100, 1));
    };
    /**
     * Get volume
     * @example
     * player.getVolume(); // 50
     */
    Engine.prototype.getVolume = function () {
        return this._video.volume * 100;
    };
    /**
     * Method for increasing current volume by value
     * @param value - Value from 0 to 100
     * @example
     * player.increaseVolume(30);
     */
    Engine.prototype.increaseVolume = function (value) {
        this.setVolume(this.getVolume() + value);
    };
    /**
     * Method for decreasing current volume by value
     * @param value - Value from 0 to 100
     * @example
     * player.decreaseVolume(30);
     */
    Engine.prototype.decreaseVolume = function (value) {
        this.setVolume(this.getVolume() - value);
    };
    /**
     * Mute or unmute the video
     * @param isMuted - `true` to mute the video.
     * @example
     * player.setMute(true);
     */
    Engine.prototype.setMute = function (isMuted) {
        this._video.muted = Boolean(isMuted);
    };
    /**
     * Get mute flag
     * @example
     * player.getMute(); // true
     */
    Engine.prototype.getMute = function () {
        return this._video.muted;
    };
    /**
     * Set autoPlay flag
     * @example
     * player.setAutoPlay();
     */
    Engine.prototype.setAutoPlay = function (isAutoPlay) {
        this._video.autoplay = Boolean(isAutoPlay);
    };
    /**
     * Get autoPlay flag
     * @example
     * player.getAutoPlay(); // true
     */
    Engine.prototype.getAutoPlay = function () {
        return this._video.autoplay;
    };
    /**
     * Set loop flag
     * @param isLoop - If `true` video will be played again after it will finish
     * @example
     * player.setLoop(true);
     */
    Engine.prototype.setLoop = function (isLoop) {
        this._video.loop = Boolean(isLoop);
    };
    /**
     * Get loop flag
     * @example
     * player.getLoop(); // true
     */
    Engine.prototype.getLoop = function () {
        return this._video.loop;
    };
    /**
     * Method for setting playback rate
     */
    Engine.prototype.setPlaybackRate = function (rate) {
        this._video.playbackRate = rate;
    };
    /**
     * Return current playback rate
     */
    Engine.prototype.getPlaybackRate = function () {
        return this._video.playbackRate;
    };
    /**
     * Set preload type
     * @example
     * player.setPreload('none');
     */
    Engine.prototype.setPreload = function (preload) {
        this._video.preload = preload || 'auto';
    };
    /**
     * Return preload type
     * @example
     * player.getPreload(); // none
     */
    Engine.prototype.getPreload = function () {
        return this._video.preload;
    };
    /**
     * Return current time of video playback
     * @example
     * player.getCurrentTime(); //  60.139683
     */
    Engine.prototype.getCurrentTime = function () {
        return this._video.currentTime;
    };
    /**
     * Method for seeking to time in video
     * @param time - Time in seconds
     * @example
     * player.goTo(34);
     */
    Engine.prototype.setCurrentTime = function (time) {
        this._video.currentTime = time;
    };
    /**
     * Return duration of video
     * @example
     * player.getDurationTime(); // 180.149745
     */
    Engine.prototype.getDurationTime = function () {
        return this._video.duration || 0;
    };
    /**
     * Return real width of video from metadata
     * @example
     * player.getVideoWidth(); // 400
     */
    Engine.prototype.getVideoWidth = function () {
        return this._video.videoWidth;
    };
    /**
     * Return real height of video from metadata
     * @example
     * player.getVideoHeight(); // 225
     */
    Engine.prototype.getVideoHeight = function () {
        return this._video.videoHeight;
    };
    Engine.prototype.getBuffered = function () {
        return this._video.buffered;
    };
    /**
     * Set playInline flag
     * @param isPlayInline - If `false` - video will be played in full screen, `true` - inline
     * @example
     * player.setPlayInline(true);
     */
    Engine.prototype.setPlayInline = function (isPlayInline) {
        if (isPlayInline) {
            this._video.setAttribute('playsInline', 'true');
        }
        else {
            this._video.removeAttribute('playsInline');
        }
    };
    /**
     * Get playInline flag
     * @example
     * player.getPlayInline(); // true
     */
    Engine.prototype.getPlayInline = function () {
        return this._video.getAttribute('playsInline') === 'true';
    };
    /**
     * Set crossorigin attribute for video
     * @example
     * player.setCrossOrigin('anonymous');
     */
    Engine.prototype.setCrossOrigin = function (crossOrigin) {
        if (crossOrigin) {
            this._video.setAttribute('crossorigin', crossOrigin);
        }
        else {
            this._video.removeAttribute('crossorigin');
        }
    };
    /**
     * Get crossorigin attribute value for video
     * @example
     * player.getCrossOrigin(); // 'anonymous'
     */
    Engine.prototype.getCrossOrigin = function () {
        return this._video.getAttribute('crossorigin');
    };
    /**
     * Return current state of playback
     */
    Engine.prototype.getCurrentState = function () {
        return this._stateEngine.state;
    };
    /**
     * Return object with internal debug info
     *
     * @example
     * player.getDebugInfo();
     *
     * @note
     * The above command returns JSON structured like this:
     *
     * @example
     * {
     *   "type": "HLS",
     *   "viewDimensions": {
     *     "width": 700,
     *     "height": 394
     *   }
     *   "url": "https://example.com/video.m3u8",
     *   "currentTime": 22.092514,
     *   "duration": 60.139683,
     *   "loadingStateTimestamps": {
     *     "metadata-loaded": 76,
     *     "ready-to-play": 67
     *   },
     *   "bitrates": [
     *     // Available bitrates
     *     "100000",
     *     "200000",
     *     ...
     *   ],
     *   // One of available bitrates, that used right now
     *   "currentBitrate": "100000",
     *   // Raw estimation of bandwidth, that could be used without playback stall
     *   "bwEstimate": "120000"
     *   "overallBufferLength": 60.139683,
     *   "nearestBufferSegInfo": {
     *     "start": 0,
     *     "end": 60.139683
     *   }
     * }
     */
    Engine.prototype.getDebugInfo = function () {
        var _a = this._video, duration = _a.duration, currentTime = _a.currentTime;
        var data;
        if (this._adapterStrategy.attachedAdapter) {
            data = this._adapterStrategy.attachedAdapter.debugInfo;
        }
        return tslib_1.__assign({}, data, { viewDimensions: this._getViewDimensions(), currentTime: currentTime,
            duration: duration, loadingStateTimestamps: this._stateEngine.stateTimestamps });
    };
    Engine.prototype.destroy = function () {
        this._stateEngine.destroy();
        this._nativeEventsBroadcaster.destroy();
        this._adapterStrategy.destroy();
        this._video.parentNode && this._video.parentNode.removeChild(this._video);
        this._stateEngine = null;
        this._nativeEventsBroadcaster = null;
        this._adapterStrategy = null;
        this._eventEmitter = null;
        this._video = null;
    };
    Engine.moduleName = 'engine';
    Engine.dependencies = ['eventEmitter', 'config', 'availablePlaybackAdapters'];
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "setSrc", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "getSrc", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "reset", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "play", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "pause", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "togglePlayback", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "resetPlayback", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "isVideoPaused", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "isVideoEnded", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "syncWithLive", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "goForward", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "goBackward", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "setVolume", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "getVolume", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "increaseVolume", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "decreaseVolume", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "setMute", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "getMute", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "setAutoPlay", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "getAutoPlay", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "setLoop", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "getLoop", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "setPlaybackRate", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "getPlaybackRate", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "setPreload", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "getPreload", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "getCurrentTime", null);
    tslib_1.__decorate([
        player_api_decorator_1.default('goTo')
    ], Engine.prototype, "setCurrentTime", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "getDurationTime", null);
    tslib_1.__decorate([
        player_api_decorator_1.default('getVideoRealWidth')
    ], Engine.prototype, "getVideoWidth", null);
    tslib_1.__decorate([
        player_api_decorator_1.default('getVideoRealHeight')
    ], Engine.prototype, "getVideoHeight", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "setPlayInline", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "getPlayInline", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "setCrossOrigin", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "getCrossOrigin", null);
    tslib_1.__decorate([
        player_api_decorator_1.default('getCurrentPlaybackState')
    ], Engine.prototype, "getCurrentState", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Engine.prototype, "getDebugInfo", null);
    return Engine;
}());
exports.default = Engine;
//# sourceMappingURL=playback-engine.js.map