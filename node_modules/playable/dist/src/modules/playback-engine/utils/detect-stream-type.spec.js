"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("jsdom-global");
var chai_1 = require("chai");
var detect_stream_type_1 = require("./detect-stream-type");
var constants_1 = require("../../../constants");
describe('Stream type auto detection', function () {
    var testURL = 'http://mocked-domain.com/some/internalPath/';
    var formatsToTest = [
        { type: constants_1.MediaStreamTypes.MP4, fileName: 'video.mp4' },
        { type: constants_1.MediaStreamTypes.WEBM, fileName: 'video.webm' },
        { type: constants_1.MediaStreamTypes.HLS, fileName: 'video.m3u8' },
        { type: constants_1.MediaStreamTypes.DASH, fileName: 'video.mpd' },
    ];
    formatsToTest.forEach(function (formatToTest) {
        it("should detect " + formatToTest.type + " URLs", function () {
            var URL = testURL + formatToTest.fileName;
            chai_1.expect(detect_stream_type_1.getStreamType(URL)).to.equal(formatToTest.type);
        });
    });
    describe('when recieve ULR', function () {
        var mp4URL = testURL + 'video.mp4';
        var queryParam = '?data=true';
        var fragment = '#sectionOnPage';
        it('should detect type even if it has query params', function () {
            chai_1.expect(detect_stream_type_1.getStreamType(mp4URL + queryParam)).to.equal(constants_1.MediaStreamTypes.MP4);
        });
        it('should detect type even if it has fragments', function () {
            chai_1.expect(detect_stream_type_1.getStreamType(mp4URL + fragment)).to.equal(constants_1.MediaStreamTypes.MP4);
        });
        it('should detect type even if it has fragments and params', function () {
            chai_1.expect(detect_stream_type_1.getStreamType(mp4URL + queryParam + fragment)).to.equal(constants_1.MediaStreamTypes.MP4);
        });
    });
    it("should throw error if can't parse url", function () {
        chai_1.expect(detect_stream_type_1.getStreamType('test.url')).to.equal(false);
    });
});
//# sourceMappingURL=detect-stream-type.spec.js.map