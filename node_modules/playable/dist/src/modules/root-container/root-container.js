"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var resize_observer_polyfill_1 = tslib_1.__importDefault(require("resize-observer-polyfill"));
var focus_source_1 = tslib_1.__importDefault(require("./utils/focus-source"));
var focus_within_1 = tslib_1.__importDefault(require("./utils/focus-within"));
var player_api_decorator_1 = tslib_1.__importDefault(require("../../core/player-api-decorator"));
var constants_1 = require("../../constants");
var root_container_view_1 = tslib_1.__importDefault(require("./root-container.view"));
var element_queries_1 = tslib_1.__importDefault(require("../ui/core/element-queries"));
var DEFAULT_CONFIG = {
    fillAllSpace: false,
};
var RootContainer = /** @class */ (function () {
    function RootContainer(_a) {
        var eventEmitter = _a.eventEmitter, config = _a.config;
        this._eventEmitter = eventEmitter;
        this.isHidden = false;
        this._bindCallbacks();
        this._initUI(config);
        this._bindEvents();
    }
    Object.defineProperty(RootContainer.prototype, "node", {
        /**
         * Getter for DOM node with player UI element
         * (use it only for debug, if you need attach player to your document use `attachToElement` method)
         */
        get: function () {
            return this.view.getNode();
        },
        enumerable: true,
        configurable: true
    });
    RootContainer.prototype._bindCallbacks = function () {
        this._onResized = this._onResized.bind(this);
        this._broadcastMouseEnter = this._broadcastMouseEnter.bind(this);
        this._broadcastMouseMove = this._broadcastMouseMove.bind(this);
        this._broadcastMouseLeave = this._broadcastMouseLeave.bind(this);
    };
    RootContainer.prototype._bindEvents = function () {
        this._unbindEvents = this._eventEmitter.bindEvents([
            [
                constants_1.UI_EVENTS.FULLSCREEN_STATUS_CHANGED,
                this.view.setFullScreenStatus,
                this.view,
            ],
        ], this);
    };
    RootContainer.prototype._initUI = function (config) {
        var sizeConfig = tslib_1.__assign({}, config.size);
        this.view = new root_container_view_1.default({
            callbacks: {
                onMouseEnter: this._broadcastMouseEnter,
                onMouseLeave: this._broadcastMouseLeave,
                onMouseMove: this._broadcastMouseMove,
            },
            width: sizeConfig.width || null,
            height: sizeConfig.height || null,
            fillAllSpace: config.fillAllSpace || DEFAULT_CONFIG.fillAllSpace,
        });
        this._elementQueries = new element_queries_1.default(this.node, {
            prefix: '',
        });
    };
    RootContainer.prototype.appendComponentNode = function (node) {
        this.view.appendComponentNode(node);
    };
    RootContainer.prototype._broadcastMouseEnter = function () {
        this._eventEmitter.emit(constants_1.UI_EVENTS.MOUSE_ENTER_ON_PLAYER_TRIGGERED);
    };
    RootContainer.prototype._broadcastMouseMove = function () {
        this._eventEmitter.emit(constants_1.UI_EVENTS.MOUSE_MOVE_ON_PLAYER_TRIGGERED);
    };
    RootContainer.prototype._broadcastMouseLeave = function () {
        this._eventEmitter.emit(constants_1.UI_EVENTS.MOUSE_LEAVE_ON_PLAYER_TRIGGERED);
    };
    RootContainer.prototype._enableFocusInterceptors = function () {
        if (!this._disengageFocusWithin) {
            this._disengageFocusWithin = focus_within_1.default();
        }
        if (!this._disengageFocusSource) {
            focus_source_1.default.engage();
            this._disengageFocusSource = focus_source_1.default.disengage;
        }
    };
    RootContainer.prototype._disableFocusInterceptors = function () {
        if (this._disengageFocusSource) {
            this._disengageFocusSource();
            this._disengageFocusSource = null;
        }
        if (this._disengageFocusWithin) {
            this._disengageFocusWithin();
            this._disengageFocusWithin = null;
        }
    };
    RootContainer.prototype._onResized = function () {
        var width = this.view.getWidth();
        var height = this.view.getHeight();
        this._elementQueries.setWidth(width);
        this._eventEmitter.emit(constants_1.UI_EVENTS.RESIZE, { width: width, height: height });
    };
    /**
     * Method for attaching player node to your container
     * It's important to call this methods after `DOMContentLoaded` event!
     *
     * @example
     * document.addEventListener('DOMContentLoaded', function() {
     *   const config = { src: 'http://my-url/video.mp4' }
     *   const player = Playable.create(config);
     *
     *   player.attachToElement(document.getElementById('content'));
     * });
     */
    RootContainer.prototype.attachToElement = function (element) {
        this._enableFocusInterceptors();
        element.appendChild(this.node);
        if (!this._resizeObserver) {
            // NOTE: required for valid work of player "media queries"
            this._resizeObserver = new resize_observer_polyfill_1.default(this._onResized);
            this._resizeObserver.observe(this.node);
        }
    };
    /**
     * Method for setting width of player
     * @param width - Desired width of player in pixels
     * @example
     * player.setWidth(400);
     */
    RootContainer.prototype.setWidth = function (width) {
        this.view.setWidth(width);
        this._eventEmitter.emit(constants_1.UI_EVENTS.PLAYER_WIDTH_CHANGE_TRIGGERED, width);
    };
    /**
     * Return current width of player in pixels
     * @example
     * player.getWidth(); // 400
     */
    RootContainer.prototype.getWidth = function () {
        return this.view.getWidth();
    };
    /**
     * Method for setting width of player
     * @param height - Desired height of player in pixels
     * @example
     * player.setHeight(225);
     */
    RootContainer.prototype.setHeight = function (height) {
        this.view.setHeight(height);
        this._eventEmitter.emit(constants_1.UI_EVENTS.PLAYER_HEIGHT_CHANGE_TRIGGERED, height);
    };
    /**
     * Return current height of player in pixels
     * @example
     * player.getHeight(); // 225
     */
    RootContainer.prototype.getHeight = function () {
        return this.view.getHeight();
    };
    /**
     * Method for allowing player fill all available space
     * @param flag - `true` for allowing
     * @example
     * player.setFillAllSpace(true);
     */
    RootContainer.prototype.setFillAllSpace = function (flag) {
        this.view.setFillAllSpaceFlag(flag);
    };
    /**
     * Hide whole ui
     * @example
     * player.hide();
     */
    RootContainer.prototype.hide = function () {
        this.isHidden = true;
        this.view.hide();
    };
    /**
     * Show whole ui
     * @example
     * player.show();
     */
    RootContainer.prototype.show = function () {
        this.isHidden = false;
        this.view.show();
    };
    RootContainer.prototype.destroy = function () {
        this._unbindEvents();
        this._disableFocusInterceptors();
        if (this._resizeObserver) {
            this._resizeObserver.unobserve(this.node);
            this._resizeObserver = null;
        }
        this._elementQueries.destroy();
        this._elementQueries = null;
        this.view.destroy();
        this.view = null;
        this._eventEmitter = null;
    };
    RootContainer.moduleName = 'rootContainer';
    RootContainer.dependencies = ['eventEmitter', 'config'];
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], RootContainer.prototype, "node", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], RootContainer.prototype, "attachToElement", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], RootContainer.prototype, "setWidth", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], RootContainer.prototype, "getWidth", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], RootContainer.prototype, "setHeight", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], RootContainer.prototype, "getHeight", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], RootContainer.prototype, "setFillAllSpace", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], RootContainer.prototype, "hide", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], RootContainer.prototype, "show", null);
    return RootContainer;
}());
exports.default = RootContainer;
//# sourceMappingURL=root-container.js.map