"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var htmlToElement_1 = tslib_1.__importDefault(require("../ui/core/htmlToElement"));
var templates_1 = require("./templates");
var view_1 = tslib_1.__importDefault(require("../ui/core/view"));
var root_container_scss_1 = tslib_1.__importDefault(require("./root-container.scss"));
var RootContainerView = /** @class */ (function (_super) {
    tslib_1.__extends(RootContainerView, _super);
    function RootContainerView(config) {
        var _this = _super.call(this) || this;
        var width = config.width, height = config.height, fillAllSpace = config.fillAllSpace, callbacks = config.callbacks;
        _this._callbacks = callbacks;
        _this._$node = htmlToElement_1.default(templates_1.containerTemplate({ styles: _this.styleNames }));
        _this.setFillAllSpaceFlag(fillAllSpace);
        _this.setWidth(width);
        _this.setHeight(height);
        _this._bindEvents();
        return _this;
    }
    RootContainerView.prototype._bindEvents = function () {
        this._$node.addEventListener('mouseenter', this._callbacks.onMouseEnter);
        this._$node.addEventListener('mousemove', this._callbacks.onMouseMove);
        this._$node.addEventListener('mouseleave', this._callbacks.onMouseLeave);
    };
    RootContainerView.prototype._unbindEvents = function () {
        this._$node.removeEventListener('mouseenter', this._callbacks.onMouseEnter);
        this._$node.removeEventListener('mousemove', this._callbacks.onMouseMove);
        this._$node.removeEventListener('mouseleave', this._callbacks.onMouseLeave);
    };
    RootContainerView.prototype.setWidth = function (width) {
        if (!width) {
            return;
        }
        this._$node.style.width = width + "px";
    };
    RootContainerView.prototype.setHeight = function (height) {
        if (!height) {
            return;
        }
        this._$node.style.height = height + "px";
    };
    RootContainerView.prototype.getWidth = function () {
        return this._$node.offsetWidth;
    };
    RootContainerView.prototype.getHeight = function () {
        return this._$node.offsetHeight;
    };
    RootContainerView.prototype.show = function () {
        this._$node.classList.add(this.styleNames.hidden);
    };
    RootContainerView.prototype.hide = function () {
        this._$node.classList.remove(this.styleNames.hidden);
    };
    RootContainerView.prototype.appendComponentNode = function (node) {
        this._$node.appendChild(node);
    };
    RootContainerView.prototype.getNode = function () {
        return this._$node;
    };
    RootContainerView.prototype.setFullScreenStatus = function (isFullScreen) {
        if (isFullScreen) {
            this._$node.setAttribute('data-in-full-screen', 'true');
            this._$node.classList.add(this.styleNames.fullScreen);
        }
        else {
            this._$node.setAttribute('data-in-full-screen', 'false');
            this._$node.classList.remove(this.styleNames.fullScreen);
        }
    };
    RootContainerView.prototype.setFillAllSpaceFlag = function (isFillAllSpace) {
        if (isFillAllSpace === void 0) { isFillAllSpace = false; }
        if (isFillAllSpace) {
            this._$node.classList.add(this.styleNames.fillAllSpace);
        }
        else {
            this._$node.classList.remove(this.styleNames.fillAllSpace);
        }
    };
    RootContainerView.prototype.destroy = function () {
        this._unbindEvents();
        this._callbacks = null;
        if (this._$node.parentNode) {
            this._$node.parentNode.removeChild(this._$node);
        }
        this._$node = null;
    };
    return RootContainerView;
}(view_1.default));
RootContainerView.extendStyleNames(root_container_scss_1.default);
exports.default = RootContainerView;
//# sourceMappingURL=root-container.view.js.map