"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var player_api_decorator_1 = tslib_1.__importDefault(require("../../../core/player-api-decorator"));
var bottom_block_view_1 = tslib_1.__importDefault(require("./bottom-block.view"));
var constants_1 = require("../../../constants");
var BottomBlock = /** @class */ (function () {
    function BottomBlock(dependencies) {
        this._isBlockFocused = false;
        this.isHidden = false;
        var config = dependencies.config, eventEmitter = dependencies.eventEmitter;
        this._eventEmitter = eventEmitter;
        this._bindViewCallbacks();
        this._initUI(this._getElementsNodes(dependencies));
        this._initLogo(config.logo);
        this._bindEvents();
    }
    BottomBlock.prototype._getElementsNodes = function (dependencies) {
        var playControl = dependencies.playControl, progressControl = dependencies.progressControl, timeControl = dependencies.timeControl, volumeControl = dependencies.volumeControl, fullScreenControl = dependencies.fullScreenControl, logo = dependencies.logo;
        return {
            play: playControl.node,
            progress: progressControl.node,
            time: timeControl.node,
            volume: volumeControl.node,
            fullScreen: fullScreenControl.node,
            logo: logo.node,
        };
    };
    Object.defineProperty(BottomBlock.prototype, "node", {
        get: function () {
            return this.view.getNode();
        },
        enumerable: true,
        configurable: true
    });
    BottomBlock.prototype._initUI = function (elementNodes) {
        var config = {
            elements: elementNodes,
            callbacks: {
                onBlockMouseMove: this._setFocusState,
                onBlockMouseOut: this._removeFocusState,
            },
        };
        this.view = new BottomBlock.View(config);
    };
    BottomBlock.prototype._bindEvents = function () {
        this._unbindEvents = this._eventEmitter.bindEvents([[constants_1.UI_EVENTS.FULLSCREEN_STATUS_CHANGED, this._removeFocusState]], this);
    };
    BottomBlock.prototype._initLogo = function (logoConfig) {
        if (logoConfig) {
            if (typeof logoConfig === 'object') {
                this.setLogoAlwaysShowFlag(logoConfig.showAlways);
            }
        }
        else {
            this.hideLogo();
        }
    };
    BottomBlock.prototype._bindViewCallbacks = function () {
        this._setFocusState = this._setFocusState.bind(this);
        this._removeFocusState = this._removeFocusState.bind(this);
    };
    BottomBlock.prototype._setFocusState = function () {
        this._isBlockFocused = true;
    };
    BottomBlock.prototype._removeFocusState = function () {
        this._isBlockFocused = false;
    };
    Object.defineProperty(BottomBlock.prototype, "isFocused", {
        get: function () {
            return this._isBlockFocused;
        },
        enumerable: true,
        configurable: true
    });
    BottomBlock.prototype.showContent = function () {
        this.view.showContent();
    };
    BottomBlock.prototype.hideContent = function () {
        this.view.hideContent();
    };
    BottomBlock.prototype.hide = function () {
        this.isHidden = true;
        this.view.hide();
    };
    BottomBlock.prototype.show = function () {
        this.isHidden = false;
        this.view.show();
    };
    /**
     * Method for allowing logo to be always shown in bottom block
     * @param flag - `true` for showing always
     * @example
     * player.setLogoAlwaysShowFlag(true);
     *
     */
    BottomBlock.prototype.setLogoAlwaysShowFlag = function (flag) {
        this.view.setShouldLogoShowAlwaysFlag(flag);
    };
    /**
     * Method for hidding logo. If you use `setLogoAlwaysShowFlag` or `setControlsShouldAlwaysShow`, logo would automaticaly appear.
     * @example
     * player.hideLogo();
     */
    BottomBlock.prototype.hideLogo = function () {
        this.view.hideLogo();
    };
    /**
     * Method for showing logo.
     * @example
     * player.showLogo();
     */
    BottomBlock.prototype.showLogo = function () {
        this.view.showLogo();
    };
    /**
     * Method for showing play control.
     * @example
     * player.showPlayControl();
     */
    BottomBlock.prototype.showPlayControl = function () {
        this.view.showPlayControl();
    };
    /**
     * Method for showing volume control.
     * @example
     * player.showVolumeControl();
     */
    BottomBlock.prototype.showVolumeControl = function () {
        this.view.showVolumeControl();
    };
    /**
     * Method for showing time control.
     * @example
     * player.showTimeControl();
     */
    BottomBlock.prototype.showTimeControl = function () {
        this.view.showTimeControl();
    };
    /**
     * Method for showing full screen control.
     * @example
     * player.showFullScreenControl();
     */
    BottomBlock.prototype.showFullScreenControl = function () {
        this.view.showFullScreenControl();
    };
    /**
     * Method for showing progress control.
     * @example
     * player.showProgressControl();
     */
    BottomBlock.prototype.showProgressControl = function () {
        this.view.showProgressControl();
    };
    /**
     * Method for hidding play control.
     * @example
     * player.hidePlayControl();
     */
    BottomBlock.prototype.hidePlayControl = function () {
        this.view.hidePlayControl();
    };
    /**
     * Method for hidding voluem control.
     * @example
     * player.hideVolumeControl();
     */
    BottomBlock.prototype.hideVolumeControl = function () {
        this.view.hideVolumeControl();
    };
    /**
     * Method for hidding time control.
     * @example
     * player.hideTimeControl();
     */
    BottomBlock.prototype.hideTimeControl = function () {
        this.view.hideTimeControl();
    };
    /**
     * Method for hidding full screen control.
     * @example
     * player.hideFullScreenControl();
     */
    BottomBlock.prototype.hideFullScreenControl = function () {
        this.view.hideFullScreenControl();
    };
    /**
     * Method for hidding progress control.
     * @example
     * player.hideProgressControl();
     */
    BottomBlock.prototype.hideProgressControl = function () {
        this.view.hideProgressControl();
    };
    BottomBlock.prototype.destroy = function () {
        this._unbindEvents();
        this.view.destroy();
        this.view = null;
        this._eventEmitter = null;
    };
    BottomBlock.moduleName = 'bottomBlock';
    BottomBlock.View = bottom_block_view_1.default;
    BottomBlock.dependencies = [
        'config',
        'playControl',
        'progressControl',
        'timeControl',
        'volumeControl',
        'fullScreenControl',
        'logo',
        'eventEmitter',
    ];
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], BottomBlock.prototype, "setLogoAlwaysShowFlag", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], BottomBlock.prototype, "hideLogo", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], BottomBlock.prototype, "showLogo", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], BottomBlock.prototype, "showPlayControl", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], BottomBlock.prototype, "showVolumeControl", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], BottomBlock.prototype, "showTimeControl", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], BottomBlock.prototype, "showFullScreenControl", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], BottomBlock.prototype, "showProgressControl", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], BottomBlock.prototype, "hidePlayControl", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], BottomBlock.prototype, "hideVolumeControl", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], BottomBlock.prototype, "hideTimeControl", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], BottomBlock.prototype, "hideFullScreenControl", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], BottomBlock.prototype, "hideProgressControl", null);
    return BottomBlock;
}());
exports.default = BottomBlock;
//# sourceMappingURL=bottom-block.js.map