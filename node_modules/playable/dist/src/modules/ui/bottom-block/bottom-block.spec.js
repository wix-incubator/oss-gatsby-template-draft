"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("jsdom-global/register");
var chai_1 = require("chai");
var testkit_1 = tslib_1.__importDefault(require("../../../testkit"));
describe('BottomBlock', function () {
    var testkit;
    var controls;
    beforeEach(function () {
        testkit = testkit_1.default();
        controls = testkit.getModule('bottomBlock');
    });
    describe('constructor', function () {
        it('should create instance ', function () {
            chai_1.expect(controls).to.exist;
            chai_1.expect(controls.view).to.exist;
        });
    });
    describe('instance', function () {
        it('should have method for setting controls focused state', function () {
            chai_1.expect(controls._setFocusState).to.exist;
            controls._setFocusState();
            chai_1.expect(controls._isBlockFocused).to.be.true;
        });
        it('should have method for removing controls focused state', function () {
            chai_1.expect(controls._removeFocusState).to.exist;
            controls._setFocusState();
            controls._removeFocusState({
                stopPropagation: function () { },
            });
            chai_1.expect(controls._isBlockFocused).to.be.false;
        });
    });
    describe('API', function () {
        it('should have method for showing whole view', function () {
            chai_1.expect(controls.show).to.exist;
            controls.show();
            chai_1.expect(controls.isHidden).to.be.false;
        });
        it('should have method for hiding whole view', function () {
            chai_1.expect(controls.hide).to.exist;
            controls.hide();
            chai_1.expect(controls.isHidden).to.be.true;
        });
        it('should have method for destroying', function () {
            chai_1.expect(controls.destroy).to.exist;
            controls.destroy();
            chai_1.expect(controls.view).to.not.exist;
            chai_1.expect(controls.fullscreenControl).to.not.exist;
            chai_1.expect(controls.playControl).to.not.exist;
            chai_1.expect(controls.progressControl).to.not.exist;
            chai_1.expect(controls.timeControl).to.not.exist;
            chai_1.expect(controls.volumeControl).to.not.exist;
        });
    });
    describe('View', function () {
        it('should have method for showing block with controls', function () {
            chai_1.expect(controls.view.showContent).to.exist;
        });
        it('should have method for hidding block with controls', function () {
            chai_1.expect(controls.view.hideContent).to.exist;
        });
        it('should have method for showing itself', function () {
            chai_1.expect(controls.view.show).to.exist;
        });
        it('should have method for hidding itself', function () {
            chai_1.expect(controls.view.hide).to.exist;
        });
        it('should have method gettind root node', function () {
            chai_1.expect(controls.view.getNode).to.exist;
        });
        it('should have method for destroying', function () {
            chai_1.expect(controls.view.destroy).to.exist;
        });
    });
});
//# sourceMappingURL=bottom-block.spec.js.map