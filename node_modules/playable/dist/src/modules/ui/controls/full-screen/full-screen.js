"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("../../../../constants");
var keyboard_interceptor_1 = tslib_1.__importStar(require("../../../../utils/keyboard-interceptor"));
var full_screen_view_1 = tslib_1.__importDefault(require("./full-screen.view"));
var FullScreenControl = /** @class */ (function () {
    function FullScreenControl(_a) {
        var eventEmitter = _a.eventEmitter, fullScreenManager = _a.fullScreenManager, textMap = _a.textMap, tooltipService = _a.tooltipService, theme = _a.theme;
        this._eventEmitter = eventEmitter;
        this._fullScreenManager = fullScreenManager;
        this._textMap = textMap;
        this._theme = theme;
        this._tooltipService = tooltipService;
        this._isInFullScreen = null;
        this._bindCallbacks();
        this._initUI();
        this._bindEvents();
        this.setControlStatus(false);
        if (!this._fullScreenManager.isEnabled) {
            this.hide();
        }
        this._initInterceptor();
    }
    Object.defineProperty(FullScreenControl.prototype, "node", {
        get: function () {
            return this.view.getNode();
        },
        enumerable: true,
        configurable: true
    });
    FullScreenControl.prototype._bindCallbacks = function () {
        this._toggleFullScreen = this._toggleFullScreen.bind(this);
    };
    FullScreenControl.prototype._bindEvents = function () {
        this._unbindEvents = this._eventEmitter.bindEvents([[constants_1.UI_EVENTS.FULLSCREEN_STATUS_CHANGED, this.setControlStatus]], this);
    };
    FullScreenControl.prototype._initUI = function () {
        var config = {
            callbacks: {
                onButtonClick: this._toggleFullScreen,
            },
            textMap: this._textMap,
            tooltipService: this._tooltipService,
            theme: this._theme,
        };
        this.view = new FullScreenControl.View(config);
    };
    FullScreenControl.prototype._initInterceptor = function () {
        var _this = this;
        var _a;
        this._interceptor = new keyboard_interceptor_1.default(this.node, (_a = {},
            _a[keyboard_interceptor_1.KEYCODES.SPACE_BAR] = function (e) {
                e.stopPropagation();
                _this._eventEmitter.emit(constants_1.UI_EVENTS.KEYBOARD_KEYDOWN_INTERCEPTED);
            },
            _a[keyboard_interceptor_1.KEYCODES.ENTER] = function (e) {
                e.stopPropagation();
                _this._eventEmitter.emit(constants_1.UI_EVENTS.KEYBOARD_KEYDOWN_INTERCEPTED);
            },
            _a));
    };
    FullScreenControl.prototype._destroyInterceptor = function () {
        this._interceptor.destroy();
    };
    FullScreenControl.prototype._toggleFullScreen = function () {
        if (this._isInFullScreen) {
            this._exitFullScreen();
        }
        else {
            this._enterFullScreen();
        }
    };
    FullScreenControl.prototype._enterFullScreen = function () {
        this._fullScreenManager.enterFullScreen();
    };
    FullScreenControl.prototype._exitFullScreen = function () {
        this._fullScreenManager.exitFullScreen();
    };
    FullScreenControl.prototype.setControlStatus = function (isInFullScreen) {
        this._isInFullScreen = isInFullScreen;
        this.view.setState({ isInFullScreen: this._isInFullScreen });
    };
    FullScreenControl.prototype.hide = function () {
        this.isHidden = true;
        this.view.hide();
    };
    FullScreenControl.prototype.show = function () {
        this.isHidden = false;
        this.view.show();
    };
    FullScreenControl.prototype.destroy = function () {
        this._destroyInterceptor();
        this._unbindEvents();
        this.view.destroy();
        this.view = null;
        this._eventEmitter = null;
        this._fullScreenManager = null;
        this._textMap = null;
    };
    FullScreenControl.moduleName = 'fullScreenControl';
    FullScreenControl.View = full_screen_view_1.default;
    FullScreenControl.dependencies = [
        'eventEmitter',
        'fullScreenManager',
        'textMap',
        'tooltipService',
        'theme',
    ];
    return FullScreenControl;
}());
exports.default = FullScreenControl;
//# sourceMappingURL=full-screen.js.map