"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("jsdom-global/register");
var chai_1 = require("chai");
//@ts-ignore
var sinon = tslib_1.__importStar(require("sinon"));
var testkit_1 = tslib_1.__importDefault(require("../../../../testkit"));
var constants_1 = require("../../../../constants");
var FullScreenManagerMock = /** @class */ (function () {
    function FullScreenManagerMock() {
        this.enterFullScreen = function () { };
        this.exitFullScreen = function () { };
        this.isEnabled = true;
        this._config = {};
    }
    return FullScreenManagerMock;
}());
describe('FullScreenControl', function () {
    var testkit;
    var control = {};
    var eventEmitter = {};
    var fullScreenManager = {};
    beforeEach(function () {
        testkit = testkit_1.default();
        testkit.registerModuleAsSingleton('fullScreenManager', FullScreenManagerMock);
        fullScreenManager = testkit.getModule('fullScreenManager');
        eventEmitter = testkit.getModule('eventEmitter');
        control = testkit.getModule('fullScreenControl');
    });
    describe('constructor', function () {
        it('should create instance ', function () {
            chai_1.expect(control).to.exist;
            chai_1.expect(control.view).to.exist;
        });
    });
    describe('ui events listeners', function () {
        it('should call callback on playback status change', function () {
            var spy = sinon.spy(control, 'setControlStatus');
            control._bindEvents();
            eventEmitter.emit(constants_1.UI_EVENTS.FULLSCREEN_STATUS_CHANGED);
            chai_1.expect(spy.called).to.be.true;
        });
    });
    describe('API', function () {
        it('should have method for setting current time', function () {
            var spy = sinon.spy(control.view, 'setState');
            chai_1.expect(control.setControlStatus).to.exist;
            control.setControlStatus();
            chai_1.expect(spy.called).to.be.true;
        });
        it('should have method for showing whole view', function () {
            chai_1.expect(control.show).to.exist;
            control.show();
            chai_1.expect(control.isHidden).to.be.false;
        });
        it('should have method for hiding whole view', function () {
            chai_1.expect(control.hide).to.exist;
            control.hide();
            chai_1.expect(control.isHidden).to.be.true;
        });
        it('should have method for destroying', function () {
            var spy = sinon.spy(control, '_unbindEvents');
            chai_1.expect(control.destroy).to.exist;
            control.destroy();
            chai_1.expect(control.view).to.not.exist;
            chai_1.expect(control._eventEmitter).to.not.exist;
            chai_1.expect(spy.called).to.be.true;
        });
    });
    describe('internal methods', function () {
        it('should call callbacks from uiView', function () {
            var enterSpy = sinon.spy(fullScreenManager, 'enterFullScreen');
            var exitSpy = sinon.spy(fullScreenManager, 'exitFullScreen');
            control._enterFullScreen();
            chai_1.expect(enterSpy.called).to.be.true;
            control._exitFullScreen();
            chai_1.expect(exitSpy.called).to.be.true;
            fullScreenManager.enterFullScreen.restore();
            fullScreenManager.exitFullScreen.restore();
        });
    });
});
//# sourceMappingURL=full-screen.spec.js.map