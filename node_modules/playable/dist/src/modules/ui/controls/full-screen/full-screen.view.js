"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("../../../../constants");
var view_1 = tslib_1.__importDefault(require("../../core/view"));
var templates_1 = require("./templates");
var htmlToElement_1 = tslib_1.__importDefault(require("../../core/htmlToElement"));
var getElementByHook_1 = tslib_1.__importDefault(require("../../core/getElementByHook"));
var full_screen_theme_1 = tslib_1.__importDefault(require("./full-screen.theme"));
var full_screen_scss_1 = tslib_1.__importDefault(require("./full-screen.scss"));
var DATA_IS_IN_FULL_SCREEN = 'data-is-in-full-screen';
var FullScreenView = /** @class */ (function (_super) {
    tslib_1.__extends(FullScreenView, _super);
    function FullScreenView(config) {
        var _this = this;
        var callbacks = config.callbacks, textMap = config.textMap, tooltipService = config.tooltipService, theme = config.theme;
        _this = _super.call(this, theme) || this;
        _this._callbacks = callbacks;
        _this._textMap = textMap;
        _this._$node = htmlToElement_1.default(templates_1.controlTemplate({
            styles: _this.styleNames,
            texts: {
                label: _this._textMap.get(constants_1.TEXT_LABELS.ENTER_FULL_SCREEN_LABEL),
            },
        }));
        _this._$toggleFullScreenControl = getElementByHook_1.default(_this._$node, 'full-screen-button');
        _this._tooltipReference = tooltipService.createReference(_this._$toggleFullScreenControl, {
            text: _this._textMap.get(constants_1.TEXT_LABELS.ENTER_FULL_SCREEN_TOOLTIP),
        });
        _this.setState({ isInFullScreen: false });
        _this._bindEvents();
        return _this;
    }
    FullScreenView.prototype._bindEvents = function () {
        this._onButtonClick = this._onButtonClick.bind(this);
        this._$toggleFullScreenControl.addEventListener('click', this._onButtonClick);
    };
    FullScreenView.prototype._unbindEvents = function () {
        this._$toggleFullScreenControl.removeEventListener('click', this._onButtonClick);
    };
    FullScreenView.prototype._onButtonClick = function () {
        this._$toggleFullScreenControl.focus();
        this._callbacks.onButtonClick();
    };
    FullScreenView.prototype.setState = function (_a) {
        var isInFullScreen = _a.isInFullScreen;
        if (isInFullScreen) {
            this._$toggleFullScreenControl.classList.add(this.styleNames.inFullScreen);
            this._$toggleFullScreenControl.innerHTML = templates_1.exitFullScreenIconTemplate({
                styles: this.styleNames,
                themeStyles: this.themeStyles,
            });
            this._$toggleFullScreenControl.setAttribute('aria-label', this._textMap.get(constants_1.TEXT_LABELS.EXIT_FULL_SCREEN_LABEL));
            this._tooltipReference.setText(this._textMap.get(constants_1.TEXT_LABELS.EXIT_FULL_SCREEN_TOOLTIP));
        }
        else {
            this._$toggleFullScreenControl.classList.remove(this.styleNames.inFullScreen);
            this._$toggleFullScreenControl.innerHTML = templates_1.enterFullScreenIconTemplate({
                styles: this.styleNames,
                themeStyles: this.themeStyles,
            });
            this._$toggleFullScreenControl.setAttribute('aria-label', this._textMap.get(constants_1.TEXT_LABELS.ENTER_FULL_SCREEN_LABEL));
            this._tooltipReference.setText(this._textMap.get(constants_1.TEXT_LABELS.ENTER_FULL_SCREEN_TOOLTIP));
        }
        this._$node.setAttribute(DATA_IS_IN_FULL_SCREEN, String(isInFullScreen));
    };
    FullScreenView.prototype.hide = function () {
        this._$node.classList.add(this.styleNames.hidden);
    };
    FullScreenView.prototype.show = function () {
        this._$node.classList.remove(this.styleNames.hidden);
    };
    FullScreenView.prototype.getNode = function () {
        return this._$node;
    };
    FullScreenView.prototype.destroy = function () {
        this._unbindEvents();
        this._callbacks = null;
        this._tooltipReference.destroy();
        this._tooltipReference = null;
        if (this._$node.parentNode) {
            this._$node.parentNode.removeChild(this._$node);
        }
        this._$toggleFullScreenControl = null;
        this._$node = null;
        this._textMap = null;
    };
    return FullScreenView;
}(view_1.default));
FullScreenView.setTheme(full_screen_theme_1.default);
FullScreenView.extendStyleNames(full_screen_scss_1.default);
exports.default = FullScreenView;
//# sourceMappingURL=full-screen.view.js.map