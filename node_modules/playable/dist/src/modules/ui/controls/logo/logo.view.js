"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("../../../../constants");
var view_1 = tslib_1.__importDefault(require("../../core/view"));
var templates_1 = require("./templates");
var htmlToElement_1 = tslib_1.__importDefault(require("../../core/htmlToElement"));
var getElementByHook_1 = tslib_1.__importDefault(require("../../core/getElementByHook"));
var logo_scss_1 = tslib_1.__importDefault(require("./logo.scss"));
var LogoView = /** @class */ (function (_super) {
    tslib_1.__extends(LogoView, _super);
    function LogoView(config) {
        var _this = _super.call(this) || this;
        var callbacks = config.callbacks, textMap = config.textMap, tooltipService = config.tooltipService;
        _this._callbacks = callbacks;
        _this._textMap = textMap;
        _this._$node = htmlToElement_1.default(templates_1.logoTemplate({
            styles: _this.styleNames,
            texts: {
                label: _this._textMap.get(constants_1.TEXT_LABELS.LOGO_LABEL),
            },
        }));
        _this._$logo = getElementByHook_1.default(_this._$node, 'company-logo');
        _this._$placeholder = getElementByHook_1.default(_this._$node, 'logo-placeholder');
        _this._tooltipReference = tooltipService.createReference(_this._$node, {
            text: _this._textMap.get(constants_1.TEXT_LABELS.LOGO_TOOLTIP),
        });
        _this.setLogo(config.logo);
        _this._bindCallbacks();
        _this._bindEvents();
        return _this;
    }
    LogoView.prototype.setLogo = function (url) {
        if (url) {
            this._$logo.classList.remove(this.styleNames.hidden);
            this._$placeholder.classList.add(this.styleNames.hidden);
            this._$logo.setAttribute('src', url);
        }
        else {
            this._$logo.classList.add(this.styleNames.hidden);
            this._$placeholder.classList.remove(this.styleNames.hidden);
            this._$logo.removeAttribute('src');
        }
    };
    LogoView.prototype.setDisplayAsLink = function (flag) {
        if (flag) {
            this._$node.classList.add(this.styleNames.link);
            this._tooltipReference.enable();
        }
        else {
            this._$node.classList.remove(this.styleNames.link);
            this._tooltipReference.disable();
        }
    };
    LogoView.prototype._bindCallbacks = function () {
        this._onNodeClick = this._onNodeClick.bind(this);
    };
    LogoView.prototype._bindEvents = function () {
        this._$node.addEventListener('click', this._onNodeClick);
    };
    LogoView.prototype._unbindEvents = function () {
        this._$node.removeEventListener('click', this._onNodeClick);
    };
    LogoView.prototype._onNodeClick = function () {
        this._$node.focus();
        this._callbacks.onLogoClick();
    };
    LogoView.prototype.show = function () {
        this._$node.classList.remove(this.styleNames.hidden);
    };
    LogoView.prototype.hide = function () {
        this._$node.classList.remove(this.styleNames.hidden);
    };
    LogoView.prototype.getNode = function () {
        return this._$node;
    };
    LogoView.prototype.destroy = function () {
        this._unbindEvents();
        this._callbacks = null;
        this._tooltipReference.destroy();
        this._tooltipReference = null;
        if (this._$node.parentNode) {
            this._$node.parentNode.removeChild(this._$node);
        }
        this._$node = null;
        this._$logo = null;
        this._$placeholder = null;
        this._tooltipReference = null;
        this._textMap = null;
    };
    return LogoView;
}(view_1.default));
LogoView.extendStyleNames(logo_scss_1.default);
exports.default = LogoView;
//# sourceMappingURL=logo.view.js.map