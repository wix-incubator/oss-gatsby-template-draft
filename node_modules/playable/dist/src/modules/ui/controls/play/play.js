"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var play_view_1 = tslib_1.__importDefault(require("./play.view"));
var keyboard_interceptor_1 = tslib_1.__importStar(require("../../../../utils/keyboard-interceptor"));
var constants_1 = require("../../../../constants");
var PlayControl = /** @class */ (function () {
    function PlayControl(_a) {
        var engine = _a.engine, eventEmitter = _a.eventEmitter, textMap = _a.textMap, theme = _a.theme;
        this._engine = engine;
        this._eventEmitter = eventEmitter;
        this._textMap = textMap;
        this._theme = theme;
        this._isPlaying = null;
        this._bindCallbacks();
        this._initUI();
        this._bindEvents();
        this.setControlStatus(false);
        this._initInterceptor();
    }
    Object.defineProperty(PlayControl.prototype, "node", {
        get: function () {
            return this.view.getNode();
        },
        enumerable: true,
        configurable: true
    });
    PlayControl.prototype._initInterceptor = function () {
        var _this = this;
        var _a;
        this._interceptor = new keyboard_interceptor_1.default(this.node, (_a = {},
            _a[keyboard_interceptor_1.KEYCODES.SPACE_BAR] = function (e) {
                e.stopPropagation();
                _this._eventEmitter.emit(constants_1.UI_EVENTS.TOGGLE_PLAYBACK_WITH_KEYBOARD_TRIGGERED);
            },
            _a[keyboard_interceptor_1.KEYCODES.ENTER] = function (e) {
                e.stopPropagation();
                _this._eventEmitter.emit(constants_1.UI_EVENTS.TOGGLE_PLAYBACK_WITH_KEYBOARD_TRIGGERED);
            },
            _a));
    };
    PlayControl.prototype._destroyInterceptor = function () {
        this._interceptor.destroy();
    };
    PlayControl.prototype._bindCallbacks = function () {
        this._togglePlayback = this._togglePlayback.bind(this);
    };
    PlayControl.prototype._bindEvents = function () {
        this._unbindEvents = this._eventEmitter.bindEvents([[constants_1.VIDEO_EVENTS.STATE_CHANGED, this._updatePlayingStatus]], this);
    };
    PlayControl.prototype._togglePlayback = function () {
        if (this._isPlaying) {
            this._pauseVideo();
        }
        else {
            this._playVideo();
        }
    };
    PlayControl.prototype._playVideo = function () {
        this._engine.play();
        this._eventEmitter.emit(constants_1.UI_EVENTS.PLAY_TRIGGERED);
    };
    PlayControl.prototype._pauseVideo = function () {
        this._engine.pause();
        this._eventEmitter.emit(constants_1.UI_EVENTS.PAUSE_TRIGGERED);
    };
    PlayControl.prototype._updatePlayingStatus = function (_a) {
        var nextState = _a.nextState;
        if (nextState === constants_1.EngineState.SRC_SET) {
            this.reset();
        }
        else if (nextState === constants_1.EngineState.PLAYING) {
            this.setControlStatus(true);
        }
        else if (nextState === constants_1.EngineState.PAUSED ||
            nextState === constants_1.EngineState.ENDED ||
            nextState === constants_1.EngineState.SEEK_IN_PROGRESS) {
            this.setControlStatus(false);
        }
    };
    PlayControl.prototype._initUI = function () {
        var config = {
            callbacks: {
                onButtonClick: this._togglePlayback,
            },
            theme: this._theme,
            textMap: this._textMap,
        };
        this.view = new PlayControl.View(config);
    };
    PlayControl.prototype.setControlStatus = function (isPlaying) {
        this._isPlaying = isPlaying;
        this.view.setState({ isPlaying: this._isPlaying });
    };
    PlayControl.prototype.reset = function () {
        this.setControlStatus(false);
    };
    PlayControl.prototype.destroy = function () {
        this._destroyInterceptor();
        this._unbindEvents();
        this.view.destroy();
        this.view = null;
        this._eventEmitter = null;
        this._engine = null;
        this._textMap = null;
    };
    PlayControl.moduleName = 'playControl';
    PlayControl.View = play_view_1.default;
    PlayControl.dependencies = ['engine', 'eventEmitter', 'textMap', 'theme'];
    return PlayControl;
}());
exports.default = PlayControl;
//# sourceMappingURL=play.js.map