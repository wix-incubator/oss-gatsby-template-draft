"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("jsdom-global/register");
var chai_1 = require("chai");
//@ts-ignore
var sinon = tslib_1.__importStar(require("sinon"));
var testkit_1 = tslib_1.__importDefault(require("../../../../testkit"));
var constants_1 = require("../../../../constants");
describe('PlayControl', function () {
    var testkit;
    var control;
    var eventEmitter;
    beforeEach(function () {
        testkit = testkit_1.default();
        eventEmitter = testkit.getModule('eventEmitter');
        control = testkit.getModule('playControl');
    });
    describe('constructor', function () {
        it('should create instance ', function () {
            chai_1.expect(control).to.exist;
            chai_1.expect(control.view).to.exist;
        });
    });
    describe('API', function () {
        it('should have method for setting playback status', function () {
            var spy = sinon.spy(control.view, 'setState');
            chai_1.expect(control.setControlStatus).to.exist;
            control.setControlStatus();
            chai_1.expect(spy.called).to.be.true;
        });
        it('should have method for destroying', function () {
            var spy = sinon.spy(control, '_unbindEvents');
            chai_1.expect(control.destroy).to.exist;
            control.destroy();
            chai_1.expect(control.view).to.not.exist;
            chai_1.expect(control._eventEmitter).to.not.exist;
            chai_1.expect(spy.called).to.be.true;
        });
    });
    describe('video events listeners', function () {
        it('should call callback on playback status change', function () {
            var spy = sinon.spy(control, '_updatePlayingStatus');
            control._bindEvents();
            eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {});
            chai_1.expect(spy.called).to.be.true;
        });
    });
    describe('internal methods', function () {
        it('should change view based on playback status', function () {
            var spy = sinon.spy(control, 'setControlStatus');
            control._updatePlayingStatus({ nextState: constants_1.EngineState.PLAYING });
            chai_1.expect(spy.calledWith(true)).to.be.true;
            control._updatePlayingStatus({ nextState: constants_1.EngineState.PAUSED });
            chai_1.expect(spy.calledWith(false)).to.be.true;
        });
        it('should change playback status', function () {
            var playSpy = sinon.spy(control._engine, 'play');
            var pauseSpy = sinon.spy(control._engine, 'pause');
            control._playVideo();
            chai_1.expect(playSpy.called).to.be.true;
            control._pauseVideo();
            chai_1.expect(pauseSpy.called).to.be.true;
        });
    });
});
//# sourceMappingURL=play.spec.js.map