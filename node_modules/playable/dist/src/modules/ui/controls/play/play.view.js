"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("../../../../constants");
var view_1 = tslib_1.__importDefault(require("../../core/view"));
var templates_1 = require("./templates");
var htmlToElement_1 = tslib_1.__importDefault(require("../../core/htmlToElement"));
var getElementByHook_1 = tslib_1.__importDefault(require("../../core/getElementByHook"));
var play_theme_1 = tslib_1.__importDefault(require("./play.theme"));
var play_scss_1 = tslib_1.__importDefault(require("./play.scss"));
var DATA_IS_PLAYING = 'data-is-playing';
var PlayView = /** @class */ (function (_super) {
    tslib_1.__extends(PlayView, _super);
    function PlayView(config) {
        var _this = this;
        var callbacks = config.callbacks, textMap = config.textMap, theme = config.theme;
        _this = _super.call(this, theme) || this;
        _this._callbacks = callbacks;
        _this._textMap = textMap;
        _this._$node = htmlToElement_1.default(templates_1.controlTemplate({
            styles: _this.styleNames,
            texts: {
                label: _this._textMap.get(constants_1.TEXT_LABELS.PLAY_CONTROL_LABEL),
            },
        }));
        _this._$playbackControl = getElementByHook_1.default(_this._$node, 'playback-control');
        _this.setState({ isPlaying: false });
        _this._bindEvents();
        return _this;
    }
    PlayView.prototype._bindEvents = function () {
        this._onButtonClick = this._onButtonClick.bind(this);
        this._$playbackControl.addEventListener('click', this._onButtonClick);
    };
    PlayView.prototype._unbindEvents = function () {
        this._$playbackControl.removeEventListener('click', this._onButtonClick);
    };
    PlayView.prototype._onButtonClick = function () {
        this._$playbackControl.focus();
        this._callbacks.onButtonClick();
    };
    PlayView.prototype.setState = function (_a) {
        var isPlaying = _a.isPlaying;
        if (isPlaying) {
            this._$playbackControl.classList.remove(this.styleNames.paused);
            this._$playbackControl.innerHTML = templates_1.pauseIconTemplate({
                styles: this.styleNames,
                themeStyles: this.themeStyles,
            });
            this._$playbackControl.setAttribute('aria-label', this._textMap.get(constants_1.TEXT_LABELS.PAUSE_CONTROL_LABEL));
        }
        else {
            this._$playbackControl.classList.add(this.styleNames.paused);
            this._$playbackControl.innerHTML = templates_1.playIconTemplate({
                styles: this.styleNames,
                themeStyles: this.themeStyles,
            });
            this._$playbackControl.setAttribute('aria-label', this._textMap.get(constants_1.TEXT_LABELS.PLAY_CONTROL_LABEL));
        }
        this._$node.setAttribute(DATA_IS_PLAYING, String(isPlaying));
    };
    PlayView.prototype.show = function () {
        this._$node.classList.remove(this.styleNames.hidden);
    };
    PlayView.prototype.hide = function () {
        this._$node.classList.add(this.styleNames.hidden);
    };
    PlayView.prototype.getNode = function () {
        return this._$node;
    };
    PlayView.prototype.destroy = function () {
        this._unbindEvents();
        this._callbacks = null;
        if (this._$node.parentNode) {
            this._$node.parentNode.removeChild(this._$node);
        }
        this._$playbackControl = null;
        this._$node = null;
        this._textMap = null;
    };
    return PlayView;
}(view_1.default));
PlayView.setTheme(play_theme_1.default);
PlayView.extendStyleNames(play_scss_1.default);
exports.default = PlayView;
//# sourceMappingURL=play.view.js.map