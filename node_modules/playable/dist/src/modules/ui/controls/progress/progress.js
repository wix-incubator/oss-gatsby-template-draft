"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var progress_view_1 = tslib_1.__importDefault(require("./progress.view"));
var video_data_1 = require("../../../../utils/video-data");
var constants_1 = require("../../../../constants");
var keyboard_control_1 = require("../../../keyboard-control/keyboard-control");
var keyboard_interceptor_1 = tslib_1.__importStar(require("../../../../utils/keyboard-interceptor"));
var player_api_decorator_1 = tslib_1.__importDefault(require("../../../../core/player-api-decorator"));
var UPDATE_INTERVAL_DELAY = 1000 / 60;
var ProgressControl = /** @class */ (function () {
    function ProgressControl(_a) {
        var engine = _a.engine, liveStateEngine = _a.liveStateEngine, eventEmitter = _a.eventEmitter, textMap = _a.textMap, tooltipService = _a.tooltipService, theme = _a.theme;
        this._engine = engine;
        this._liveStateEngine = liveStateEngine;
        this._eventEmitter = eventEmitter;
        this._textMap = textMap;
        this._tooltipService = tooltipService;
        this._isUserInteracting = false;
        this._currentProgress = 0;
        this._theme = theme;
        this._timeIndicatorsToAdd = [];
        this._bindCallbacks();
        this._initUI();
        this._bindEvents();
        this.view.setPlayed(0);
        this.view.setBuffered(0);
        this._initInterceptor();
    }
    Object.defineProperty(ProgressControl.prototype, "node", {
        get: function () {
            return this.view.getNode();
        },
        enumerable: true,
        configurable: true
    });
    ProgressControl.prototype._bindEvents = function () {
        this._unbindEvents = this._eventEmitter.bindEvents([
            [constants_1.VIDEO_EVENTS.STATE_CHANGED, this._processStateChange],
            [constants_1.VIDEO_EVENTS.LIVE_STATE_CHANGED, this._processLiveStateChange],
            [constants_1.VIDEO_EVENTS.CHUNK_LOADED, this._updateBufferIndicator],
            [constants_1.VIDEO_EVENTS.DURATION_UPDATED, this._updateAllIndicators],
        ], this);
    };
    ProgressControl.prototype._initUI = function () {
        var config = {
            callbacks: {
                onSyncWithLiveClick: this._syncWithLive,
                onSyncWithLiveMouseEnter: this._onSyncWithLiveMouseEnter,
                onSyncWithLiveMouseLeave: this._onSyncWithLiveMouseLeave,
                onChangePlayedProgress: this._changePlayedProgress,
                onSeekToByMouseStart: this._onSeekToByMouseStart,
                onSeekToByMouseEnd: this._onSeekToByMouseEnd,
                onDragStart: this._onUserInteractionStarts,
                onDragEnd: this._onUserInteractionEnds,
            },
            theme: this._theme,
            textMap: this._textMap,
            tooltipService: this._tooltipService,
        };
        this.view = new ProgressControl.View(config);
    };
    ProgressControl.prototype._initInterceptor = function () {
        var _this = this;
        var _a;
        this._interceptor = new keyboard_interceptor_1.default(this.view.getNode(), (_a = {},
            _a[keyboard_interceptor_1.KEYCODES.UP_ARROW] = function (e) {
                e.stopPropagation();
                e.preventDefault();
                _this._eventEmitter.emit(constants_1.UI_EVENTS.KEYBOARD_KEYDOWN_INTERCEPTED);
                _this._eventEmitter.emit(constants_1.UI_EVENTS.GO_FORWARD_WITH_KEYBOARD_TRIGGERED);
                _this._engine.goForward(keyboard_control_1.AMOUNT_TO_SKIP_SECONDS);
            },
            _a[keyboard_interceptor_1.KEYCODES.DOWN_ARROW] = function (e) {
                e.stopPropagation();
                e.preventDefault();
                _this._eventEmitter.emit(constants_1.UI_EVENTS.KEYBOARD_KEYDOWN_INTERCEPTED);
                _this._eventEmitter.emit(constants_1.UI_EVENTS.GO_BACKWARD_WITH_KEYBOARD_TRIGGERED);
                _this._engine.goBackward(keyboard_control_1.AMOUNT_TO_SKIP_SECONDS);
            },
            _a[keyboard_interceptor_1.KEYCODES.RIGHT_ARROW] = function (e) {
                e.stopPropagation();
                e.preventDefault();
                _this._eventEmitter.emit(constants_1.UI_EVENTS.KEYBOARD_KEYDOWN_INTERCEPTED);
                _this._eventEmitter.emit(constants_1.UI_EVENTS.GO_FORWARD_WITH_KEYBOARD_TRIGGERED);
                _this._engine.goForward(keyboard_control_1.AMOUNT_TO_SKIP_SECONDS);
            },
            _a[keyboard_interceptor_1.KEYCODES.LEFT_ARROW] = function (e) {
                e.stopPropagation();
                e.preventDefault();
                _this._eventEmitter.emit(constants_1.UI_EVENTS.KEYBOARD_KEYDOWN_INTERCEPTED);
                _this._eventEmitter.emit(constants_1.UI_EVENTS.GO_BACKWARD_WITH_KEYBOARD_TRIGGERED);
                _this._engine.goBackward(keyboard_control_1.AMOUNT_TO_SKIP_SECONDS);
            },
            _a));
    };
    ProgressControl.prototype._destroyInterceptor = function () {
        this._interceptor.destroy();
    };
    ProgressControl.prototype._bindCallbacks = function () {
        this._syncWithLive = this._syncWithLive.bind(this);
        this._onSyncWithLiveMouseEnter = this._onSyncWithLiveMouseEnter.bind(this);
        this._onSyncWithLiveMouseLeave = this._onSyncWithLiveMouseLeave.bind(this);
        this._updateControlOnInterval = this._updateControlOnInterval.bind(this);
        this._changePlayedProgress = this._changePlayedProgress.bind(this);
        this._onSeekToByMouseStart = this._onSeekToByMouseStart.bind(this);
        this._onSeekToByMouseEnd = this._onSeekToByMouseEnd.bind(this);
        this._onUserInteractionStarts = this._onUserInteractionStarts.bind(this);
        this._onUserInteractionEnds = this._onUserInteractionEnds.bind(this);
        this._processStateChange = this._processStateChange.bind(this);
        this._playVideoOnProgressManipulationEnd = this._playVideoOnProgressManipulationEnd.bind(this);
    };
    ProgressControl.prototype._changePlayedProgress = function (value) {
        if (this._currentProgress === value) {
            return;
        }
        this._currentProgress = value;
        this._changeCurrentTimeOfVideo(value / 100);
    };
    ProgressControl.prototype._startIntervalUpdates = function () {
        if (this._updateControlInterval) {
            this._stopIntervalUpdates();
        }
        this._updateControlOnInterval();
        this._updateControlInterval = window.setInterval(this._updateControlOnInterval, UPDATE_INTERVAL_DELAY);
    };
    ProgressControl.prototype._onSeekToByMouseStart = function (percent) {
        var durationTime = this._engine.getDurationTime();
        var seekTime = durationTime * percent / 100;
        var time = this._engine.isDynamicContent
            ? seekTime - durationTime
            : seekTime;
        this.view.showProgressTimeTooltip({ time: time, percent: percent });
    };
    ProgressControl.prototype._onSeekToByMouseEnd = function () {
        this.view.hideProgressTimeTooltip();
    };
    ProgressControl.prototype._stopIntervalUpdates = function () {
        window.clearInterval(this._updateControlInterval);
        this._updateControlInterval = null;
    };
    ProgressControl.prototype._onUserInteractionStarts = function () {
        if (!this._isUserInteracting) {
            this._isUserInteracting = true;
            this._pauseVideoOnProgressManipulationStart();
        }
        this._eventEmitter.emit(constants_1.UI_EVENTS.CONTROL_DRAG_START);
    };
    ProgressControl.prototype._onUserInteractionEnds = function () {
        if (this._isUserInteracting) {
            this._isUserInteracting = false;
            this._playVideoOnProgressManipulationEnd();
        }
        this._eventEmitter.emit(constants_1.UI_EVENTS.CONTROL_DRAG_END);
    };
    ProgressControl.prototype._updateControlOnInterval = function () {
        this._updatePlayedIndicator();
        this._updateBufferIndicator();
    };
    ProgressControl.prototype._processStateChange = function (_a) {
        var nextState = _a.nextState;
        switch (nextState) {
            case constants_1.EngineState.SRC_SET:
                this.reset();
                break;
            case constants_1.EngineState.METADATA_LOADED:
                this._initTimeIndicators();
                if (this._engine.isSeekAvailable) {
                    this.show();
                }
                else {
                    this.hide();
                }
                break;
            case constants_1.EngineState.PLAYING:
                if (this._liveStateEngine.state === constants_1.LiveState.SYNC) {
                    this.view.setPlayed(100);
                }
                else {
                    this._startIntervalUpdates();
                }
                break;
            case constants_1.EngineState.SEEK_IN_PROGRESS:
                this._updatePlayedIndicator();
                this._updateBufferIndicator();
                break;
            default:
                this._stopIntervalUpdates();
                break;
        }
    };
    ProgressControl.prototype._processLiveStateChange = function (_a) {
        var nextState = _a.nextState;
        switch (nextState) {
            case constants_1.LiveState.NONE:
                this.view.setLiveSyncStatus(false);
                this.view.setUsualMode();
                break;
            case constants_1.LiveState.INITIAL:
                this.view.setLiveMode();
                break;
            case constants_1.LiveState.SYNC:
                this.view.setLiveSyncStatus(true);
                break;
            case constants_1.LiveState.NOT_SYNC:
                this.view.setLiveSyncStatus(false);
                break;
            case constants_1.LiveState.ENDED:
                this.view.setLiveSyncStatus(false);
                this.view.hideSyncWithLive();
                // ensure progress indicators show latest info
                if (this._engine.getCurrentState() === constants_1.EngineState.PLAYING) {
                    this._startIntervalUpdates();
                }
                else {
                    this._updatePlayedIndicator();
                    this._updateBufferIndicator();
                }
                break;
            default:
                break;
        }
    };
    ProgressControl.prototype._changeCurrentTimeOfVideo = function (percent) {
        var duration = this._engine.getDurationTime();
        if (this._engine.isDynamicContent && percent === 1) {
            this._engine.syncWithLive();
        }
        else {
            this._engine.setCurrentTime(duration * percent);
        }
        this._eventEmitter.emit(constants_1.UI_EVENTS.PROGRESS_CHANGE_TRIGGERED, percent);
    };
    ProgressControl.prototype._pauseVideoOnProgressManipulationStart = function () {
        var currentState = this._engine.getCurrentState();
        if (currentState === constants_1.EngineState.PLAYING ||
            currentState === constants_1.EngineState.PLAY_REQUESTED) {
            this._shouldPlayAfterManipulationEnd = true;
            this._engine.pause();
        }
        this._eventEmitter.emit(constants_1.UI_EVENTS.PROGRESS_MANIPULATION_STARTED);
    };
    ProgressControl.prototype._playVideoOnProgressManipulationEnd = function () {
        if (this._shouldPlayAfterManipulationEnd) {
            this._engine.play();
            this._shouldPlayAfterManipulationEnd = false;
        }
        this._eventEmitter.emit(constants_1.UI_EVENTS.PROGRESS_MANIPULATION_ENDED);
    };
    ProgressControl.prototype._updateBufferIndicator = function () {
        var currentTime = this._engine.getCurrentTime();
        var buffered = this._engine.getBuffered();
        var duration = this._engine.getDurationTime();
        this.updateBuffered(video_data_1.getOverallBufferedPercent(buffered, currentTime, duration));
    };
    ProgressControl.prototype._updatePlayedIndicator = function () {
        if (this._liveStateEngine.state === constants_1.LiveState.SYNC) {
            // TODO: mb use this.updatePlayed(100) here?
            return;
        }
        var currentTime = this._engine.getCurrentTime();
        var duration = this._engine.getDurationTime();
        this.updatePlayed(video_data_1.getOverallPlayedPercent(currentTime, duration));
    };
    ProgressControl.prototype._updateAllIndicators = function () {
        this._updatePlayedIndicator();
        this._updateBufferIndicator();
    };
    ProgressControl.prototype._initTimeIndicators = function () {
        var _this = this;
        this._timeIndicatorsToAdd.forEach(function (time) {
            _this._addTimeIndicator(time);
        });
        this._timeIndicatorsToAdd = [];
    };
    ProgressControl.prototype._addTimeIndicator = function (time) {
        var durationTime = this._engine.getDurationTime();
        if (time > durationTime) {
            // TODO: log error for developers
            return;
        }
        this.view.addTimeIndicator(video_data_1.getTimePercent(time, durationTime));
    };
    ProgressControl.prototype._syncWithLive = function () {
        this._engine.syncWithLive();
    };
    ProgressControl.prototype._onSyncWithLiveMouseEnter = function () {
        this._eventEmitter.emit(constants_1.UI_EVENTS.PROGRESS_SYNC_BUTTON_MOUSE_ENTER_TRIGGERED);
    };
    ProgressControl.prototype._onSyncWithLiveMouseLeave = function () {
        this._eventEmitter.emit(constants_1.UI_EVENTS.PROGRESS_SYNC_BUTTON_MOUSE_LEAVE_TRIGGERED);
    };
    /**
     * Add time indicator to progress bar
     */
    ProgressControl.prototype.addTimeIndicator = function (time) {
        this.addTimeIndicators([time]);
    };
    /**
     * Add time indicators to progress bar
     */
    ProgressControl.prototype.addTimeIndicators = function (times) {
        var _this = this;
        var _a;
        if (!this._engine.isMetadataLoaded) {
            // NOTE: Add indicator after metadata loaded
            (_a = this._timeIndicatorsToAdd).push.apply(_a, times);
            return;
        }
        times.forEach(function (time) {
            _this._addTimeIndicator(time);
        });
    };
    /**
     * Delete all time indicators from progress bar
     */
    ProgressControl.prototype.clearTimeIndicators = function () {
        this.view.clearTimeIndicators();
    };
    ProgressControl.prototype.updatePlayed = function (percent) {
        this._currentProgress = percent;
        this.view.setPlayed(this._currentProgress);
    };
    ProgressControl.prototype.updateBuffered = function (percent) {
        this.view.setBuffered(percent);
    };
    ProgressControl.prototype.hide = function () {
        this.isHidden = true;
        this.view.hide();
    };
    ProgressControl.prototype.show = function () {
        this.isHidden = false;
        this.view.show();
    };
    ProgressControl.prototype.reset = function () {
        this.updatePlayed(0);
        this.updateBuffered(0);
        this.clearTimeIndicators();
    };
    ProgressControl.prototype.destroy = function () {
        this._destroyInterceptor();
        this._stopIntervalUpdates();
        this._unbindEvents();
        this.view.destroy();
        this.view = null;
        this._eventEmitter = null;
        this._engine = null;
        this._liveStateEngine = null;
        this._timeIndicatorsToAdd = null;
        this._textMap = null;
    };
    ProgressControl.moduleName = 'progressControl';
    ProgressControl.View = progress_view_1.default;
    ProgressControl.dependencies = [
        'engine',
        'liveStateEngine',
        'eventEmitter',
        'textMap',
        'tooltipService',
        'theme',
    ];
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], ProgressControl.prototype, "addTimeIndicator", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], ProgressControl.prototype, "addTimeIndicators", null);
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], ProgressControl.prototype, "clearTimeIndicators", null);
    return ProgressControl;
}());
exports.default = ProgressControl;
//# sourceMappingURL=progress.js.map