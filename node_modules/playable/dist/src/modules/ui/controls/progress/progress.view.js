"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("../../../../constants");
var view_1 = tslib_1.__importDefault(require("../../core/view"));
var formatTime_1 = tslib_1.__importDefault(require("../../core/utils/formatTime"));
var getProgressTimeTooltipPosition_1 = tslib_1.__importDefault(require("./utils/getProgressTimeTooltipPosition"));
var templates_1 = require("./templates");
var htmlToElement_1 = tslib_1.__importDefault(require("../../core/htmlToElement"));
var getElementByHook_1 = tslib_1.__importDefault(require("../../core/getElementByHook"));
var toggleNodeClass_1 = tslib_1.__importDefault(require("../../core/toggleNodeClass"));
var progress_theme_1 = tslib_1.__importDefault(require("./progress.theme"));
var progress_scss_1 = tslib_1.__importDefault(require("./progress.scss"));
var DATA_PLAYED = 'data-played-percent';
var getPercentBasedOnXPosition = function (event, element) {
    var boundingRect = element.getBoundingClientRect();
    var positionX = event.clientX;
    if (positionX < boundingRect.left) {
        return 0;
    }
    if (positionX > boundingRect.left + boundingRect.width) {
        return 100;
    }
    return (event.clientX - boundingRect.left) / boundingRect.width * 100;
};
var ProgressView = /** @class */ (function (_super) {
    tslib_1.__extends(ProgressView, _super);
    function ProgressView(config) {
        var _this = this;
        var callbacks = config.callbacks, textMap = config.textMap, tooltipService = config.tooltipService, theme = config.theme;
        _this = _super.call(this, theme) || this;
        _this._callbacks = callbacks;
        _this._textMap = textMap;
        _this._tooltipService = tooltipService;
        _this._initDOM();
        _this._bindCallbacks();
        _this._bindEvents();
        _this._setPlayedDOMAttributes(0);
        _this._setBufferedDOMAttributes(0);
        _this.setUsualMode();
        return _this;
    }
    ProgressView.prototype._initDOM = function () {
        this._$node = htmlToElement_1.default(templates_1.progressTemplate({
            styles: this.styleNames,
            themeStyles: this.themeStyles,
        }));
        this._$played = getElementByHook_1.default(this._$node, 'progress-played');
        this._$buffered = getElementByHook_1.default(this._$node, 'progress-buffered');
        this._$seekTo = getElementByHook_1.default(this._$node, 'progress-seek-to');
        this._$timeIndicators = getElementByHook_1.default(this._$node, 'progress-time-indicators');
        this._$seekButton = getElementByHook_1.default(this._$node, 'progress-seek-button');
        this._$syncButton = getElementByHook_1.default(this._$node, 'progress-sync-button');
        this._syncButtonTooltipReference = this._tooltipService.createReference(this._$syncButton, {
            text: this._textMap.get(constants_1.TEXT_LABELS.LIVE_SYNC_TOOLTIP),
        });
        this._$hitbox = getElementByHook_1.default(this._$node, 'progress-hitbox');
    };
    ProgressView.prototype._bindCallbacks = function () {
        this._setPlayedByDrag = this._setPlayedByDrag.bind(this);
        this._startDragOnMouseDown = this._startDragOnMouseDown.bind(this);
        this._stopDragOnMouseUp = this._stopDragOnMouseUp.bind(this);
        this._startSeekToByMouse = this._startSeekToByMouse.bind(this);
        this._stopSeekToByMouse = this._stopSeekToByMouse.bind(this);
        this._syncWithLive = this._syncWithLive.bind(this);
    };
    ProgressView.prototype._bindEvents = function () {
        this._$seekButton.addEventListener('mousedown', this._startDragOnMouseDown);
        this._$seekButton.addEventListener('mousemove', this._startSeekToByMouse);
        this._$seekButton.addEventListener('mouseout', this._stopSeekToByMouse);
        this._$hitbox.addEventListener('mousedown', this._startDragOnMouseDown);
        this._$hitbox.addEventListener('mousemove', this._startSeekToByMouse);
        this._$hitbox.addEventListener('mouseout', this._stopSeekToByMouse);
        window.addEventListener('mousemove', this._setPlayedByDrag);
        window.addEventListener('mouseup', this._stopDragOnMouseUp);
        this._$syncButton.addEventListener('click', this._syncWithLive);
        this._$syncButton.addEventListener('mouseenter', this._callbacks.onSyncWithLiveMouseEnter);
        this._$syncButton.addEventListener('mouseleave', this._callbacks.onSyncWithLiveMouseLeave);
    };
    ProgressView.prototype._unbindEvents = function () {
        this._$seekButton.removeEventListener('mousedown', this._startDragOnMouseDown);
        this._$seekButton.removeEventListener('mousemove', this._startSeekToByMouse);
        this._$seekButton.removeEventListener('mouseout', this._stopSeekToByMouse);
        this._$hitbox.removeEventListener('mousedown', this._startDragOnMouseDown);
        this._$hitbox.removeEventListener('mousemove', this._startSeekToByMouse);
        this._$hitbox.removeEventListener('mouseout', this._stopSeekToByMouse);
        window.removeEventListener('mousemove', this._setPlayedByDrag);
        window.removeEventListener('mouseup', this._stopDragOnMouseUp);
        this._$syncButton.removeEventListener('click', this._syncWithLive);
        this._$syncButton.removeEventListener('mouseenter', this._callbacks.onSyncWithLiveMouseEnter);
        this._$syncButton.removeEventListener('mouseleave', this._callbacks.onSyncWithLiveMouseLeave);
    };
    ProgressView.prototype._startDragOnMouseDown = function (event) {
        if (event.button > 1) {
            return;
        }
        var percent = getPercentBasedOnXPosition(event, this._$hitbox);
        this._setPlayedDOMAttributes(percent);
        this._callbacks.onChangePlayedProgress(percent);
        this._startDrag();
    };
    ProgressView.prototype._stopDragOnMouseUp = function (event) {
        if (event.button > 1) {
            return;
        }
        this._stopDrag();
    };
    ProgressView.prototype._startSeekToByMouse = function (event) {
        var percent = getPercentBasedOnXPosition(event, this._$hitbox);
        this._setSeekToDOMAttributes(percent);
        this._callbacks.onSeekToByMouseStart(percent);
    };
    ProgressView.prototype._stopSeekToByMouse = function () {
        this._setSeekToDOMAttributes(0);
        this._callbacks.onSeekToByMouseEnd();
    };
    ProgressView.prototype._setPlayedByDrag = function (event) {
        if (this._isDragging) {
            var percent = getPercentBasedOnXPosition(event, this._$hitbox);
            this._setPlayedDOMAttributes(percent);
            this._callbacks.onChangePlayedProgress(percent);
        }
    };
    ProgressView.prototype._startDrag = function () {
        this._isDragging = true;
        this._callbacks.onDragStart();
        this._$node.classList.add(this.styleNames.isDragging);
    };
    ProgressView.prototype._stopDrag = function () {
        if (this._isDragging) {
            this._isDragging = false;
            this._callbacks.onDragEnd();
            this._$node.classList.remove(this.styleNames.isDragging);
        }
    };
    ProgressView.prototype._setSeekToDOMAttributes = function (percent) {
        this._$seekTo.setAttribute('style', "width:" + percent + "%;");
    };
    ProgressView.prototype._setPlayedDOMAttributes = function (percent) {
        this._$node.setAttribute('aria-valuetext', this._textMap.get(constants_1.TEXT_LABELS.PROGRESS_CONTROL_VALUE, { percent: percent }));
        this._$node.setAttribute('aria-valuenow', String(percent));
        this._$node.setAttribute(DATA_PLAYED, String(percent));
        this._$played.setAttribute('style', "width:" + percent + "%;");
        this._$seekButton.setAttribute('style', "left:" + percent + "%;");
    };
    ProgressView.prototype._setBufferedDOMAttributes = function (percent) {
        this._$buffered.setAttribute('style', "width:" + percent + "%;");
    };
    ProgressView.prototype._syncWithLive = function () {
        this._callbacks.onSyncWithLiveClick();
    };
    ProgressView.prototype.showSyncWithLive = function () {
        this._$syncButton.classList.remove(this.styleNames.hidden);
    };
    ProgressView.prototype.hideSyncWithLive = function () {
        this._$syncButton.classList.add(this.styleNames.hidden);
    };
    ProgressView.prototype.setLiveSyncStatus = function (isSync) {
        toggleNodeClass_1.default(this._$syncButton, this.styleNames.liveSync, isSync);
        if (isSync) {
            this._syncButtonTooltipReference.disable();
            this._$played.setAttribute('style', "width:100%;");
            this._$seekButton.setAttribute('style', "left:100%;");
        }
        else {
            this._syncButtonTooltipReference.enable();
        }
    };
    ProgressView.prototype.showProgressTimeTooltip = function (_a) {
        var _this = this;
        var time = _a.time, percent = _a.percent;
        this._tooltipService.show({
            text: formatTime_1.default(time),
            position: function (tooltipContainerNode) {
                return getProgressTimeTooltipPosition_1.default(percent, _this._$hitbox, tooltipContainerNode);
            },
        });
    };
    ProgressView.prototype.hideProgressTimeTooltip = function () {
        this._tooltipService.hide();
    };
    ProgressView.prototype.setLiveMode = function () {
        this._$node.classList.add(this.styleNames.inLive);
        this.showSyncWithLive();
    };
    ProgressView.prototype.setUsualMode = function () {
        this._$node.classList.remove(this.styleNames.inLive);
        this.hideSyncWithLive();
    };
    ProgressView.prototype.setPlayed = function (percent) {
        this._setPlayedDOMAttributes(percent);
    };
    ProgressView.prototype.setBuffered = function (percent) {
        this._setBufferedDOMAttributes(percent);
    };
    ProgressView.prototype.addTimeIndicator = function (percent) {
        this._$timeIndicators.appendChild(htmlToElement_1.default(templates_1.progressTimeIndicatorTemplate({
            percent: percent,
            styles: this.styleNames,
        })));
    };
    ProgressView.prototype.clearTimeIndicators = function () {
        this._$timeIndicators.innerHTML = '';
    };
    ProgressView.prototype.hide = function () {
        this._$node.classList.add(this.styleNames.hidden);
    };
    ProgressView.prototype.show = function () {
        this._$node.classList.remove(this.styleNames.hidden);
    };
    ProgressView.prototype.getNode = function () {
        return this._$node;
    };
    ProgressView.prototype.destroy = function () {
        this._unbindEvents();
        this._callbacks = null;
        this._syncButtonTooltipReference.destroy();
        this._syncButtonTooltipReference = null;
        if (this._$node.parentNode) {
            this._$node.parentNode.removeChild(this._$node);
        }
        this._$node = null;
        this._$buffered = null;
        this._$hitbox = null;
        this._$played = null;
        this._$seekTo = null;
        this._$seekButton = null;
        this._$syncButton = null;
        this._$timeIndicators = null;
        this._textMap = null;
    };
    return ProgressView;
}(view_1.default));
ProgressView.setTheme(progress_theme_1.default);
ProgressView.extendStyleNames(progress_scss_1.default);
exports.default = ProgressView;
//# sourceMappingURL=progress.view.js.map