"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var time_view_1 = tslib_1.__importDefault(require("./time.view"));
var constants_1 = require("../../../../constants");
var UPDATE_INTERVAL_DELAY = 1000 / 60;
var TimeControl = /** @class */ (function () {
    function TimeControl(_a) {
        var eventEmitter = _a.eventEmitter, engine = _a.engine, theme = _a.theme;
        this._eventEmitter = eventEmitter;
        this._engine = engine;
        this._theme = theme;
        this._bindCallbacks();
        this._initUI();
        this._bindEvents();
        this.setCurrentTime(0);
        this.setDurationTime(0);
    }
    Object.defineProperty(TimeControl.prototype, "node", {
        get: function () {
            return this.view.getNode();
        },
        enumerable: true,
        configurable: true
    });
    TimeControl.prototype._bindCallbacks = function () {
        this._updateCurrentTime = this._updateCurrentTime.bind(this);
        this._updateDurationTime = this._updateDurationTime.bind(this);
    };
    TimeControl.prototype._bindEvents = function () {
        this._unbindEvents = this._eventEmitter.bindEvents([
            [constants_1.VIDEO_EVENTS.STATE_CHANGED, this._toggleIntervalUpdates],
            [constants_1.VIDEO_EVENTS.DURATION_UPDATED, this._updateDurationTime],
            [constants_1.VIDEO_EVENTS.LIVE_STATE_CHANGED, this._processLiveStateChange],
        ], this);
    };
    TimeControl.prototype._initUI = function () {
        var config = {
            theme: this._theme,
        };
        this.view = new TimeControl.View(config);
    };
    TimeControl.prototype._startIntervalUpdates = function () {
        if (this._updateControlInterval) {
            this._stopIntervalUpdates();
        }
        this._updateControlInterval = window.setInterval(this._updateCurrentTime, UPDATE_INTERVAL_DELAY);
    };
    TimeControl.prototype._stopIntervalUpdates = function () {
        window.clearInterval(this._updateControlInterval);
        this._updateControlInterval = null;
    };
    TimeControl.prototype._processLiveStateChange = function (_a) {
        var nextState = _a.nextState;
        switch (nextState) {
            case constants_1.LiveState.NONE:
                this.show();
                break;
            case constants_1.LiveState.INITIAL:
                this.hide();
                break;
            case constants_1.LiveState.ENDED:
                this.show();
                break;
            default:
                break;
        }
    };
    TimeControl.prototype._toggleIntervalUpdates = function (_a) {
        var nextState = _a.nextState;
        switch (nextState) {
            case constants_1.EngineState.SRC_SET:
                this.reset();
                break;
            case constants_1.EngineState.PLAYING:
                this._startIntervalUpdates();
                break;
            case constants_1.EngineState.SEEK_IN_PROGRESS:
                this._updateCurrentTime();
                break;
            default:
                this._stopIntervalUpdates();
                break;
        }
    };
    TimeControl.prototype._updateDurationTime = function () {
        this.setDurationTime(this._engine.getDurationTime());
    };
    TimeControl.prototype._updateCurrentTime = function () {
        this.setCurrentTime(this._engine.getCurrentTime());
    };
    TimeControl.prototype.setDurationTime = function (time) {
        this.view.setDurationTime(time);
    };
    TimeControl.prototype.setCurrentTime = function (time) {
        this.view.setCurrentTime(time);
    };
    TimeControl.prototype.hide = function () {
        this.isHidden = true;
        this.view.hide();
    };
    TimeControl.prototype.show = function () {
        this.isHidden = false;
        this.view.show();
    };
    TimeControl.prototype.reset = function () {
        this.setDurationTime(0);
        this.setCurrentTime(0);
        this.view.showDuration();
        this.view.setCurrentTimeBackward(false);
        this.show();
    };
    TimeControl.prototype.destroy = function () {
        this._stopIntervalUpdates();
        this._unbindEvents();
        this.view.destroy();
        this.view = null;
        this._eventEmitter = null;
        this._engine = null;
    };
    TimeControl.moduleName = 'timeControl';
    TimeControl.View = time_view_1.default;
    TimeControl.dependencies = ['engine', 'eventEmitter', 'theme'];
    return TimeControl;
}());
exports.default = TimeControl;
//# sourceMappingURL=time.js.map