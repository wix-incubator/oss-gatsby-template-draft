"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("jsdom-global/register");
var chai_1 = require("chai");
//@ts-ignore
var sinon = tslib_1.__importStar(require("sinon"));
var testkit_1 = tslib_1.__importDefault(require("../../../../testkit"));
var constants_1 = require("../../../../constants");
describe('TimeControl', function () {
    var testkit;
    var control;
    var eventEmitter;
    beforeEach(function () {
        testkit = testkit_1.default();
        eventEmitter = testkit.getModule('eventEmitter');
        control = testkit.getModule('timeControl');
    });
    describe('constructor', function () {
        it('should create instance ', function () {
            chai_1.expect(control).to.exist;
            chai_1.expect(control.view).to.exist;
        });
    });
    describe('API', function () {
        it('should have method for setting current time', function () {
            var spy = sinon.spy(control.view, 'setCurrentTime');
            chai_1.expect(control.setCurrentTime).to.exist;
            control.setCurrentTime();
            chai_1.expect(spy.called).to.be.true;
        });
        it('should have method for setting duration time', function () {
            var spy = sinon.spy(control.view, 'setDurationTime');
            chai_1.expect(control.setDurationTime).to.exist;
            control.setDurationTime();
            chai_1.expect(spy.called).to.be.true;
        });
        it('should have method for showing whole view', function () {
            chai_1.expect(control.show).to.exist;
            control.show();
            chai_1.expect(control.isHidden).to.be.false;
        });
        it('should have method for hiding whole view', function () {
            chai_1.expect(control.hide).to.exist;
            control.hide();
            chai_1.expect(control.isHidden).to.be.true;
        });
        it('should have method for destroying', function () {
            var spy = sinon.spy(control, '_unbindEvents');
            chai_1.expect(control.destroy).to.exist;
            control.destroy();
            chai_1.expect(control.view).to.not.exist;
            chai_1.expect(control._eventEmitter).to.not.exist;
            chai_1.expect(spy.called).to.be.true;
        });
    });
    describe('video events listeners', function () {
        it('should call callback on playback status change', function () {
            var spy = sinon.spy(control, '_toggleIntervalUpdates');
            control._bindEvents();
            eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {});
            chai_1.expect(spy.called).to.be.true;
        });
        it('should call callback on seek', function () {
            var spy = sinon.spy(control, '_updateCurrentTime');
            control._bindEvents();
            eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                nextState: constants_1.EngineState.SEEK_IN_PROGRESS,
            });
            chai_1.expect(spy.called).to.be.true;
        });
        it('should call callback on duration update', function () {
            var spy = sinon.spy(control, '_updateDurationTime');
            control._bindEvents();
            eventEmitter.emit(constants_1.VIDEO_EVENTS.DURATION_UPDATED);
            chai_1.expect(spy.called).to.be.true;
        });
    });
    describe('internal methods', function () {
        it('should toggle interval updates', function () {
            var startSpy = sinon.spy(control, '_startIntervalUpdates');
            control._toggleIntervalUpdates({ nextState: constants_1.EngineState.PLAYING });
            chai_1.expect(startSpy.called).to.be.true;
            var stopSpy = sinon.spy(control, '_stopIntervalUpdates');
            control._toggleIntervalUpdates({ nextState: constants_1.EngineState.PAUSED });
            chai_1.expect(stopSpy.called).to.be.true;
        });
        it('should start interval updates', function () {
            var spy = sinon.spy(window, 'setInterval');
            var stopSpy = sinon.spy(control, '_stopIntervalUpdates');
            control._startIntervalUpdates();
            chai_1.expect(spy.calledWith(control._updateCurrentTime)).to.be.true;
            chai_1.expect(stopSpy.called).to.be.false;
            control._startIntervalUpdates();
            chai_1.expect(stopSpy.called).to.be.true;
            spy.restore();
        });
    });
});
//# sourceMappingURL=time.spec.js.map