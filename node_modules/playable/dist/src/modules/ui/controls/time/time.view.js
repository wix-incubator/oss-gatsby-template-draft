"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var view_1 = tslib_1.__importDefault(require("../../core/view"));
var formatTime_1 = tslib_1.__importDefault(require("../../core/utils/formatTime"));
var templates_1 = require("./templates");
var htmlToElement_1 = tslib_1.__importDefault(require("../../core/htmlToElement"));
var getElementByHook_1 = tslib_1.__importDefault(require("../../core/getElementByHook"));
var time_theme_1 = tslib_1.__importDefault(require("./time.theme"));
var time_scss_1 = tslib_1.__importDefault(require("./time.scss"));
var TimeView = /** @class */ (function (_super) {
    tslib_1.__extends(TimeView, _super);
    function TimeView(config) {
        var _this = this;
        var theme = config.theme;
        _this = _super.call(this, theme) || this;
        _this._initDOM();
        return _this;
    }
    TimeView.prototype._initDOM = function () {
        this._$node = htmlToElement_1.default(templates_1.timeTemplate({ styles: this.styleNames, themeStyles: this.themeStyles }));
        this._$currentTime = getElementByHook_1.default(this._$node, 'current-time-indicator');
        this._$durationTime = getElementByHook_1.default(this._$node, 'duration-time-indicator');
    };
    TimeView.prototype.setDurationTime = function (duration) {
        if (duration !== this._duration) {
            this._duration = duration;
            this._updateDurationTime();
        }
    };
    TimeView.prototype.setCurrentTime = function (current) {
        if (current !== this._current) {
            this._current = current;
            this._updateCurrentTime();
        }
    };
    TimeView.prototype.setCurrentTimeBackward = function (_isBackward) {
        this._isBackward = _isBackward;
        this._updateCurrentTime();
    };
    TimeView.prototype._updateDurationTime = function () {
        this._$durationTime.innerHTML = formatTime_1.default(this._duration);
    };
    TimeView.prototype._updateCurrentTime = function () {
        if (this._isBackward) {
            this._$currentTime.innerHTML = formatTime_1.default(this._current - this._duration);
        }
        else {
            this._$currentTime.innerHTML = formatTime_1.default(this._current);
        }
    };
    TimeView.prototype.showDuration = function () {
        this._$durationTime.classList.remove(this.styleNames.hidden);
    };
    TimeView.prototype.hideDuration = function () {
        this._$durationTime.classList.add(this.styleNames.hidden);
    };
    TimeView.prototype.show = function () {
        this._$node.classList.remove(this.styleNames.hidden);
    };
    TimeView.prototype.hide = function () {
        this._$node.classList.add(this.styleNames.hidden);
    };
    TimeView.prototype.getNode = function () {
        return this._$node;
    };
    TimeView.prototype.destroy = function () {
        if (this._$node.parentNode) {
            this._$node.parentNode.removeChild(this._$node);
        }
        this._$currentTime = null;
        this._$durationTime = null;
        this._$node = null;
    };
    return TimeView;
}(view_1.default));
TimeView.setTheme(time_theme_1.default);
TimeView.extendStyleNames(time_scss_1.default);
exports.default = TimeView;
//# sourceMappingURL=time.view.js.map