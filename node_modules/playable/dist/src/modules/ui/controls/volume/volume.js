"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var volume_view_1 = tslib_1.__importDefault(require("./volume.view"));
var keyboard_interceptor_1 = tslib_1.__importStar(require("../../../../utils/keyboard-interceptor"));
var keyboard_control_1 = require("../../../keyboard-control/keyboard-control");
var constants_1 = require("../../../../constants");
var VolumeControl = /** @class */ (function () {
    function VolumeControl(_a) {
        var engine = _a.engine, eventEmitter = _a.eventEmitter, textMap = _a.textMap, tooltipService = _a.tooltipService, theme = _a.theme;
        this._engine = engine;
        this._eventEmitter = eventEmitter;
        this._textMap = textMap;
        this._tooltipService = tooltipService;
        this._theme = theme;
        this._isMuted = this._engine.getMute();
        this._volume = this._engine.getVolume();
        this._bindCallbacks();
        this._initUI();
        this._bindEvents();
        this.view.setVolume(this._volume);
        this.view.setMute(this._isMuted);
        this._initInterceptor();
    }
    Object.defineProperty(VolumeControl.prototype, "node", {
        get: function () {
            return this.view.getNode();
        },
        enumerable: true,
        configurable: true
    });
    VolumeControl.prototype._initUI = function () {
        var config = {
            callbacks: {
                onDragStart: this._broadcastDragStart,
                onDragEnd: this._broadcastDragEnd,
                onVolumeLevelChangeFromInput: this._getVolumeLevelFromInput,
                onVolumeLevelChangeFromWheel: this._getVolumeLevelFromWheel,
                onToggleMuteClick: this._toggleMuteStatus,
            },
            theme: this._theme,
            textMap: this._textMap,
            tooltipService: this._tooltipService,
        };
        this.view = new VolumeControl.View(config);
    };
    VolumeControl.prototype._initInterceptor = function () {
        var _this = this;
        var _a, _b;
        this._buttonInterceptor = new keyboard_interceptor_1.default(this.view.getButtonNode(), (_a = {},
            _a[keyboard_interceptor_1.KEYCODES.SPACE_BAR] = function (e) {
                e.stopPropagation();
                _this._eventEmitter.emit(constants_1.UI_EVENTS.KEYBOARD_KEYDOWN_INTERCEPTED);
                _this._eventEmitter.emit(_this._isMuted
                    ? constants_1.UI_EVENTS.UNMUTE_SOUND_WITH_KEYBOARD_TRIGGERED
                    : constants_1.UI_EVENTS.MUTE_SOUND_WITH_KEYBOARD_TRIGGERED);
            },
            _a[keyboard_interceptor_1.KEYCODES.ENTER] = function (e) {
                e.stopPropagation();
                _this._eventEmitter.emit(constants_1.UI_EVENTS.KEYBOARD_KEYDOWN_INTERCEPTED);
                _this._eventEmitter.emit(_this._isMuted
                    ? constants_1.UI_EVENTS.UNMUTE_SOUND_WITH_KEYBOARD_TRIGGERED
                    : constants_1.UI_EVENTS.MUTE_SOUND_WITH_KEYBOARD_TRIGGERED);
            },
            _a));
        this._inputInterceptor = new keyboard_interceptor_1.default(this.view.getInputNode(), (_b = {},
            _b[keyboard_interceptor_1.KEYCODES.RIGHT_ARROW] = function (e) {
                e.stopPropagation();
                e.preventDefault();
                _this._eventEmitter.emit(constants_1.UI_EVENTS.KEYBOARD_KEYDOWN_INTERCEPTED);
                _this._eventEmitter.emit(constants_1.UI_EVENTS.INCREASE_VOLUME_WITH_KEYBOARD_TRIGGERED);
                _this._engine.setMute(false);
                _this._engine.increaseVolume(keyboard_control_1.AMOUNT_TO_CHANGE_VOLUME);
            },
            _b[keyboard_interceptor_1.KEYCODES.LEFT_ARROW] = function (e) {
                e.stopPropagation();
                e.preventDefault();
                _this._eventEmitter.emit(constants_1.UI_EVENTS.KEYBOARD_KEYDOWN_INTERCEPTED);
                _this._eventEmitter.emit(constants_1.UI_EVENTS.DECREASE_VOLUME_WITH_KEYBOARD_TRIGGERED);
                _this._engine.setMute(false);
                _this._engine.decreaseVolume(keyboard_control_1.AMOUNT_TO_CHANGE_VOLUME);
            },
            _b));
    };
    VolumeControl.prototype._destroyInterceptor = function () {
        this._buttonInterceptor.destroy();
        this._inputInterceptor.destroy();
    };
    VolumeControl.prototype._bindEvents = function () {
        this._unbindEvents = this._eventEmitter.bindEvents([[constants_1.VIDEO_EVENTS.VOLUME_STATUS_CHANGED, this._updateVolumeStatus]], this);
    };
    VolumeControl.prototype._bindCallbacks = function () {
        this._getVolumeLevelFromInput = this._getVolumeLevelFromInput.bind(this);
        this._toggleMuteStatus = this._toggleMuteStatus.bind(this);
        this._getVolumeLevelFromWheel = this._getVolumeLevelFromWheel.bind(this);
        this._broadcastDragStart = this._broadcastDragStart.bind(this);
        this._broadcastDragEnd = this._broadcastDragEnd.bind(this);
    };
    VolumeControl.prototype._broadcastDragStart = function () {
        this._eventEmitter.emit(constants_1.UI_EVENTS.CONTROL_DRAG_START);
    };
    VolumeControl.prototype._broadcastDragEnd = function () {
        this._eventEmitter.emit(constants_1.UI_EVENTS.CONTROL_DRAG_END);
    };
    VolumeControl.prototype._changeVolumeLevel = function (level) {
        this._engine.setVolume(level);
        this._eventEmitter.emit(constants_1.UI_EVENTS.VOLUME_CHANGE_TRIGGERED, level);
    };
    VolumeControl.prototype._toggleMuteStatus = function () {
        this._engine.setMute(!this._isMuted);
        this._eventEmitter.emit(constants_1.UI_EVENTS.MUTE_STATUS_TRIGGERED, !this._isMuted);
    };
    VolumeControl.prototype._getVolumeLevelFromWheel = function (delta) {
        var adjustedVolume = this._volume + delta / 10;
        var validatedVolume = Math.min(100, Math.max(0, adjustedVolume));
        this._changeVolumeStatus(validatedVolume);
    };
    VolumeControl.prototype._getVolumeLevelFromInput = function (level) {
        this._changeVolumeStatus(level);
    };
    VolumeControl.prototype._changeVolumeStatus = function (level) {
        this._changeVolumeLevel(level);
        if (this._isMuted) {
            this._toggleMuteStatus();
        }
    };
    VolumeControl.prototype._updateVolumeStatus = function () {
        this.setVolumeLevel(this._engine.getVolume());
        this.setMuteStatus(this._engine.getMute());
    };
    VolumeControl.prototype.setVolumeLevel = function (level) {
        if (level === this._volume) {
            return;
        }
        this._volume = level;
        this.view.setVolume(this._volume);
        this.view.setMute(Boolean(!this._volume));
    };
    VolumeControl.prototype.setMuteStatus = function (isMuted) {
        if (isMuted === this._isMuted) {
            return;
        }
        this._isMuted = isMuted;
        this.view.setVolume(this._isMuted ? 0 : this._volume);
        this.view.setMute(this._isMuted || Boolean(!this._volume));
    };
    VolumeControl.prototype.hide = function () {
        this.isHidden = true;
        this.view.hide();
    };
    VolumeControl.prototype.show = function () {
        this.isHidden = false;
        this.view.show();
    };
    VolumeControl.prototype.destroy = function () {
        this._destroyInterceptor();
        this._unbindEvents();
        this.view.destroy();
        this.view = null;
        this._eventEmitter = null;
        this._engine = null;
        this._textMap = null;
    };
    VolumeControl.moduleName = 'volumeControl';
    VolumeControl.View = volume_view_1.default;
    VolumeControl.dependencies = [
        'engine',
        'eventEmitter',
        'textMap',
        'tooltipService',
        'theme',
    ];
    return VolumeControl;
}());
exports.default = VolumeControl;
//# sourceMappingURL=volume.js.map