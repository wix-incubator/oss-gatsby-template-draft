"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("jsdom-global/register");
var chai_1 = require("chai");
//@ts-ignore
var sinon = tslib_1.__importStar(require("sinon"));
var testkit_1 = tslib_1.__importDefault(require("../../../../testkit"));
var volume_1 = tslib_1.__importDefault(require("./volume"));
var constants_1 = require("../../../../constants");
describe('VolumeControl', function () {
    var testkit;
    var control;
    var eventEmitter;
    beforeEach(function () {
        testkit = testkit_1.default();
        testkit.registerModule('volumeControl', volume_1.default);
        control = testkit.getModule('volumeControl');
        eventEmitter = testkit.getModule('eventEmitter');
    });
    describe('constructor', function () {
        it('should create instance ', function () {
            chai_1.expect(control).to.exist;
            chai_1.expect(control.view).to.exist;
        });
    });
    describe('API', function () {
        it('should have method for setting current volume', function () {
            var spy = sinon.spy(control.view, 'setVolume');
            chai_1.expect(control.setVolumeLevel).to.exist;
            control.setVolumeLevel(100);
            chai_1.expect(spy.called).to.be.false;
            control.setVolumeLevel(0);
            chai_1.expect(spy.called).to.be.true;
        });
        it('should have method for setting mute status', function () {
            var spy = sinon.spy(control.view, 'setMute');
            chai_1.expect(control.setMuteStatus).to.exist;
            control.setMuteStatus();
            chai_1.expect(spy.called).to.be.true;
        });
        it('should have method for showing whole view', function () {
            chai_1.expect(control.show).to.exist;
            control.show();
            chai_1.expect(control.isHidden).to.be.false;
        });
        it('should have method for hiding whole view', function () {
            chai_1.expect(control.hide).to.exist;
            control.hide();
            chai_1.expect(control.isHidden).to.be.true;
        });
        it('should have method for destroying', function () {
            var spy = sinon.spy(control, '_unbindEvents');
            chai_1.expect(control.destroy).to.exist;
            control.destroy();
            chai_1.expect(control.view).to.not.exist;
            chai_1.expect(control._eventEmitter).to.not.exist;
            chai_1.expect(spy.called).to.be.true;
        });
    });
    describe('video events listeners', function () {
        it('should call callback on playback status change', function () {
            var spy = sinon.spy(control, '_updateVolumeStatus');
            control._bindEvents();
            eventEmitter.emit(constants_1.VIDEO_EVENTS.VOLUME_STATUS_CHANGED);
            chai_1.expect(spy.called).to.be.true;
        });
    });
    describe('internal methods', function () {
        it('should change volume level based on wheel delta', function () {
            var startSpy = sinon.spy(control, '_changeVolumeStatus');
            control._getVolumeLevelFromWheel(-100);
            chai_1.expect(startSpy.calledWith(90)).to.be.true;
        });
        it('should change volume level based on input', function () {
            var startSpy = sinon.spy(control, '_changeVolumeStatus');
            control._getVolumeLevelFromInput(40);
            chai_1.expect(startSpy.calledWith(40)).to.be.true;
        });
        it('should change volume level and mute status of video', function () {
            var volumeSpy = sinon.spy(control, '_changeVolumeLevel');
            var muteSpy = sinon.spy(control, '_toggleMuteStatus');
            control._changeVolumeStatus(90);
            chai_1.expect(volumeSpy.calledWith(90)).to.be.true;
            chai_1.expect(muteSpy.called).to.be.false;
            control._isMuted = true;
            control._changeVolumeStatus(90);
            chai_1.expect(muteSpy.called).to.be.true;
        });
    });
});
//# sourceMappingURL=volume.spec.js.map