"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("../../../../constants");
var templates_1 = require("./templates");
var view_1 = tslib_1.__importDefault(require("../../core/view"));
var htmlToElement_1 = tslib_1.__importDefault(require("../../core/htmlToElement"));
var getElementByHook_1 = tslib_1.__importDefault(require("../../core/getElementByHook"));
var volume_theme_1 = tslib_1.__importDefault(require("./volume.theme"));
var volume_scss_1 = tslib_1.__importDefault(require("./volume.scss"));
var DATA_IS_MUTED = 'data-is-muted';
var DATA_VOLUME = 'data-volume-percent';
var MAX_VOLUME_ICON_RANGE = 50;
var getPercentBasedOnXPosition = function (event, element) {
    var boundingRect = element.getBoundingClientRect();
    var positionX = event.clientX;
    if (positionX < boundingRect.left) {
        return 0;
    }
    if (positionX > boundingRect.left + boundingRect.width) {
        return 100;
    }
    return (event.clientX - boundingRect.left) / boundingRect.width * 100;
};
var VolumeView = /** @class */ (function (_super) {
    tslib_1.__extends(VolumeView, _super);
    function VolumeView(config) {
        var _this = this;
        var callbacks = config.callbacks, textMap = config.textMap, tooltipService = config.tooltipService, theme = config.theme;
        _this = _super.call(this, theme) || this;
        _this._callbacks = callbacks;
        _this._textMap = textMap;
        _this._tooltipService = tooltipService;
        _this._bindCallbacks();
        _this._initDOM();
        _this._bindEvents();
        return _this;
    }
    VolumeView.prototype._initDOM = function () {
        this._$node = htmlToElement_1.default(templates_1.controlTemplate({
            styles: this.styleNames,
            themeStyles: this.themeStyles,
            texts: {
                muteLabel: this._textMap.get(constants_1.TEXT_LABELS.MUTE_CONTROL_LABEL),
                volumeLabel: this._textMap.get(constants_1.TEXT_LABELS.VOLUME_CONTROL_LABEL),
            },
        }));
        this._$muteButton = getElementByHook_1.default(this._$node, 'mute-button');
        this._$volumeNode = getElementByHook_1.default(this._$node, 'volume-input-block');
        this._$hitbox = getElementByHook_1.default(this._$node, 'volume-hitbox');
        this._$volume = getElementByHook_1.default(this._$node, 'volume-input');
        this._muteButtonTooltipReference = this._tooltipService.createReference(this._$muteButton, {
            text: this._textMap.get(constants_1.TEXT_LABELS.MUTE_CONTROL_TOOLTIP),
        });
    };
    VolumeView.prototype._bindCallbacks = function () {
        this._onButtonClick = this._onButtonClick.bind(this);
        this._startDragOnMouseDown = this._startDragOnMouseDown.bind(this);
        this._stopDragOnMouseUp = this._stopDragOnMouseUp.bind(this);
        this._setVolumeByWheel = this._setVolumeByWheel.bind(this);
        this._setVolumeByClick = this._setVolumeByClick.bind(this);
        this._setVolumeByDrag = this._setVolumeByDrag.bind(this);
    };
    VolumeView.prototype._bindEvents = function () {
        this._$hitbox.addEventListener('wheel', this._setVolumeByWheel);
        this._$hitbox.addEventListener('mousedown', this._startDragOnMouseDown);
        window.addEventListener('mousemove', this._setVolumeByDrag);
        window.addEventListener('mouseup', this._stopDragOnMouseUp);
        this._$muteButton.addEventListener('click', this._onButtonClick);
    };
    VolumeView.prototype._unbindEvents = function () {
        this._$hitbox.removeEventListener('wheel', this._setVolumeByWheel);
        this._$hitbox.removeEventListener('mousedown', this._startDragOnMouseDown);
        window.removeEventListener('mousemove', this._setVolumeByDrag);
        window.removeEventListener('mouseup', this._stopDragOnMouseUp);
        this._$muteButton.removeEventListener('click', this._onButtonClick);
    };
    VolumeView.prototype._startDragOnMouseDown = function (event) {
        if (event.button > 1) {
            return;
        }
        this._setVolumeByClick(event);
        this._startDrag();
    };
    VolumeView.prototype._stopDragOnMouseUp = function (event) {
        if (event.button > 1) {
            return;
        }
        this._stopDrag();
    };
    VolumeView.prototype._setVolumeByClick = function (event) {
        this._$volumeNode.focus();
        var percent = getPercentBasedOnXPosition(event, this._$hitbox);
        this._callbacks.onVolumeLevelChangeFromInput(percent);
    };
    VolumeView.prototype._setVolumeByDrag = function (event) {
        var percent = getPercentBasedOnXPosition(event, this._$hitbox);
        if (this._isDragging) {
            this._callbacks.onVolumeLevelChangeFromInput(percent);
        }
    };
    VolumeView.prototype._setVolumeByWheel = function (e) {
        e.preventDefault();
        var value = e.deltaX || e.deltaY * -1;
        if (!value) {
            return;
        }
        this._callbacks.onVolumeLevelChangeFromWheel(value);
    };
    VolumeView.prototype._startDrag = function () {
        this._isDragging = true;
        this._$node.classList.add(this.styleNames.isDragging);
        this._callbacks.onDragStart();
    };
    VolumeView.prototype._stopDrag = function () {
        if (this._isDragging) {
            this._isDragging = false;
            this._$node.classList.remove(this.styleNames.isDragging);
            this._callbacks.onDragEnd();
        }
    };
    VolumeView.prototype._setVolumeDOMAttributes = function (percent) {
        this._$volumeNode.setAttribute('value', String(percent));
        this._$volumeNode.setAttribute('aria-valuetext', this._textMap.get(constants_1.TEXT_LABELS.VOLUME_CONTROL_VALUE, { percent: percent }));
        this._$volumeNode.setAttribute('aria-valuenow', String(percent));
        this._$volumeNode.setAttribute(DATA_VOLUME, String(percent));
        this._$volume.setAttribute('style', "width:" + percent + "%;");
        this._$node.setAttribute(DATA_VOLUME, String(percent));
        var iconTemplateProps = {
            styles: this.styleNames,
            themeStyles: this.themeStyles,
        };
        if (percent >= MAX_VOLUME_ICON_RANGE) {
            this._$muteButton.innerHTML = templates_1.volume100IconTemplate(iconTemplateProps);
        }
        else if (percent > 0) {
            this._$muteButton.innerHTML = templates_1.volume50IconTemplate(iconTemplateProps);
        }
        else {
            this._$muteButton.innerHTML = templates_1.volume0IconTemplate(iconTemplateProps);
        }
    };
    VolumeView.prototype._onButtonClick = function () {
        this._$muteButton.focus();
        this._callbacks.onToggleMuteClick();
    };
    VolumeView.prototype.setVolume = function (volume) {
        this._setVolumeDOMAttributes(volume);
    };
    VolumeView.prototype.setMute = function (isMuted) {
        this._setMuteDOMAttributes(isMuted);
    };
    VolumeView.prototype._setMuteDOMAttributes = function (isMuted) {
        if (isMuted) {
            this._$muteButton.innerHTML = templates_1.volume0IconTemplate({
                styles: this.styleNames,
                themeStyles: this.themeStyles,
            });
        }
        this._$node.setAttribute(DATA_IS_MUTED, String(isMuted));
        this._$muteButton.setAttribute('aria-label', isMuted
            ? this._textMap.get(constants_1.TEXT_LABELS.UNMUTE_CONTROL_LABEL)
            : this._textMap.get(constants_1.TEXT_LABELS.MUTE_CONTROL_LABEL));
        this._muteButtonTooltipReference.setText(isMuted
            ? this._textMap.get(constants_1.TEXT_LABELS.UNMUTE_CONTROL_TOOLTIP)
            : this._textMap.get(constants_1.TEXT_LABELS.MUTE_CONTROL_TOOLTIP));
    };
    VolumeView.prototype.show = function () {
        this._$node.classList.remove(this.styleNames.hidden);
    };
    VolumeView.prototype.hide = function () {
        this._$node.classList.add(this.styleNames.hidden);
    };
    VolumeView.prototype.getNode = function () {
        return this._$node;
    };
    VolumeView.prototype.getButtonNode = function () {
        return this._$muteButton;
    };
    VolumeView.prototype.getInputNode = function () {
        return this._$volumeNode;
    };
    VolumeView.prototype.destroy = function () {
        this._unbindEvents();
        this._callbacks = null;
        this._muteButtonTooltipReference.destroy();
        this._muteButtonTooltipReference = null;
        if (this._$node.parentNode) {
            this._$node.parentNode.removeChild(this._$node);
        }
        this._$muteButton = null;
        this._$node = null;
        this._textMap = null;
    };
    return VolumeView;
}(view_1.default));
VolumeView.setTheme(volume_theme_1.default);
VolumeView.extendStyleNames(volume_scss_1.default);
exports.default = VolumeView;
//# sourceMappingURL=volume.view.js.map