"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var templates_1 = require("./templates");
var htmlToElement_1 = tslib_1.__importDefault(require("../htmlToElement"));
var stylable_1 = tslib_1.__importDefault(require("../stylable"));
var types_1 = require("./types");
var tooltip_container_scss_1 = tslib_1.__importDefault(require("./tooltip-container.scss"));
var TooltipContainer = /** @class */ (function (_super) {
    tslib_1.__extends(TooltipContainer, _super);
    function TooltipContainer(tooltip) {
        var _this = _super.call(this) || this;
        _this._tooltip = tooltip;
        _this._initDOM();
        return _this;
    }
    Object.defineProperty(TooltipContainer.prototype, "node", {
        get: function () {
            return this._$node;
        },
        enumerable: true,
        configurable: true
    });
    TooltipContainer.prototype._initDOM = function () {
        this._$node = htmlToElement_1.default(templates_1.tooltipContainerTemplate({
            styles: this.styleNames,
        }));
        this._$node.appendChild(this._tooltip.node);
    };
    TooltipContainer.prototype.getTooltipPositionStyles = function (position) {
        if (typeof position === 'function') {
            position = position(this._$node);
        }
        if (position.placement === types_1.ITooltipPositionPlacement.TOP) {
            return {
                left: this._getTooltipLeftX(position.x) + "px",
                top: 0,
                bottom: 'initial',
            };
        }
        return {
            left: this._getTooltipLeftX(position.x) + "px",
            top: 'initial',
            bottom: 0,
        };
    };
    TooltipContainer.prototype.destroy = function () {
        this._tooltip = null;
        this._$node = null;
    };
    TooltipContainer.prototype._getTooltipLeftX = function (tooltipCenterX) {
        var tooltipRect = this._tooltip.node.getBoundingClientRect();
        var tooltipContainerRect = this._$node.getBoundingClientRect();
        var tooltipLeftX = tooltipCenterX - tooltipRect.width / 2;
        // ensure `x` is in range of placeholder rect
        tooltipLeftX = Math.max(tooltipLeftX, 0);
        tooltipLeftX = Math.min(tooltipLeftX, tooltipContainerRect.width - tooltipRect.width);
        return tooltipLeftX;
    };
    return TooltipContainer;
}(stylable_1.default));
TooltipContainer.extendStyleNames(tooltip_container_scss_1.default);
exports.default = TooltipContainer;
//# sourceMappingURL=tooltip-container.js.map