"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var templates_1 = require("./templates");
var htmlToElement_1 = tslib_1.__importDefault(require("../htmlToElement"));
var getElementByHook_1 = tslib_1.__importDefault(require("../getElementByHook"));
var stylable_1 = tslib_1.__importDefault(require("../stylable"));
var tooltip_scss_1 = tslib_1.__importDefault(require("./tooltip.scss"));
var Tooltip = /** @class */ (function (_super) {
    tslib_1.__extends(Tooltip, _super);
    function Tooltip() {
        var _this = _super.call(this) || this;
        _this._isHidden = true;
        _this._initDOM();
        return _this;
    }
    Tooltip.prototype._initDOM = function () {
        this._$node = htmlToElement_1.default(templates_1.tooltipTemplate({
            styles: this.styleNames,
        }));
        this._$tooltipInner = getElementByHook_1.default(this._$node, 'tooltipInner');
    };
    Object.defineProperty(Tooltip.prototype, "node", {
        get: function () {
            return this._$node;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tooltip.prototype, "isHidden", {
        get: function () {
            return this._isHidden;
        },
        enumerable: true,
        configurable: true
    });
    Tooltip.prototype.show = function () {
        if (!this._isHidden) {
            return;
        }
        this._isHidden = false;
        this._$node.classList.add(this.styleNames.tooltipVisible);
    };
    Tooltip.prototype.hide = function () {
        if (this._isHidden) {
            return;
        }
        this._isHidden = true;
        this._$node.classList.remove(this.styleNames.tooltipVisible);
    };
    Tooltip.prototype.setText = function (text) {
        this._$tooltipInner.innerText = text;
    };
    Tooltip.prototype.setStyle = function (style) {
        var _this = this;
        Object.keys(style).forEach(function (styleKey) {
            _this._$node.style[styleKey] = style[styleKey];
        });
    };
    Tooltip.prototype.destroy = function () {
        this._$node = null;
        this._$tooltipInner = null;
    };
    return Tooltip;
}(stylable_1.default));
Tooltip.extendStyleNames(tooltip_scss_1.default);
exports.default = Tooltip;
//# sourceMappingURL=tooltip.js.map