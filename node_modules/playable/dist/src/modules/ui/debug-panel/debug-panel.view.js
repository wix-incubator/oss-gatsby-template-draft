"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var view_1 = tslib_1.__importDefault(require("../core/view"));
var templates_1 = require("./templates");
var syntaxHighlight_1 = tslib_1.__importDefault(require("./syntaxHighlight"));
var htmlToElement_1 = tslib_1.__importDefault(require("../core/htmlToElement"));
var getElementByHook_1 = tslib_1.__importDefault(require("../core/getElementByHook"));
var toggleNodeClass_1 = tslib_1.__importDefault(require("../core/toggleNodeClass"));
var debug_panel_scss_1 = tslib_1.__importDefault(require("./debug-panel.scss"));
var DebugPanelView = /** @class */ (function (_super) {
    tslib_1.__extends(DebugPanelView, _super);
    function DebugPanelView(config) {
        var _this = _super.call(this) || this;
        var callbacks = config.callbacks;
        _this._callbacks = callbacks;
        _this._initDOM();
        _this._bindEvents();
        return _this;
    }
    DebugPanelView.prototype._initDOM = function () {
        this._$node = htmlToElement_1.default(templates_1.debugPanelTemplate({
            styles: this.styleNames,
        }));
        this._$closeButton = getElementByHook_1.default(this._$node, 'debug-panel-close-button');
        this._$infoContainer = getElementByHook_1.default(this._$node, 'debug-panel-info-container');
    };
    DebugPanelView.prototype._bindEvents = function () {
        this._$closeButton.addEventListener('click', this._callbacks.onCloseButtonClick);
    };
    DebugPanelView.prototype._unbindEvents = function () {
        this._$closeButton.removeEventListener('click', this._callbacks.onCloseButtonClick);
    };
    DebugPanelView.prototype.show = function () {
        toggleNodeClass_1.default(this._$node, this.styleNames.hidden, false);
    };
    DebugPanelView.prototype.hide = function () {
        toggleNodeClass_1.default(this._$node, this.styleNames.hidden, true);
    };
    DebugPanelView.prototype.setInfo = function (info) {
        this._$infoContainer.innerHTML = syntaxHighlight_1.default(JSON.stringify(info, undefined, 4), this.styleNames);
    };
    DebugPanelView.prototype.getNode = function () {
        return this._$node;
    };
    DebugPanelView.prototype.destroy = function () {
        this._unbindEvents();
        if (this._$node.parentNode) {
            this._$node.parentNode.removeChild(this._$node);
        }
        this._$node = null;
        this._$closeButton = null;
        this._$infoContainer = null;
        this._callbacks = null;
    };
    return DebugPanelView;
}(view_1.default));
DebugPanelView.extendStyleNames(debug_panel_scss_1.default);
exports.default = DebugPanelView;
//# sourceMappingURL=debug-panel.view.js.map