"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("jsdom-global/register");
var chai_1 = require("chai");
//@ts-ignore
var sinon = tslib_1.__importStar(require("sinon"));
var testkit_1 = tslib_1.__importDefault(require("../../../testkit"));
var constants_1 = require("../../../constants");
describe('LiveIndicator', function () {
    var testkit;
    var engine;
    var eventEmitter;
    var liveIndicator;
    beforeEach(function () {
        testkit = testkit_1.default();
        engine = testkit.getModule('engine');
        eventEmitter = testkit.getModule('eventEmitter');
        liveIndicator = testkit.getModule('liveIndicator');
    });
    describe('constructor', function () {
        it('should create instance ', function () {
            chai_1.expect(liveIndicator).to.exist;
            chai_1.expect(liveIndicator.view).to.exist;
        });
    });
    describe('instance', function () {
        it('should have method for showing/hiding liveIndicator', function () {
            var viewToggleSpy = sinon.spy(liveIndicator.view, 'toggle');
            chai_1.expect(liveIndicator.isHidden, 'hidden by default').to.be.true;
            liveIndicator.show();
            chai_1.expect(viewToggleSpy.calledWith(true)).to.be.true;
            chai_1.expect(liveIndicator.isHidden, 'hidden after method show called').to.be
                .false;
            liveIndicator.hide();
            chai_1.expect(viewToggleSpy.lastCall.calledWith(false)).to.be.true;
            chai_1.expect(liveIndicator.isHidden, 'hidden after method hide called').to.be
                .true;
            viewToggleSpy.restore();
        });
        it('should have method for getting view node', function () {
            chai_1.expect(liveIndicator.node).to.equal(liveIndicator.view.getNode());
        });
        it('should try to sync with live on click', function () {
            var engineSyncWithLiveSpy = sinon.spy(engine, 'syncWithLive');
            var liveIndicatorViewNode = liveIndicator.view.getNode();
            liveIndicatorViewNode.dispatchEvent(new Event('click'));
            chai_1.expect(engineSyncWithLiveSpy.called).to.be.true;
            engineSyncWithLiveSpy.restore();
        });
    });
    describe('on live state change', function () {
        it('should reset on `LiveState.NONE`', function () {
            var viewToggleSpy = sinon.spy(liveIndicator.view, 'toggle');
            var viewToggleActiveSpy = sinon.spy(liveIndicator.view, 'toggleActive');
            var viewToggleEndedSpy = sinon.spy(liveIndicator.view, 'toggleEnded');
            liveIndicator.show();
            chai_1.expect(liveIndicator.isHidden, 'hidden before `LiveState.NONE`').to.be
                .false;
            eventEmitter.emit(constants_1.VIDEO_EVENTS.LIVE_STATE_CHANGED, {
                nextState: constants_1.LiveState.NONE,
            });
            chai_1.expect(liveIndicator.isHidden, 'isHidden').to.be.true;
            chai_1.expect(viewToggleSpy.calledWith(false), 'view.toggle called with `false`')
                .to.be.true;
            chai_1.expect(viewToggleActiveSpy.calledWith(false), 'view.toggleActive called with `false`').to.be.true;
            chai_1.expect(viewToggleEndedSpy.calledWith(false), 'view.toggleEnded called with `false`').to.be.true;
            viewToggleSpy.restore();
            viewToggleActiveSpy.restore();
            viewToggleEndedSpy.restore();
        });
        describe('for dynamic content', function () {
            beforeEach(function () {
                eventEmitter.emit(constants_1.VIDEO_EVENTS.LIVE_STATE_CHANGED, {
                    nextState: constants_1.LiveState.NONE,
                });
            });
            it('should show on `LiveState.INITIAL`', function () {
                var viewToggleSpy = sinon.spy(liveIndicator.view, 'toggle');
                chai_1.expect(liveIndicator.isHidden, 'hidden before `LiveState.INITIAL`').to
                    .be.true;
                eventEmitter.emit(constants_1.VIDEO_EVENTS.LIVE_STATE_CHANGED, {
                    nextState: constants_1.LiveState.INITIAL,
                });
                chai_1.expect(liveIndicator.isHidden).to.be.false;
                chai_1.expect(viewToggleSpy.calledWith(true)).to.be.true;
                viewToggleSpy.restore();
            });
            it('should activate on `LiveState.SYNC`', function () {
                var viewToggleActiveSpy = sinon.spy(liveIndicator.view, 'toggleActive');
                eventEmitter.emit(constants_1.VIDEO_EVENTS.LIVE_STATE_CHANGED, {
                    nextState: constants_1.LiveState.INITIAL,
                });
                chai_1.expect(liveIndicator.isHidden, 'hidden before `LiveState.SYNC`').to.be
                    .false;
                chai_1.expect(liveIndicator.isActive, 'active before `LiveState.SYNC`').to.be
                    .false;
                eventEmitter.emit(constants_1.VIDEO_EVENTS.LIVE_STATE_CHANGED, {
                    nextState: constants_1.LiveState.SYNC,
                });
                chai_1.expect(liveIndicator.isActive).to.be.true;
                chai_1.expect(viewToggleActiveSpy.calledWith(true)).to.be.true;
                viewToggleActiveSpy.restore();
            });
            it('should deactivate on `LiveState.NOT_SYNC`', function () {
                var viewToggleActiveSpy = sinon.spy(liveIndicator.view, 'toggleActive');
                eventEmitter.emit(constants_1.VIDEO_EVENTS.LIVE_STATE_CHANGED, {
                    nextState: constants_1.LiveState.INITIAL,
                });
                eventEmitter.emit(constants_1.VIDEO_EVENTS.LIVE_STATE_CHANGED, {
                    nextState: constants_1.LiveState.SYNC,
                });
                chai_1.expect(liveIndicator.isActive, 'active before out of sync').to.be.true;
                eventEmitter.emit(constants_1.VIDEO_EVENTS.LIVE_STATE_CHANGED, {
                    nextState: constants_1.LiveState.NOT_SYNC,
                });
                chai_1.expect(liveIndicator.isActive).to.be.false;
                chai_1.expect(viewToggleActiveSpy.lastCall.calledWith(false)).to.be.true;
                viewToggleActiveSpy.restore();
            });
            it('should react to `LiveState.ENDED`', function () {
                var viewToggleActiveSpy = sinon.spy(liveIndicator.view, 'toggleActive');
                var viewToggleEndedSpy = sinon.spy(liveIndicator.view, 'toggleEnded');
                eventEmitter.emit(constants_1.VIDEO_EVENTS.LIVE_STATE_CHANGED, {
                    nextState: constants_1.LiveState.INITIAL,
                });
                eventEmitter.emit(constants_1.VIDEO_EVENTS.LIVE_STATE_CHANGED, {
                    nextState: constants_1.LiveState.SYNC,
                });
                chai_1.expect(liveIndicator.isActive, 'active before `LiveState.ENDED`').to.be
                    .true;
                eventEmitter.emit(constants_1.VIDEO_EVENTS.LIVE_STATE_CHANGED, {
                    nextState: constants_1.LiveState.ENDED,
                });
                chai_1.expect(liveIndicator.isActive, 'isActive').to.be.false;
                chai_1.expect(viewToggleActiveSpy.lastCall.calledWith(false), 'view.toggleActive called with `false`').to.be.true;
                chai_1.expect(viewToggleEndedSpy.lastCall.calledWith(true), 'view.toggleEnded called with `true`').to.be.true;
                viewToggleActiveSpy.restore();
                viewToggleEndedSpy.restore();
            });
        });
    });
});
//# sourceMappingURL=live-indicator.spec.js.map