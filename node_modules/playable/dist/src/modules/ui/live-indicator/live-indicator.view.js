"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var view_1 = tslib_1.__importDefault(require("../core/view"));
var templates_1 = require("./templates");
var htmlToElement_1 = tslib_1.__importDefault(require("../core/htmlToElement"));
var getElementByHook_1 = tslib_1.__importDefault(require("../core/getElementByHook"));
var toggleNodeClass_1 = tslib_1.__importDefault(require("../core/toggleNodeClass"));
var live_indicator_scss_1 = tslib_1.__importDefault(require("./live-indicator.scss"));
var constants_1 = require("../../../constants");
var LiveIndicatorView = /** @class */ (function (_super) {
    tslib_1.__extends(LiveIndicatorView, _super);
    function LiveIndicatorView(config) {
        var _this = _super.call(this) || this;
        _this._callbacks = config.callbacks;
        _this._textMap = config.textMap;
        _this._tooltipService = config.tooltipService;
        _this._initDOM();
        _this._bindEvents();
        return _this;
    }
    LiveIndicatorView.prototype._initDOM = function () {
        this._$node = htmlToElement_1.default(templates_1.liveIndicatorTemplate({
            styles: this.styleNames,
            themeStyles: this.themeStyles,
            texts: {},
        }));
        this._$liveIndicatorText = getElementByHook_1.default(this._$node, 'live-indicator-text');
        this._tooltipReference = this._tooltipService.createReference(this._$node, {
            text: this._textMap.get(constants_1.TEXT_LABELS.LIVE_SYNC_TOOLTIP),
        });
        // NOTE: LIVE indicator is hidden and inactive by default
        this.toggle(false);
        this.toggleActive(false);
        this.toggleEnded(false);
    };
    LiveIndicatorView.prototype._bindEvents = function () {
        this._$node.addEventListener('click', this._callbacks.onClick);
    };
    LiveIndicatorView.prototype._unbindEvents = function () {
        this._$node.removeEventListener('click', this._callbacks.onClick);
    };
    LiveIndicatorView.prototype.toggleActive = function (shouldActivate) {
        toggleNodeClass_1.default(this._$node, this.styleNames.active, shouldActivate);
        // NOTE: disable tooltip while video is sync with live
        if (shouldActivate) {
            this._tooltipReference.disable();
        }
        else {
            this._tooltipReference.enable();
        }
    };
    LiveIndicatorView.prototype.toggleEnded = function (isEnded) {
        toggleNodeClass_1.default(this._$node, this.styleNames.ended, isEnded);
        this._$liveIndicatorText.innerText = this._textMap.get(constants_1.TEXT_LABELS.LIVE_INDICATOR_TEXT, { isEnded: isEnded });
        this._$liveIndicatorText.setAttribute('aria-label', !isEnded ? this._textMap.get(constants_1.TEXT_LABELS.LIVE_SYNC_LABEL) : '');
        if (isEnded) {
            this._tooltipReference.disable();
        }
        else {
            this._tooltipReference.enable();
        }
    };
    LiveIndicatorView.prototype.show = function () {
        this.toggle(true);
    };
    LiveIndicatorView.prototype.hide = function () {
        this.toggle(false);
    };
    LiveIndicatorView.prototype.toggle = function (shouldShow) {
        toggleNodeClass_1.default(this._$node, this.styleNames.hidden, !shouldShow);
    };
    LiveIndicatorView.prototype.getNode = function () {
        return this._$node;
    };
    LiveIndicatorView.prototype.destroy = function () {
        this._unbindEvents();
        this._callbacks = null;
        this._tooltipReference.destroy();
        this._tooltipReference = null;
        if (this._$node.parentNode) {
            this._$node.parentNode.removeChild(this._$node);
        }
        this._$node = null;
        this._$liveIndicatorText = null;
        this._callbacks = null;
        this._textMap = null;
    };
    return LiveIndicatorView;
}(view_1.default));
LiveIndicatorView.extendStyleNames(live_indicator_scss_1.default);
exports.default = LiveIndicatorView;
//# sourceMappingURL=live-indicator.view.js.map