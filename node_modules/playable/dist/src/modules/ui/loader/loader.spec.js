"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("jsdom-global/register");
var chai_1 = require("chai");
//@ts-ignore
var sinon = tslib_1.__importStar(require("sinon"));
var testkit_1 = tslib_1.__importDefault(require("../../../testkit"));
var loader_1 = require("./loader");
var constants_1 = require("../../../constants");
describe('Loader', function () {
    var loader;
    var testkit;
    var engine;
    var eventEmitter;
    var emitSpy;
    describe('constructor', function () {
        beforeEach(function () {
            testkit = testkit_1.default();
        });
        it('should create instance ', function () {
            loader = testkit.getModule('loader');
            chai_1.expect(loader).to.exist;
            chai_1.expect(loader.view).to.exist;
        });
    });
    describe('instance', function () {
        beforeEach(function () {
            testkit = testkit_1.default();
            loader = testkit.getModule('loader');
            engine = testkit.getModule('engine');
            eventEmitter = testkit.getModule('eventEmitter');
            emitSpy = sinon.spy(eventEmitter, 'emit');
        });
        afterEach(function () {
            eventEmitter.emit.restore();
        });
        describe('public API', function () {
            it('should have method for showing loader', function () {
                var showSpy = sinon.spy(loader.view, 'showContent');
                loader._showContent();
                chai_1.expect(emitSpy.calledWith(constants_1.UI_EVENTS.LOADER_SHOW_TRIGGERED)).to.be.true;
                chai_1.expect(showSpy.called).to.be.true;
                chai_1.expect(loader.isHidden).to.be.false;
            });
            it('should have method for hidding loader', function () {
                loader._showContent();
                var hideSpy = sinon.spy(loader.view, 'hideContent');
                loader._hideContent();
                chai_1.expect(emitSpy.calledWith(constants_1.UI_EVENTS.LOADER_HIDE_TRIGGERED)).to.be.true;
                chai_1.expect(hideSpy.called).to.be.true;
                chai_1.expect(loader.isHidden).to.be.true;
            });
            it('should have method for schedule delayed show', function () {
                var setTimeoutSpy = sinon.spy(window, 'setTimeout');
                loader.startDelayedShow();
                chai_1.expect(setTimeoutSpy.calledWith(loader._showContent, loader_1.DELAYED_SHOW_TIMEOUT)).to.be.true;
                chai_1.expect(loader.isDelayedShowScheduled).to.be.true;
                setTimeoutSpy.restore();
            });
            it('should have method for unschedule delayed show', function () {
                loader.startDelayedShow();
                var clearTimeoutSpy = sinon.spy(window, 'clearTimeout');
                loader.stopDelayedShow();
                chai_1.expect(clearTimeoutSpy.called).to.be.true;
                chai_1.expect(loader.isDelayedShowScheduled).to.be.false;
                clearTimeoutSpy.restore();
            });
            it('should stop previous scheduled show if you trigger schedule', function () {
                var stopSpy = sinon.spy(loader, 'stopDelayedShow');
                loader.startDelayedShow();
                loader.startDelayedShow();
                chai_1.expect(stopSpy.calledOnce).to.be.true;
            });
        });
        describe('reaction to event', function () {
            it('should be proper if event is VIDEO_EVENTS.UPLOAD_SUSPEND', function () {
                loader.show();
                eventEmitter.emit(constants_1.VIDEO_EVENTS.UPLOAD_SUSPEND);
                chai_1.expect(loader.isHidden).to.be.true;
            });
            describe('signifying state change', function () {
                var delayedShowSpy;
                var stopDelayedShowSpy;
                beforeEach(function () {
                    delayedShowSpy = sinon.spy(loader, 'startDelayedShow');
                    stopDelayedShowSpy = sinon.spy(loader, 'stopDelayedShow');
                });
                afterEach(function () {
                    loader.startDelayedShow.restore();
                    loader.stopDelayedShow.restore();
                });
                it('should be proper if next state is EngineState.SEEK_IN_PROGRESS', function () {
                    eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                        nextState: constants_1.EngineState.SEEK_IN_PROGRESS,
                    });
                    chai_1.expect(delayedShowSpy.called).to.be.true;
                });
                it('should be proper if next state is EngineState.WAITING', function () {
                    eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                        nextState: constants_1.EngineState.WAITING,
                    });
                    chai_1.expect(delayedShowSpy.called).to.be.true;
                });
                it('should be proper if next state is EngineState.LOAD_STARTED', function () {
                    var showSpy = sinon.spy(loader, '_showContent');
                    engine.setPreload('none');
                    eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                        nextState: constants_1.EngineState.LOAD_STARTED,
                    });
                    chai_1.expect(showSpy.called).to.be.false;
                    engine.setPreload('auto');
                    eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                        nextState: constants_1.EngineState.LOAD_STARTED,
                    });
                    chai_1.expect(showSpy.called).to.be.true;
                });
                it('should be proper if next state is EngineState.READY_TO_PLAY', function () {
                    var hideSpy = sinon.spy(loader, '_hideContent');
                    loader._showContent();
                    eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                        nextState: constants_1.EngineState.READY_TO_PLAY,
                    });
                    chai_1.expect(hideSpy.called).to.be.true;
                    chai_1.expect(stopDelayedShowSpy.called).to.be.true;
                });
                it('should be proper if next state is EngineState.PLAYING', function () {
                    var hideSpy = sinon.spy(loader, '_hideContent');
                    eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                        nextState: constants_1.EngineState.PLAYING,
                    });
                    chai_1.expect(hideSpy.called).to.be.true;
                    chai_1.expect(stopDelayedShowSpy.called).to.be.true;
                });
                it('should be proper if next state is EngineState.PAUSED', function () {
                    var hideSpy = sinon.spy(loader, '_hideContent');
                    eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                        nextState: constants_1.EngineState.PAUSED,
                    });
                    chai_1.expect(hideSpy.called).to.be.true;
                    chai_1.expect(stopDelayedShowSpy.called).to.be.true;
                });
            });
        });
    });
});
//# sourceMappingURL=loader.spec.js.map