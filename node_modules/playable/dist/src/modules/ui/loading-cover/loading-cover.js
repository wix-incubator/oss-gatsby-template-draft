"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("../../../constants");
var player_api_decorator_1 = tslib_1.__importDefault(require("../../../core/player-api-decorator"));
var loading_cover_view_1 = tslib_1.__importDefault(require("./loading-cover.view"));
var LoadingCover = /** @class */ (function () {
    function LoadingCover(_a) {
        var config = _a.config, eventEmitter = _a.eventEmitter, engine = _a.engine, bottomBlock = _a.bottomBlock, rootContainer = _a.rootContainer;
        this._eventEmitter = eventEmitter;
        this.isHidden = false;
        this._engine = engine;
        this._bottomBlock = bottomBlock;
        this._url = config.loadingCover;
        this.show = this.show.bind(this);
        this.hide = this.hide.bind(this);
        this._initUI();
        this.hide();
        this._bindEvents();
        if (config.loadingCover && typeof config.loadingCover === 'string') {
            this._url = config.loadingCover;
            rootContainer.appendComponentNode(this.node);
        }
    }
    Object.defineProperty(LoadingCover.prototype, "node", {
        get: function () {
            return this.view.getNode();
        },
        enumerable: true,
        configurable: true
    });
    LoadingCover.prototype._bindEvents = function () {
        this._unbindEvents = this._eventEmitter.bindEvents([
            [constants_1.VIDEO_EVENTS.STATE_CHANGED, this._checkForWaitingState],
            [constants_1.VIDEO_EVENTS.UPLOAD_SUSPEND, this.hide],
        ], this);
    };
    LoadingCover.prototype._checkForWaitingState = function (_a) {
        var nextState = _a.nextState;
        switch (nextState) {
            case constants_1.EngineState.LOAD_STARTED:
                if (this._engine.isPreloadAvailable) {
                    this.show();
                }
                break;
            case constants_1.EngineState.WAITING:
                if (!this._engine.isMetadataLoaded) {
                    this.show();
                }
                break;
            case constants_1.EngineState.READY_TO_PLAY:
                this.hide();
                break;
            /* ignore coverage */
            default:
                break;
        }
    };
    LoadingCover.prototype._initUI = function () {
        this.view = new loading_cover_view_1.default({
            url: this._url,
        });
    };
    LoadingCover.prototype.hide = function () {
        if (!this.isHidden) {
            this._eventEmitter.emit(constants_1.UI_EVENTS.LOADING_COVER_HIDE_TRIGGERED);
            this.view.hide();
            this.isHidden = true;
        }
    };
    LoadingCover.prototype.show = function () {
        if (this.isHidden) {
            this._bottomBlock.hideContent();
            this._eventEmitter.emit(constants_1.UI_EVENTS.LOADING_COVER_SHOW_TRIGGERED);
            this.view.show();
            this.isHidden = false;
        }
    };
    /**
     * Method for setting source of image, that would be used as loading cover instead of loader.
     * @param src - Link to your image
     * @example
     * player.setLoadingCover('https://example.com/cover.png');
     *
     */
    LoadingCover.prototype.setLoadingCover = function (src) {
        this.view.setCover(src);
    };
    LoadingCover.prototype.destroy = function () {
        this._unbindEvents();
        this.view.destroy();
        this.view = null;
        this._bottomBlock = null;
        this._eventEmitter = null;
        this._engine = null;
    };
    LoadingCover.moduleName = 'loadingCover';
    LoadingCover.View = loading_cover_view_1.default;
    LoadingCover.dependencies = [
        'engine',
        'eventEmitter',
        'config',
        'bottomBlock',
        'rootContainer',
    ];
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], LoadingCover.prototype, "setLoadingCover", null);
    return LoadingCover;
}());
exports.default = LoadingCover;
//# sourceMappingURL=loading-cover.js.map