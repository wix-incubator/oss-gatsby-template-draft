"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("jsdom-global/register");
var chai_1 = require("chai");
//@ts-ignore
var sinon = tslib_1.__importStar(require("sinon"));
var testkit_1 = tslib_1.__importDefault(require("../../../testkit"));
var loading_cover_1 = tslib_1.__importDefault(require("./loading-cover"));
var constants_1 = require("../../../constants");
describe('LoadingCover', function () {
    var testkit;
    var loadingCover;
    var engine;
    var eventEmitter;
    var emitSpy;
    beforeEach(function () {
        testkit = testkit_1.default();
        engine = testkit.getModule('engine');
        eventEmitter = testkit.getModule('eventEmitter');
        testkit.registerModule('loadingCover', loading_cover_1.default);
        loadingCover = testkit.getModule('loadingCover');
        emitSpy = sinon.spy(eventEmitter, 'emit');
    });
    afterEach(function () {
        eventEmitter.emit.restore();
    });
    describe('constructor', function () {
        it('should create instance ', function () {
            chai_1.expect(loadingCover).to.exist;
            chai_1.expect(loadingCover.view).to.exist;
        });
    });
    describe('instance', function () {
        describe('public API', function () {
            it('should have method for getting view node', function () {
                var getNodeSpy = sinon.spy(loadingCover.view, 'getNode');
                loadingCover.node;
                chai_1.expect(getNodeSpy.called).to.be.true;
            });
            it('should have method for setting cover', function () {
                var url = 'url';
                var setCoverSpy = sinon.spy(loadingCover.view, 'setCover');
                loadingCover.setLoadingCover(url);
                chai_1.expect(setCoverSpy.calledWith(url)).to.be.true;
            });
            it('should have method for showing loader', function () {
                var showSpy = sinon.spy(loadingCover.view, 'show');
                loadingCover.show();
                chai_1.expect(emitSpy.calledWith(constants_1.UI_EVENTS.LOADING_COVER_SHOW_TRIGGERED)).to.be
                    .true;
                chai_1.expect(showSpy.called).to.be.true;
                chai_1.expect(loadingCover.isHidden).to.be.false;
            });
            it('should have method for hidding loader', function () {
                loadingCover.show();
                var hideSpy = sinon.spy(loadingCover.view, 'hide');
                loadingCover.hide();
                chai_1.expect(emitSpy.calledWith(constants_1.UI_EVENTS.LOADING_COVER_HIDE_TRIGGERED)).to.be
                    .true;
                chai_1.expect(hideSpy.called).to.be.true;
                chai_1.expect(loadingCover.isHidden).to.be.true;
            });
        });
        describe('reaction to event', function () {
            it('should be proper if event is VIDEO_EVENTS.UPLOAD_SUSPEND', function () {
                loadingCover.show();
                eventEmitter.emit(constants_1.VIDEO_EVENTS.UPLOAD_SUSPEND);
                chai_1.expect(loadingCover.isHidden).to.be.true;
            });
            describe('signifying state change', function () {
                var showSpy;
                var hideSpy;
                beforeEach(function () {
                    showSpy = sinon.spy(loadingCover, 'show');
                    hideSpy = sinon.spy(loadingCover, 'hide');
                });
                afterEach(function () {
                    loadingCover.show.restore();
                    loadingCover.hide.restore();
                });
                it('should be proper if next state is EngineState.LOAD_STARTED', function () {
                    engine.setPreload('none');
                    eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                        nextState: constants_1.EngineState.LOAD_STARTED,
                    });
                    chai_1.expect(showSpy.called).to.be.false;
                    engine.setPreload('auto');
                    eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                        nextState: constants_1.EngineState.LOAD_STARTED,
                    });
                    chai_1.expect(showSpy.called).to.be.true;
                });
                it('should be proper if next state is EngineState.WAITING', function () {
                    engine._stateEngine._isMetadataLoaded = true;
                    eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                        nextState: constants_1.EngineState.WAITING,
                    });
                    chai_1.expect(showSpy.called).to.be.false;
                    engine._stateEngine._isMetadataLoaded = false;
                    engine.setPreload('auto');
                    eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                        nextState: constants_1.EngineState.WAITING,
                    });
                    chai_1.expect(showSpy.called).to.be.true;
                });
                it('should be proper if next state is EngineState.READY_TO_PLAY', function () {
                    eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                        nextState: constants_1.EngineState.READY_TO_PLAY,
                    });
                    chai_1.expect(hideSpy.called).to.be.true;
                });
            });
        });
    });
});
//# sourceMappingURL=loading-cover.spec.js.map