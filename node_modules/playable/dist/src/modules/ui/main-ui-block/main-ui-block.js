"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("../../../constants");
var player_api_decorator_1 = tslib_1.__importDefault(require("../../../core/player-api-decorator"));
var main_ui_block_view_1 = tslib_1.__importDefault(require("./main-ui-block.view"));
var HIDE_BLOCK_TIMEOUT = 2000;
var DEFAULT_CONFIG = {
    shouldAlwaysShow: false,
};
var MainUIBlock = /** @class */ (function () {
    function MainUIBlock(dependencies) {
        this._hideTimeout = null;
        this._isContentShowingEnabled = true;
        this._isContentShown = false;
        this._shouldShowContent = true;
        this._shouldAlwaysShow = false;
        this._isDragging = false;
        var config = dependencies.config, eventEmitter = dependencies.eventEmitter, rootContainer = dependencies.rootContainer, tooltipService = dependencies.tooltipService, topBlock = dependencies.topBlock, bottomBlock = dependencies.bottomBlock, screen = dependencies.screen;
        this._eventEmitter = eventEmitter;
        this._topBlock = topBlock;
        this._bottomBlock = bottomBlock;
        this._screen = screen;
        this.isHidden = false;
        var mainBlockConfig = tslib_1.__assign({}, DEFAULT_CONFIG, (typeof config.controls === 'object' ? config.controls : null));
        this._shouldAlwaysShow = mainBlockConfig.shouldAlwaysShow;
        this._initUI({
            tooltipContainer: tooltipService.tooltipContainerNode,
            topBlock: topBlock.node,
            bottomBlock: bottomBlock.node,
        });
        this._bindViewCallbacks();
        this._bindEvents();
        rootContainer.appendComponentNode(this.view.getNode());
        if (config.controls === false) {
            this.hide();
        }
    }
    Object.defineProperty(MainUIBlock.prototype, "node", {
        get: function () {
            return this.view.getNode();
        },
        enumerable: true,
        configurable: true
    });
    MainUIBlock.prototype._initUI = function (elements) {
        this.view = new MainUIBlock.View({ elements: elements });
    };
    MainUIBlock.prototype._bindViewCallbacks = function () {
        this._startHideBlockTimeout = this._startHideBlockTimeout.bind(this);
        this._tryShowContent = this._tryShowContent.bind(this);
        this._tryHideContent = this._tryHideContent.bind(this);
    };
    MainUIBlock.prototype._bindEvents = function () {
        this._unbindEvents = this._eventEmitter.bindEvents([
            [constants_1.UI_EVENTS.MOUSE_MOVE_ON_PLAYER_TRIGGERED, this._startHideBlockTimeout],
            [constants_1.UI_EVENTS.MOUSE_LEAVE_ON_PLAYER_TRIGGERED, this._tryHideContent],
            [constants_1.UI_EVENTS.KEYBOARD_KEYDOWN_INTERCEPTED, this._startHideBlockTimeout],
            [constants_1.UI_EVENTS.LOADER_HIDE_TRIGGERED, this._startHideBlockTimeout],
            [constants_1.VIDEO_EVENTS.STATE_CHANGED, this._updatePlayingStatus],
            [constants_1.UI_EVENTS.CONTROL_DRAG_START, this._onControlDragStart],
            [constants_1.UI_EVENTS.CONTROL_DRAG_END, this._onControlDragEnd],
        ], this);
    };
    MainUIBlock.prototype._updatePlayingStatus = function (_a) {
        var nextState = _a.nextState;
        switch (nextState) {
            case constants_1.EngineState.PLAY_REQUESTED: {
                this._shouldShowContent = false;
                this._startHideBlockTimeout();
                break;
            }
            case constants_1.EngineState.ENDED: {
                this._shouldShowContent = true;
                this._tryShowContent();
                break;
            }
            case constants_1.EngineState.PAUSED: {
                this._shouldShowContent = true;
                this._tryShowContent();
                break;
            }
            case constants_1.EngineState.SRC_SET: {
                this._shouldShowContent = true;
                this._tryShowContent();
                break;
            }
            default:
                break;
        }
    };
    Object.defineProperty(MainUIBlock.prototype, "_isBlockFocused", {
        get: function () {
            return this._bottomBlock.isFocused;
        },
        enumerable: true,
        configurable: true
    });
    MainUIBlock.prototype._startHideBlockTimeout = function () {
        this._stopHideBlockTimeout();
        this._tryShowContent();
        this._hideTimeout = window.setTimeout(this._tryHideContent, HIDE_BLOCK_TIMEOUT);
    };
    MainUIBlock.prototype._stopHideBlockTimeout = function () {
        if (this._hideTimeout) {
            window.clearTimeout(this._hideTimeout);
        }
    };
    MainUIBlock.prototype._tryShowContent = function () {
        if (this._isContentShowingEnabled) {
            this._showContent();
        }
    };
    MainUIBlock.prototype._onControlDragStart = function () {
        this._isDragging = true;
    };
    MainUIBlock.prototype._onControlDragEnd = function () {
        this._isDragging = false;
        this._tryHideContent();
    };
    MainUIBlock.prototype._showContent = function () {
        if (this.isHidden || this._isContentShown) {
            return;
        }
        this._screen.showCursor();
        this._eventEmitter.emit(constants_1.UI_EVENTS.MAIN_BLOCK_SHOW_TRIGGERED);
        this._bottomBlock.showContent();
        this._topBlock.showContent();
        this._isContentShown = true;
    };
    MainUIBlock.prototype._tryHideContent = function () {
        if (!this._isBlockFocused &&
            !this._isDragging &&
            !this._shouldShowContent &&
            !this._shouldAlwaysShow) {
            this._hideContent();
        }
    };
    MainUIBlock.prototype._hideContent = function () {
        if (this.isHidden || !this._isContentShown) {
            return;
        }
        if (this._isContentShowingEnabled) {
            this._screen.hideCursor();
        }
        this._eventEmitter.emit(constants_1.UI_EVENTS.MAIN_BLOCK_HIDE_TRIGGERED);
        this._bottomBlock.hideContent();
        this._topBlock.hideContent();
        this._isContentShown = false;
    };
    MainUIBlock.prototype.disableShowingContent = function () {
        this._isContentShowingEnabled = false;
        this._hideContent();
    };
    MainUIBlock.prototype.enableShowingContent = function () {
        this._isContentShowingEnabled = true;
        if (this._shouldShowContent) {
            this._showContent();
        }
    };
    MainUIBlock.prototype.hide = function () {
        this.isHidden = true;
        this._topBlock.hide();
        this._bottomBlock.hide();
    };
    MainUIBlock.prototype.show = function () {
        this.isHidden = false;
        this._topBlock.show();
        this._bottomBlock.show();
    };
    /**
     * Method for allowing bottom block to be always shown.
     * @param flag - `true` for showing always
     * @example
     * player.setControlsShouldAlwaysShow(true);
     *
     */
    MainUIBlock.prototype.setShouldAlwaysShow = function (flag) {
        this._shouldAlwaysShow = flag;
        if (this._shouldAlwaysShow) {
            this._tryShowContent();
        }
        else {
            this._startHideBlockTimeout();
        }
    };
    MainUIBlock.prototype.destroy = function () {
        this._stopHideBlockTimeout();
        this._unbindEvents();
        this.view.destroy();
        this.view = null;
        this._eventEmitter = null;
        this._topBlock = null;
        this._bottomBlock = null;
    };
    MainUIBlock.moduleName = 'mainUIBlock';
    MainUIBlock.View = main_ui_block_view_1.default;
    MainUIBlock.dependencies = [
        'config',
        'screen',
        'rootContainer',
        'tooltipService',
        'eventEmitter',
        'topBlock',
        'bottomBlock',
    ];
    tslib_1.__decorate([
        player_api_decorator_1.default('setControlsShouldAlwaysShow')
    ], MainUIBlock.prototype, "setShouldAlwaysShow", null);
    return MainUIBlock;
}());
exports.default = MainUIBlock;
//# sourceMappingURL=main-ui-block.js.map