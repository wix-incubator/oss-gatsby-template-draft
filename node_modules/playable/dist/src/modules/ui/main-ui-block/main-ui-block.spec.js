"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("jsdom-global/register");
var chai_1 = require("chai");
//@ts-ignore
var sinon = tslib_1.__importStar(require("sinon"));
var testkit_1 = tslib_1.__importDefault(require("../../../testkit"));
var constants_1 = require("../../../constants");
describe('BottomBlock', function () {
    var testkit;
    var mainBlock;
    var eventEmitter;
    beforeEach(function () {
        testkit = testkit_1.default();
        eventEmitter = testkit.getModule('eventEmitter');
        mainBlock = testkit.getModule('mainUIBlock');
    });
    describe('constructor', function () {
        it('should create instance ', function () {
            chai_1.expect(mainBlock).to.exist;
        });
    });
    describe('instance', function () {
        it('should have method for setting playback status', function () {
            chai_1.expect(mainBlock._updatePlayingStatus).to.exist;
            var startTimeout = sinon.spy(mainBlock, '_startHideBlockTimeout');
            var showTimeout = sinon.spy(mainBlock, '_showContent');
            mainBlock._updatePlayingStatus({ nextState: constants_1.EngineState.PLAY_REQUESTED });
            chai_1.expect(startTimeout.called).to.be.true;
            mainBlock._updatePlayingStatus({ nextState: constants_1.EngineState.PAUSED });
            chai_1.expect(showTimeout.called).to.be.true;
            showTimeout.reset();
            mainBlock._updatePlayingStatus({ nextState: constants_1.EngineState.ENDED });
            chai_1.expect(showTimeout.called).to.be.true;
            showTimeout.reset();
            mainBlock._updatePlayingStatus({ nextState: constants_1.EngineState.SRC_SET });
            chai_1.expect(showTimeout.called).to.be.true;
        });
        it('should have method for hiding controls on timeout', function () {
            var timeoutSpy = sinon.spy(window, 'setTimeout');
            var clearSpy = sinon.spy(window, 'clearTimeout');
            mainBlock._startHideBlockTimeout();
            chai_1.expect(timeoutSpy.calledWith(mainBlock._tryHideContent, 2000)).to.be.true;
            mainBlock._startHideBlockTimeout();
            chai_1.expect(clearSpy.called).to.be.true;
            timeoutSpy.restore();
            clearSpy.restore();
        });
    });
    describe('video events listeners', function () {
        it('should call callback on playback status change', function () {
            var spy = sinon.spy(mainBlock, '_updatePlayingStatus');
            mainBlock._bindEvents();
            eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {});
            chai_1.expect(spy.called).to.be.true;
        });
    });
    describe('API', function () {
        it('should have method for showing whole view', function () {
            chai_1.expect(mainBlock.show).to.exist;
            mainBlock.show();
            chai_1.expect(mainBlock.isHidden).to.be.false;
        });
        it('should have method for hiding whole view', function () {
            chai_1.expect(mainBlock.hide).to.exist;
            mainBlock.hide();
            chai_1.expect(mainBlock.isHidden).to.be.true;
        });
    });
});
//# sourceMappingURL=main-ui-block.spec.js.map