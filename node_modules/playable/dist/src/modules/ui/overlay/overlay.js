"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("../../../constants");
var player_api_decorator_1 = tslib_1.__importDefault(require("../../../core/player-api-decorator"));
var overlay_view_1 = tslib_1.__importDefault(require("./overlay.view"));
var Overlay = /** @class */ (function () {
    function Overlay(_a) {
        var config = _a.config, eventEmitter = _a.eventEmitter, engine = _a.engine, rootContainer = _a.rootContainer, theme = _a.theme;
        this.isHidden = false;
        this._eventEmitter = eventEmitter;
        this._engine = engine;
        this._theme = theme;
        this._bindEvents();
        this._initUI(config.overlay);
        rootContainer.appendComponentNode(this.node);
        if (config.overlay === false) {
            this.hide();
        }
    }
    Object.defineProperty(Overlay.prototype, "node", {
        get: function () {
            return this.view.getNode();
        },
        enumerable: true,
        configurable: true
    });
    Overlay.prototype._initUI = function (overlayConfig) {
        var poster = typeof overlayConfig === 'object' ? overlayConfig.poster : null;
        var viewConfig = {
            callbacks: {
                onPlayClick: this._playVideo.bind(this),
            },
            src: poster,
            theme: this._theme,
        };
        this.view = new Overlay.View(viewConfig);
    };
    Overlay.prototype._bindEvents = function () {
        this._unbindEvents = this._eventEmitter.bindEvents([
            [constants_1.VIDEO_EVENTS.STATE_CHANGED, this._updatePlayingStatus],
            [constants_1.VIDEO_EVENTS.RESET, this._tryShowContent],
        ], this);
    };
    Overlay.prototype._updatePlayingStatus = function (_a) {
        var nextState = _a.nextState;
        if (nextState === constants_1.EngineState.PLAY_REQUESTED) {
            this._hideContent();
        }
        else if (nextState === constants_1.EngineState.ENDED ||
            nextState === constants_1.EngineState.SRC_SET) {
            this._tryShowContent();
        }
    };
    Overlay.prototype._playVideo = function () {
        this._engine.play();
        this._eventEmitter.emit(constants_1.UI_EVENTS.PLAY_OVERLAY_TRIGGERED);
    };
    Overlay.prototype._tryShowContent = function () {
        if (this._engine.isVideoPaused) {
            this._showContent();
        }
    };
    Overlay.prototype._hideContent = function () {
        this.view.hideContent();
    };
    Overlay.prototype._showContent = function () {
        this.view.showContent();
    };
    Overlay.prototype.hide = function () {
        this.isHidden = true;
        this.view.hide();
    };
    Overlay.prototype.show = function () {
        this.isHidden = false;
        this.view.show();
    };
    /**
     * Method for setting overlay poster
     * @param src - Source of image
     * @example
     * player.setPoster('https://example.com/poster.png');
     *
     */
    Overlay.prototype.setPoster = function (src) {
        this.view.setPoster(src);
    };
    Overlay.prototype.destroy = function () {
        this._unbindEvents();
        this.view.destroy();
        this.view = null;
        this._eventEmitter = null;
        this._engine = null;
    };
    Overlay.moduleName = 'overlay';
    Overlay.View = overlay_view_1.default;
    Overlay.dependencies = [
        'engine',
        'eventEmitter',
        'config',
        'rootContainer',
        'theme',
    ];
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Overlay.prototype, "setPoster", null);
    return Overlay;
}());
exports.default = Overlay;
//# sourceMappingURL=overlay.js.map