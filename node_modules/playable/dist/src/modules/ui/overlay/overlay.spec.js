"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("jsdom-global/register");
var chai_1 = require("chai");
//@ts-ignore
var sinon = tslib_1.__importStar(require("sinon"));
var testkit_1 = tslib_1.__importDefault(require("../../../testkit"));
var constants_1 = require("../../../constants");
describe('Overlay', function () {
    var testkit;
    var overlay = {};
    var eventEmitter = {};
    var eventEmitterSpy = null;
    beforeEach(function () {
        testkit = testkit_1.default();
    });
    describe('constructor', function () {
        beforeEach(function () {
            overlay = testkit.getModule('overlay');
        });
        it('should create instance ', function () {
            chai_1.expect(overlay).to.exist;
            chai_1.expect(overlay.view).to.exist;
        });
    });
    describe('instance callbacks to controls', function () {
        beforeEach(function () {
            overlay = testkit.getModule('overlay');
            eventEmitter = testkit.getModule('eventEmitter');
            eventEmitterSpy = sinon.spy(eventEmitter, 'emit');
        });
        afterEach(function () {
            eventEmitter.emit.restore();
        });
        it('should emit ui event on play', function () {
            var callback = sinon.spy(overlay._engine, 'play');
            overlay._playVideo();
            chai_1.expect(callback.called).to.be.true;
            chai_1.expect(eventEmitterSpy.calledWith(constants_1.UI_EVENTS.PLAY_OVERLAY_TRIGGERED)).to.be
                .true;
            overlay._engine.play.restore();
        });
    });
    describe('instance', function () {
        beforeEach(function () {
            overlay = testkit.getModule('overlay');
            eventEmitter = testkit.getModule('eventEmitter');
        });
        it('should react on video playback status changed on play', function () {
            var callback = sinon.spy(overlay, '_updatePlayingStatus');
            var hideSpy = sinon.spy(overlay, '_hideContent');
            overlay._bindEvents();
            eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                nextState: constants_1.EngineState.PLAY_REQUESTED,
            });
            chai_1.expect(callback.called).to.be.true;
            chai_1.expect(hideSpy.called).to.be.true;
        });
        it('should react on video playback status changed on end', function () {
            var callback = sinon.spy(overlay, '_updatePlayingStatus');
            var showSpy = sinon.spy(overlay, '_showContent');
            overlay._bindEvents();
            eventEmitter.emit(constants_1.VIDEO_EVENTS.STATE_CHANGED, {
                nextState: constants_1.EngineState.ENDED,
            });
            chai_1.expect(callback.called).to.be.true;
            chai_1.expect(showSpy.called).to.be.true;
        });
    });
});
//# sourceMappingURL=overlay.spec.js.map