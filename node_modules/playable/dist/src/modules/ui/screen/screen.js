"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("../../../constants");
var screen_view_1 = tslib_1.__importDefault(require("./screen.view"));
var player_api_decorator_1 = tslib_1.__importDefault(require("../../../core/player-api-decorator"));
var PLAYBACK_CHANGE_TIMEOUT = 300;
var DEFAULT_CONFIG = {
    disableClickProcessing: false,
    nativeControls: false,
};
var Screen = /** @class */ (function () {
    function Screen(_a) {
        var config = _a.config, eventEmitter = _a.eventEmitter, engine = _a.engine, fullScreenManager = _a.fullScreenManager, interactionIndicator = _a.interactionIndicator, rootContainer = _a.rootContainer;
        this._eventEmitter = eventEmitter;
        this._engine = engine;
        this._fullScreenManager = fullScreenManager;
        this._interactionIndicator = interactionIndicator;
        this._isInFullScreen = false;
        this.isHidden = false;
        this._delayedToggleVideoPlaybackTimeout = null;
        var screenConfig = tslib_1.__assign({}, DEFAULT_CONFIG, config.screen);
        this._isClickProcessingDisabled = screenConfig.disableClickProcessing;
        this._bindCallbacks();
        this._initUI(screenConfig.nativeControls);
        this._bindEvents();
        rootContainer.appendComponentNode(this.node);
    }
    Object.defineProperty(Screen.prototype, "node", {
        get: function () {
            return this.view.getNode();
        },
        enumerable: true,
        configurable: true
    });
    Screen.prototype._bindCallbacks = function () {
        this._processNodeClick = this._processNodeClick.bind(this);
        this._processNodeDblClick = this._processNodeDblClick.bind(this);
        this._toggleVideoPlayback = this._toggleVideoPlayback.bind(this);
    };
    Screen.prototype._initUI = function (isNativeControls) {
        var config = {
            nativeControls: isNativeControls,
            callbacks: {
                onWrapperMouseClick: this._processNodeClick,
                onWrapperMouseDblClick: this._processNodeDblClick,
            },
            playbackViewNode: this._engine.getNode(),
        };
        this.view = new screen_view_1.default(config);
    };
    Screen.prototype._bindEvents = function () {
        this._unbindEvents = this._eventEmitter.bindEvents([
            [constants_1.UI_EVENTS.FULLSCREEN_STATUS_CHANGED, this._setFullScreenStatus],
            [constants_1.UI_EVENTS.PLAY_OVERLAY_TRIGGERED, this.view.focusOnNode, this.view],
            [constants_1.UI_EVENTS.RESIZE, this._updateBackgroundSize],
            [constants_1.EngineState.SRC_SET, this.view.resetBackground, this.view],
            [constants_1.EngineState.METADATA_LOADED, this.view.resetAspectRatio, this.view],
        ], this);
    };
    Screen.prototype._updateBackgroundSize = function (_a) {
        var width = _a.width, height = _a.height;
        this.view.setBackgroundSize(width, height);
    };
    Screen.prototype.showCursor = function () {
        this.view.showCursor();
    };
    Screen.prototype.hideCursor = function () {
        this.view.hideCursor();
    };
    Screen.prototype._setFullScreenStatus = function (isInFullScreen) {
        this._isInFullScreen = isInFullScreen;
    };
    Screen.prototype._processNodeClick = function () {
        if (this._isClickProcessingDisabled) {
            return;
        }
        this._showPlaybackChangeIndicator();
        if (!this._fullScreenManager.isEnabled) {
            this._toggleVideoPlayback();
        }
        else {
            this._setDelayedPlaybackToggle();
        }
    };
    Screen.prototype._processNodeDblClick = function () {
        if (this._isClickProcessingDisabled) {
            return;
        }
        if (this._fullScreenManager.isEnabled) {
            if (this._isDelayedPlaybackToggleExist) {
                this._clearDelayedPlaybackToggle();
                this._hideDelayedPlaybackChangeIndicator();
            }
            this._toggleFullScreen();
        }
    };
    Screen.prototype._showPlaybackChangeIndicator = function () {
        var state = this._engine.getCurrentState();
        if (state === constants_1.EngineState.PLAY_REQUESTED || state === constants_1.EngineState.PLAYING) {
            this._interactionIndicator.showPause();
        }
        else {
            this._interactionIndicator.showPlay();
        }
    };
    Screen.prototype._hideDelayedPlaybackChangeIndicator = function () {
        this._interactionIndicator.hideIcons();
    };
    Screen.prototype._setDelayedPlaybackToggle = function () {
        this._clearDelayedPlaybackToggle();
        this._delayedToggleVideoPlaybackTimeout = window.setTimeout(this._toggleVideoPlayback, PLAYBACK_CHANGE_TIMEOUT);
    };
    Screen.prototype._clearDelayedPlaybackToggle = function () {
        window.clearTimeout(this._delayedToggleVideoPlaybackTimeout);
        this._delayedToggleVideoPlaybackTimeout = null;
    };
    Object.defineProperty(Screen.prototype, "_isDelayedPlaybackToggleExist", {
        get: function () {
            return Boolean(this._delayedToggleVideoPlaybackTimeout);
        },
        enumerable: true,
        configurable: true
    });
    Screen.prototype._toggleVideoPlayback = function () {
        this._clearDelayedPlaybackToggle();
        var state = this._engine.getCurrentState();
        if (state === constants_1.EngineState.PLAY_REQUESTED || state === constants_1.EngineState.PLAYING) {
            this._eventEmitter.emit(constants_1.UI_EVENTS.PAUSE_WITH_SCREEN_CLICK_TRIGGERED);
            this._engine.pause();
        }
        else {
            this._eventEmitter.emit(constants_1.UI_EVENTS.PLAY_WITH_SCREEN_CLICK_TRIGGERED);
            this._engine.play();
        }
    };
    Screen.prototype._toggleFullScreen = function () {
        if (this._isInFullScreen) {
            this._exitFullScreen();
        }
        else {
            this._enterFullScreen();
        }
    };
    Screen.prototype.hide = function () {
        if (!this.isHidden) {
            this.view.hide();
            this.isHidden = true;
        }
    };
    Screen.prototype.show = function () {
        if (this.isHidden) {
            this.view.show();
            this.isHidden = false;
        }
    };
    Screen.prototype.setVideoViewMode = function (viewMode) {
        this.view.setViewMode(viewMode);
    };
    Screen.prototype._enterFullScreen = function () {
        this._fullScreenManager.enterFullScreen();
    };
    Screen.prototype._exitFullScreen = function () {
        this._fullScreenManager.exitFullScreen();
    };
    Screen.prototype.destroy = function () {
        this._unbindEvents();
        this._clearDelayedPlaybackToggle();
        this.view.destroy();
        this.view = null;
        this._interactionIndicator = null;
        this._eventEmitter = null;
        this._engine = null;
        this._fullScreenManager = null;
    };
    Screen.moduleName = 'screen';
    Screen.View = screen_view_1.default;
    Screen.dependencies = [
        'engine',
        'eventEmitter',
        'config',
        'fullScreenManager',
        'interactionIndicator',
        'rootContainer',
    ];
    tslib_1.__decorate([
        player_api_decorator_1.default()
    ], Screen.prototype, "setVideoViewMode", null);
    return Screen;
}());
exports.default = Screen;
//# sourceMappingURL=screen.js.map