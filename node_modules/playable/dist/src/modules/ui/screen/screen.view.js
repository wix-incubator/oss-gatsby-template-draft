"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var view_1 = tslib_1.__importDefault(require("../core/view"));
var templates_1 = require("./templates");
var htmlToElement_1 = tslib_1.__importDefault(require("../core/htmlToElement"));
var getElementByHook_1 = tslib_1.__importDefault(require("../core/getElementByHook"));
var toggleNodeClass_1 = tslib_1.__importDefault(require("../core/toggleNodeClass"));
var types_1 = require("./types");
var screen_scss_1 = tslib_1.__importDefault(require("./screen.scss"));
var ScreenView = /** @class */ (function (_super) {
    tslib_1.__extends(ScreenView, _super);
    function ScreenView(config) {
        var _a;
        var _this = _super.call(this) || this;
        var callbacks = config.callbacks, nativeControls = config.nativeControls, playbackViewNode = config.playbackViewNode;
        _this._callbacks = callbacks;
        _this._styleNamesByViewMode = (_a = {},
            _a[types_1.VideoViewMode.REGULAR] = _this.styleNames.regularMode,
            _a[types_1.VideoViewMode.BLUR] = _this.styleNames.blurMode,
            _a[types_1.VideoViewMode.FILL] = _this.styleNames.fillMode,
            _a);
        _this._bindCallbacks();
        if (nativeControls) {
            playbackViewNode.setAttribute('controls', 'true');
        }
        _this._initDOM(playbackViewNode);
        _this._bindEvents();
        _this.setViewMode(types_1.VideoViewMode.REGULAR);
        return _this;
    }
    ScreenView.prototype._bindCallbacks = function () {
        this._updateBackground = this._updateBackground.bind(this);
    };
    ScreenView.prototype._initDOM = function (playbackViewNode) {
        this._$node = htmlToElement_1.default(templates_1.screenTemplate({
            styles: this.styleNames,
        }));
        this._$playbackNode = playbackViewNode;
        this._$node.appendChild(playbackViewNode);
        this._$canvas = getElementByHook_1.default(this._$node, 'background-canvas');
        this._ctx = this._$canvas.getContext('2d');
    };
    ScreenView.prototype._bindEvents = function () {
        this._$node.addEventListener('click', this._callbacks.onWrapperMouseClick);
        this._$node.addEventListener('dblclick', this._callbacks.onWrapperMouseDblClick);
    };
    ScreenView.prototype._unbindEvents = function () {
        this._$node.removeEventListener('click', this._callbacks.onWrapperMouseClick);
        this._$node.removeEventListener('dblclick', this._callbacks.onWrapperMouseDblClick);
    };
    ScreenView.prototype.updateVideoAspectRatio = function (widthHeightRatio) {
        this._widthHeightRatio = widthHeightRatio;
        var isHorizontal = this._widthHeightRatio > 1;
        toggleNodeClass_1.default(this._$node, this.styleNames.horizontalVideo, isHorizontal);
        toggleNodeClass_1.default(this._$node, this.styleNames.verticalVideo, !isHorizontal);
    };
    ScreenView.prototype.focusOnNode = function () {
        this._$node.focus();
    };
    ScreenView.prototype.show = function () {
        toggleNodeClass_1.default(this._$node, this.styleNames.hidden, false);
    };
    ScreenView.prototype.hide = function () {
        toggleNodeClass_1.default(this._$node, this.styleNames.hidden, true);
    };
    ScreenView.prototype.getNode = function () {
        return this._$node;
    };
    ScreenView.prototype.appendComponentNode = function (node) {
        this._$node.appendChild(node);
    };
    ScreenView.prototype.hideCursor = function () {
        toggleNodeClass_1.default(this._$node, this.styleNames.hiddenCursor, true);
    };
    ScreenView.prototype.showCursor = function () {
        toggleNodeClass_1.default(this._$node, this.styleNames.hiddenCursor, false);
    };
    ScreenView.prototype.setViewMode = function (viewMode) {
        var _this = this;
        if (this._styleNamesByViewMode[viewMode]) {
            this.resetBackground();
            Object.keys(this._styleNamesByViewMode).forEach(function (mode) {
                toggleNodeClass_1.default(_this._$node, _this._styleNamesByViewMode[mode], false);
            });
            toggleNodeClass_1.default(this._$node, this._styleNamesByViewMode[viewMode], true);
            if (viewMode === types_1.VideoViewMode.BLUR) {
                this._startUpdatingBackground();
            }
            else {
                this._stopUpdatingBackground();
            }
            this._currentMode = viewMode;
        }
    };
    ScreenView.prototype.setBackgroundSize = function (width, height) {
        this.setBackgroundWidth(width);
        this.setBackgroundHeight(height);
    };
    ScreenView.prototype.setBackgroundWidth = function (width) {
        this._$canvas.width = width;
    };
    ScreenView.prototype.setBackgroundHeight = function (height) {
        this._$canvas.height = height;
    };
    ScreenView.prototype._startUpdatingBackground = function () {
        if (!this._requestAnimationFrameID) {
            this._updateBackground();
        }
    };
    ScreenView.prototype._stopUpdatingBackground = function () {
        if (this._requestAnimationFrameID) {
            cancelAnimationFrame(this._requestAnimationFrameID);
            this._requestAnimationFrameID = null;
        }
    };
    ScreenView.prototype.resetAspectRatio = function () {
        var _a = this._$playbackNode, videoWidth = _a.videoWidth, videoHeight = _a.videoHeight;
        this._widthHeightRatio = videoHeight ? videoWidth / videoHeight : 0;
        var isHorizontal = this._widthHeightRatio > 1;
        toggleNodeClass_1.default(this._$node, this.styleNames.horizontalVideo, isHorizontal);
        toggleNodeClass_1.default(this._$node, this.styleNames.verticalVideo, !isHorizontal);
    };
    ScreenView.prototype.resetBackground = function () {
        if (this._currentMode === types_1.VideoViewMode.BLUR) {
            this._clearBackground();
        }
    };
    ScreenView.prototype._getSourceAreas = function (width, height) {
        if (this._widthHeightRatio > 1) {
            return [[0, 0, width, 1], [0, height - 1, width, 1]];
        }
        return [[0, 0, 1, height], [width - 1, 0, 1, height]];
    };
    ScreenView.prototype._getCanvasAreas = function (width, height) {
        if (this._widthHeightRatio > 1) {
            return [[0, 0, width, height / 2], [0, height / 2, width, height / 2]];
        }
        return [[0, 0, width / 2, height], [width / 2, 0, width / 2, height]];
    };
    ScreenView.prototype._drawAreaFromSource = function (source, area) {
        var sourceX = source[0], sourceY = source[1], sourceWidth = source[2], sourceHeight = source[3];
        var areaX = area[0], areaY = area[1], areaWidth = area[2], areaHeight = area[3];
        this._ctx.drawImage(this._$playbackNode, sourceX, sourceY, sourceWidth, sourceHeight, areaX, areaY, areaWidth, areaHeight);
    };
    ScreenView.prototype._drawBackground = function () {
        var _a = this._$playbackNode, videoWidth = _a.videoWidth, videoHeight = _a.videoHeight;
        var canvasWidth = this._$canvas.width;
        var canvasHeight = this._$canvas.height;
        var sourceAreas = this._getSourceAreas(videoWidth, videoHeight);
        var canvasAreas = this._getCanvasAreas(canvasWidth, canvasHeight);
        this._drawAreaFromSource(sourceAreas[0], canvasAreas[0]);
        this._drawAreaFromSource(sourceAreas[1], canvasAreas[1]);
    };
    ScreenView.prototype._updateBackground = function () {
        this._drawBackground();
        this._requestAnimationFrameID = requestAnimationFrame(this._updateBackground);
    };
    ScreenView.prototype._clearBackground = function () {
        this._ctx.clearRect(0, 0, this._$canvas.width, this._$canvas.height);
    };
    ScreenView.prototype.destroy = function () {
        this._stopUpdatingBackground();
        this._unbindEvents();
        if (this._$node.parentNode) {
            this._$node.parentNode.removeChild(this._$node);
        }
        this._$node = null;
        this._$playbackNode = null;
        this._$canvas = null;
        this._ctx = null;
        this._callbacks = null;
    };
    return ScreenView;
}(view_1.default));
ScreenView.extendStyleNames(screen_scss_1.default);
exports.default = ScreenView;
//# sourceMappingURL=screen.view.js.map