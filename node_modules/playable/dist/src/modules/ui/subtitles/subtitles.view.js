"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var view_1 = tslib_1.__importDefault(require("../core/view"));
var templates_1 = require("./templates");
var htmlToElement_1 = tslib_1.__importDefault(require("../core/htmlToElement"));
var getElementByHook_1 = tslib_1.__importDefault(require("../core/getElementByHook"));
var subtitles_scss_1 = tslib_1.__importDefault(require("./subtitles.scss"));
var SubtitlesView = /** @class */ (function (_super) {
    tslib_1.__extends(SubtitlesView, _super);
    function SubtitlesView() {
        var _this = _super.call(this) || this;
        _this._initDOM();
        return _this;
    }
    SubtitlesView.prototype._initDOM = function () {
        this._$node = htmlToElement_1.default(templates_1.subtitlesTemplate({
            styles: this.styleNames,
        }));
        this._$subtitles = getElementByHook_1.default(this._$node, 'subtitles-container');
    };
    SubtitlesView.prototype.getNode = function () {
        return this._$node;
    };
    SubtitlesView.prototype.destroy = function () {
        if (this._$node.parentNode) {
            this._$node.parentNode.removeChild(this._$node);
        }
        this._$node = null;
    };
    SubtitlesView.prototype.moveSubtitlesUp = function () {
        this._$subtitles.classList.add(this.styleNames.controlsShown);
    };
    SubtitlesView.prototype.moveSubtitlesDown = function () {
        this._$subtitles.classList.remove(this.styleNames.controlsShown);
    };
    SubtitlesView.prototype.showSubtitles = function (subtitles) {
        var _this = this;
        this.clearSubtitles();
        subtitles.forEach(function (subtitle) {
            var subtitleNode = htmlToElement_1.default(templates_1.singleSubtitleTemplate({
                styles: _this.styleNames,
            }));
            subtitleNode.innerHTML = subtitle;
            _this._$subtitles.appendChild(subtitleNode);
        });
    };
    SubtitlesView.prototype.show = function () {
        this._$node.classList.remove(this.styleNames.hidden);
    };
    SubtitlesView.prototype.hide = function () {
        this._$node.classList.add(this.styleNames.hidden);
    };
    SubtitlesView.prototype.clearSubtitles = function () {
        this._$subtitles.innerHTML = '';
    };
    return SubtitlesView;
}(view_1.default));
SubtitlesView.extendStyleNames(subtitles_scss_1.default);
exports.default = SubtitlesView;
//# sourceMappingURL=subtitles.view.js.map