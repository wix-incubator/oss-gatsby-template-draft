"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("jsdom-global/register");
var chai_1 = require("chai");
//@ts-ignore
var sinon = tslib_1.__importStar(require("sinon"));
var testkit_1 = tslib_1.__importDefault(require("../../../testkit"));
describe('Title', function () {
    var testkit;
    // let eventEmitter;
    var title;
    beforeEach(function () {
        testkit = testkit_1.default();
        title = testkit.getModule('title');
        // eventEmitter = testkit.getModule('eventEmitter');
    });
    describe('constructor', function () {
        it('should create instance ', function () {
            chai_1.expect(title).to.exist;
            chai_1.expect(title.view).to.exist;
        });
    });
    describe('instance', function () {
        /*
        it('should react on video control block show event', () => {
          const fadeInSpy = sinon.spy(title, '_fadeIn');
          title._bindEvents();
    
          eventEmitter.emit(UI_EVENTS.CONTROL_BLOCK_SHOW_TRIGGERED);
    
          expect(fadeInSpy.called).to.be.true;
    
          fadeInSpy.restore();
        });
    
        it('should react on video control block hide event', () => {
          const fadeOutSpy = sinon.spy(title, '_fadeOut');
          title._bindEvents();
    
          eventEmitter.emit(UI_EVENTS.CONTROL_BLOCK_HIDE_TRIGGERED);
    
          expect(fadeOutSpy.called).to.be.true;
    
          fadeOutSpy.restore();
        });
        */
        it('should have method for showing title', function () {
            var viewShowSpy = sinon.spy(title.view, 'show');
            title.show();
            chai_1.expect(viewShowSpy.called).to.be.true;
            chai_1.expect(title.isHidden).to.be.false;
            viewShowSpy.restore();
        });
        it('should have method for hiding title', function () {
            var viewHideSpy = sinon.spy(title.view, 'hide');
            title.hide();
            chai_1.expect(viewHideSpy.called).to.be.true;
            chai_1.expect(title.isHidden).to.be.true;
            viewHideSpy.restore();
        });
        it('should have method for getting view node', function () {
            var getTitleViewNodeSpy = sinon.spy(title.view, 'getNode');
            var titleViewNode = title.node;
            chai_1.expect(getTitleViewNodeSpy.called).to.be.true;
            chai_1.expect(titleViewNode).to.equal(title.view.getNode());
            getTitleViewNodeSpy.restore();
        });
    });
    describe('API', function () {
        describe('setTitle method', function () {
            var titleViewSetTitleSpy;
            var titleViewShowSpy;
            var titleViewHideSpy;
            beforeEach(function () {
                titleViewSetTitleSpy = sinon.spy(title.view, 'setTitle');
                titleViewShowSpy = sinon.spy(title.view, 'show');
                titleViewHideSpy = sinon.spy(title.view, 'hide');
            });
            afterEach(function () {
                titleViewSetTitleSpy.restore();
                titleViewShowSpy.restore();
                titleViewHideSpy.restore();
            });
            it('should exists', function () {
                chai_1.expect(title.setTitle).to.exist;
            });
            it('should set NOT EMPTY title', function () {
                var TITLE_TEXT = 'TITLE';
                title.setTitle(TITLE_TEXT);
                chai_1.expect(titleViewSetTitleSpy.calledWith(TITLE_TEXT)).to.be.true;
                chai_1.expect(title.view._$title.innerHTML).to.equal(TITLE_TEXT);
                chai_1.expect(titleViewShowSpy.called).to.be.true;
            });
            it('should set EMPTY title', function () {
                title.setTitle('');
                chai_1.expect(titleViewSetTitleSpy.calledWith('')).to.be.true;
                // TODO: should html be cleared if setTitle called with empty value?
                chai_1.expect(titleViewHideSpy.called).to.be.true;
            });
        });
        describe('setTitleClickCallback method', function () {
            var setViewDisplayAsLinkSpy;
            beforeEach(function () {
                setViewDisplayAsLinkSpy = sinon.spy(title.view, 'setDisplayAsLink');
            });
            afterEach(function () {
                setViewDisplayAsLinkSpy.restore();
            });
            it('should exists', function () {
                chai_1.expect(title.setTitleClickCallback).to.exist;
            });
            it('should set NOT EMPTY callback', function () {
                var clickCallback = sinon.spy();
                title.setTitleClickCallback(clickCallback);
                title.view._$title.dispatchEvent(new Event('click'));
                chai_1.expect(setViewDisplayAsLinkSpy.calledWith(true)).to.be.true;
                chai_1.expect(clickCallback.called).to.be.true;
            });
            it('should set EMPTY callback', function () {
                var clickCallback = sinon.spy();
                title.setTitleClickCallback(clickCallback);
                title.view._$title.dispatchEvent(new Event('click'));
                title.setTitleClickCallback();
                title.view._$title.dispatchEvent(new Event('click'));
                chai_1.expect(setViewDisplayAsLinkSpy.lastCall.calledWith(false)).to.be.true;
                chai_1.expect(clickCallback.calledOnce).to.be.true;
            });
        });
    });
});
//# sourceMappingURL=title.spec.js.map