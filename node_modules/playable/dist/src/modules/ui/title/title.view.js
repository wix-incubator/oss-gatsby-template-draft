"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var view_1 = tslib_1.__importDefault(require("../core/view"));
var templates_1 = require("./templates");
var htmlToElement_1 = tslib_1.__importDefault(require("../core/htmlToElement"));
var getElementByHook_1 = tslib_1.__importDefault(require("../core/getElementByHook"));
var toggleNodeClass_1 = tslib_1.__importDefault(require("../core/toggleNodeClass"));
var title_theme_1 = tslib_1.__importDefault(require("./title.theme"));
var title_scss_1 = tslib_1.__importDefault(require("./title.scss"));
var TitleView = /** @class */ (function (_super) {
    tslib_1.__extends(TitleView, _super);
    function TitleView(config) {
        var _this = this;
        var callbacks = config.callbacks, theme = config.theme;
        _this = _super.call(this, theme) || this;
        _this._callbacks = callbacks;
        _this._initDOM();
        _this._bindEvents();
        return _this;
    }
    TitleView.prototype._initDOM = function () {
        this._$node = htmlToElement_1.default(templates_1.titleTemplate({ styles: this.styleNames, themeStyles: this.themeStyles }));
        this._$title = getElementByHook_1.default(this._$node, 'video-title');
    };
    TitleView.prototype._bindEvents = function () {
        this._$title.addEventListener('click', this._callbacks.onClick);
    };
    TitleView.prototype._unbindEvents = function () {
        this._$title.removeEventListener('click', this._callbacks.onClick);
    };
    TitleView.prototype.setDisplayAsLink = function (flag) {
        toggleNodeClass_1.default(this._$title, this.styleNames.link, flag);
    };
    TitleView.prototype.setTitle = function (title) {
        // TODO: mb move this logic to controller? title.isHidden is out of control of this method
        // TODO: what if we call with empty value `.setTitle('')` and then call `.show()` method? Mb clear value anyway?
        if (title) {
            this.show();
            this._$title.innerHTML = title;
        }
        else {
            this.hide();
        }
    };
    TitleView.prototype.show = function () {
        this._$node.classList.remove(this.styleNames.hidden);
    };
    TitleView.prototype.hide = function () {
        this._$node.classList.add(this.styleNames.hidden);
    };
    TitleView.prototype.getNode = function () {
        return this._$node;
    };
    TitleView.prototype.destroy = function () {
        this._unbindEvents();
        if (this._$node.parentNode) {
            this._$node.parentNode.removeChild(this._$node);
        }
        this._$node = null;
        this._$title = null;
    };
    return TitleView;
}(view_1.default));
TitleView.setTheme(title_theme_1.default);
TitleView.extendStyleNames(title_scss_1.default);
exports.default = TitleView;
//# sourceMappingURL=title.view.js.map