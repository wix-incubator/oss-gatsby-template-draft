'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _raw = require('../serializers/raw');

var _raw2 = _interopRequireDefault(_raw);

var _state = require('../models/state');

var _state2 = _interopRequireDefault(_state);

var _transform = require('./transform');

var _transform2 = _interopRequireDefault(_transform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Debug.
 *
 * @type {Debug}
 */

var debug = (0, _debug2.default)('slate:ot');

/**
 * Create a new snapshot from a `raw` representation.
 *
 * @param {Object} raw
 * @return {Object}
 */

function create(raw) {
  debug('create', { raw: raw });

  if (!raw) {
    raw = {
      kind: 'state',
      document: {
        kind: 'document',
        nodes: [],
        data: {}
      }
    };
  }

  return raw;
}

/**
 * Serialize a `state` snapshot.
 *
 * @param {State} state
 * @return {Object}
 */

function serialize(state) {
  debug('serialize', { state: state });
  if (state instanceof _state2.default) {
    return _raw2.default.serialize(state);
  } else {
    return state;
  }
}

/**
 * Deserialize an array of `operations` to a state.
 *
 * @param {Object} raw
 * @return {State}
 */

function deserialize(raw) {
  debug('deserialize', { raw: raw });
  if (raw instanceof _state2.default) {
    return raw;
  } else {
    return _raw2.default.deserialize(raw, { normalize: false });
  }
}

/**
 * Apply `operations` to a `snapshot`.
 *
 * @param {State|Object} snapshot
 * @param {Array} operations
 * @return {State|Object}
 */

function apply(snapshot, operations) {
  debug('apply', { snapshot: snapshot, operations: operations });
  var isRaw = !(snapshot instanceof _state2.default);
  var before = isRaw ? _raw2.default.deserialize(snapshot, { normalize: false }) : snapshot;
  var tr = before.transform().applyOperations(operations);
  var next = tr.apply();
  var after = isRaw ? _raw2.default.serialize(next) : next;
  return after;
}

/**
 * OT-type, compatible with: https://github.com/ottypes
 *
 * @type {Object}
 */

var type = {
  name: 'slate',
  uri: 'http://slatejs.org/types/slate/v1',
  apply: apply,
  create: create,
  deserialize: deserialize,
  serialize: serialize,
  transform: _transform2.default
};

/**
 * Export.
 *
 * @type {Object}
 */

exports.default = {
  type: type
};