'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Transform operations `a` by operations `b` with `priority`.
 *
 * @param {Array} a
 * @param {Array} b
 * @param {String} priority
 */

function transform(a, b, priority) {
  // Deeply clone A so that the transformers can edit in place without worry.
  a = (0, _cloneDeep2.default)(a);

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = b[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var bo = _step.value;

      // Create a temporary array to store the new A operations, because sometimes
      // the transformers need to return `null` to remove an operation, or return
      // an array to add operations.
      var tmp = [];

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = a[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var ao = _step2.value;

          var ret = t(ao, bo, priority);

          if (ret === null) {
            continue;
          } else if (Array.isArray(ret)) {
            tmp = tmp.concat(ret);
          } else {
            tmp.push(ao);
          }
        }

        // Update A for the next iteration.
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      a = tmp;
    }

    // Return the transformed A operations.
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return a;
}

/**
 * Find the place where path `a` is intersected by path `b`, if it does.
 *
 * @param {Array} a
 * @param {Array} b
 * @return {String|Null}
 */

function intersectPath(a, b) {
  if (a == null || b == null) return null;

  for (var i = 0; i < b.length; i++) {
    var bv = b[i];
    var av = a[i];
    var al = i + 1 === a.length;
    var bl = i + 1 === b.length;
    // If ever `bv > av`, `b` doesn't intersect `a`.
    if (bv > av) return 'none';
    // If we're not at the end of `b`, and `bv < av`, `b` doesn't intersect `a`.
    if (!bl && bv < av) return 'none';
    // If at the end of both, and `bv == av`, `b` is exactly equal to `a`.
    if (al && bl && bv == av) return 'exact';
    // If only at the end of `b`, and `bv == av`, `b` is above `a`.
    if (bl && bv == av) return 'above';
    // If at the end of `b`, and `bv < av`, `b` is before `a`.
    if (bl && bv < av) return 'before';
  }

  return 'none';
}

/**
 * Find the place where `a`'s offset `a` is intersected by operation B's
 * offset `b`, if it does at all.
 *
 * @param {Number} a
 * @param {Number} b
 * @return {String}
 */

function intersectOffset(a, b) {
  if (a == null || b == null) return null;
  if (b < a) return 'before';
  if (b == a) return 'exact';
  return 'after';
}

/**
 * Transform operation `a` in place based on operation `b` and priority `p`.
 *
 * @param {Object} a
 * @param {Object} b
 * @param {String} p
 */

function t(a, b, p) {
  var i = b.path.length - 1;
  var ni = b.newPath ? b.newPath.length - 1 : null;

  var ap_bp = intersectPath(a.path, b.path);
  var ap_bnp = intersectPath(a.path, b.newPath);
  var anp_bp = intersectPath(a.newPath, b.path);
  var anp_bnp = intersectPath(a.newPath, b.newPath);
  var awp_bp = intersectPath(a.withPath, b.path);
  var ap_bwp = intersectPath(a.path, b.withPath);

  var ao_bo = intersectOffset(a.offset, b.offset);
  var ao_bol = intersectOffset(a.offset, b.offset + b.length);
  var aol_bo = intersectOffset(a.offset + a.length, b.offset);
  var aol_bol = intersectOffset(a.offset + a.length, b.offset + b.length);

  /**
   * Insert node.
   */

  if (b.type == 'insert_node') {
    // If A is a `join_node` operation, and B's path intersects A's exactly, a
    // node was inserted between where the join was supposed to happen, so we
    // add an extra `move_node` operation to keep the join from failing.
    if (a.type == 'join_node' && ap_bp == 'exact') {
      var newPath = a.path.slice();
      var path = newPath.slice(0, -1).concat([newPath[i] + 1]);
      var move = { type: 'move_node', path: path, newPath: newPath };
      return [move, a];
    }

    // If B's path intersects before, above, or exactly at A's path, increment
    // A's path to account for the inserted node. If operation A is an
    // `insert_node` operation, check for priority to maintain ordering.
    if (ap_bp == 'before' || ap_bp == 'above' || ap_bp == 'exact' && a.type != 'insert_node' || ap_bp == 'exact' && a.type == 'insert_node' && p == 'right') {
      a.path[i]++;
      if (a.withPath) a.withPath[i]++;
    }

    // If B's path intersects before or above A's new path, or exactly at it
    // with priority, increment A's new path to account for the inserted node.
    if (anp_bp == 'before' || anp_bp == 'above' || anp_bp == 'exact' && p == 'right') {
      a.newPath[i]++;
    }
  }

  /**
   * Remove node.
   */

  if (b.type == 'remove_node') {
    // If A is a `join_node` operation, and B's path intersects exactly with one
    // of A's paths, one of the join targets was already removed, so remove the
    // other one as well.
    if (a.type == 'join_node' && (ap_bp == 'exact' || awp_bp == 'exact')) {
      var _path = ap_bp == 'exact' ? a.withPath.slice() : a.path.slice();
      var remove = { type: 'remove_node', path: _path };
      return [remove];
    }

    // If B's path intersects exactly at A's path, and operation A is not an
    // `insert_node` operation, ignore operation A because the node it is
    // targeting has already been removed.
    if (a.type != 'insert_node' && ap_bp == 'exact') {
      return null;
    }

    // If B's path intersects above of A's, ignore operation A because the
    // target has already been removed.
    if (ap_bp == 'above') {
      return null;
    }

    // If B's path intersects before A's, decrement A's to account for the
    // earlier node's removal.
    if (ap_bp == 'before') {
      a.path[i]--;
      if (a.withPath) a.withPath[i]--;
    }

    // If B's path intersects before A's `newPath`, decrement A's `newPath` to
    // account for the earlier node's removal.
    if (anp_bp == 'before') {
      a.newPath[i]--;
    }
  }

  /**
   * Join node.
   */

  if (b.type == 'join_node') {
    // If A is a `join_node` operation, and B's path intersects A's path
    // exactly, then ignore operation A.
    if (a.type == 'join_node' && ap_bp == 'exact') {
      return null;
    }

    // If A is an `insert_node` operation, and B's path intersects exactly with
    // A's, do nothing, because the insert path won't be affected.
    if (a.type == 'insert_node' && ap_bp == 'exact') {
      return;
    }

    // If A is a `remove_node` operation, and B's `withPath` intersects with
    // A's, then the removal target was already joined with another node, and we
    // need to remove the combined result node instead.
    if (ap_bp == 'exact') {
      a.path = b.withPath.slice();
    }

    // If B's path is before A's, decrement A's to account for the join.
    if (ap_bp == 'before' || ap_bp == 'above') {
      a.path[i]--;
      if (a.withPath) a.withPath[i]--;
    }

    // If B's path is before A's `newPath`, decrement A's `newPath` to account
    // for the join.
    if (anp_bp == 'before' || anp_bp == 'above') {
      a.newPath[i]--;
    }
  }

  /**
   * Insert text.
   */

  if (b.type == 'insert_text') {
    // If operation B's path doesn't exactly intersect with A's, then the text
    // insertion won't have any effect on it.
    if (ap_bp != 'exact') {
      return;
    }

    // If B's offset intersects befores A's, or at the same index as A's but
    // with priority, increment A's offset to account for the inserted text.
    if (ao_bo == 'before' || ao_bo == 'exact' && p == 'right') {
      a.offset += b.text.length;
    }
  }

  /**
   * Remove text.
   */

  if (b.type == 'remove_text') {
    // If operation B's path doesn't exactly intersect with A's, then the text
    // removal won't have any effect on it.
    if (ap_bp != 'exact') {
      return;
    }

    // If A is a `remove_text` operation, and B's `offset` intersects before A's
    // `offset`, decrement A's `offset` by the number of characters removed
    // before it, and A's `length` by the characters removed that overlap it.
    if (a.type == 'remove_text' && ao_bo == 'before') {
      var decrement = Math.min(b.length, a.offset - b.offset);
      var _remove = Math.min(a.length, b.length - decrement);
      a.offset -= decrement;
      a.length -= _remove;
    }

    // If A is a `remove_text` operation, and B intersects is exactly, decrement
    // A's `length` by B's `length` since that text is already removed.
    if (a.type == 'remove_text' && ao_bo == 'exact') {
      var _remove2 = Math.min(a.length, b.length);
      a.length -= _remove2;
    }

    // If A is a `remove_text` operation, and B's `offset` intersects after A's
    // `offset`, decrement A's `length` by any overlapping characters that have
    // already been removed.
    if (a.type == 'remove_text' && ao_bo == 'after') {
      var diff = b.offset - a.offset;
      var overlap = Math.max(0, Math.min(b.length, a.length - diff));
      var _remove3 = Math.min(a.length, overlap);
      a.length -= _remove3;
    }

    // If A is a `remove_text` operation, and after adjusting A's `offset` and
    // `length`, its `length` is zero, ignore A since it does nothing.
    if (a.type == 'remove_text') {
      if (a.length == 0) return null;
      return;
    }

    // If A is anything other than an `insert_text` operation, and if B's offset
    // intersects befores A's, or at the same index as A's but with priority,
    // decrement A's offset to account for the removed text.
    if (ao_bo == 'before' || ao_bo == 'exact' && a.type != 'insert_text') {
      var _remove4 = Math.min(a.offset, b.length);
      a.offset -= _remove4;
    }
  }

  /**
   * Add mark.
   */

  if (b.type == 'add_mark') {
    // If B's path doesn't intersect A's exactly, or either operation has no
    // `offset`, or B doesn't have priority, or the operations's `mark` don't
    // match, then B can't affect A, so abort.
    if (ap_bp != 'exact' || ao_bo == null || p != 'right' || !(0, _isEqual2.default)(a.mark, b.mark)) {
      return;
    }

    // If A is an `remove_mark` operation, and B's start intersects before A's,
    // shift A to omit the range removed by B.
    if (a.type == 'remove_mark' && ao_bo == 'before') {
      var skip = Math.min(b.length, a.offset - b.offset);
      var omit = Math.min(a.length, b.length - skip);
      a.offset += skip;
      a.length -= omit;
    }

    // If A is an `remove_mark` operation, and B's start intersects exactly at
    // A's, shift A to omit the range removed by B.
    if (a.type == 'remove_mark' && ao_bo == 'exact') {
      var _omit = Math.min(a.length, b.length);
      a.offset += _omit;
      a.length -= _omit;
    }

    // If A is an `remove_mark` operation, and B's start intersects after A's,
    // and B's end intersects before A's, we need to split A into two operations
    // since B removes the mark in the middle.
    if (a.type == 'remove_mark' && ao_bo == 'after' && aol_bol == 'before') {
      var before = b.offset - a.offset;
      var after = a.length - before - b.length;
      var middle = a.length - before - after;
      var first = _extends({}, a, { length: before });
      var second = _extends({}, a, { offset: a.offset + before + middle, length: after });
      return [first, second];
    }

    // If A is an `remove_mark` operation, and B's start intersects after A's,
    // remove the overlaping region from A.
    if (a.type == 'remove_mark' && ao_bo == 'after') {
      var _diff = b.offset - a.offset;
      var _overlap = Math.max(0, Math.min(b.length, a.length - _diff));
      var _remove5 = Math.min(a.length, _overlap);
      a.length -= _remove5;
    }

    // If A is an `remove_mark` operation, and its `length` is now zero, remove
    // it because it will have no effect.
    if (a.type == 'remove_mark' && a.length == 0) {
      return null;
    }
  }

  /**
   * Remove mark.
   */

  if (b.type == 'remove_mark') {
    // If B's path doesn't intersect A's exactly, or either operation has no
    // `offset`, or B doesn't have priority, or the operations's `mark` don't
    // match, then B can't affect A, so abort.
    if (ap_bp != 'exact' || ao_bo == null || p != 'right' || !(0, _isEqual2.default)(a.mark, b.mark)) {
      return;
    }

    // If A is an `add_mark` operation, and B's start intersects before A's,
    // shift A to omit the range removed by B.
    if (a.type == 'add_mark' && ao_bo == 'before') {
      var _skip = Math.min(b.length, a.offset - b.offset);
      var _omit2 = Math.min(a.length, b.length - _skip);
      a.offset += _skip;
      a.length -= _omit2;
    }

    // If A is an `add_mark` operation, and B's start intersects exactly at A's,
    // shift A to omit the range removed by B.
    if (a.type == 'add_mark' && ao_bo == 'exact') {
      var _omit3 = Math.min(a.length, b.length);
      a.offset += _omit3;
      a.length -= _omit3;
    }

    // If A is an `add_mark` operation, and B's start intersects after A's,
    // and B's end intersects before A's, we need to split A into two operations
    // since B removes the mark in the middle.
    if (a.type == 'add_mark' && ao_bo == 'after' && aol_bol == 'before') {
      var _before = b.offset - a.offset;
      var _after = a.length - _before - b.length;
      var _middle = a.length - _before - _after;
      var _first = _extends({}, a, { length: _before });
      var _second = _extends({}, a, { offset: a.offset + _before + _middle, length: _after });
      return [_first, _second];
    }

    // If A is an `add_mark` operation, and B's start intersects after A's,
    // remove the overlaping region from A.
    if (a.type == 'add_mark' && ao_bo == 'after') {
      var _diff2 = b.offset - a.offset;
      var _overlap2 = Math.max(0, Math.min(b.length, a.length - _diff2));
      var _remove6 = Math.min(a.length, _overlap2);
      a.length -= _remove6;
    }

    // If A is an `add_mark` operation, and its `length` is now zero, remove it
    // because it will have no effect.
    if (a.type == 'add_mark' && a.length == 0) {
      return null;
    }
  }

  // /**
  //  * Move node.
  //  */

  // if (b.type == 'move_node') {
  //   // If A is a `join_node` operation, and B's path intersected either one of
  //   // A's paths, then ignore A since the nodes are no longer adjacent.
  //   if (
  //     (a.type == 'join_node') &&
  //     (ap_bp == 'same' || awp_bp == 'same') &&
  //     (p == 'right')
  //   ) {
  //     return null
  //   }

  //   // If B's old path intersects at A's, and B has priority, then update A's
  //   // path to refer to B's new path where the node has moved to.
  //   if (ap_bp == 'same' && p == 'right') {
  //     a.path = b.newPath.concat(a.path.slice(b.newPath.length))
  //   }

  //   // If A has a `newPath`, and `b.path` intersects at `a.path`, and `b` has
  //   // priority, and `b.newPath` doesn't intersect, decrement.
  //   if (anp_bp == 'same' && p == 'right' && anp_bnp == 'none') {
  //     a.newPath[i]--
  //   }

  //   // If B's old path intersected A's, but it's new one doesn't, then decrement
  //   // A's to account for the move.
  //   if (
  //     (ap_bp == 'before') &&
  //     ((ap_bnp == 'none') || (ap_bnp == 'same' && p == 'right'))
  //   ) {
  //     a.path[i]--
  //     if (a.withPath) a.withPath[i]--
  //   }

  //   // If B's old path intersects A's new path, and it's previous one doesn't,
  //   // then decrement A's to account for the move.
  //   if (
  //     (anp_bp == 'before') &&
  //     ((anp_bnp == 'none') || (anp_bnp == 'same' && p == 'right'))
  //   ) {
  //     a.newPath[i]--
  //   }

  //   // If B's new path intersects A's, and it's previous one doesn't, then
  //   // increment A's to account for the move.
  //   if (
  //     (ap_bp == 'none') &&
  //     ((ap_bnp == 'before') || (ap_bnp == 'same' && p == 'right'))
  //   ) {
  //     a.path[ni]++
  //     if (a.withPath) a.withPath[ni]++
  //   }

  //   // If A's new path wasn't intersected by B's old path, but is by B's new
  //   // path, then increment it to account for the move.
  //   if (
  //     (anp_bp == 'none') &&
  //     ((anp_bnp == 'before') || (anp_bnp == 'same' && p == 'right'))
  //   ) {
  //     a.newPath[ni]++
  //   }
  // }

  // /**
  //  * Split node.
  //  */

  // if (b.type == 'split_node') {
  //   // If `b.path` intersects before `a.path`, increment.
  //   if (ap_bp == 'before') {
  //     a.path[i]++
  //     if (a.withPath) a.withPath[i]++
  //   }

  //   // If `b.path` intersects at `a.path`, and `b` has priority, and `a` is a
  //   // `remove_node` operation, then ignore `a`.
  //   if (a.type == 'remove_node' && ap_bp == 'same' && p == 'right') {
  //     return null
  //   }

  //   // If `b.path` intersects at `a.path`, and `b` has priority, and `a` is a
  //   // `split_node` operation, then increment `a.path` and decrement `a.offset`.
  //   if (a.type == 'split_node' && ap_bp == 'same' && p == 'right') {
  //     a.path[i]++
  //     a.offset -= b.offset
  //   }

  //   // If `b.path` intersects at `a.path`, and `b` has priority, increment
  //   // `a.path`.
  //   if (ap_bp == 'same' && p == 'right') {
  //     a.path[i]++
  //     if (a.withPath) a.withPath[i]++
  //   }

  //   // If `b.path` intersects at `a.path`, and `b` has priority, and A is a
  //   // `remove_node` operation, then ignore A.
  //   if (a.type == 'remove_node' && awp_bp == 'same' && p == 'right') {
  //     return null
  //   }

  //   // If A has a `newPath`, and `b.path` intersects before `a.path`, increment A's
  //   // path.
  //   if (anp_bp == 'before') {
  //     a.newPath[i]++
  //   }

  //   // If `b.path` intersects at `a.newPath`, and `b` has priority, increment
  //   // `a.newPath`.
  //   if (anp_bp == 'same' && p == 'right') {
  //     a.newPath[i]++
  //   }
  // }
}

/**
 * Export.
 *
 * @type {Function}
 */

exports.default = transform;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,