'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Animator = require('../Animator.scss');

var _Animator2 = _interopRequireDefault(_Animator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var flattenArray = function flattenArray(arr) {
  return [].concat.apply([], arr);
};

var convertToArray = function convertToArray(value) {
  return Array.isArray(value) ? value : [value];
};

var debugMap = {
  enter: 'enter',
  entering: ['enter', 'enter-active'],
  exit: 'exit',
  exiting: ['exit', 'exit-active']
};

var getTranslateClasses = function getTranslateClasses(translate) {
  return translate.useSameTransition ? ['translate', 'translate-use-same-transition'] : 'translate';
};

var classMap = {
  child1: function child1() {
    return 'child-layer-1';
  },
  child2: function child2() {
    return 'child-layer-2';
  },
  child3: function child3() {
    return 'child-layer-3';
  },
  opacity: function opacity(_opacity) {
    return _opacity && 'opacity';
  },
  scale: function scale(_scale) {
    return _scale && 'scale';
  },
  height: function height(_height) {
    return _height && 'height';
  },
  width: function width(_width) {
    return _width && 'width';
  },
  timing: function timing(_timing) {
    return _timing && 'timing-' + _timing;
  },
  sequence: function sequence(_sequence) {
    return _sequence && 'child-sequence';
  },
  translate: function translate(_translate) {
    return _translate && getTranslateClasses(_translate);
  },
  translateWrapper: function translateWrapper(translate) {
    return translate && 'translate-wrapper';
  },
  className: function className(_className) {
    return _className && _className;
  },
  debug: function debug(mode) {
    return mode && debugMap[mode];
  }
};

var ClassBuilder = function () {
  function ClassBuilder(data) {
    _classCallCheck(this, ClassBuilder);

    this.names = [];
    this.classNames = [];
    this.data = data || {};
  }

  _createClass(ClassBuilder, [{
    key: 'withName',
    value: function withName(nameOrNames) {
      var _this = this;

      nameOrNames && convertToArray(nameOrNames).forEach(function (name) {
        return _this.names.push(name);
      });
      return this;
    }
  }, {
    key: 'getValue',
    value: function getValue(name, value) {
      return this.withName(classMap[name](value));
    }
  }, {
    key: 'withClassName',
    value: function withClassName(className) {
      if (className) {
        this.classNames.push(className);
      }
      return this;
    }
  }, {
    key: 'withChildLayer',
    value: function withChildLayer(number) {
      return this.getValue('child' + number, number);
    }
  }, {
    key: 'withDebug',
    value: function withDebug(debug) {
      return this.getValue('debug', debug);
    }
  }, {
    key: 'withOpacity',
    value: function withOpacity(opacity) {
      return this.getValue('opacity', opacity);
    }
  }, {
    key: 'withScale',
    value: function withScale(scale) {
      return this.getValue('scale', scale);
    }
  }, {
    key: 'withHeight',
    value: function withHeight(height) {
      return this.getValue('height', height);
    }
  }, {
    key: 'withWidth',
    value: function withWidth(width) {
      return this.getValue('width', width);
    }
  }, {
    key: 'withTiming',
    value: function withTiming(timing) {
      return this.getValue('timing', timing);
    }
  }, {
    key: 'withSequence',
    value: function withSequence(sequence) {
      return this.getValue('sequence', sequence);
    }
  }, {
    key: 'withTranslate',
    value: function withTranslate(translate) {
      return this.getValue('translate', translate);
    }
  }, {
    key: 'withTranslateWrapper',
    value: function withTranslateWrapper(translate) {
      return this.getValue('translateWrapper', translate);
    }
  }, {
    key: 'build',
    value: function build() {
      return flattenArray(this.names).map(function (name) {
        return _Animator2.default[name];
      }).concat(this.classNames).join(' ');
    }
  }]);

  return ClassBuilder;
}();

exports.default = ClassBuilder;