'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var css = {
  convertTime: function convertTime(time) {
    return time ? time / 1000 + 's' : '';
  },
  convertSize: function convertSize(size) {
    return size ? size + 'px' : '0';
  }
};

var translateTemplates = {
  top: function top(size) {
    return 'translate(0, ' + size + ')';
  },
  bottom: function bottom(size) {
    return 'translate(0, -' + size + ')';
  },
  left: function left(size) {
    return 'translate(' + size + ', 0)';
  },
  right: function right(size) {
    return 'translate(-' + size + ', 0)';
  }
};

var switchDirection = {
  top: 'bottom',
  bottom: 'top',
  right: 'left',
  left: 'right'
};

var getTranslate = function getTranslate(translate, inOrOut) {
  var mode = inOrOut === 'in' ? 'enter' : 'exit';
  var direction = translate[mode].direction;
  if (mode === 'exit') {
    direction = switchDirection[direction];
  }
  return translateTemplates[direction](translate[mode].size);
};

var StyleBuilder = function () {
  function StyleBuilder() {
    _classCallCheck(this, StyleBuilder);

    this.styles = {};
  }

  _createClass(StyleBuilder, [{
    key: 'with',
    value: function _with(styles) {
      this.styles = Object.assign({}, this.styles, styles);
      return this;
    }
  }, {
    key: 'withTransitionDelay',
    value: function withTransitionDelay(duration) {
      return this.with(duration && {
        transitionDelay: css.convertTime(duration)
      });
    }
  }, {
    key: 'withAnimationDelay',
    value: function withAnimationDelay(duration) {
      return this.with(duration && {
        animationDuration: css.convertTime(duration)
      });
    }
  }, {
    key: 'withTranslate',
    value: function withTranslate(translate, inOrOut) {
      return this.with(translate && {
        transform: getTranslate(translate, inOrOut)
      });
    }
  }, {
    key: 'withScale',
    value: function withScale(scale) {
      return this.with(scale && {
        transform: 'scale(' + scale + ')'
      });
    }
  }, {
    key: 'withHeight',
    value: function withHeight(height, size) {
      return this.with(height && {
        maxHeight: css.convertSize(size)
      });
    }
  }, {
    key: 'withWidth',
    value: function withWidth(width, size) {
      return this.with(width && {
        maxWidth: css.convertSize(size)
      });
    }
  }, {
    key: 'build',
    value: function build() {
      return this.styles;
    }
  }]);

  return StyleBuilder;
}();

exports.default = StyleBuilder;