'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChildTime = exports.Time = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require('../constants/constants');

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var getDurationFromTiming = function getDurationFromTiming(timing) {
  return _constants.timingMap[timing];
};

var Time = function () {
  function Time(props, _ref) {
    var enter = _ref.enter,
        exit = _ref.exit;

    _classCallCheck(this, Time);

    this.isAnimation = !!_constants.animationProps.find(function (p) {
      return !!props[p];
    });
    this.hasSequence = !!props.sequence;
    this.delay = props.delay;
    this.props = props;
    this.isEnter = enter;
    this.isExit = exit;
  }

  _createClass(Time, [{
    key: 'getTotalDelay',
    value: function getTotalDelay() {
      var delay = 0;
      if (this.isEnter && this.delay.enter) {
        delay = this.delay.enter;
      } else if (this.isExit && this.delay.exit) {
        delay = this.delay.exit;
      }
      return delay;
    }
  }, {
    key: 'getSingleDuration',
    value: function getSingleDuration() {
      if (!this.isAnimation) {
        return 0;
      }
      var _props = this.props,
          translate = _props.translate,
          timing = _props.timing;

      return translate ? _constants.propsDefault.duration : getDurationFromTiming(timing);
    }
  }, {
    key: 'getDelayInPosition',
    value: function getDelayInPosition(index) {
      var children = this.props.children;

      var duration = this.getTotalDelay();
      if (this.hasSequence && this.isAnimation && children.length > 1) {
        duration = (index - 1) * _constants.propsDefault.sequenceDelay + duration;
      }
      return duration;
    }
  }, {
    key: 'getTotalDuration',
    value: function getTotalDuration() {
      var children = this.props.children;

      return this.getSingleDuration() + this.getDelayInPosition(children.length);
    }
  }]);

  return Time;
}();

var ChildTime = function (_Time) {
  _inherits(ChildTime, _Time);

  function ChildTime(props, transition, index) {
    _classCallCheck(this, ChildTime);

    var _this = _possibleConstructorReturn(this, (ChildTime.__proto__ || Object.getPrototypeOf(ChildTime)).call(this, props, transition));

    _this.index = index;
    return _this;
  }

  _createClass(ChildTime, [{
    key: 'getDelay',
    value: function getDelay() {
      var children = this.props.children;

      var delay = this.getTotalDelay();
      if (this.hasSequence && this.isAnimation && children.length > 1) {
        delay = (this.index - 1) * _constants.propsDefault.sequenceDelay + delay;
      }

      return delay;
    }
  }, {
    key: 'getDuration',
    value: function getDuration() {
      return this.getSingleDuration() + this.getDelayInPosition(this.index);
    }
  }]);

  return ChildTime;
}(Time);

exports.Time = Time;
exports.ChildTime = ChildTime;