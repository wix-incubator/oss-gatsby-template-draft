'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _AnimatorContent = require('./AnimatorContent');

var _AnimatorContent2 = _interopRequireDefault(_AnimatorContent);

var _animatorChildStyles = require('../helpers/animator-child-styles');

var _animatorChildStyles2 = _interopRequireDefault(_animatorChildStyles);

var _animatorChildClasses = require('../helpers/animator-child-classes');

var _animatorChildClasses2 = _interopRequireDefault(_animatorChildClasses);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _getDimensions = require('../helpers/get-dimensions');

var _getDimensions2 = _interopRequireDefault(_getDimensions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable */

var AnimatorChild = function (_Component) {
  _inherits(AnimatorChild, _Component);

  function AnimatorChild(props) {
    _classCallCheck(this, AnimatorChild);

    var _this = _possibleConstructorReturn(this, (AnimatorChild.__proto__ || Object.getPrototypeOf(AnimatorChild)).call(this, props));

    _this.dimensions = {
      height: 0,
      width: 0
    };
    return _this;
  }

  _createClass(AnimatorChild, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.isDimensionAnimation()) {
        this.node = _reactDom2.default.findDOMNode(this.refs.content);
      }
    }
  }, {
    key: 'isDimensionAnimation',
    value: function isDimensionAnimation() {
      var _props$animatorProps = this.props.animatorProps,
          height = _props$animatorProps.height,
          width = _props$animatorProps.width;

      return height || width;
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(_ref) {
      var _ref$transition = _ref.transition,
          entering = _ref$transition.entering,
          exiting = _ref$transition.exiting;

      if (this.isDimensionAnimation() && (entering || exiting)) {
        this.setDimensions();
      }
    }
  }, {
    key: 'setDimensions',
    value: function setDimensions() {
      var _props$animatorProps2 = this.props.animatorProps,
          height = _props$animatorProps2.height,
          width = _props$animatorProps2.width;

      this.dimensions = (0, _getDimensions2.default)(this.node, { height: height, width: width });
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;

      var _get = new _animatorChildStyles2.default(this.props, this.dimensions).get(),
          _get2 = _slicedToArray(_get, 3),
          style1 = _get2[0],
          style2 = _get2[1],
          style3 = _get2[2];

      var _get3 = new _animatorChildClasses2.default(this.props).get(),
          _get4 = _slicedToArray(_get3, 3),
          class1 = _get4[0],
          class2 = _get4[1],
          class3 = _get4[2];

      return _react2.default.createElement(
        'div',
        { className: class1, style: style1 },
        _react2.default.createElement(
          'div',
          { className: class2, style: style2 },
          _react2.default.createElement(
            'div',
            { className: class3, style: style3 },
            _react2.default.createElement(
              _AnimatorContent2.default,
              { ref: 'content' },
              children
            )
          )
        )
      );
    }
  }]);

  return AnimatorChild;
}(_react.Component);

AnimatorChild.propTypes = {
  children: _propTypes.node,
  animatorProps: _propTypes.object,
  animatorChildClassName: _propTypes.any,
  animatorChildStyle: _propTypes.any,
  sequenceIndex: _propTypes.number,
  transition: _propTypes.object
};

exports.default = AnimatorChild;

/* eslint-enable */