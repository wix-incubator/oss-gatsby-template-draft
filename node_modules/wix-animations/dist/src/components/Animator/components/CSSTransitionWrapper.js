'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _CSSTransition = require('react-transition-group/CSSTransition');

var _CSSTransition2 = _interopRequireDefault(_CSSTransition);

var _constants = require('../constants/constants');

var _timeClass = require('../class/time-class');

var _AnimatorChild = require('./AnimatorChild');

var _AnimatorChild2 = _interopRequireDefault(_AnimatorChild);

var _shouldFlipAnimation = require('../helpers/should-flip-animation');

var _shouldFlipAnimation2 = _interopRequireDefault(_shouldFlipAnimation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CSSTransitionWrapper = function (_React$Component) {
  _inherits(CSSTransitionWrapper, _React$Component);

  function CSSTransitionWrapper(props) {
    _classCallCheck(this, CSSTransitionWrapper);

    var _this = _possibleConstructorReturn(this, (CSSTransitionWrapper.__proto__ || Object.getPrototypeOf(CSSTransitionWrapper)).call(this, props));

    _this.transitionDefault = {
      enter: false,
      entering: false,
      exit: false,
      exiting: false
    };

    _this.state = {
      sequenceIndex: 0,
      transition: _this.transitionDefault
    };
    return _this;
  }

  _createClass(CSSTransitionWrapper, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      var debug = props.animatorProps.debug;

      if (debug) {
        this.setDebug(debug);
      }
    }
  }, {
    key: 'setDebug',
    value: function setDebug(debug) {
      if (debug === 'enter') {
        this.onEnter();
      } else if (debug === 'entering') {
        this.onEntering();
      } else if (debug === 'entered') {
        this.onEntered();
      } else if (debug === 'exit') {
        this.onExit();
      } else if (debug === 'exiting') {
        this.onExiting();
      }
    }
  }, {
    key: 'updateTransitionState',
    value: function updateTransitionState(phase) {
      var update = void 0;
      switch (phase) {
        case 'enter':
          update = { enter: true };
          break;
        case 'entering':
          update = { enter: true, entering: true };
          break;
        case 'exit':
          update = { exit: true };
          break;
        case 'exiting':
          update = { exit: true, exiting: true };
          break;
        default:
          update = {};
          break;
      }

      this.setState({
        transition: Object.assign({}, this.transitionDefault, update)
      });
    }
  }, {
    key: 'onEnter',
    value: function onEnter() {
      this.updateTransitionState('enter');
      this.setSequenceIndex();
    }
  }, {
    key: 'onEntering',
    value: function onEntering() {
      this.updateTransitionState('entering');
    }
  }, {
    key: 'onEntered',
    value: function onEntered() {
      this.updateTransitionState('entered');
    }
  }, {
    key: 'onExit',
    value: function onExit() {
      this.updateTransitionState('exit');
      this.setSequenceIndex();
    }
  }, {
    key: 'onExiting',
    value: function onExiting() {
      this.updateTransitionState('exiting');
    }
  }, {
    key: 'getTransitionProps',
    value: function getTransitionProps() {

      var duration = new _timeClass.Time(this.props.animatorProps, this.state.transition).getTotalDuration();

      var showByProp = {};
      if (this.props.animatorProps.show !== undefined) {
        showByProp.in = this.props.animatorProps.show;
      }

      return _extends({
        enter: !!duration,
        exit: !!duration,
        appear: !!duration,
        timeout: duration,
        classNames: _constants.transitionClassNames,
        mountOnEnter: true,
        unmountOnExit: true
      }, showByProp);
    }
  }, {
    key: 'setSequenceIndex',
    value: function setSequenceIndex() {
      var _props$animatorProps = this.props.animatorProps,
          children = _props$animatorProps.children,
          sequence = _props$animatorProps.sequence;

      if (sequence) {
        var index = this.props.index + 1;
        var reverseIndex = children.length - this.props.index;
        this.setState({
          sequenceIndex: (0, _shouldFlipAnimation2.default)(sequence, this.state.transition) ? reverseIndex : index
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          animatorProps = _props.animatorProps;
      var sequenceIndex = this.state.sequenceIndex;

      return _react2.default.createElement(
        _CSSTransition2.default,
        _extends({}, this.props, this.getTransitionProps(), {
          onEnter: function onEnter() {
            return _this2.onEnter();
          },
          onEntering: function onEntering() {
            return _this2.onEntering();
          },
          onEntered: function onEntered() {
            return _this2.onEntered();
          },
          onExit: function onExit() {
            return _this2.onExit();
          },
          onExiting: function onExiting() {
            return _this2.onExiting();
          }
        }),
        _react2.default.createElement(
          _AnimatorChild2.default,
          {
            transition: this.state.transition,
            sequenceIndex: sequenceIndex,
            animatorProps: animatorProps
          },
          children
        )
      );
    }
  }]);

  return CSSTransitionWrapper;
}(_react2.default.Component);

CSSTransitionWrapper.propTypes = {
  index: _propTypes.number,
  children: _propTypes.node,
  animatorProps: _propTypes.object
};

exports.default = CSSTransitionWrapper;