'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _Debug = require('./Debug.scss');

var _Debug2 = _interopRequireDefault(_Debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var options = ['enter', 'entering', 'entered', 'exit', 'exiting'];

var Buttons = function Buttons(_ref) {
  var onSelect = _ref.onSelect,
      selected = _ref.selected;
  return _react2.default.createElement(
    'div',
    { className: _Debug2.default.buttons },
    options.map(function (option, index) {
      return _react2.default.createElement(
        'div',
        { className: _Debug2.default.button + ' ' + (selected === option && _Debug2.default.selected), key: index, onClick: function onClick() {
            return onSelect(option);
          } },
        option
      );
    })
  );
};

Buttons.propTypes = {
  onSelect: _propTypes.func,
  selected: _propTypes.string
};

var styles = {
  position: 'fixed',
  background: '#f27052',
  padding: '20px 30px 20px',
  color: 'white',
  fontSize: '16px',
  borderRadius: '5px',
  boxShadow: '0 0 10px grey'
};

var Debug = function (_Component) {
  _inherits(Debug, _Component);

  function Debug(props) {
    _classCallCheck(this, Debug);

    var _this = _possibleConstructorReturn(this, (Debug.__proto__ || Object.getPrototypeOf(Debug)).call(this, props));

    _this.state = {
      debug: false,
      vertical: 'top',
      horizontal: 'right'
    };
    return _this;
  }

  _createClass(Debug, [{
    key: 'onSelect',
    value: function onSelect(id) {
      this.setState({ debug: id });
      this.props.onSelect(id);
    }
  }, {
    key: 'render',
    value: function render() {
      var _extends2,
          _this2 = this;

      var hasChildren = this.props.hasChildren;
      var _state = this.state,
          vertical = _state.vertical,
          horizontal = _state.horizontal;


      return _react2.default.createElement(
        'div',
        { style: _extends({}, styles, (_extends2 = {}, _defineProperty(_extends2, vertical, vertical === 'bottom' ? '120px' : '20px'), _defineProperty(_extends2, horizontal, '20px'), _extends2)) },
        _react2.default.createElement(
          'div',
          { style: { marginBottom: '20px', fontWeight: 'bold' } },
          'Animator Debugger',
          hasChildren ? ' - Choose Debug Phase:' : ''
        ),
        hasChildren && _react2.default.createElement(Buttons, { selected: this.state.debug, onSelect: function onSelect(id) {
            return _this2.onSelect(id);
          } }),
        !hasChildren && _react2.default.createElement(
          'div',
          {
            style: {
              width: '350px',
              fontSize: '16px',
              marginTop: '15px',
              lineHeight: '24px',
              border: '1px solid white',
              padding: '15px'
            }
          },
          'There are no existing children inside your Animator Component. Make sure your children are mounted to getthis debugger working.'
        ),
        _react2.default.createElement(
          'div',
          { className: _Debug2.default.positioning },
          'Box Position: \xA0',
          _react2.default.createElement(
            'span',
            null,
            vertical !== 'top' && _react2.default.createElement(
              'span',
              null,
              _react2.default.createElement(
                'a',
                { onClick: function onClick() {
                    return _this2.setState({ vertical: 'top' });
                  } },
                'Set Top'
              ),
              ',\xA0'
            ),
            vertical === 'top' && _react2.default.createElement(
              'span',
              null,
              _react2.default.createElement(
                'a',
                { onClick: function onClick() {
                    return _this2.setState({ vertical: 'bottom' });
                  } },
                'Set Bottom'
              ),
              ',\xA0'
            ),
            horizontal !== 'right' && _react2.default.createElement(
              'a',
              { onClick: function onClick() {
                  return _this2.setState({ horizontal: 'right' });
                } },
              'Set Right'
            ),
            horizontal === 'right' && _react2.default.createElement(
              'a',
              { onClick: function onClick() {
                  return _this2.setState({ horizontal: 'left' });
                } },
              'Set Left'
            )
          )
        )
      );
    }
  }]);

  return Debug;
}(_react.Component);

Debug.propTypes = {
  onSelect: _propTypes.func,
  hasChildren: _propTypes.bool
};

exports.default = Debug;