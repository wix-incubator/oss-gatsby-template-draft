'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextHelper = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Example = require('../Example.scss');

var css = _interopRequireWildcard(_Example);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var getFirstText = function getFirstText(type) {
  var text = '';
  switch (type) {
    case 'default':
      text = 'This will SHOW FIRST and HIDE FIRST';
      break;
    case 'flip':
      text = 'This will SHOW FIRST';
      break;
    case 'reverse-flip':
      text = 'This will HIDE FIRST';
      break;
    default:
      break;
  }
  return text;
};

var getLastText = function getLastText(type) {
  var text = '';
  switch (type) {
    case 'flip':
      text = 'This will HIDE FIRST';
      break;
    case 'reverse':
      text = 'This will SHOW FIRST and HIDE FIRST';
      break;
    case 'reverse-flip':
      text = 'This will SHOW FIRST';
      break;
    default:
      break;
  }
  return text;
};

var TextHelper = exports.TextHelper = function (_React$Component) {
  _inherits(TextHelper, _React$Component);

  function TextHelper() {
    _classCallCheck(this, TextHelper);

    return _possibleConstructorReturn(this, (TextHelper.__proto__ || Object.getPrototypeOf(TextHelper)).apply(this, arguments));
  }

  _createClass(TextHelper, [{
    key: 'render',
    value: function render() {
      var type = this.props.type;


      return _react2.default.createElement(
        'div',
        { style: { position: 'relative' } },
        getFirstText(type) && _react2.default.createElement(
          'div',
          { style: { position: 'absolute', left: '-410px', top: '150px' } },
          _react2.default.createElement(
            'div',
            { className: css.arrowTop },
            '\u2191'
          ),
          getFirstText(type)
        ),
        getLastText(type) && _react2.default.createElement(
          'div',
          { style: { position: 'absolute', left: '0px', top: '150px', width: '250px' } },
          _react2.default.createElement(
            'div',
            { className: css.arrowTop },
            '\u2191'
          ),
          getLastText(type)
        )
      );
    }
  }]);

  return TextHelper;
}(_react2.default.Component);

TextHelper.propTypes = {
  type: _propTypes2.default.string
};