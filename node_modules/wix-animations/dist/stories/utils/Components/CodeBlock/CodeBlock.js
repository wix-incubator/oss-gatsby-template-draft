'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _TextButton = require('../TextButton');

var _TextButton2 = _interopRequireDefault(_TextButton);

var _copyToClipboard = require('copy-to-clipboard');

var _copyToClipboard2 = _interopRequireDefault(_copyToClipboard);

var _Markdown = require('../Markdown');

var _Markdown2 = _interopRequireDefault(_Markdown);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var toCodeBlock = function toCodeBlock(code) {
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'js';
  return ['```' + type, code.trim(), '```'].join('\n');
};

var CodeBlock = function (_Component) {
  _inherits(CodeBlock, _Component);

  function CodeBlock(props) {
    _classCallCheck(this, CodeBlock);

    var _this = _possibleConstructorReturn(this, (CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock)).call(this, props));

    _this.state = { showNotification: false };
    return _this;
  }

  _createClass(CodeBlock, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          source = _props.source,
          type = _props.type;

      var copyToClipboardClicked = function copyToClipboardClicked() {
        (0, _copyToClipboard2.default)(source);
        _this2.setState({ showNotification: true });
      };
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          _TextButton2.default,
          { onClick: copyToClipboardClicked },
          'Copy to clipboard'
        ),
        _react2.default.createElement(_Markdown2.default, { source: toCodeBlock(source, type) })
      );
    }
  }]);

  return CodeBlock;
}(_react.Component);

CodeBlock.propTypes = {
  source: _propTypes2.default.string,
  type: _propTypes2.default.string
};
CodeBlock.defaultProps = {
  type: 'js'
};
exports.default = CodeBlock;