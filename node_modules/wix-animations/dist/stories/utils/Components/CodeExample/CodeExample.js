'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactCollapse = require('react-collapse');

var _reactCollapse2 = _interopRequireDefault(_reactCollapse);

var _CodeBlock = require('../CodeBlock');

var _CodeBlock2 = _interopRequireDefault(_CodeBlock);

var _TextButton = require('../TextButton');

var _TextButton2 = _interopRequireDefault(_TextButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CodeExample = function (_Component) {
  _inherits(CodeExample, _Component);

  function CodeExample(props) {
    _classCallCheck(this, CodeExample);

    var _this = _possibleConstructorReturn(this, (CodeExample.__proto__ || Object.getPrototypeOf(CodeExample)).call(this, props));

    _this.state = {
      isOpened: !!props.autoExpand
    };

    _this.handleToggleCode = _this.handleToggleCode.bind(_this);
    return _this;
  }

  _createClass(CodeExample, [{
    key: 'handleToggleCode',
    value: function handleToggleCode() {
      this.setState({
        isOpened: !this.state.isOpened
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          { style: { display: 'flex' } },
          _react2.default.createElement(
            'h2',
            null,
            this.props.title
          ),
          _react2.default.createElement(
            'div',
            { style: { margin: '22px 24px 0' } },
            _react2.default.createElement(
              _TextButton2.default,
              { onClick: this.handleToggleCode },
              _react2.default.createElement(
                'span',
                {
                  style: { fontSize: '16px',
                    position: 'relative',
                    top: '-4px' }
                },
                '(',
                this.state.isOpened ? 'Hide' : 'Show',
                ' code)'
              )
            )
          )
        ),
        _react2.default.createElement(
          _reactCollapse2.default,
          { isOpened: this.state.isOpened },
          _react2.default.createElement(_CodeBlock2.default, { source: this.props.code, type: this.props.codeType })
        ),
        _react2.default.createElement(
          'div',
          null,
          this.props.children
        )
      );
    }
  }]);

  return CodeExample;
}(_react.Component);

CodeExample.propTypes = {
  code: _propTypes2.default.string,
  codeType: _CodeBlock2.default.propTypes.type,
  children: _propTypes2.default.node,
  title: _propTypes2.default.string,
  autoExpand: _propTypes2.default.bool
};
CodeExample.defaultProps = {
  codeType: _CodeBlock2.default.defaultProps.type
};
exports.default = CodeExample;