'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _testUtils = require('react-dom/test-utils');

var _testUtils2 = _interopRequireDefault(_testUtils);

var _Tooltip = require('../Tooltip/Tooltip.driver');

var _Tooltip2 = _interopRequireDefault(_Tooltip);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var addItemDriverFactory = function addItemDriverFactory(_ref) {
  var wrapper = _ref.wrapper,
      _element = _ref.element;


  var ratioRegex = /ratio\d+x\d+/;
  var byHook = function byHook(dataHook) {
    return _element.querySelector('[data-hook="' + dataHook + '"]');
  };
  var addButton = function addButton() {
    return byHook('add-container');
  };
  var addTooltip = function addTooltip() {
    return byHook('add-tooltip');
  };

  return {
    /** return the driver element */
    element: function element() {
      return _element;
    },
    /** return the element ratio class */
    getRatio: function getRatio() {
      var result = _element.getAttribute('class').match(ratioRegex);
      return result ? result[0].replace('ratio', '') : '';
    },
    /** return the element's height */
    getHeight: function getHeight() {
      return window.getComputedStyle(_element).height;
    },
    /** return the element's width */
    getWidth: function getWidth() {
      return window.getComputedStyle(_element).width;
    },
    /** return true if tooltip is visible */
    isAddButtonVisible: function isAddButtonVisible() {
      return !!addButton();
    },
    /** return true if button is visible */
    isAddTooltipVisible: function isAddTooltipVisible() {
      return !!addTooltip();
    },
    /** click the add button */
    click: function click() {
      return _testUtils2.default.Simulate.click(addButton());
    },
    /** get the Tooltip's driver */
    getTooltipDriver: function getTooltipDriver() {
      return (0, _Tooltip2.default)({ wrapper: wrapper, element: addTooltip() });
    },
    exists: function exists() {
      return !!_element;
    }
  };
};

exports.default = addItemDriverFactory;