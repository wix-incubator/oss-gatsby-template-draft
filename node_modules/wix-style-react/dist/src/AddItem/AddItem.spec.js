'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utils = require('../../test/utils');

var _driverFactory = require('wix-ui-test-utils/driver-factory');

var _testkit = require('../../testkit');

var _enzyme = require('../../testkit/enzyme');

var _AddItem = require('./AddItem');

var _AddItem2 = _interopRequireDefault(_AddItem);

var _AddItem3 = require('./AddItem.driver');

var _AddItem4 = _interopRequireDefault(_AddItem3);

var _testkitSanity = require('../../test/utils/testkit-sanity');

var _enzyme2 = require('enzyme');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('AddItem', function () {

  var TOOLTIP_CONTENT = 'BLA BLA';
  var createDriver = (0, _driverFactory.createDriverFactory)(_AddItem4.default);
  var props = void 0,
      driver = void 0;
  var addItem = void 0;

  beforeEach(function () {
    document.body.innerHTML = '';
    addItem = jest.fn();
    props = {
      onClick: addItem,
      tooltipContent: TOOLTIP_CONTENT
    };
  });

  describe('when default scenario', function () {

    it('should trigger add item', function () {
      driver = createDriver(_react2.default.createElement(_AddItem2.default, props));
      driver.click();
      expect(addItem).toBeCalled();
    });
  });

  describe('height and width', function () {

    it('should use asspect ratio from props', function () {
      props = {
        aspectRatio: '16/9'
      };
      driver = createDriver(_react2.default.createElement(_AddItem2.default, props));
      expect(driver.getRatio()).toEqual('16x9');
    });

    it('should have default asspect ratio 1x1', function () {
      driver = createDriver(_react2.default.createElement(_AddItem2.default, null));
      expect(driver.getRatio()).toEqual('1x1');
    });

    it('should ignore asspect ratio from props when height is given', function () {
      props = {
        aspectRatio: '16/9',
        height: 300
      };
      driver = createDriver(_react2.default.createElement(_AddItem2.default, props));
      expect(driver.getHeight()).toEqual('300px');
    });
  });

  describe('hide or show add item', function () {

    it('should have a tooltip with given content', function () {
      driver = createDriver(_react2.default.createElement(_AddItem2.default, props));
      var TooltipDriver = driver.getTooltipDriver();
      TooltipDriver.mouseEnter();
      return (0, _utils.resolveIn)(50).then(function () {
        expect(TooltipDriver.isShown()).toBeTruthy();
        expect(TooltipDriver.getContent()).toEqual(props.tooltipContent);
      });
    });

    it('should have an AddItem tooltip markup', function () {
      var wrapper = (0, _enzyme2.shallow)(_react2.default.createElement(_AddItem2.default, props));
      expect(wrapper.find('Tooltip').exists()).toBeTruthy();
    });

    it('should not have an AddItem tooltip markup', function () {
      var wrapper = (0, _enzyme2.shallow)(_react2.default.createElement(_AddItem2.default, null));
      expect(wrapper.find('Tooltip').exists()).toBeFalsy();
    });
  });

  describe('testkit', function () {
    it('should exist', function () {
      expect((0, _testkitSanity.isTestkitExists)(_react2.default.createElement(_AddItem2.default, null), _testkit.addItemTestkitFactory)).toBeTruthy();
    });
  });

  describe('enzyme testkit', function () {
    it('should exist', function () {
      expect((0, _testkitSanity.isEnzymeTestkitExists)(_react2.default.createElement(_AddItem2.default, null), _enzyme.addItemTestkitFactory, _enzyme2.mount)).toBeTruthy();
    });
  });
});