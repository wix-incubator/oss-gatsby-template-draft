'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _InputWithOptions2 = require('../InputWithOptions/InputWithOptions');

var _InputWithOptions3 = _interopRequireDefault(_InputWithOptions2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AutoComplete = function (_InputWithOptions) {
  _inherits(AutoComplete, _InputWithOptions);

  function AutoComplete() {
    _classCallCheck(this, AutoComplete);

    return _possibleConstructorReturn(this, (AutoComplete.__proto__ || Object.getPrototypeOf(AutoComplete)).apply(this, arguments));
  }

  _createClass(AutoComplete, [{
    key: 'dropdownAdditionalProps',
    value: function dropdownAdditionalProps() {
      var _props = this.props,
          options = _props.options,
          predicate = _props.predicate;

      var filterFunc = this.state.isEditing ? predicate : function () {
        return true;
      };
      return { options: options.filter(filterFunc) };
    }
  }]);

  return AutoComplete;
}(_InputWithOptions3.default);

AutoComplete.propTypes = _extends({}, _InputWithOptions3.default.propTypes, {
  predicate: _propTypes.func
});
AutoComplete.defaultProps = _extends({}, _InputWithOptions3.default.defaultProps, {
  predicate: function predicate() {
    return true;
  }
});
exports.default = AutoComplete;