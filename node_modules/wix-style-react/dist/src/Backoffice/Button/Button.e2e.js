'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _eyes = require('eyes.it');

var _eyes2 = _interopRequireDefault(_eyes);

var _protractor = require('../../../testkit/protractor');

var _protractor2 = require('wix-ui-test-utils/protractor');

var _storybookHelpers = require('../../../test/utils/storybook-helpers');

var _AutoExampleDriver = require('wix-storybook-utils/AutoExampleDriver');

var _AutoExampleDriver2 = _interopRequireDefault(_AutoExampleDriver);

var _FocusableTestsE2E = require('../../common/Focusable/FocusableTestsE2E');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var NO_DESCRIPTION = '';

describe('Backoffice Button', function () {
  var storyUrl = (0, _storybookHelpers.getStoryUrl)('5. Buttons', '5.1 Standard');
  var driver = (0, _protractor.buttonTestkitFactory)({ dataHook: 'storybook-button' });

  // Specific as opposed to 'Generic' tests like the Focusable tests.
  describe(NO_DESCRIPTION, function () {

    beforeEach(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return browser.get(storyUrl);

            case 2:
              _context.next = 4;
              return (0, _protractor2.waitForVisibilityOf)(driver.element(), 'Cannot find Button');

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, undefined);
    })));
    afterEach(function () {
      return _AutoExampleDriver2.default.reset();
    });

    _eyes2.default.it('should be in initial state when renders with default', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.t0 = expect;
              _context2.next = 3;
              return driver.isButtonDisabled();

            case 3:
              _context2.t1 = _context2.sent;
              (0, _context2.t0)(_context2.t1).toBe(false, 'isButtonDisabled');
              _context2.t2 = expect;
              _context2.next = 8;
              return driver.isFocused();

            case 8:
              _context2.t3 = _context2.sent;
              (0, _context2.t2)(_context2.t3).toBe(false, 'isFocused');

            case 10:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, undefined);
    })));

    _eyes2.default.it('should alert on click', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      var alertDialog;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return _AutoExampleDriver2.default.setProps({
                onClick: function onClick() {
                  return window.alert('clicked');
                } // eslint-disable-line no-alert
              });

            case 2:
              _context3.next = 4;
              return driver.click();

            case 4:
              alertDialog = browser.switchTo().alert();
              _context3.t0 = expect;
              _context3.next = 8;
              return alertDialog.getText();

            case 8:
              _context3.t1 = _context3.sent;
              (0, _context3.t0)(_context3.t1).toBe('clicked');
              _context3.next = 12;
              return alertDialog.dismiss();

            case 12:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, undefined);
    })));

    _eyes2.default.it('should render disabled', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return _AutoExampleDriver2.default.setProps({ disabled: true });

            case 2:
              _context4.t0 = expect;
              _context4.next = 5;
              return driver.isButtonDisabled();

            case 5:
              _context4.t1 = _context4.sent;
              (0, _context4.t0)(_context4.t1).toBe(true);

            case 7:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee4, undefined);
    })));

    _eyes2.default.it('should render prefix & sufix', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return _AutoExampleDriver2.default.setProps({
                prefixIcon: _react2.default.createElement(
                  'div',
                  null,
                  'prefix'
                ),
                suffixIcon: _react2.default.createElement(
                  'div',
                  null,
                  'suffix'
                )
              });

            case 2:
              _context5.t0 = expect;
              _context5.next = 5;
              return driver.isPrefixIconExists();

            case 5:
              _context5.t1 = _context5.sent;
              (0, _context5.t0)(_context5.t1).toBe(true);
              _context5.t2 = expect;
              _context5.next = 10;
              return driver.isSuffixIconExists();

            case 10:
              _context5.t3 = _context5.sent;
              (0, _context5.t2)(_context5.t3).toBe(true);

            case 12:
            case 'end':
              return _context5.stop();
          }
        }
      }, _callee5, undefined);
    })));

    describe('FocusableDriver', function () {
      it('should be focused when clicked', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return driver.click();

              case 2:
                _context6.t0 = expect;
                _context6.next = 5;
                return driver.isFocused();

              case 5:
                _context6.t1 = _context6.sent;
                (0, _context6.t0)(_context6.t1).toBe(true);

              case 7:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, undefined);
      })));
    });
  });

  describe('Generic', function () {
    (0, _FocusableTestsE2E.runFocusTests)(driver, storyUrl);
  });
});