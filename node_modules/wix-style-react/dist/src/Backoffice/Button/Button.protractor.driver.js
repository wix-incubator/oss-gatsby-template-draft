'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _privateDrivers = require('../../../test/utils/private-drivers');

var _protractorHelpers = require('../../../test/utils/protractor-helpers');

var _FocusableProtractor = require('../../common/Focusable/Focusable.protractor.driver');

var _FocusableProtractor2 = _interopRequireDefault(_FocusableProtractor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var buttonDriverFactory = function buttonDriverFactory(_element) {
  var focusableDriver = (0, _FocusableProtractor2.default)({
    rootElement: _element,
    nativeFocusableElement: _element,
    clickableElements: [_element]
  });

  var publicDriver = {
    click: function click() {
      return _element.click();
    },
    getButtonTextContent: function getButtonTextContent() {
      return _element.getText();
    },
    isButtonDisabled: function isButtonDisabled() {
      return (0, _protractorHelpers.hasAttribute)(_element, 'disabled');
    },
    isPrefixIconExists: function isPrefixIconExists() {
      return _element.$('[data-hook="btn-prefix"]').isPresent();
    },
    isSuffixIconExists: function isSuffixIconExists() {
      return _element.$('[data-hook="btn-suffix"]').isPresent();
    },
    element: function element() {
      return _element;
    }
  };

  return (0, _privateDrivers.mergeDrivers)(publicDriver, focusableDriver);
};

exports.default = buttonDriverFactory;