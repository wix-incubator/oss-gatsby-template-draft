'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _testUtils = require('react-dom/test-utils');

var _testUtils2 = _interopRequireDefault(_testUtils);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _Tooltip = require('./Tooltip');

var _Tooltip2 = _interopRequireDefault(_Tooltip);

var _utils = require('../../../test/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tooltipDriverFactory = function tooltipDriverFactory(_ref) {
  var element = _ref.element,
      wrapper = _ref.wrapper;

  var target = element.querySelector('[data-hook=\'target\']').children[0];
  var tooltipInner = element.querySelector('[data-hook=\'tooltip-inner\']');
  var tooltipContent = tooltipInner.querySelector('[data-hook=\'tooltip-content\']');

  return {
    isShown: function isShown() {
      return (0, _utils.isClassExists)(tooltipInner, 'active');
    },
    focus: function focus() {
      return _testUtils2.default.Simulate.focus(target);
    },
    blur: function blur() {
      return _testUtils2.default.Simulate.blur(target);
    },
    click: function click() {
      return _testUtils2.default.Simulate.click(target);
    },
    mouseEnter: function mouseEnter() {
      return _testUtils2.default.Simulate.mouseEnter(target);
    },
    mouseLeave: function mouseLeave() {
      return _testUtils2.default.Simulate.mouseLeave(target);
    },
    hasErrorTheme: function hasErrorTheme() {
      return !!wrapper.querySelector('.error');
    },
    hasDarkTheme: function hasDarkTheme() {
      return !!wrapper.querySelector('.dark');
    },
    hasLightTheme: function hasLightTheme() {
      return !!wrapper.querySelector('.light');
    },
    getTooltipWrapper: function getTooltipWrapper() {
      return wrapper.querySelector('[data-hook=\'tooltip\']');
    },
    getChildren: function getChildren() {
      return element.innerHTML;
    },
    getPlacement: function getPlacement() {
      return tooltipInner.getAttribute('class').split(' ')[2];
    },
    getContent: function getContent() {
      return tooltipContent.innerHTML;
    },
    setProps: function setProps(props) {
      _reactDom2.default.render(_react2.default.createElement(
        'div',
        { ref: function ref(r) {
            return element = r;
          } },
        _react2.default.createElement(
          _Tooltip2.default,
          props,
          _react2.default.createElement('div', null)
        )
      ), wrapper);
    },
    getWrapper: function getWrapper() {
      return wrapper;
    }
  };
};

exports.default = tooltipDriverFactory;