'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _testUtils = require('react-dom/test-utils');

var _testUtils2 = _interopRequireDefault(_testUtils);

var _TextLinkLayout = require('../TextLinkLayout/TextLinkLayout');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var textLinkDriverFactory = function textLinkDriverFactory(_ref) {
  var element = _ref.element,
      wrapper = _ref.wrapper,
      component = _ref.component;

  var textLinkLayout = element ? element.children[0] : {};

  return {
    exists: function exists() {
      return !!element;
    },
    isDisabled: function isDisabled() {
      return element.getAttribute('disabled') !== null;
    },
    click: function click() {
      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _testUtils2.default.Simulate.click(element, event);
    },
    getContent: function getContent() {
      return textLinkLayout.textContent;
    },
    doesComponentHasClass: function doesComponentHasClass(className) {
      return textLinkLayout.className.includes(className);
    },
    isDarkBackground: function isDarkBackground() {
      return textLinkLayout.style._values.color === 'rgb(240, 244, 247)';
    },
    isGreyScale: function isGreyScale() {
      return textLinkLayout.style._values.color === 'rgb(22, 45, 61)';
    },
    getTheme: function getTheme() {
      var color = textLinkLayout.style._values.color;

      if (color === 'rgb(240, 244, 247)') {
        return _TextLinkLayout.ThemeOptions.DARK_BACKGROUND.type;
      } else if (color === 'rgb(22, 45, 61)') {
        return _TextLinkLayout.ThemeOptions.GREYSCALE.type;
      }
      return _TextLinkLayout.ThemeOptions.NORMAL.type;
    },
    hover: function hover() {
      return _testUtils2.default.Simulate.mouseEnter(textLinkLayout);
    }, // simulate hover on text link layout because events are not propagated
    getLink: function getLink() {
      return element.href;
    },
    getTarget: function getTarget() {
      return element.target;
    },
    getRel: function getRel() {
      return element.rel;
    },
    isUnderline: function isUnderline() {
      return textLinkLayout.style._values['text-decoration'] === 'underline';
    },
    isLightBackground: function isLightBackground() {
      return textLinkLayout.style._values.color === 'rgb(56, 153, 236)';
    },
    getSize: function getSize() {
      return textLinkLayout.classList.contains('t1_3') ? 'medium' : textLinkLayout.classList.contains('t3_3') ? 'small' : 'unknown';
    },
    setProps: function setProps(props) {
      var ClonedWithProps = _react2.default.cloneElement.apply(_react2.default, [component, Object.assign({}, component.props, props)].concat(_toConsumableArray(component.props.children || [])));
      _reactDom2.default.render(_react2.default.createElement(
        'div',
        { ref: function ref(r) {
            return element = r;
          } },
        ClonedWithProps
      ), wrapper);
    }
  };
};

exports.default = textLinkDriverFactory;