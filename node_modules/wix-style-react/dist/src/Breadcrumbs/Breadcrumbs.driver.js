'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _testUtils = require('react-dom/test-utils');

var _testUtils2 = _interopRequireDefault(_testUtils);

var _utils = require('../../test/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var breadcrumbsDriverFactory = function breadcrumbsDriverFactory(_ref) {
  var element = _ref.element,
      wrapper = _ref.wrapper,
      component = _ref.component;

  var optionAt = function optionAt(position) {
    return element.childNodes[position];
  };

  return {
    exists: function exists() {
      return !!element;
    },
    breadcrumbsLength: function breadcrumbsLength() {
      return element.childNodes.length;
    },
    breadcrumbContentAt: function breadcrumbContentAt(position) {
      return optionAt(position).textContent;
    },
    clickBreadcrumbAt: function clickBreadcrumbAt(position) {
      return _testUtils2.default.Simulate.click(optionAt(position).querySelector('[data-hook="breadcrumb-clickable"]'));
    },
    getActiveItemId: function getActiveItemId() {
      var activeItem = element.querySelector('.active');

      if (!activeItem) {
        return null;
      }

      return Array.from(activeItem.parentNode.children).indexOf(activeItem);
    },
    isLarge: function isLarge() {
      return (0, _utils.isClassExists)(element, 'large');
    },
    isMedium: function isMedium() {
      return (0, _utils.isClassExists)(element, 'medium');
    },
    isOnWhiteBackground: function isOnWhiteBackground() {
      return (0, _utils.isClassExists)(element, 'onWhiteBackground');
    },
    isOnGrayBackground: function isOnGrayBackground() {
      return (0, _utils.isClassExists)(element, 'onGrayBackground');
    },
    isOnDarkBackground: function isOnDarkBackground() {
      return (0, _utils.isClassExists)(element, 'onDarkBackground');
    },
    getLabelClassList: function getLabelClassList(position) {
      return optionAt(position).querySelector('[data-hook="breadcrumbs-item"]').className;
    },
    isActiveLinkAt: function isActiveLinkAt(index) {
      return !!optionAt(index).querySelector('a');
    },
    setProps: function setProps(props) {
      var ClonedWithProps = _react2.default.cloneElement.apply(_react2.default, [component, Object.assign({}, component.props, props)].concat(_toConsumableArray(component.props.children || [])));
      _reactDom2.default.render(_react2.default.createElement(
        'div',
        { ref: function ref(r) {
            return element = r;
          } },
        ClonedWithProps
      ), wrapper);
    }
  };
};

exports.default = breadcrumbsDriverFactory;