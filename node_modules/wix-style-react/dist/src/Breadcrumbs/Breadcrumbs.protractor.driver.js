'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Breadcrumbs = require('./Breadcrumbs.scss');

var _Breadcrumbs2 = _interopRequireDefault(_Breadcrumbs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var breadcrumbsDriverFactory = function breadcrumbsDriverFactory(component) {
  var hasClass = function hasClass(className) {
    return component.getAttribute('class').then(function (classes) {
      return classes.split('__').indexOf(className) !== -1;
    });
  };

  return {
    breadcrumbContentAt: function breadcrumbContentAt(position) {
      return component.all(by.xpath('./div')).get(position).getText();
    },
    clickBreadcrumbAt: function clickBreadcrumbAt(position) {
      return component.$$('[data-hook="breadcrumb-clickable"]').get(position).click();
    },
    getActiveItemId: function getActiveItemId() {
      return component.all(by.xpath('./div')).getAttribute('class').then(function (classes) {
        var activeItems = classes.map(function (cls) {
          return cls.split(' ').some(function (c) {
            return c.includes(_Breadcrumbs2.default.active);
          });
        });
        return activeItems.indexOf(true);
      });
    },
    isLarge: function isLarge() {
      return hasClass('large');
    },
    isMedium: function isMedium() {
      return hasClass('medium');
    },
    isOnWhiteBackground: function isOnWhiteBackground() {
      return hasClass('onWhiteBackground');
    },
    isOnGrayBackground: function isOnGrayBackground() {
      return hasClass('onGrayBackground');
    },
    getLabelClassList: function getLabelClassList(position) {
      return component.all(by.xpath('./div')).get(position).getAttribute('class');
    },
    click: function click() {
      return component.click();
    },
    element: function element() {
      return component;
    }
  };
};

exports.default = breadcrumbsDriverFactory;