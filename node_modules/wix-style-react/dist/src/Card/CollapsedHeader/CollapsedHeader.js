'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _CollapsedHeader = require('./CollapsedHeader.scss');

var _CollapsedHeader2 = _interopRequireDefault(_CollapsedHeader);

var _ToggleSwitch = require('../../../src/ToggleSwitch');

var _ToggleSwitch2 = _interopRequireDefault(_ToggleSwitch);

var _WixComponent2 = require('../../../src/BaseComponents/WixComponent');

var _WixComponent3 = _interopRequireDefault(_WixComponent2);

var _reactCollapse = require('react-collapse');

var _reactCollapse2 = _interopRequireDefault(_reactCollapse);

var _Button = require('../../../src/Button');

var _Button2 = _interopRequireDefault(_Button);

var _ChevronDown = require('../../new-icons/ChevronDown');

var _ChevronDown2 = _interopRequireDefault(_ChevronDown);

var _ChevronUp = require('../../new-icons/ChevronUp');

var _ChevronUp2 = _interopRequireDefault(_ChevronUp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CollapsedHeader = function (_WixComponent) {
  _inherits(CollapsedHeader, _WixComponent);

  function CollapsedHeader(props) {
    _classCallCheck(this, CollapsedHeader);

    var _this = _possibleConstructorReturn(this, (CollapsedHeader.__proto__ || Object.getPrototypeOf(CollapsedHeader)).call(this, props));

    _this.onToggleChange = function () {
      var controlled = _this.props.controlled;


      if (controlled) {
        _this.onCollapsedChange();
      } else {
        _this.setState(function (_ref) {
          var isCollapsed = _ref.isCollapsed;
          return { isCollapsed: !isCollapsed };
        }, _this.onCollapsedChange);
      }
    };

    _this.state = {
      isCollapsed: props.collapsed
    };
    return _this;
  }

  _createClass(CollapsedHeader, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.collapsed !== nextProps.collapsed && nextProps.collapsed !== this.state.isCollapsed) {
        this.setState({ isCollapsed: nextProps.collapsed });
      }
    }
  }, {
    key: 'stopPropagation',
    value: function stopPropagation(event) {
      event.stopPropagation();
    }
  }, {
    key: 'onCollapsedChange',
    value: function onCollapsedChange() {
      var onCollapsedChange = this.props.onCollapsedChange;

      onCollapsedChange && onCollapsedChange(this.state.isCollapsed);
    }
  }, {
    key: 'render',
    value: function render() {
      var _classNames, _classNames2;

      var _props = this.props,
          title = _props.title,
          subtitle = _props.subtitle,
          withoutDivider = _props.withoutDivider,
          buttonCollapseText = _props.buttonCollapseText,
          buttonExpandText = _props.buttonExpandText;


      var headerClasses = (0, _classnames2.default)((_classNames = {}, _defineProperty(_classNames, _CollapsedHeader2.default.headerOnlyTitle, !subtitle), _defineProperty(_classNames, _CollapsedHeader2.default.headerTitleSubtitle, subtitle), _defineProperty(_classNames, _CollapsedHeader2.default.withDivider, !withoutDivider), _classNames));

      var headerClassesWithoutDivider = (0, _classnames2.default)((_classNames2 = {}, _defineProperty(_classNames2, _CollapsedHeader2.default.headerOnlyTitle, !subtitle), _defineProperty(_classNames2, _CollapsedHeader2.default.headerTitleSubtitle, subtitle), _classNames2));

      var switchElement = _react2.default.createElement(
        'div',
        { className: _CollapsedHeader2.default.collapsedSwitch, onClick: this.stopPropagation },
        _react2.default.createElement(_ToggleSwitch2.default, {
          dataHook: 'switch',
          onChange: this.onToggleChange,
          checked: !this.state.isCollapsed
        })
      );

      var buttonElement = _react2.default.createElement(
        'div',
        { className: _CollapsedHeader2.default.button, onClick: this.stopPropagation },
        _react2.default.createElement(
          _Button2.default,
          {
            withNewIcons: true,
            dataHook: 'button',
            height: 'medium',
            prefixIcon: this.state.isCollapsed ? _react2.default.createElement(_ChevronDown2.default, null) : _react2.default.createElement(_ChevronUp2.default, null),
            onClick: this.onToggleChange,
            theme: 'whiteblueprimary',
            type: 'button'
          },
          this.state.isCollapsed ? buttonExpandText : buttonCollapseText
        )
      );

      var titleElement = _react2.default.createElement(
        'div',
        { 'data-hook': 'title', className: _CollapsedHeader2.default.title },
        title
      );

      var subtitleElement = subtitle ? _react2.default.createElement(
        'div',
        { 'data-hook': 'subtitle', className: _CollapsedHeader2.default.subtitle },
        this.props.subtitle
      ) : null;

      var toggleElement = this.props.toggleStyle === 'switch' ? switchElement : buttonElement;
      var switchHeader = this.state.isCollapsed ? headerClassesWithoutDivider : headerClasses;

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          { className: switchHeader, onClick: this.onToggleChange },
          _react2.default.createElement(
            'div',
            null,
            titleElement,
            subtitleElement
          ),
          toggleElement
        ),
        _react2.default.createElement(
          _reactCollapse2.default,
          { isOpened: !this.state.isCollapsed },
          this.props.children
        )
      );
    }
  }]);

  return CollapsedHeader;
}(_WixComponent3.default);

CollapsedHeader.propTypes = {
  title: _propTypes.node.isRequired,
  subtitle: _propTypes.node,
  withoutDivider: _propTypes.bool,
  children: _propTypes.node,
  toggleStyle: (0, _propTypes.oneOf)(['switch', 'button']),
  collapsed: _propTypes.bool,
  onCollapsedChange: _propTypes.func,
  buttonCollapseText: _propTypes.string,
  buttonExpandText: _propTypes.string,
  controlled: _propTypes.bool
};
CollapsedHeader.defaultProps = {
  subtitle: null,
  collapsed: false,
  toggleStyle: 'switch',
  withoutDivider: false,
  buttonCollapseText: 'Less',
  buttonExpandText: 'More',
  controlled: false
};
exports.default = CollapsedHeader;