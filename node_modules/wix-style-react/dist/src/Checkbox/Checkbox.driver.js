'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _utils = require('../../test/utils');

var _Label = require('wix-ui-backoffice/dist/src/components/Label/Label.driver');

var _vanilla = require('wix-ui-test-utils/vanilla');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var labelTestkitFactory = (0, _vanilla.testkitFactoryCreator)(_Label.labelDriverFactory);

var checkboxDriverFactory = function checkboxDriverFactory(_ref) {
  var element = _ref.element,
      wrapper = _ref.wrapper,
      component = _ref.component,
      eventTrigger = _ref.eventTrigger;


  var input = function input() {
    return element.querySelector('input');
  };
  var checkbox = function checkbox() {
    return element.querySelector('.checkbox');
  };
  var labelDriver = function labelDriver() {
    return labelTestkitFactory({ wrapper: element, dataHook: 'checkbox-label' });
  };
  var _isChecked = function _isChecked(element) {
    return (0, _utils.isClassExists)(element, 'checked');
  };

  return {
    exists: function exists() {
      return !!element;
    },
    click: function click() {
      return eventTrigger.change(input(), { target: { checked: !_isChecked(element) } });
    },
    /** trigger focus on the element */
    focus: function focus() {
      return eventTrigger.focus(checkbox());
    },
    /** trigger blur on the element */
    blur: function blur() {
      return eventTrigger.blur(checkbox());
    },
    /**
     * Focus related testing is done in e2e tests only.
     * @deprecated
     */
    hasFocusState: function hasFocusState() {
      return element.getAttribute('data-focus');
    },
    isChecked: function isChecked() {
      return _isChecked(element);
    },
    isDisabled: function isDisabled() {
      return (0, _utils.isClassExists)(element, 'disabled');
    },
    isIndeterminate: function isIndeterminate() {
      return (0, _utils.isClassExists)(element, 'indeterminate');
    },
    hasError: function hasError() {
      return (0, _utils.isClassExists)(element, 'hasError');
    },
    getLabel: function getLabel() {
      return labelDriver().getLabelText();
    },
    getLabelDriver: function getLabelDriver() {
      return labelDriver();
    },
    setProps: function setProps(props) {
      var ClonedWithProps = _react2.default.cloneElement.apply(_react2.default, [component, Object.assign({}, component.props, props)].concat(_toConsumableArray(component.props.children || [])));
      _reactDom2.default.render(_react2.default.createElement(
        'div',
        { ref: function ref(r) {
            return element = r;
          } },
        ClonedWithProps
      ), wrapper);
    }
  };
};

exports.default = checkboxDriverFactory;