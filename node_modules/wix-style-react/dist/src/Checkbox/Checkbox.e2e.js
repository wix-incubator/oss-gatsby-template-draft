'use strict';

var _eyes = require('eyes.it');

var _eyes2 = _interopRequireDefault(_eyes);

var _protractor = require('../../testkit/protractor');

var _protractor2 = require('wix-ui-test-utils/protractor');

var _storybookHelpers = require('../../test/utils/storybook-helpers');

var _AutoExampleDriver = require('wix-storybook-utils/AutoExampleDriver');

var _AutoExampleDriver2 = _interopRequireDefault(_AutoExampleDriver);

var _FocusableTestsE2E = require('../common/Focusable/FocusableTestsE2E');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var NO_DESCRIPTION = '';

describe('Checkbox', function () {
  var storyUrl = (0, _storybookHelpers.getStoryUrl)('4. Selection', '4.2 Checkbox');
  var checkboxDriver = (0, _protractor.checkboxTestkitFactory)({ dataHook: 'storybook-checkbox' });

  describe(NO_DESCRIPTION, function () {
    var waitForCheckbox = function waitForCheckbox() {
      return (0, _protractor2.waitForVisibilityOf)(checkboxDriver.element(), 'Cannot find Checkbox');
    };
    var clickTab = function clickTab() {
      return browser.actions().sendKeys(protractor.Key.TAB).perform();
    };

    beforeEach(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return browser.get(storyUrl);

            case 2:
              _context.next = 4;
              return waitForCheckbox();

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, undefined);
    })));

    _eyes2.default.it('should have default props', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              expect(checkboxDriver.hasError()).toBe(false, 'hasError');
              expect(checkboxDriver.isChecked()).toBe(false, 'isChecked');
              expect(checkboxDriver.isFocused()).toBe(false, 'isFocused');
              expect(checkboxDriver.isDisabled()).toBe(false, 'isDisabled');

            case 4:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, undefined);
    })));

    _eyes2.default.it('should set checked state when clicked', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              expect(checkboxDriver.isChecked()).toBe(false);
              _context3.next = 3;
              return checkboxDriver.click();

            case 3:
              expect(checkboxDriver.isChecked()).toBe(true);

            case 4:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, undefined);
    })));

    _eyes2.default.it('should show focused styles', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              expect(checkboxDriver.isFocused()).toBe(false);
              _context4.next = 3;
              return clickTab();

            case 3:
              expect(checkboxDriver.isFocused()).toBe(true);

            case 4:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee4, undefined);
    })));

    describe('has error', function () {

      beforeEach(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return _AutoExampleDriver2.default.setProps({ hasError: true });

              case 2:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, undefined);
      })));

      _eyes2.default.it('should show error styles', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                expect(checkboxDriver.hasError()).toBe(true);

              case 1:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, undefined);
      })));

      _eyes2.default.it('should show focused styles', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                expect(checkboxDriver.hasError()).toBe(true);
                expect(checkboxDriver.isFocused()).toBe(false);
                _context7.next = 4;
                return clickTab();

              case 4:
                expect(checkboxDriver.isFocused()).toBe(true);

              case 5:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, undefined);
      })));
    });

    describe('is disabled', function () {

      beforeEach(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return _AutoExampleDriver2.default.setProps({ disabled: true });

              case 2:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, undefined);
      })));

      _eyes2.default.it('should be disabled', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                expect(checkboxDriver.isDisabled()).toBe(true);

              case 1:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, undefined);
      })));

      _eyes2.default.it('should not be focusable', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                expect(checkboxDriver.isDisabled()).toBe(true);
                expect(checkboxDriver.isFocused()).toBe(false);
                _context10.next = 4;
                return clickTab();

              case 4:
                expect(checkboxDriver.isFocused()).toBe(false);

              case 5:
              case 'end':
                return _context10.stop();
            }
          }
        }, _callee10, undefined);
      })));
    });
  });

  describe('Generic', function () {
    (0, _FocusableTestsE2E.runFocusTests)(checkboxDriver, storyUrl);
  });
});