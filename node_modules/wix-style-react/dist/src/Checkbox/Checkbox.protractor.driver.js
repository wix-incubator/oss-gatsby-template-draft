'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.internalDriverFactory = undefined;

var _Checkbox = require('./Checkbox.scss');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _FocusableProtractor = require('../common/Focusable/Focusable.protractor.driver');

var _FocusableProtractor2 = _interopRequireDefault(_FocusableProtractor);

var _privateDrivers = require('../../test/utils/private-drivers');

var _protractorHelpers = require('../../test/utils/protractor-helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @return <T extends InternalFocusableDriver>
 */
var internalDriverFactory = exports.internalDriverFactory = function internalDriverFactory(element) {
  var getBox = function getBox() {
    return element.$('[data-hook="checkbox-box"]');
  };
  var getTextChildren = function getTextChildren() {
    return element.$('[data-hook="checkbox-children"]');
  };

  return {
    // Implements: InternalFocusableDriver
    focusableElement: element,
    clickableGetters: [getBox, getTextChildren]
  };
};

var checkboxDriverFactory = function checkboxDriverFactory(_element) {
  var checkboxElement = _element.$('[data-hook="checkbox-box"]');
  var childrenElement = _element.$('[data-hook="checkbox-children"]');

  var focusableDriver = (0, _FocusableProtractor2.default)({
    rootElement: _element,
    nativeFocusableElement: _element,
    clickableElements: [checkboxElement, childrenElement]
  });

  var publicDriver = {
    element: function element() {
      return _element;
    },
    click: function click() {
      return _element.click();
    },
    getLabel: function getLabel() {
      return _element.$('label');
    },
    getInput: function getInput() {
      return _element.$('input');
    },
    isChecked: function isChecked() {
      return _element.$('input').isSelected();
    },
    isDisabled: function isDisabled() {
      return (0, _protractorHelpers.hasAttribute)(_element.$('input'), 'disabled');
    },
    hasError: function hasError() {
      return (0, _protractorHelpers.hasClass)(_element, _Checkbox2.default.hasError);
    }
  };

  return (0, _privateDrivers.mergeDrivers)(publicDriver, focusableDriver);
};

exports.default = checkboxDriverFactory;