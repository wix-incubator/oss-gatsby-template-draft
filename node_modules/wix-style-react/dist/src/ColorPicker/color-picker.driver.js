'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _testUtils = require('react-dom/test-utils');

var _testUtils2 = _interopRequireDefault(_testUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var colorPickerDriverFactory = function colorPickerDriverFactory(_ref) {
  var element = _ref.element;

  return {
    exists: function exists() {
      return !!element;
    },
    selectBlackColor: function selectBlackColor() {
      // as with jsdom size of pallette 0 px, then click to 1,1 will make color black
      _testUtils2.default.Simulate.mouseDown(element.querySelector('[data-hook="color-picker-hsb"]'), {
        clientX: 1,
        clientY: 1
      });
    },
    confirm: function confirm() {
      return _testUtils2.default.Simulate.click(element.querySelector('[data-hook="color-picker-confirm-button"]'));
    },
    clickOnPreviousColor: function clickOnPreviousColor() {
      return _testUtils2.default.Simulate.click(element.querySelector('[data-hook="color-picker-history-previous"]'));
    },
    historyPanelExists: function historyPanelExists() {
      return !!element.querySelector('[data-hook="color-picker-history"]');
    },
    historyCurrentColor: function historyCurrentColor() {
      return element.querySelector('[data-hook="color-picker-history-current"]').style.background;
    },
    historyPreviousColor: function historyPreviousColor() {
      return element.querySelector('[data-hook="color-picker-history-previous"]').style.background;
    }
  };
};

exports.default = colorPickerDriverFactory;