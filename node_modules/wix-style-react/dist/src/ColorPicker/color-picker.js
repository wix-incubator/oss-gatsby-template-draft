'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _color = require('color');

var _color2 = _interopRequireDefault(_color);

var _propTypes = require('prop-types');

var _WixComponent2 = require('../BaseComponents/WixComponent');

var _WixComponent3 = _interopRequireDefault(_WixComponent2);

var _colorPickerHsb = require('./color-picker-hsb');

var _colorPickerHsb2 = _interopRequireDefault(_colorPickerHsb);

var _colorPickerHue = require('./color-picker-hue');

var _colorPickerHue2 = _interopRequireDefault(_colorPickerHue);

var _colorPickerHistory = require('./color-picker-history');

var _colorPickerHistory2 = _interopRequireDefault(_colorPickerHistory);

var _colorPickerConverter = require('./color-picker-converter');

var _colorPickerConverter2 = _interopRequireDefault(_colorPickerConverter);

var _colorPickerActions = require('./color-picker-actions');

var _colorPickerActions2 = _interopRequireDefault(_colorPickerActions);

var _colorPicker = require('./color-picker.scss');

var _colorPicker2 = _interopRequireDefault(_colorPicker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FALLBACK_COLOR = (0, _color2.default)('#86c6e5');

/**
 * Color Picker
 *
 * Under the hood uses color manipulation library [https://github.com/Qix-/color](https://github.com/Qix-/color).
 * Value for this component can be given in `string` or `object` format.
 * The callbacks always respond with color `object` format.
 */

var ColorPicker = function (_WixComponent) {
  _inherits(ColorPicker, _WixComponent);

  function ColorPicker(props) {
    _classCallCheck(this, ColorPicker);

    var _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this, props));

    _this.change = _this.change.bind(_this);
    _this.confirm = _this.confirm.bind(_this);
    _this.cancel = _this.cancel.bind(_this);

    var color = safeColor(props.value) || FALLBACK_COLOR;
    _this.state = { current: color, previous: color };
    return _this;
  }

  _createClass(ColorPicker, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          showHistory = _props.showHistory,
          showInput = _props.showInput,
          showConverter = _props.showConverter,
          children = _props.children;
      var _state = this.state,
          current = _state.current,
          previous = _state.previous;

      return _react2.default.createElement(
        'div',
        { className: _colorPicker2.default.root },
        _react2.default.createElement(_colorPickerHsb2.default, { current: current, onChange: this.change }),
        _react2.default.createElement(_colorPickerHue2.default, { current: current, onChange: this.change }),
        _react2.default.createElement(_colorPickerHistory2.default, {
          show: showHistory,
          current: current,
          previous: previous,
          onClick: this.change
        }),
        _react2.default.createElement(_colorPickerConverter2.default, { showConverter: showConverter, showInput: showInput, current: current, onChange: this.change }),
        children && _react2.default.createElement(
          'div',
          { className: _colorPicker2.default.children },
          children
        ),
        _react2.default.createElement(_colorPickerActions2.default, { onConfirm: this.confirm, onCancel: this.cancel })
      );
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      var color = safeColor(props.value);
      if (color && !equal(color, this.state.current)) {
        this.setState({ current: color });
      }
    }
  }, {
    key: 'change',
    value: function change(color) {
      var _this2 = this;

      this.setState({ current: color }, function () {
        _this2.props.onChange(color);
      });
    }
  }, {
    key: 'confirm',
    value: function confirm() {
      this.setState({ previous: this.state.current });
      this.props.onConfirm(this.state.current);
    }
  }, {
    key: 'cancel',
    value: function cancel() {
      this.props.onCancel(this.state.previous);
    }
  }]);

  return ColorPicker;
}(_WixComponent3.default);

ColorPicker.displayName = 'ColorPicker';
ColorPicker.propTypes = {
  /** Current color, can be given in `string` or `object` format [https://github.com/Qix-/color](https://github.com/Qix-/color) */
  value: (0, _propTypes.oneOfType)([_propTypes.string, _propTypes.object]).isRequired,

  /** Should current/previous color be displayed */
  showHistory: _propTypes.bool,

  /** Should `HEX`/`RGB`/`HSB` converter tabs be displayed */
  showConverter: _propTypes.bool,

  /** Should color input (in `HEX` mode) be displayed. This is relevant only if `showConverter` is `true` */
  showInput: _propTypes.bool,

  /** Handle color change event. */
  onChange: _propTypes.func.isRequired,

  /** Handle cancel button click */
  onCancel: _propTypes.func.isRequired,

  /** Handle confirm button click */
  onConfirm: _propTypes.func.isRequired,
  /** Children would be rendered above action buttons */
  children: _propTypes.node
};
ColorPicker.defaultProps = {
  showHistory: false,
  showConverter: true,
  showInput: true
};
exports.default = ColorPicker;


function equal(color1, color2) {
  return color1.hex() === color2.hex();
}

function safeColor(input) {
  try {
    return (0, _color2.default)(input);
  } catch (error) {
    return null;
  }
}