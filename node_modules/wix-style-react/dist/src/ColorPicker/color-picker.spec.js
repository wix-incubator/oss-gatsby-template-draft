'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _color = require('color');

var _color2 = _interopRequireDefault(_color);

var _driverFactory = require('wix-ui-test-utils/driver-factory');

var _colorPicker = require('./color-picker.driver');

var _colorPicker2 = _interopRequireDefault(_colorPicker);

var _colorPicker3 = require('./color-picker');

var _colorPicker4 = _interopRequireDefault(_colorPicker3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('ColorPicker', function () {
  var createDriver = (0, _driverFactory.createDriverFactory)(_colorPicker2.default);
  var driver = void 0;

  function createComponent(props) {
    driver = createDriver(_react2.default.createElement(_colorPicker4.default, props));
  }

  it('should successfully render a component', function () {
    var onChange = jest.fn();
    var onCancel = jest.fn();
    var onConfirm = jest.fn();
    createComponent({ value: '#000000', onChange: onChange, onCancel: onCancel, onConfirm: onConfirm });
    expect(driver.exists()).toBeTruthy();
    expect(driver.historyPanelExists()).toBeFalsy();
  });

  describe('History', function () {
    it('should show history panel with current color selected as previous', function () {
      var onChange = jest.fn();
      var onCancel = jest.fn();
      var onConfirm = jest.fn();
      var value = '#000000';
      createComponent({ value: value, onChange: onChange, onCancel: onCancel, onConfirm: onConfirm, showHistory: true });
      expect(driver.historyPanelExists()).toBeTruthy();
      expect((0, _color2.default)(driver.historyCurrentColor()).hex()).toBe(value);
      expect((0, _color2.default)(driver.historyPreviousColor()).hex()).toBe(value);
    });

    it('should not update previous color after current color change but not confirm', function () {
      var onChange = jest.fn();
      var onCancel = jest.fn();
      var onConfirm = jest.fn();
      var value = '#00FF00';
      createComponent({ value: value, onChange: onChange, onCancel: onCancel, onConfirm: onConfirm, showHistory: true });
      driver.selectBlackColor();
      expect((0, _color2.default)(driver.historyCurrentColor()).hex()).toBe('#000000');
      expect((0, _color2.default)(driver.historyPreviousColor()).hex()).toBe(value);
    });

    it('should set previous color to be active color', function () {
      var onChange = jest.fn();
      var onCancel = jest.fn();
      var onConfirm = jest.fn();
      var value = '#00FF00';
      createComponent({ value: value, onChange: onChange, onCancel: onCancel, onConfirm: onConfirm, showHistory: true });
      driver.selectBlackColor();
      expect((0, _color2.default)(driver.historyCurrentColor()).hex()).toBe('#000000');
      expect((0, _color2.default)(driver.historyPreviousColor()).hex()).toBe(value);
      driver.clickOnPreviousColor();
      expect((0, _color2.default)(driver.historyCurrentColor()).hex()).toBe(value);
    });

    it('should update previous color after confirm click', function () {
      var onChange = jest.fn();
      var onCancel = jest.fn();
      var onConfirm = jest.fn();
      var value = '#00FF00';
      createComponent({ value: value, onChange: onChange, onCancel: onCancel, onConfirm: onConfirm, showHistory: true });
      driver.selectBlackColor();
      expect((0, _color2.default)(driver.historyCurrentColor()).hex()).toBe('#000000');
      expect((0, _color2.default)(driver.historyPreviousColor()).hex()).toBe(value);
      driver.confirm();
      expect((0, _color2.default)(driver.historyCurrentColor()).hex()).toBe('#000000');
      expect((0, _color2.default)(driver.historyPreviousColor()).hex()).toBe('#000000');
    });
  });
});