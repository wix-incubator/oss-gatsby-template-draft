'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _popper = require('popper.js');

var _popper2 = _interopRequireDefault(_popper);

var _DayPicker = require('react-day-picker/DayPicker');

var _DayPicker2 = _interopRequireDefault(_DayPicker);

var _add_days = require('date-fns/add_days');

var _add_days2 = _interopRequireDefault(_add_days);

var _sub_days = require('date-fns/sub_days');

var _sub_days2 = _interopRequireDefault(_sub_days);

var _add_months = require('date-fns/add_months');

var _add_months2 = _interopRequireDefault(_add_months);

var _sub_months = require('date-fns/sub_months');

var _sub_months2 = _interopRequireDefault(_sub_months);

var _add_years = require('date-fns/add_years');

var _add_years2 = _interopRequireDefault(_add_years);

var _sub_years = require('date-fns/sub_years');

var _sub_years2 = _interopRequireDefault(_sub_years);

var _parse = require('date-fns/parse');

var _parse2 = _interopRequireDefault(_parse);

var _is_same_day = require('date-fns/is_same_day');

var _is_same_day2 = _interopRequireDefault(_is_same_day);

var _start_of_month = require('date-fns/start_of_month');

var _start_of_month2 = _interopRequireDefault(_start_of_month);

var _set_year = require('date-fns/set_year');

var _set_year2 = _interopRequireDefault(_set_year);

var _set_month = require('date-fns/set_month');

var _set_month2 = _interopRequireDefault(_set_month);

var _set_date = require('date-fns/set_date');

var _set_date2 = _interopRequireDefault(_set_date);

var _WixComponent2 = require('../BaseComponents/WixComponent');

var _WixComponent3 = _interopRequireDefault(_WixComponent2);

var _Date = require('../new-icons/Date');

var _Date2 = _interopRequireDefault(_Date);

var _LocaleUtils = require('./LocaleUtils');

var _LocaleUtils2 = _interopRequireDefault(_LocaleUtils);

var _DatePicker = require('./DatePicker.scss');

var _DatePicker2 = _interopRequireDefault(_DatePicker);

var _arrow = require('./arrow.scss');

var _arrow2 = _interopRequireDefault(_arrow);

var _Input = require('../Input');

var _Input2 = _interopRequireDefault(_Input);

var _DatePickerHead = require('./DatePickerHead');

var _DatePickerHead2 = _interopRequireDefault(_DatePickerHead);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * DatePicker component
 *
 * ### Keyboard support
 * * `Left`: Move to the previous day.
 * * `Right`: Move to the next day.
 * * `Up`: Move to the previous week.
 * * `Down`: Move to the next week.
 * * `PgUp`: Move to the previous month.
 * * `PgDn`: Move to the next month.
 * * `Home`: Move to the previous year.
 * * `End`: Move to the next year.
 * * `Enter`/`Esc`/`Tab`: close the calendar. (`Enter` & `Esc` calls `preventDefault`)
 *
 */
var DatePicker = function (_WixComponent) {
  _inherits(DatePicker, _WixComponent);

  function DatePicker(props) {
    _classCallCheck(this, DatePicker);

    var _this = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));

    _this.openCalendar = function () {
      if (!_this.state.isOpen) {
        _this.setState({
          isOpen: true,
          value: _this.props.value || new Date()
        }, function () {
          return _this._popper.scheduleUpdate();
        });
      }
    };

    _this.closeCalendar = function () {
      return _this.setState({ value: _this.state.value, isOpen: false });
    };

    _this._setValue = function (value) {
      return _this.setState({ value: value }, _this._popper.scheduleUpdate);
    };

    _this._saveNewValue = function (value) {
      var modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (modifiers.disabled) {
        return;
      }

      var isChanged = !(0, _is_same_day2.default)(value, _this.props.value);

      if (isChanged) {
        var newValue = [[value.getFullYear(), _set_year2.default], [value.getMonth(), _set_month2.default], [value.getDate(), _set_date2.default]].reduce(function (value, _ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              datePart = _ref2[0],
              setter = _ref2[1];

          return setter(value, datePart);
        }, _this.props.value);

        _this.setState({ value: newValue }, function () {
          return _this.props.onChange(newValue);
        });
      }

      _this.props.shouldCloseOnSelect && _this.closeCalendar();
    };

    _this._createDayPickerProps = function () {
      var _this$props = _this.props,
          locale = _this$props.locale,
          showMonthDropdown = _this$props.showMonthDropdown,
          showYearDropdown = _this$props.showYearDropdown,
          filterDate = _this$props.filterDate,
          excludePastDates = _this$props.excludePastDates,
          propsValue = _this$props.value,
          rtl = _this$props.rtl;
      var value = _this.state.value;


      var localeUtils = (0, _LocaleUtils2.default)(locale);

      var captionElement = _react2.default.createElement(_DatePickerHead2.default, {
        date: value,
        showYearDropdown: showYearDropdown,
        showMonthDropdown: showMonthDropdown,
        localeUtils: localeUtils,
        rtl: rtl,
        onChange: _this._setValue,

        onLeftArrowClick: function onLeftArrowClick() {
          return _this._setValue((0, _start_of_month2.default)((0, _add_months2.default)(value, -1)));
        },

        onRightArrowClick: function onRightArrowClick() {
          return _this._setValue((0, _start_of_month2.default)((0, _add_months2.default)(value, 1)));
        }
      });

      return {
        disabledDays: excludePastDates ? [{ before: new Date() }] : // todo adjust with tz
        function (date) {
          return !filterDate(date);
        },

        initialMonth: value,
        initialYear: value,
        selectedDays: (0, _parse2.default)(propsValue),
        month: value,
        year: value,
        firstDayOfWeek: 1,
        locale: typeof locale === 'string' ? locale : '',
        fixedWeeks: true,
        modifiers: value ? { 'keyboard-selected': value } : {},
        onKeyDown: _this._handleKeyDown,
        onDayClick: _this._saveNewValue,
        localeUtils: localeUtils,
        canChangeMonth: false, // this disables `navbarElement`, whereas `navbarElement: null` doesn't
        captionElement: captionElement
      };
    };

    _this._handleKeyDown = function (event) {
      var keyHandler = _this.keyHandlers[event.keyCode];

      if (keyHandler) {
        // TODO: dirty for now
        // tab key should move focus so can't preventDefault
        if (event.keyCode !== 9) {
          event.preventDefault();
        }

        if (!_this.state.isOpen) {
          _this.openCalendar();
        }

        keyHandler(_this.state.value);
      }
    };

    _this.keyHandlers = {
      // enter
      13: function _(value) {
        return _this._saveNewValue(value);
      },

      // escape
      27: _this.closeCalendar,

      // page up
      33: function _(value) {
        return _this._setValue((0, _sub_months2.default)(value, 1));
      },

      // page down
      34: function _(value) {
        return _this._setValue((0, _add_months2.default)(value, 1));
      },

      // end
      35: function _(value) {
        return _this._setValue((0, _add_years2.default)(value, 1));
      },

      // home
      36: function _(value) {
        return _this._setValue((0, _sub_years2.default)(value, 1));
      },

      // left arrow
      37: function _(value) {
        return _this._setValue((0, _sub_days2.default)(value, _this.props.rtl ? -1 : 1));
      },

      // up arrow
      38: function _(value) {
        return _this._setValue((0, _sub_days2.default)(value, 7));
      },

      // right arrow
      39: function _(value) {
        return _this._setValue((0, _add_days2.default)(value, _this.props.rtl ? -1 : 1));
      },

      // down arrow
      40: function _(value) {
        return _this._setValue((0, _add_days2.default)(value, 7));
      },

      // tab
      9: _this.closeCalendar
    };


    _this.state = {
      isMonthPickerOpen: false,
      isYearPickerOpen: false,
      value: props.value,
      isOpen: props.isOpen || false
    };
    return _this;
  }

  _createClass(DatePicker, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(DatePicker.prototype.__proto__ || Object.getPrototypeOf(DatePicker.prototype), 'componentDidMount', this).call(this);

      this._popper = new _popper2.default(this.inputRef, this.calendarRef, {
        placement: 'top-start'
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._popper.destroy();
      _get(DatePicker.prototype.__proto__ || Object.getPrototypeOf(DatePicker.prototype), 'componentWillUnmount', this).call(this);
    }
  }, {
    key: 'onClickOutside',
    value: function onClickOutside() {
      this.closeCalendar();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          inputDataHook = _props.inputDataHook,
          calendarDataHook = _props.calendarDataHook,
          dateFormat = _props.dateFormat,
          locale = _props.locale,
          disabled = _props.disabled,
          placeholderText = _props.placeholderText,
          readOnly = _props.readOnly,
          initialValue = _props.value,
          error = _props.error,
          errorMessage = _props.errorMessage,
          customInput = _props.customInput,
          width = _props.width,
          inputProps = _props.inputProps;
      var isOpen = this.state.isOpen;


      var _inputProps = _extends({
        dataHook: inputDataHook,
        value: initialValue && (0, _LocaleUtils.formatDate)(initialValue, dateFormat, locale) || '',
        onInputClicked: this.openCalendar,
        disabled: disabled,
        readOnly: readOnly,
        placeholder: placeholderText,
        prefix: _react2.default.createElement(
          'span',
          { className: _DatePicker2.default.icon },
          _react2.default.createElement(_Date2.default, null)
        ),
        onFocus: this.openCalendar,
        onKeyDown: this._handleKeyDown,
        error: error,
        errorMessage: errorMessage
      }, customInput ? customInput.props : {}, inputProps);

      return _react2.default.createElement(
        'div',
        { style: { width: width }, className: _DatePicker2.default.root },
        _react2.default.createElement(
          'div',
          { ref: function ref(_ref3) {
              return _this2.inputRef = _ref3;
            } },
          _react2.default.cloneElement(customInput || _react2.default.createElement(_Input2.default, null), _inputProps)
        ),
        _react2.default.createElement(
          'div',
          {
            ref: function ref(_ref4) {
              return _this2.calendarRef = _ref4;
            },
            'data-hook': calendarDataHook,
            className: (0, _classnames2.default)(_DatePicker2.default.calendarRoot, _defineProperty({}, _arrow2.default.root, isOpen))
          },
          isOpen && _react2.default.createElement(_DayPicker2.default, this._createDayPickerProps())
        )
      );
    }
  }]);

  return DatePicker;
}(_WixComponent3.default);

DatePicker.displayName = 'DatePicker';
DatePicker.propTypes = {
  /** Can provide Input with your custom props. If you don't need a custom input element, and only want to pass props to the Input, then use inputProps prop. I think this is not in use outside of WSR, and can be deprecated. */
  customInput: _propTypes2.default.node,

  /** Properties appended to the default Input component or the custom Input component. */
  inputProps: _propTypes2.default.object,

  /** Custom date format */
  dateFormat: _propTypes2.default.string,

  /** DatePicker instance locale */
  locale: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['en', 'es', 'pt', 'fr', 'de', 'pl', 'it', 'ru', 'ja', 'ko', 'tr', 'sv', 'no', 'nl', 'da']), _propTypes2.default.shape({
    distanceInWords: _propTypes2.default.object,
    format: _propTypes2.default.object
  })]),

  /** Is the DatePicker disabled */
  disabled: _propTypes2.default.bool,

  /** Past dates are unselectable */
  excludePastDates: _propTypes2.default.bool,

  /** Only the truthy dates are selectable */
  filterDate: _propTypes2.default.func,

  /** dataHook for the DatePicker's Input */
  inputDataHook: _propTypes2.default.string,

  /** calendarDataHook for the DatePicker's calendar view */
  calendarDataHook: _propTypes2.default.string,

  /** Called upon every value change */
  onChange: _propTypes2.default.func.isRequired,

  /** placeholder of the Input */
  placeholderText: _propTypes2.default.string,

  /** RTL mode */
  rtl: _propTypes2.default.bool,

  /** Display a selectable yearDropdown */
  showYearDropdown: _propTypes2.default.bool,

  /** Display a selectable monthDropdown */
  showMonthDropdown: _propTypes2.default.bool,

  /** The selected date */
  value: _propTypes2.default.object,

  /** should the calendar close on day selection */
  shouldCloseOnSelect: _propTypes2.default.bool,

  /** controls the whether the calendar will be visible or not */
  isOpen: _propTypes2.default.bool,

  /** will show exclamation icon when true **/
  error: _propTypes2.default.bool,

  /** will display message when hovering error icon **/
  errorMessage: _propTypes2.default.node,

  /** set desired width of DatePicker input */
  width: _propTypes2.default.number
};
DatePicker.defaultProps = {
  locale: 'en',
  dateFormat: 'MM/DD/YYYY',
  filterDate: function filterDate() {
    return true;
  },
  shouldCloseOnSelect: true,
  rtl: false,
  width: 150
};
exports.default = DatePicker;