'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _DropdownLayout = require('../../DropdownLayout');

var _DropdownLayout2 = _interopRequireDefault(_DropdownLayout);

var _Text = require('../../Text');

var _Text2 = _interopRequireDefault(_Text);

var _ChevronDown = require('../../new-icons/ChevronDown');

var _ChevronDown2 = _interopRequireDefault(_ChevronDown);

var _styles = require('./styles.scss');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DropdownPicker = function (_React$Component) {
  _inherits(DropdownPicker, _React$Component);

  function DropdownPicker(props) {
    _classCallCheck(this, DropdownPicker);

    var _this = _possibleConstructorReturn(this, (DropdownPicker.__proto__ || Object.getPrototypeOf(DropdownPicker)).call(this, props));

    _this.onClose = function () {
      return _this.setState({
        isOpen: false
      });
    };

    _this.onSelect = function (data) {
      _this.props.onChange(data);
      _this.onClose();
    };

    _this.toggleDropdown = function () {
      return _this.setState({
        isOpen: !_this.state.isOpen
      });
    };

    _this.state = {
      isOpen: false
    };
    return _this;
  }

  _createClass(DropdownPicker, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          caption = _props.caption,
          options = _props.options,
          dataHook = _props.dataHook,
          selectedId = _props.selectedId;
      var isOpen = this.state.isOpen;


      return _react2.default.createElement(
        'div',
        {
          'data-hook': dataHook,
          className: _styles2.default.root
        },
        _react2.default.createElement(
          'div',
          {
            className: _styles2.default.button,
            onClick: this.toggleDropdown
          },
          _react2.default.createElement(
            _Text2.default,
            { light: true, dataHook: dataHook + '-button' },
            caption
          ),
          _react2.default.createElement(
            'div',
            { className: _styles2.default.icon },
            _react2.default.createElement(_ChevronDown2.default, null)
          )
        ),
        isOpen && _react2.default.createElement(
          'div',
          { className: _styles2.default.dropdown },
          _react2.default.createElement(_DropdownLayout2.default, {
            dataHook: dataHook + '-menu',
            focusOnSelectedOption: true,
            visible: isOpen,
            options: options,
            onSelect: this.onSelect,
            onClickOutside: this.onClose,
            closeOnSelect: true,
            selectedId: selectedId
          })
        )
      );
    }
  }]);

  return DropdownPicker;
}(_react2.default.Component);

DropdownPicker.propTypes = {
  dataHook: _propTypes2.default.string,
  caption: _propTypes2.default.node,
  options: _propTypes2.default.array,
  onChange: _propTypes2.default.func,
  selectedId: _propTypes2.default.number
};
exports.default = DropdownPicker;