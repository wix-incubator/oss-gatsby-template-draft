'use strict';

var _eyes = require('eyes.it');

var _eyes2 = _interopRequireDefault(_eyes);

var _AutoExampleDriver = require('wix-storybook-utils/AutoExampleDriver');

var _AutoExampleDriver2 = _interopRequireDefault(_AutoExampleDriver);

var _protractor = require('../../testkit/protractor');

var _protractor2 = require('wix-ui-test-utils/protractor');

var _storybookHelpers = require('../../test/utils/storybook-helpers');

var _storySettings = require('../../stories/Dropdown/storySettings');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('Dropdown', function () {
  var autoExampleUrl = (0, _storybookHelpers.createStoryUrl)({ kind: _storySettings.storySettings.kind, story: _storySettings.storySettings.storyName, withExamples: false });

  _eyes2.default.it('should choose different dropdown items', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var storyUrl, dataHook, driver;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            storyUrl = (0, _storybookHelpers.createStoryUrl)({ kind: _storySettings.storySettings.kind, story: _storySettings.storySettings.storyName });
            dataHook = 'story-dropdown-controlled';
            driver = (0, _protractor.dropdownTestkitFactory)({ dataHook: dataHook });
            _context.next = 5;
            return browser.get(storyUrl);

          case 5:
            _context.next = 7;
            return (0, _protractor2.waitForVisibilityOf)(driver.element(), 'Cannot find Dropdown');

          case 7:
            _context.t0 = expect;
            _context.next = 10;
            return driver.getInput().getAttribute('value');

          case 10:
            _context.t1 = _context.sent;
            (0, _context.t0)(_context.t1).toBe('');
            _context.next = 14;
            return driver.click();

          case 14:
            _context.next = 16;
            return driver.getDropdownItem(1).click();

          case 16:
            _context.t2 = expect;
            _context.next = 19;
            return driver.getInput().getAttribute('value');

          case 19:
            _context.t3 = _context.sent;
            (0, _context.t2)(_context.t3).toBe('Option 2');
            _context.next = 23;
            return driver.click();

          case 23:
            _context.next = 25;
            return driver.getDropdownItem(2).click();

          case 25:
            _context.t4 = expect;
            _context.next = 28;
            return driver.getInput().getAttribute('value');

          case 28:
            _context.t5 = _context.sent;
            (0, _context.t4)(_context.t5).toBe('Option 3');
            _context.next = 32;
            return driver.click();

          case 32:
            _context.next = 34;
            return driver.getDropdownItem(3).click();

          case 34:
            _context.t6 = expect;
            _context.next = 37;
            return driver.getInput().getAttribute('value');

          case 37:
            _context.t7 = _context.sent;
            (0, _context.t6)(_context.t7).toBe('Option 3');

          case 39:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));

  _eyes2.default.it('should display focused and with options shown', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var dataHook, driver;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            dataHook = 'story-dropdown';
            _context2.next = 3;
            return browser.get(autoExampleUrl);

          case 3:
            driver = (0, _protractor.dropdownTestkitFactory)({ dataHook: dataHook });
            _context2.next = 6;
            return (0, _protractor2.waitForVisibilityOf)(driver.element(), 'Cannot find Dropdown');

          case 6:
            _context2.t0 = expect;
            _context2.next = 9;
            return driver.isOptionsShown();

          case 9:
            _context2.t1 = _context2.sent;
            (0, _context2.t0)(_context2.t1).toBeFalsy();
            _context2.next = 13;
            return driver.getInput().click();

          case 13:
            _context2.t2 = expect;
            _context2.next = 16;
            return driver.isOptionsShown().isDisplayed();

          case 16:
            _context2.t3 = _context2.sent;
            (0, _context2.t2)(_context2.t3).toBeTruthy();

          case 18:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));

  _eyes2.default.it('should display options with divider', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
    var dataHook, driver;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            dataHook = 'story-dropdown';
            _context3.next = 3;
            return browser.get(autoExampleUrl);

          case 3:
            _context3.next = 5;
            return _AutoExampleDriver2.default.setProps({ options: [{ id: 1, value: 'op 1' }, { id: -99, value: '-' }, { id: 2, value: 'op 2' }] });

          case 5:
            driver = (0, _protractor.dropdownTestkitFactory)({ dataHook: dataHook });
            _context3.next = 8;
            return (0, _protractor2.waitForVisibilityOf)(driver.element(), 'Cannot find Dropdown');

          case 8:
            _context3.t0 = expect;
            _context3.next = 11;
            return driver.isOptionsShown();

          case 11:
            _context3.t1 = _context3.sent;
            (0, _context3.t0)(_context3.t1).toBeFalsy();
            _context3.next = 15;
            return driver.getInput().click();

          case 15:
            _context3.t2 = expect;
            _context3.next = 18;
            return driver.isOptionsShown().isDisplayed();

          case 18:
            _context3.t3 = _context3.sent;
            (0, _context3.t2)(_context3.t3).toBeTruthy();

          case 20:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  })));
});