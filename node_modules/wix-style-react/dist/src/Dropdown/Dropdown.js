'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _isUndefined = require('lodash/isUndefined');

var _isUndefined2 = _interopRequireDefault(_isUndefined);

var _InputWithOptions2 = require('../InputWithOptions/InputWithOptions');

var _InputWithOptions3 = _interopRequireDefault(_InputWithOptions2);

var _Dropdown = require('./Dropdown.scss');

var _Dropdown2 = _interopRequireDefault(_Dropdown);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Dropdown = function (_InputWithOptions) {
  _inherits(Dropdown, _InputWithOptions);

  function Dropdown(props) {
    _classCallCheck(this, Dropdown);

    var _this = _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).call(this, props));

    _this.update(props, { isFirstTime: true });
    return _this;
  }

  _createClass(Dropdown, [{
    key: '_onInputClicked',
    value: function _onInputClicked(event) {
      if (this.state.showOptions && Date.now() - this.state.lastOptionsShow > 200) {
        this.hideOptions();
      } else {
        this.showOptions();
      }

      if (this.props.onInputClicked) {
        this.props.onInputClicked(event);
      }
    }
  }, {
    key: 'update',
    value: function update(props, _ref) {
      var isFirstTime = _ref.isFirstTime;

      var value = '',
          selectedId = -1;
      if (!(0, _isUndefined2.default)(props.selectedId)) {
        var option = props.options.find(function (option) {
          return option.id === props.selectedId;
        });

        if (option) {
          value = props.valueParser(option);
          selectedId = option.id;
        }
      }

      if (isFirstTime) {
        this.state = { value: value, selectedId: selectedId };
      } else {
        this.setState({ value: value, selectedId: selectedId });
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.update(nextProps, { isFirstTime: false });
    }
  }, {
    key: 'inputClasses',
    value: function inputClasses() {
      var classes = _defineProperty({}, _Dropdown2.default.readonly, true);
      classes[_Dropdown2.default.noBorder] = this.props.noBorder;
      return (0, _classnames2.default)(classes);
    }
  }, {
    key: 'dropdownAdditionalProps',
    value: function dropdownAdditionalProps() {
      return {
        selectedId: this.state.selectedId,
        value: this.state.value,
        tabIndex: -1
      };
    }
  }, {
    key: 'inputAdditionalProps',
    value: function inputAdditionalProps() {
      return { readOnly: true, value: this.state.value };
    }
  }, {
    key: '_onSelect',
    value: function _onSelect(option) {
      this.setState({ value: this.props.valueParser(option), selectedId: option.id });
      _get(Dropdown.prototype.__proto__ || Object.getPrototypeOf(Dropdown.prototype), '_onSelect', this).call(this, option);
    }
  }, {
    key: '_onFocus',
    value: function _onFocus() {
      if (this.props.disabled) {
        return;
      }
      this._focused = true;
      this.setState({ isEditing: false });
      if (this.props.onFocus) {
        this.props.onFocus();
      }
    }
  }]);

  return Dropdown;
}(_InputWithOptions3.default);

Dropdown.propTypes = _InputWithOptions3.default.propTypes;
Dropdown.defaultProps = _InputWithOptions3.default.defaultProps;
Dropdown.displayName = 'Dropdown';

exports.default = Dropdown;