'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _testUtils = require('react-dom/test-utils');

var _testUtils2 = _interopRequireDefault(_testUtils);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _DropdownLayout = require('./DropdownLayout.scss');

var _DropdownLayout2 = _interopRequireDefault(_DropdownLayout);

var _values = require('lodash/values');

var _values2 = _interopRequireDefault(_values);

var _utils = require('../../test/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var dropdownLayoutDriverFactory = function dropdownLayoutDriverFactory(_ref) {
  var element = _ref.element,
      wrapper = _ref.wrapper,
      component = _ref.component;

  var contentContainer = element.childNodes[0];
  var options = element.querySelector('[data-hook=dropdown-layout-options]');
  var optionAt = function optionAt(position) {
    return options.childNodes[position];
  };
  var _optionsLength = function _optionsLength() {
    return options.childNodes.length;
  };
  var doIfOptionExists = function doIfOptionExists(position, onSuccess) {
    if (_optionsLength() <= position) {
      throw 'index out of bounds, try to get option ' + position + ' while only ' + _optionsLength() + ' options exists';
    }
    return onSuccess();
  };

  return {
    exists: function exists() {
      return !!element;
    },
    isShown: function isShown() {
      return (0, _utils.isClassExists)(contentContainer, 'shown');
    },
    isDown: function isDown() {
      return (0, _utils.isClassExists)(contentContainer, 'down');
    },
    isUp: function isUp() {
      return (0, _utils.isClassExists)(contentContainer, 'up');
    },
    hasTheme: function hasTheme(theme) {
      return (0, _utils.isClassExists)(element, 'theme-' + theme);
    },
    tabIndex: function tabIndex() {
      return element.tabIndex;
    },
    optionsLength: function optionsLength() {
      return _optionsLength();
    },
    optionsScrollTop: function optionsScrollTop() {
      return options.scrollTop;
    },
    mouseEnterAtOption: function mouseEnterAtOption(position) {
      return doIfOptionExists(position, function () {
        return _testUtils2.default.Simulate.mouseEnter(optionAt(position));
      });
    },
    mouseLeaveAtOption: function mouseLeaveAtOption(position) {
      return doIfOptionExists(position, function () {
        return _testUtils2.default.Simulate.mouseLeave(optionAt(position));
      });
    },
    mouseClickOutside: function mouseClickOutside() {
      return document.body.dispatchEvent(new Event('mouseup', { cancelable: true }));
    },
    isOptionExists: function isOptionExists(optionText) {
      return [].filter.call(options.childNodes, function (opt) {
        return opt.textContent === optionText;
      }).length > 0;
    },
    isOptionHovered: function isOptionHovered(position) {
      return doIfOptionExists(position, function () {
        return (0, _utils.isClassExists)(optionAt(position), 'hovered');
      });
    },
    isOptionSelected: function isOptionSelected(position) {
      return doIfOptionExists(position, function () {
        return (0, _utils.isClassExists)(optionAt(position), 'selected');
      });
    },
    isOptionHoveredWithGlobalClassName: function isOptionHoveredWithGlobalClassName(position) {
      return doIfOptionExists(position, function () {
        return (0, _utils.isClassExists)(optionAt(position), 'wixstylereactHovered');
      });
    },
    isOptionSelectedWithGlobalClassName: function isOptionSelectedWithGlobalClassName(position) {
      return doIfOptionExists(position, function () {
        return (0, _utils.isClassExists)(optionAt(position), 'wixstylereactSelected');
      });
    },
    isOptionHeightSmall: function isOptionHeightSmall(position) {
      return doIfOptionExists(position, function () {
        return (0, _utils.isClassExists)(optionAt(position), 'smallHeight');
      });
    },
    isOptionHeightBig: function isOptionHeightBig(position) {
      return doIfOptionExists(position, function () {
        return (0, _utils.isClassExists)(optionAt(position), 'bigHeight');
      });
    },
    isLinkOption: function isLinkOption(position) {
      return optionAt(position).tagName.toLowerCase() === 'a';
    },
    classes: function classes() {
      return options.className;
    },
    pressDownKey: function pressDownKey() {
      return _testUtils2.default.Simulate.keyDown(element, { key: 'ArrowDown' });
    },
    pressUpKey: function pressUpKey() {
      return _testUtils2.default.Simulate.keyDown(element, { key: 'ArrowUp' });
    },
    pressEnterKey: function pressEnterKey() {
      return _testUtils2.default.Simulate.keyDown(element, { key: 'Enter' });
    },
    pressSpaceKey: function pressSpaceKey() {
      return _testUtils2.default.Simulate.keyDown(element, { key: ' ' });
    },
    pressTabKey: function pressTabKey() {
      return _testUtils2.default.Simulate.keyDown(element, { key: 'Tab' });
    },
    pressEscKey: function pressEscKey() {
      return _testUtils2.default.Simulate.keyDown(element, { key: 'Escape' });
    },
    optionContentAt: function optionContentAt(position) {
      return doIfOptionExists(position, function () {
        return optionAt(position).textContent;
      });
    },
    optionAt: optionAt,
    optionsContent: function optionsContent() {
      return (0, _values2.default)(options.childNodes).map(function (option) {
        return option.textContent;
      });
    },
    clickAtOption: function clickAtOption(position) {
      return doIfOptionExists(position, function () {
        return _testUtils2.default.Simulate.mouseDown(optionAt(position));
      });
    },
    clickAtOptionWithValue: function clickAtOptionWithValue(value) {
      var option = (0, _values2.default)(options.childNodes).find(function (option) {
        return option.innerHTML === value;
      });
      option && _testUtils2.default.Simulate.mouseDown(option);
    },
    isOptionADivider: function isOptionADivider(position) {
      return doIfOptionExists(position, function () {
        return (0, _utils.isClassExists)(optionAt(position), 'divider');
      });
    },
    mouseEnter: function mouseEnter() {
      return _testUtils2.default.Simulate.mouseEnter(element);
    },
    mouseLeave: function mouseLeave() {
      return _testUtils2.default.Simulate.mouseLeave(element);
    },
    setProps: function setProps(props) {
      var ClonedWithProps = _react2.default.cloneElement.apply(_react2.default, [component, Object.assign({}, component.props, props)].concat(_toConsumableArray(component.props.children || [])));
      _reactDom2.default.render(_react2.default.createElement(
        'div',
        { ref: function ref(r) {
            return element = r;
          } },
        ClonedWithProps
      ), wrapper);
    },
    hasTopArrow: function hasTopArrow() {
      return !!element.querySelector('.' + _DropdownLayout2.default.arrow);
    },
    isSelectedHighlight: function isSelectedHighlight() {
      return component.props.selectedHighlight;
    },
    optionById: function optionById(optionId) {
      return this.optionByHook('dropdown-item-' + optionId);
    },

    optionByHook: function optionByHook(hook) {
      var option = options.querySelector('[data-hook=' + hook + ']');
      if (!option) {
        throw 'an option with data-hook ' + hook + ' was not found';
      }
      return {
        element: function element() {
          return option;
        },
        mouseEnter: function mouseEnter() {
          return _testUtils2.default.Simulate.mouseEnter(option);
        },
        mouseLeave: function mouseLeave() {
          return _testUtils2.default.Simulate.mouseLeave(option);
        },
        isHovered: function isHovered() {
          return (0, _utils.isClassExists)(option, 'hovered');
        },
        isSelected: function isSelected() {
          return (0, _utils.isClassExists)(option, 'selected');
        },
        isHoveredWithGlobalClassName: function isHoveredWithGlobalClassName() {
          return (0, _utils.isClassExists)(option, 'wixstylereactHovered');
        },
        isSelectedWithGlobalClassName: function isSelectedWithGlobalClassName() {
          return (0, _utils.isClassExists)(option, 'wixstylereactSelected');
        },
        content: function content() {
          return option.textContent;
        },
        click: function click() {
          return _testUtils2.default.Simulate.mouseDown(option);
        },
        isDivider: function isDivider() {
          return (0, _utils.isClassExists)(option, 'divider');
        }
      };
    }
  };
};

exports.default = dropdownLayoutDriverFactory;