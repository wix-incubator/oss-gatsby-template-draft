'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _Input = require('../../Input/Input.driver');

var _Input2 = _interopRequireDefault(_Input);

var _Button = require('../../Backoffice/Button/Button.driver');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var editableRowDriverFactory = function editableRowDriverFactory(_ref) {
  var element = _ref.element,
      wrapper = _ref.wrapper,
      component = _ref.component;

  var inputDriver = (0, _Input2.default)({ element: element.querySelector('[data-hook="edit-row-input"]'), wrapper: element });
  var approveBtnDriver = (0, _Button2.default)({ element: element.querySelector('[data-hook="edit-row-approve-button"]'), wrapper: element });
  var cancelBtnDriver = (0, _Button2.default)({ element: element.querySelector('[data-hook="edit-row-cancel-button"]'), wrapper: element });

  return {
    exists: function exists() {
      return !!element;
    },
    isInputFocused: function isInputFocused() {
      return inputDriver.isFocus();
    },
    clickApprove: function clickApprove() {
      return approveBtnDriver.click();
    },
    isApproveDisabled: function isApproveDisabled() {
      return approveBtnDriver.isButtonDisabled();
    },
    clickCancel: function clickCancel() {
      return cancelBtnDriver.click();
    },
    getText: function getText() {
      return inputDriver.getValue();
    },
    setText: function setText(text) {
      return inputDriver.enterText(text);
    },
    keyDown: function keyDown(keyCode) {
      return inputDriver.trigger('keyDown', { keyCode: keyCode });
    },
    setProps: function setProps(props) {
      var ClonedWithProps = _react2.default.cloneElement.apply(_react2.default, [component, Object.assign({}, component.props, props)].concat(_toConsumableArray(component.props.children || [])));
      _reactDom2.default.render(_react2.default.createElement(
        'div',
        { ref: function ref(r) {
            return element = r;
          } },
        ClonedWithProps
      ), wrapper);
    }
  };
};

exports.default = editableRowDriverFactory;