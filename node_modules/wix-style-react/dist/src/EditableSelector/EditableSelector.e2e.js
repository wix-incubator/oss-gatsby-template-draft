'use strict';

var _eyes = require('eyes.it');

var _eyes2 = _interopRequireDefault(_eyes);

var _protractor = require('../../testkit/protractor');

var _protractor2 = require('wix-ui-test-utils/protractor');

var _storybookHelpers = require('../../test/utils/storybook-helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('EditableSelector', function () {
  var storyUrl = (0, _storybookHelpers.getStoryUrl)('11. Pickers and Selectors', '11.2 EditableSelector');
  var dataHook = 'story-editable-selector';
  var driver = void 0;

  beforeEach(function () {
    driver = (0, _protractor.editableSelectorTestkitFactory)({ dataHook: dataHook });
    return browser.get(storyUrl);
  });

  _eyes2.default.it('should render a title', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _protractor2.waitForVisibilityOf)(driver.element(), 'Cannot find EditableSelector').then(function () {
              expect(driver.title().getText()).toBe('Type of Seeds');
            });

          case 2:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));

  _eyes2.default.it('should create a new option', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return (0, _protractor2.waitForVisibilityOf)(driver.element(), 'Cannot find EditableSelector').then(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
              var newOption;
              return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      newOption = 'Shir';
                      _context2.next = 3;
                      return driver.createNewRow(newOption);

                    case 3:
                      _context2.next = 5;
                      return driver.clickApprove();

                    case 5:
                      _context2.t0 = expect;
                      _context2.next = 8;
                      return driver.item(2).getText();

                    case 8:
                      _context2.t1 = _context2.sent;
                      _context2.t2 = newOption;
                      (0, _context2.t0)(_context2.t1).toBe(_context2.t2);

                    case 11:
                    case 'end':
                      return _context2.stop();
                  }
                }
              }, _callee2, undefined);
            })));

          case 2:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  })));

  // No eyes: I don't think eyes is needed here. It fails for unknown reason.
  // The snapshot used to include the edit button (which is visible on hover only)
  // And it started breaking (no edit button in snapshot). So we decided to disable eyes here.
  it('should not modify an option when edit is cancelled', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return (0, _protractor2.waitForVisibilityOf)(driver.element(), 'Cannot find EditableSelector').then(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
              var newOption;
              return regeneratorRuntime.wrap(function _callee4$(_context4) {
                while (1) {
                  switch (_context4.prev = _context4.next) {
                    case 0:
                      newOption = 'Shir';
                      _context4.next = 3;
                      return driver.editRow(1, newOption);

                    case 3:
                      _context4.next = 5;
                      return driver.clickCancel();

                    case 5:
                      _context4.t0 = expect;
                      _context4.next = 8;
                      return driver.item(1).getText();

                    case 8:
                      _context4.t1 = _context4.sent;
                      _context4.t2 = newOption;
                      (0, _context4.t0)(_context4.t1).not.toBe(_context4.t2);

                    case 11:
                    case 'end':
                      return _context4.stop();
                  }
                }
              }, _callee4, undefined);
            })));

          case 2:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  })));

  _eyes2.default.it('should save an option when edit is approved', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return (0, _protractor2.waitForVisibilityOf)(driver.element(), 'Cannot find EditableSelector').then(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
              var newOption;
              return regeneratorRuntime.wrap(function _callee6$(_context6) {
                while (1) {
                  switch (_context6.prev = _context6.next) {
                    case 0:
                      newOption = 'Shir';
                      _context6.next = 3;
                      return driver.editRow(1, newOption);

                    case 3:
                      _context6.next = 5;
                      return driver.clickApprove();

                    case 5:
                      _context6.t0 = expect;
                      _context6.next = 8;
                      return driver.item(1).getText();

                    case 8:
                      _context6.t1 = _context6.sent;
                      _context6.t2 = newOption;
                      (0, _context6.t0)(_context6.t1).toBe(_context6.t2);

                    case 11:
                    case 'end':
                      return _context6.stop();
                  }
                }
              }, _callee6, undefined);
            })));

          case 2:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, undefined);
  })));

  _eyes2.default.it('should select an option when clicked', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
    return regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return (0, _protractor2.waitForVisibilityOf)(driver.element(), 'Cannot find EditableSelector').then(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
              return regeneratorRuntime.wrap(function _callee8$(_context8) {
                while (1) {
                  switch (_context8.prev = _context8.next) {
                    case 0:
                      _context8.next = 2;
                      return driver.toggleItem(0);

                    case 2:
                      _context8.t0 = expect;
                      _context8.next = 5;
                      return driver.isSelected(0);

                    case 5:
                      _context8.t1 = _context8.sent;
                      (0, _context8.t0)(_context8.t1).toBe(true);

                    case 7:
                    case 'end':
                      return _context8.stop();
                  }
                }
              }, _callee8, undefined);
            })));

          case 2:
          case 'end':
            return _context9.stop();
        }
      }
    }, _callee9, undefined);
  })));

  _eyes2.default.it('should delete an option', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
    return regeneratorRuntime.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return (0, _protractor2.waitForVisibilityOf)(driver.element(), 'Cannot find EditableSelector').then(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
              return regeneratorRuntime.wrap(function _callee10$(_context10) {
                while (1) {
                  switch (_context10.prev = _context10.next) {
                    case 0:
                      _context10.next = 2;
                      return driver.deleteRow(1);

                    case 2:
                      _context10.next = 4;
                      return expect(driver.items().count()).toBe(1);

                    case 4:
                    case 'end':
                      return _context10.stop();
                  }
                }
              }, _callee10, undefined);
            })));

          case 2:
          case 'end':
            return _context11.stop();
        }
      }
    }, _callee11, undefined);
  })));
});