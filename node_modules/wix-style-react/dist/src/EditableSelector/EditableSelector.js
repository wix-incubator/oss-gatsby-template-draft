'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _WixComponent2 = require('../BaseComponents/WixComponent');

var _WixComponent3 = _interopRequireDefault(_WixComponent2);

var _Selector = require('../Selector');

var _Selector2 = _interopRequireDefault(_Selector);

var _Text = require('../Text');

var _Text2 = _interopRequireDefault(_Text);

var _ButtonWithOptions = require('../ButtonWithOptions/ButtonWithOptions');

var _ButtonWithOptions2 = _interopRequireDefault(_ButtonWithOptions);

var _EditableRow = require('./EditableRow/EditableRow');

var _EditableRow2 = _interopRequireDefault(_EditableRow);

var _EditableSelector = require('./EditableSelector.scss');

var _EditableSelector2 = _interopRequireDefault(_EditableSelector);

var _Add = require('../new-icons/Add');

var _Add2 = _interopRequireDefault(_Add);

var _Delete = require('../new-icons/Delete');

var _Delete2 = _interopRequireDefault(_Delete);

var _TextLink = require('../TextLink');

var _TextLink2 = _interopRequireDefault(_TextLink);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EditableSelector = function (_WixComponent) {
  _inherits(EditableSelector, _WixComponent);

  function EditableSelector() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, EditableSelector);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = EditableSelector.__proto__ || Object.getPrototypeOf(EditableSelector)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      addingNewRow: false,
      editingRow: null
    }, _this.addNewRow = function () {
      _this.setState({ addingNewRow: true, editingRow: false });
    }, _this.editItem = function (index) {
      _this.setState({ editingRow: index, addingNewRow: false });
    }, _this.deleteItem = function (index) {
      _this.props.onOptionDelete && _this.props.onOptionDelete({ index: index });
    }, _this.onNewOptionApprove = function (_ref2) {
      var newTitle = _ref2.newTitle,
          index = _ref2.index;

      if (_this.state.addingNewRow) {
        _this.props.onOptionAdded && _this.props.onOptionAdded({ newTitle: newTitle });
      } else {
        _this.props.onOptionEdit && _this.props.onOptionEdit({ newTitle: newTitle, index: index });
      }
      _this.setState({
        addingNewRow: false,
        editingRow: null
      });
    }, _this.onNewOptionCancel = function () {
      _this.setState({
        addingNewRow: false,
        editingRow: null
      });
    }, _this.onOptionToggle = function (id) {
      _this.props.onOptionToggle && _this.props.onOptionToggle(id);
    }, _this.renderInput = function (title, index) {
      return _react2.default.createElement(_EditableRow2.default, {
        key: index,
        dataHook: 'edit-row-wrapper',
        onApprove: function onApprove(newTitle) {
          return _this.onNewOptionApprove({ newTitle: newTitle, index: index });
        },
        onCancel: function onCancel() {
          return _this.onNewOptionCancel();
        },
        newOption: title
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(EditableSelector, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          title = _props.title,
          newRowLabel = _props.newRowLabel,
          editButtonText = _props.editButtonText,
          toggleType = _props.toggleType;
      var options = this.props.options;

      options = options || [];
      return _react2.default.createElement(
        'div',
        null,
        title && _react2.default.createElement(
          'div',
          { className: _EditableSelector2.default.title, 'data-hook': 'editable-selector-title' },
          _react2.default.createElement(
            _Text2.default,
            { weight: 'normal' },
            title
          )
        ),
        _react2.default.createElement(
          'div',
          null,
          options.map(function (option, index) {
            return _this2.state.editingRow === index ? _this2.renderInput(option.title, index) : _react2.default.createElement(
              'div',
              { 'data-hook': 'editable-selector-row', className: _EditableSelector2.default.row, key: index },
              _react2.default.createElement(_Selector2.default, {
                dataHook: 'editable-selector-item',
                id: index,
                title: option.title,
                isSelected: option.isSelected,
                toggleType: toggleType,
                onToggle: function onToggle(id) {
                  return _this2.onOptionToggle(id);
                }
              }),
              _react2.default.createElement(
                'div',
                { className: _EditableSelector2.default.optionMenu },
                _react2.default.createElement(
                  _ButtonWithOptions2.default.Button,
                  { onClick: function onClick() {
                      return _this2.deleteItem(index);
                    }, dataHook: 'delete-item', type: 'button', height: 'small', theme: 'icon-greybackground' },
                  _react2.default.createElement(_Delete2.default, null)
                ),
                _react2.default.createElement(
                  'div',
                  { className: _EditableSelector2.default.editRow },
                  _react2.default.createElement(
                    _ButtonWithOptions2.default.Button,
                    {
                      onClick: function onClick() {
                        return _this2.editItem(index);
                      },
                      dataHook: 'edit-item',
                      height: 'small',
                      theme: 'fullblue'
                    },
                    editButtonText
                  )
                )
              )
            );
          })
        ),
        this.state.addingNewRow && this.renderInput(),
        _react2.default.createElement(
          'div',
          { className: _EditableSelector2.default.newRowButton },
          _react2.default.createElement(
            _TextLink2.default,
            { underlineStyle: 'never', onClick: function onClick() {
                return _this2.addNewRow();
              }, dataHook: 'new-row-button' },
            _react2.default.createElement(
              'span',
              { className: _EditableSelector2.default.textLinkWithPrefix },
              _react2.default.createElement(_Add2.default, { className: _EditableSelector2.default.icon }),
              _react2.default.createElement(
                'span',
                { className: _EditableSelector2.default.text, 'data-hook': 'new-row-button-text' },
                newRowLabel
              )
            )
          )
        )
      );
    }
  }]);

  return EditableSelector;
}(_WixComponent3.default);

EditableSelector.propTypes = {
  title: _propTypes2.default.string,
  toggleType: _propTypes2.default.oneOf(['checkbox', 'radio']),
  newRowLabel: _propTypes2.default.string,
  editButtonText: _propTypes2.default.string,
  onOptionAdded: _propTypes2.default.func,
  onOptionEdit: _propTypes2.default.func,
  onOptionDelete: _propTypes2.default.func,
  onOptionToggle: _propTypes2.default.func,
  options: _propTypes2.default.array
};
EditableSelector.defaultProps = {
  toggleType: 'checkbox',
  newRowLabel: 'New Row',
  editButtonText: 'Edit'
};


EditableSelector.displayName = 'EditableSelector';

exports.default = EditableSelector;