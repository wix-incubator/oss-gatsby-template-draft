'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var getOptions = function getOptions(component) {
  return component.$$('[data-hook="editable-selector-item"]');
};
var getOption = function getOption(component, index) {
  return getOptions(component).get(index);
};
var getRow = function getRow(component, index) {
  return component.$$('[data-hook="editable-selector-row"]').get(index);
};
var hover = function hover(element) {
  return browser.actions().mouseMove(element).perform();
};
var enterText = function enterText(component, text) {
  return component.$('[data-hook="edit-row-wrapper"] input').clear().sendKeys(text);
};

var editableSelectorDriverFactory = function editableSelectorDriverFactory(component) {
  return {
    title: function title() {
      return component.$('[data-hook="editable-selector-title"]').getText();
    },
    createNewRow: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(text) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return component.$('[data-hook="new-row-button"]').click();

              case 2:
                _context.next = 4;
                return enterText(component, text);

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, undefined);
      }));

      return function createNewRow(_x) {
        return _ref.apply(this, arguments);
      };
    }(),
    clickApprove: function clickApprove() {
      return component.$('[data-hook="edit-row-approve-button"]').click();
    },
    item: function item(index) {
      return getOption(component, index);
    },
    editRow: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(index, text) {
        var row;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                row = getRow(component, index);
                _context2.next = 3;
                return hover(row);

              case 3:
                _context2.next = 5;
                return row.$('[data-hook="edit-item"]').click();

              case 5:
                _context2.next = 7;
                return enterText(component, text);

              case 7:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, undefined);
      }));

      return function editRow(_x2, _x3) {
        return _ref2.apply(this, arguments);
      };
    }(),
    clickCancel: function clickCancel() {
      return component.$('[data-hook="edit-row-cancel-button"]').click();
    },
    deleteRow: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(index) {
        var row;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                row = getRow(component, index);
                _context3.next = 3;
                return hover(row);

              case 3:
                _context3.next = 5;
                return row.$('[data-hook="delete-item"]').click();

              case 5:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, undefined);
      }));

      return function deleteRow(_x4) {
        return _ref3.apply(this, arguments);
      };
    }(),
    items: function items() {
      return getOptions(component);
    },
    toggleItem: function toggleItem(index) {
      return getOption(component, index).click();
    },
    isSelected: function isSelected(index) {
      return getOption(component, index).$('input').isSelected();
    },
    element: function element() {
      return component;
    }
  };
};

exports.default = editableSelectorDriverFactory;