'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var filePickerDriverFactory = function filePickerDriverFactory(_ref) {
  var element = _ref.element,
      wrapper = _ref.wrapper,
      component = _ref.component;

  var error = element.querySelector('[data-hook=filePicker-error]');
  var input = element.querySelector('input');
  var subLabel = element.querySelector('[data-hook="sub-label"]');
  var mainLabel = element.querySelector('[data-hook="main-label"]');

  return {
    exists: function exists() {
      return !!element;
    },
    hasError: function hasError() {
      return !!error;
    },
    errorMessage: function errorMessage() {
      return error.textContent;
    },
    getInput: function getInput() {
      return input.textContent;
    },
    getSubLabel: function getSubLabel() {
      return subLabel.textContent;
    },
    getMainLabel: function getMainLabel() {
      return mainLabel.textContent;
    },
    setProps: function setProps(props) {
      var ClonedWithProps = _react2.default.cloneElement.apply(_react2.default, [component, Object.assign({}, component.props, props)].concat(_toConsumableArray(component.props.children || [])));
      _reactDom2.default.render(_react2.default.createElement(
        'div',
        { ref: function ref(r) {
            return element = r;
          } },
        ClonedWithProps
      ), wrapper);
    }
  };
};

exports.default = filePickerDriverFactory;