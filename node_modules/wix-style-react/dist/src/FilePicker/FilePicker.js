'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _FilePicker = require('./FilePicker.scss');

var _FilePicker2 = _interopRequireDefault(_FilePicker);

var _WixComponent2 = require('../BaseComponents/WixComponent');

var _WixComponent3 = _interopRequireDefault(_WixComponent2);

var _Add = require('../new-icons/Add');

var _Add2 = _interopRequireDefault(_Add);

var _uniqueId = require('lodash/uniqueId');

var _uniqueId2 = _interopRequireDefault(_uniqueId);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
  * File picker component
  */
var FilePicker = function (_WixComponent) {
  _inherits(FilePicker, _WixComponent);

  function FilePicker(props) {
    _classCallCheck(this, FilePicker);

    var _this = _possibleConstructorReturn(this, (FilePicker.__proto__ || Object.getPrototypeOf(FilePicker)).call(this, props));

    _this.state = {
      selectedFileName: props.subLabel
    };
    _this.id = props.id || (0, _uniqueId2.default)('file_picker_input_');
    return _this;
  }

  _createClass(FilePicker, [{
    key: 'onChooseFile',
    value: function onChooseFile(file) {
      var _props = this.props,
          maxSize = _props.maxSize,
          onChange = _props.onChange;


      if (file) {
        onChange(file);
        if (file.size <= maxSize) {
          this.setState({ selectedFileName: file.name });
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props2 = this.props,
          header = _props2.header,
          mainLabel = _props2.mainLabel,
          supportedFormats = _props2.supportedFormats,
          error = _props2.error,
          errorMessage = _props2.errorMessage;


      return _react2.default.createElement(
        'div',
        null,
        header && _react2.default.createElement(
          'span',
          { className: _FilePicker2.default.header },
          header
        ),
        _react2.default.createElement(
          'label',
          { className: _FilePicker2.default.label, htmlFor: this.id },
          _react2.default.createElement(
            'div',
            { className: _FilePicker2.default.icon },
            _react2.default.createElement(_Add2.default, null)
          ),
          _react2.default.createElement(
            'div',
            { className: _FilePicker2.default.content },
            _react2.default.createElement(
              'span',
              { className: _FilePicker2.default.cta, 'data-hook': 'main-label' },
              mainLabel
            ),
            _react2.default.createElement(
              'span',
              { className: _FilePicker2.default.info, 'data-hook': 'sub-label' },
              this.state.selectedFileName
            ),
            error && _react2.default.createElement(
              'span',
              { className: _FilePicker2.default.error, 'data-hook': 'filePicker-error' },
              errorMessage
            )
          )
        ),
        _react2.default.createElement('input', { id: this.id, className: _FilePicker2.default.input, type: 'file', accept: supportedFormats, onChange: function onChange(e) {
            return _this2.onChooseFile(e.target.files[0]);
          } })
      );
    }
  }]);

  return FilePicker;
}(_WixComponent3.default);

FilePicker.displayName = 'FilePicker';

FilePicker.defaultProps = {
  mainLabel: 'Choose File',
  subLabel: 'No file chosen (Max size 5 MB)',
  onChange: function onChange() {},
  supportedFormats: '*',
  errorMessage: '',
  maxSize: 5000000 //5MB
};

FilePicker.propTypes = {
  /** Some text that will appear above the Icon */
  header: _propTypes2.default.string,

  /** Callback function for when a file is uploaded */
  onChange: _propTypes2.default.func,

  /** Some text that will appear as a main label besides the Icon */
  mainLabel: _propTypes2.default.string,

  /** Some text that will appear as a sub label besides the Icon   */
  subLabel: _propTypes2.default.string,

  /** supported formats seperated by comma (.png, .pdf) */
  supportedFormats: _propTypes2.default.string,

  /** Max size of file allowed */
  maxSize: _propTypes2.default.number,

  /** should present error */
  error: _propTypes2.default.bool,

  /** error message to present */
  errorMessage: _propTypes2.default.string,

  /** id for the filePicker */
  id: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
};

exports.default = FilePicker;