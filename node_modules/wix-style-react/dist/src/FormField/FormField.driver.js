'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = require('../../test/utils');

var _testkit = require('../../testkit');

var findByHook = function findByHook(element, hook) {
  return element.querySelector('[data-hook*="' + hook + '"]');
};

var getInfoIcon = function getInfoIcon(element) {
  return findByHook(element, 'formfield-infoicon');
};

var getCharactersCounter = function getCharactersCounter(element) {
  return findByHook(element, 'formfield-counter');
};

var formFieldDriver = function formFieldDriver(_ref) {
  var _element = _ref.element;
  return {
    exists: function exists() {
      return !!_element;
    },
    element: function element() {
      return _element;
    },
    getChildren: function getChildren() {
      return findByHook(_element, 'formfield-children');
    },
    getLabel: function getLabel() {
      return findByHook(_element, 'formfield-label');
    },
    isRequired: function isRequired() {
      return !!findByHook(_element, 'formfield-asterisk');
    },
    getLengthLeft: function getLengthLeft() {
      var counter = getCharactersCounter(_element);
      return counter ? parseInt(counter.innerHTML, 10) : null;
    },
    isLengthExceeded: function isLengthExceeded() {
      var counter = getCharactersCounter(_element);
      if (counter) {
        var length = parseInt(counter.innerHTML, 10);
        return length < 0;
      }
      return false;
    },
    getInfoContent: function getInfoContent() {
      var tooltipDriver = (0, _testkit.tooltipTestkitFactory)({
        wrapper: getInfoIcon(_element),
        dataHook: 'formfield-infotooltip'
      });

      tooltipDriver.mouseEnter();
      return (0, _utils.resolveIn)(500).then(function () {
        return tooltipDriver.getContent();
      });
    }
  };
};

exports.default = formFieldDriver;