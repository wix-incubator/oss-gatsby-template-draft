'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames3 = require('classnames');

var _classnames4 = _interopRequireDefault(_classnames3);

var _Label = require('wix-style-react/Label');

var _Label2 = _interopRequireDefault(_Label);

var _InfoIcon = require('./components/InfoIcon');

var _InfoIcon2 = _interopRequireDefault(_InfoIcon);

var _Typography = require('../Typography');

var _Typography2 = _interopRequireDefault(_Typography);

var _FormField = require('./FormField.scss');

var _FormField2 = _interopRequireDefault(_FormField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var asterisk = _react2.default.createElement('div', {
  'data-hook': 'formfield-asterisk',
  className: _FormField2.default.asterisk,
  children: '*'
});

var charactersLeft = function charactersLeft(lengthLeft) {
  return _react2.default.createElement('div', {
    'data-hook': 'formfield-counter',
    className: (0, _classnames4.default)(_FormField2.default.counter, _Typography2.default.t3, _defineProperty({}, _Typography2.default.t3_5, lengthLeft < 0)),
    children: lengthLeft
  });
};

var FormField = function (_React$Component) {
  _inherits(FormField, _React$Component);

  function FormField() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, FormField);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FormField.__proto__ || Object.getPrototypeOf(FormField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      lengthLeft: undefined
    }, _this.childrenRenderPropInterface = {
      setCharactersLeft: function setCharactersLeft(lengthLeft) {
        return _this.setState({ lengthLeft: lengthLeft });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(FormField, [{
    key: 'renderChildren',
    value: function renderChildren() {
      var children = this.props.children;

      if (typeof children === 'function') {
        return children(this.childrenRenderPropInterface);
      }

      return children;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          label = _props.label,
          required = _props.required,
          infoContent = _props.infoContent,
          dataHook = _props.dataHook,
          id = _props.id;
      var lengthLeft = this.state.lengthLeft;


      return _react2.default.createElement(
        'div',
        {
          'data-hook': dataHook,
          className: _FormField2.default.root
        },
        label && _react2.default.createElement(
          'div',
          {
            className: _FormField2.default.label,
            'data-hook': 'formfield-label'
          },
          _react2.default.createElement(_Label2.default, { appearance: 'T1', children: label, 'for': id }),
          required && asterisk,
          infoContent && _react2.default.createElement(_InfoIcon2.default, { content: infoContent }),
          typeof lengthLeft === 'number' && charactersLeft(lengthLeft)
        ),
        _react2.default.createElement(
          'div',
          {
            'data-hook': 'formfield-children',
            className: (0, _classnames4.default)(_FormField2.default.children, _defineProperty({}, _FormField2.default.childrenWithoutLabel, !label))
          },
          this.renderChildren()
        ),
        !label && (required || infoContent) && _react2.default.createElement(
          'div',
          {
            'data-hook': 'formfield-inline-suffixes',
            className: _FormField2.default.suffixesInline
          },
          required && asterisk,
          infoContent && _react2.default.createElement(_InfoIcon2.default, { content: infoContent })
        )
      );
    }
  }]);

  return FormField;
}(_react2.default.Component);

FormField.displayName = 'FormField';
FormField.propTypes = {
  /**
   * any kids to render, should be some form of input. Input, InputArea & RichTextArea work well
   *
   * `children` can be React node or a function
   *
   * when function, it receives object with:
   * * `setCharactersLeft` - function accepts a number and will display it on top right of `FormField` component
   *
   */
  children: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]).isRequired,

  /** optional text labeling this form field */
  label: _propTypes2.default.node,

  /** whether to display an asterisk (*) or not */
  required: _propTypes2.default.bool,

  /** display info icon with tooltip. Node from this prop is content of tooltip */
  infoContent: _propTypes2.default.node,

  /** string used to match text label with FormField children. For example:
   *
   * ```js
   * <FormField id="myFormField" label="Hello">
   *   <Input id="myFormField"/>
   * </FormField>
   * ```
   */
  id: _propTypes2.default.string,

  /** used for testing */
  dataHook: _propTypes2.default.string
};
FormField.defaultProps = {
  required: false
};
exports.default = FormField;