'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _Label = require('wix-style-react/Label');

var _Label2 = _interopRequireDefault(_Label);

var _driverFactory = require('wix-ui-test-utils/driver-factory');

var _testkitSanity = require('../../test/utils/testkit-sanity');

var _testkit = require('../../testkit');

var _enzyme2 = require('../../testkit/enzyme');

var _FormField = require('./FormField.driver');

var _FormField2 = _interopRequireDefault(_FormField);

var _ = require('./');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /* global describe it expect */

var createDriver = (0, _driverFactory.createDriverFactory)(_FormField2.default);

describe('FormField', function () {
  it('should have correct displayName', function () {
    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
      _2.default,
      null,
      _react2.default.createElement('div', null)
    ));
    expect(wrapper.name()).toEqual('FormField');
  });

  describe('`label` prop', function () {
    it('should render contents', function () {
      var driver = createDriver(_react2.default.createElement(
        _2.default,
        { label: 'hello label' },
        _react2.default.createElement('div', null)
      ));
      expect(driver.getLabel().innerHTML).toMatch(/hello label/);
    });

    it('should not render div when `label` is undefined', function () {
      var driver = createDriver(_react2.default.createElement(
        _2.default,
        null,
        _react2.default.createElement('div', null)
      ));
      expect(driver.getLabel()).toEqual(null);
    });
  });

  describe('required', function () {
    describe('given `label` and `required` props', function () {
      it('should render as required', function () {
        var driver = createDriver(_react2.default.createElement(
          _2.default,
          { label: 'hello', required: true },
          _react2.default.createElement('div', null)
        ));
        expect(driver.isRequired()).toEqual(true);
      });
    });

    describe('given only `required` prop', function () {
      it('should render it inline', function () {
        var driver = createDriver(_react2.default.createElement(
          _2.default,
          { required: true },
          _react2.default.createElement('div', null)
        ));
        expect(driver.isRequired()).toEqual(true);
        expect(!!driver.element().querySelector('[data-hook="formfield-inline-suffixes"]')).toEqual(true);
      });
    });

    it('should not render when `required` prop', function () {
      var driver = createDriver(_react2.default.createElement(
        _2.default,
        null,
        _react2.default.createElement('div', null)
      ));
      expect(driver.isRequired()).toEqual(false);
    });
  });

  describe('`infoContent` icon with tooltip', function () {
    beforeEach(function () {
      document.body.innerHTML = ''; // required for tooltip element to be removed and not to leak in consecutive tests
    });

    describe('given `label`', function () {
      it('should display value of `infoContent` prop in tooltip', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var driver;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                driver = createDriver(_react2.default.createElement(
                  _2.default,
                  { infoContent: 'hello from tooltip' },
                  _react2.default.createElement('div', null)
                ));
                _context.t0 = expect;
                _context.next = 4;
                return driver.getInfoContent();

              case 4:
                _context.t1 = _context.sent;
                (0, _context.t0)(_context.t1).toBe('hello from tooltip');

              case 6:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, undefined);
      })));
    });

    describe('given only `infoContent` prop', function () {
      it('should render it inline', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var driver;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                driver = createDriver(_react2.default.createElement(
                  _2.default,
                  { infoContent: 'hey there' },
                  _react2.default.createElement('div', null)
                ));

                expect(!!driver.element().querySelector('[data-hook="formfield-inline-suffixes"]')).toEqual(true);
                _context2.t0 = expect;
                _context2.next = 5;
                return driver.getInfoContent();

              case 5:
                _context2.t1 = _context2.sent;
                (0, _context2.t0)(_context2.t1).toBe('hey there');

              case 7:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, undefined);
      })));
    });
  });

  describe('`children` prop', function () {
    var Children = function (_React$Component) {
      _inherits(Children, _React$Component);

      function Children() {
        _classCallCheck(this, Children);

        return _possibleConstructorReturn(this, (Children.__proto__ || Object.getPrototypeOf(Children)).apply(this, arguments));
      }

      _createClass(Children, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
          this.props.onMount(); // eslint-disable-line react/prop-types
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2.default.createElement('div', null);
        }
      }]);

      return Children;
    }(_react2.default.Component);

    it('should be rendered', function () {
      var driver = createDriver(_react2.default.createElement(
        _2.default,
        null,
        'hello'
      ));
      expect(driver.getChildren().innerHTML).toEqual('hello');
    });
    describe('when function', function () {
      it('should receive setCharactersLeft', function () {
        var children = jest.fn();
        createDriver(_react2.default.createElement(_2.default, { children: children }));
        expect(_typeof(children.mock.calls[0][0].setCharactersLeft)).toBe('function');
      });

      describe('with `label` prop', function () {
        it('should display counter when `setCharactersLeft` called', function () {
          var driver = createDriver(_react2.default.createElement(
            _2.default,
            { label: 'hello' },
            function (_ref3) {
              var setCharactersLeft = _ref3.setCharactersLeft;
              return _react2.default.createElement(Children, { onMount: function onMount() {
                  return setCharactersLeft(87987);
                } });
            }
          ));

          expect(driver.getLengthLeft()).toBe(87987);
        });

        it('should display different color when lengtLeft < 0', function () {
          var driver = createDriver(_react2.default.createElement(
            _2.default,
            { label: 'hello' },
            function (_ref4) {
              var setCharactersLeft = _ref4.setCharactersLeft;
              return _react2.default.createElement(Children, { onMount: function onMount() {
                  return setCharactersLeft(-1);
                } });
            }
          ));

          expect(driver.isLengthExceeded()).toBe(true);
        });

        it('should display 0 when lengtLeft === 0', function () {
          var driver = createDriver(_react2.default.createElement(
            _2.default,
            { label: 'hello' },
            function (_ref5) {
              var setCharactersLeft = _ref5.setCharactersLeft;
              return _react2.default.createElement(Children, { onMount: function onMount() {
                  return setCharactersLeft(0);
                } });
            }
          ));

          expect(driver.getLengthLeft()).toBe(0);
        });
      });

      describe('without `label` prop', function () {
        it('should not display counter', function () {
          var driver = createDriver(_react2.default.createElement(
            _2.default,
            null,
            function (_ref6) {
              var setCharactersLeft = _ref6.setCharactersLeft;
              return _react2.default.createElement(Children, { onMount: function onMount() {
                  return setCharactersLeft(123456);
                } });
            }
          ));
          expect(driver.getLengthLeft()).toEqual(null);
        });
      });
    });
  });

  describe('`id` prop', function () {
    it('should be added to label as `htmlFor` prop', function () {
      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
        _2.default,
        { id: 'five', label: 'hello' },
        _react2.default.createElement('div', null)
      ));
      var label = wrapper.find(_Label2.default);
      expect(label.prop('for')).toEqual('five');
    });
  });

  describe('testkits', function () {
    it('should exist', function () {
      expect((0, _testkitSanity.isTestkitExists)(_react2.default.createElement(
        _2.default,
        null,
        _react2.default.createElement('div', null)
      ), _testkit.formFieldTestkitFactory)).toBe(true);
    });

    it('should exist for enzyme', function () {
      expect((0, _testkitSanity.isEnzymeTestkitExists)(_react2.default.createElement(
        _2.default,
        null,
        _react2.default.createElement('div', null)
      ), _enzyme2.formFieldTestkitFactory, _enzyme.mount)).toBe(true);
    });
  });
});