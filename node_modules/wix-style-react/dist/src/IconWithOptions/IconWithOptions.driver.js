'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _DropdownLayout = require('../DropdownLayout/DropdownLayout.driver');

var _DropdownLayout2 = _interopRequireDefault(_DropdownLayout);

var _testUtils = require('react-dom/test-utils');

var _testUtils2 = _interopRequireDefault(_testUtils);

var _utils = require('../../test/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var IconWithOptionsDriverFactory = function IconWithOptionsDriverFactory(_ref) {
  var _element = _ref.element,
      wrapper = _ref.wrapper;

  var _iconWrapper = _element.querySelector('[data-hook=icon-wrapper]');
  var dropdownLayoutWrapper = _element.querySelector('[data-hook=iconWithOptions-dropdownLayout-wrapper]');
  var dropdownLayout = _element.querySelector('[data-hook=iconWithOptions-dropdownLayout]');
  var dropdownLayoutDriver = (0, _DropdownLayout2.default)({ element: dropdownLayout, wrapper: wrapper });

  var driver = {
    exists: function exists() {
      return !!_element;
    },
    mouseEnter: function mouseEnter() {
      return _testUtils2.default.Simulate.mouseEnter(_iconWrapper);
    },
    mouseLeave: function mouseLeave() {
      return _testUtils2.default.Simulate.mouseLeave(_element);
    },
    isIconBlue: function isIconBlue() {
      return (0, _utils.isClassExists)(_element, 'hover');
    },
    iconWrapper: function iconWrapper() {
      return _iconWrapper;
    },
    element: function element() {
      return _element;
    }
  };

  return {
    driver: driver,
    dropdownLayoutDriver: _extends({}, dropdownLayoutDriver, {
      isDropDirectionUp: function isDropDirectionUp() {
        return dropdownLayoutDriver.isUp() && (0, _utils.isClassExists)(dropdownLayoutWrapper, 'dropDirectionUp');
      }
    })
  };
};

exports.default = IconWithOptionsDriverFactory;