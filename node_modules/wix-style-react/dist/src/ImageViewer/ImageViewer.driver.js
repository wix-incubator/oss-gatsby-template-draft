'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _testkit = require('wix-style-react/dist/testkit');

var _AddItem = require('../AddItem/AddItem.driver');

var _AddItem2 = _interopRequireDefault(_AddItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var imageViewerDriverFactory = function imageViewerDriverFactory(_ref) {
  var component = _ref.component,
      wrapper = _ref.wrapper,
      element = _ref.element;

  var addItemDataHook = 'add-container';
  var byHook = function byHook(dataHook) {
    return element.querySelector('[data-hook="' + dataHook + '"]');
  };
  var image = function image() {
    return byHook('image-viewer-image');
  };
  var updateImageButton = function updateImageButton() {
    return (0, _testkit.buttonTestkitFactory)({ wrapper: element, dataHook: 'update-image' });
  };
  var removeImageButton = function removeImageButton() {
    return (0, _testkit.buttonTestkitFactory)({ wrapper: element, dataHook: 'remove-image' });
  };
  var errorIcon = function errorIcon() {
    return byHook('error-tooltip');
  };
  var addItem = function addItem() {
    return byHook(addItemDataHook);
  };
  var addItemDriver = (0, _AddItem2.default)({ wrapper: wrapper, element: element });

  return {
    getAddItemDataHook: function getAddItemDataHook() {
      return addItemDataHook;
    },
    getElement: function getElement() {
      return element;
    },
    getContainerStyles: function getContainerStyles() {
      return element.getAttribute('style');
    },
    getImageUrl: function getImageUrl() {
      return image().getAttribute('src');
    },
    isAddItemVisible: function isAddItemVisible() {
      return !!addItem();
    },
    isImageVisible: function isImageVisible() {
      return !!image();
    },
    isErrorVisible: function isErrorVisible() {
      return !!errorIcon();
    },
    clickAdd: function clickAdd() {
      return addItemDriver.click();
    },
    clickUpdate: function clickUpdate() {
      return updateImageButton().click();
    },
    clickRemove: function clickRemove() {
      return removeImageButton().click();
    },
    exists: function exists() {
      return !!element;
    },
    setProps: function setProps(props) {
      var ClonedWithProps = _react2.default.cloneElement.apply(_react2.default, [component, Object.assign({}, component.props, props)].concat(_toConsumableArray(component.props.children || [])));
      _reactDom2.default.render(_react2.default.createElement(
        'div',
        { ref: function ref(r) {
            return element = r;
          } },
        ClonedWithProps
      ), wrapper);
    }
  };
};

exports.default = imageViewerDriverFactory;