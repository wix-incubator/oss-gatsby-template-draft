'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ImageViewer = require('./ImageViewer');

var _ImageViewer2 = _interopRequireDefault(_ImageViewer);

var _ImageViewer3 = require('./ImageViewer.driver');

var _ImageViewer4 = _interopRequireDefault(_ImageViewer3);

var _driverFactory = require('wix-ui-test-utils/driver-factory');

var _utils = require('../../test/utils');

var _testkit = require('../../testkit');

var _enzyme = require('../../testkit/enzyme');

var _enzyme2 = require('enzyme');

var _testUtils = require('react-dom/test-utils');

var _testUtils2 = _interopRequireDefault(_testUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('ImageViewer', function () {

  var createDriver = (0, _driverFactory.createDriverFactory)(_ImageViewer4.default);
  var props = void 0,
      driver = void 0;
  var IMAGE_URL = 'some-image-url.png';
  var addImage = jest.fn();
  var updateImage = jest.fn();
  var removeImage = jest.fn();

  describe('when default scenario', function () {
    beforeEach(function () {
      props = {
        imageUrl: IMAGE_URL,
        onAddImage: addImage,
        onUpdateImage: updateImage,
        onRemoveImage: removeImage
      };
      driver = createDriver(_react2.default.createElement(_ImageViewer2.default, props));
    });

    it('should display image url', function () {
      expect(driver.getImageUrl()).toBe(IMAGE_URL);
    });

    it('should trigger update image', function () {
      driver.clickUpdate();
      expect(updateImage).toBeCalled();
    });

    it('should trigger remove image', function () {
      driver.clickRemove();
      expect(removeImage).toBeCalled();
    });

    it('should trigger add image', function () {
      props = {
        imageUrl: '',
        onAddImage: addImage
      };
      driver = createDriver(_react2.default.createElement(_ImageViewer2.default, props));
      driver.clickAdd();
      expect(addImage).toBeCalled();
    });
  });

  it('should not display image if not exists', function () {
    props = {
      imageUrl: ''
    };
    driver = createDriver(_react2.default.createElement(_ImageViewer2.default, props));
    expect(driver.isImageVisible()).toBeFalsy();
  });

  describe('height and width', function () {
    it('should be added to style attribute when image is not present', function () {
      props = {
        imageUrl: '',
        width: 300,
        height: 300
      };
      driver = createDriver(_react2.default.createElement(_ImageViewer2.default, props));
      expect(driver.getContainerStyles()).toEqual('width: 300px; height: 300px;');
    });

    it('should be added to style attribute when image is present', function () {
      props = {
        imageUrl: IMAGE_URL,
        width: 300,
        height: 300
      };
      driver = createDriver(_react2.default.createElement(_ImageViewer2.default, props));
      expect(driver.getContainerStyles()).toEqual('width: 300px; height: 300px;');
    });

    it('should not add style attribute when width and height props are not passed', function () {
      props = {
        imageUrl: IMAGE_URL
      };
      driver = createDriver(_react2.default.createElement(_ImageViewer2.default, props));
      expect(driver.getContainerStyles()).toEqual(null);
    });
  });
  describe('hide or show add image', function () {

    it('should not display AddItem component if image exists', function () {

      props = {
        imageUrl: IMAGE_URL
      };

      driver = createDriver(_react2.default.createElement(_ImageViewer2.default, props));
      expect(driver.isAddItemVisible()).toBeFalsy();
    });

    it('should display AddItem component if image dosnt exists', function () {

      props = {
        imageUrl: ''
      };

      driver = createDriver(_react2.default.createElement(_ImageViewer2.default, props));
      expect(driver.isAddItemVisible()).toBeTruthy();
    });
  });

  describe('Error state', function () {

    it('should not display error icon by defualt', function () {

      props = {
        imageUrl: '',
        width: 300,
        height: 300
      };

      driver = createDriver(_react2.default.createElement(_ImageViewer2.default, props));
      expect(driver.isErrorVisible()).toBeFalsy();
    });

    it('should display error icon on error with the correct message', function () {

      props = {
        imageUrl: '',
        width: 300,
        height: 300,
        error: true,
        errorMessage: 'Oh My God!'
      };

      driver = createDriver(_react2.default.createElement(_ImageViewer2.default, props));
      var wrapper = driver.getElement();
      var errorTooltipDriver = (0, _testkit.tooltipTestkitFactory)({ wrapper: wrapper, dataHook: 'error-tooltip' });
      errorTooltipDriver.mouseEnter();
      return (0, _utils.resolveIn)(50).then(function () {
        expect(errorTooltipDriver.isShown()).toBeTruthy();
        expect(errorTooltipDriver.getContent()).toEqual(props.errorMessage);
      });
    });
  });

  describe('testkit', function () {
    it('should exist', function () {
      var div = document.createElement('div');
      var dataHook = 'myDataHook';
      var wrapper = div.appendChild(_testUtils2.default.renderIntoDocument(_react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_ImageViewer2.default, { imageUrl: '', dataHook: dataHook })
      )));
      var imageViewerTestkit = (0, _testkit.imageViewerTestkitFactory)({ wrapper: wrapper, dataHook: dataHook });
      expect(imageViewerTestkit.exists()).toBeTruthy();
    });
  });

  describe('enzyme testkit', function () {
    it('should exist', function () {
      var dataHook = 'myDataHook';
      var wrapper = (0, _enzyme2.mount)(_react2.default.createElement(_ImageViewer2.default, { dataHook: dataHook }));
      var imageViewerTestkit = (0, _enzyme.imageViewerTestkitFactory)({ wrapper: wrapper, dataHook: dataHook });
      expect(imageViewerTestkit.exists()).toBeTruthy();
    });
  });
});