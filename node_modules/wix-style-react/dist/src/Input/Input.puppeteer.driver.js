'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var inputDriverFactory = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(component, page) {
    var input;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return component.$('input');

          case 2:
            input = _context2.sent;
            return _context2.abrupt('return', {
              element: function element() {
                return component;
              },
              enterText: function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(text) {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return input.focus();

                        case 2:
                          _context.next = 4;
                          return input.type(text);

                        case 4:
                        case 'end':
                          return _context.stop();
                      }
                    }
                  }, _callee, undefined);
                }));

                return function enterText(_x3) {
                  return _ref2.apply(this, arguments);
                };
              }(),
              getText: function getText() {
                return page.evaluate(function (_input) {
                  return _input.value;
                }, input);
              }
            });

          case 4:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function inputDriverFactory(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = inputDriverFactory;