'use strict';

var _eyes = require('eyes.it');

var _eyes2 = _interopRequireDefault(_eyes);

var _protractor = require('../../testkit/protractor');

var _protractor2 = require('wix-ui-test-utils/protractor');

var _storybookHelpers = require('../../test/utils/storybook-helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('input area page', function () {
  // const storyUrl = getStoryUrl('3. Inputs', '3.2 + InputArea');
  var storyUrl = (0, _storybookHelpers.createStoryUrl)({ kind: '3. Inputs', story: '3.2 + InputArea', withExamples: false });
  var inputAreaTestkit = (0, _protractor.inputAreaTestkitFactory)({ dataHook: 'storybook-inputarea' });

  beforeEach(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return browser.get(storyUrl);

          case 2:
            _context.next = 4;
            return (0, _protractor2.waitForVisibilityOf)(inputAreaTestkit.element());

          case 4:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));

  _eyes2.default.it('should render default props', function () {
    expect(inputAreaTestkit.isFocused()).toBe(false, 'isFocused');
  });

  _eyes2.default.it('should show focus styles', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            expect(inputAreaTestkit.isFocused()).toBeFalsy();
            _context2.next = 3;
            return browser.actions().sendKeys(protractor.Key.TAB).perform();

          case 3:
            expect(inputAreaTestkit.isFocused()).toBeTruthy();

          case 4:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));

  _eyes2.default.it('should show hover styles', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.t0 = expect;
            _context3.next = 3;
            return inputAreaTestkit.isHovered();

          case 3:
            _context3.t1 = _context3.sent;
            (0, _context3.t0)(_context3.t1).toBeFalsy();
            _context3.next = 7;
            return inputAreaTestkit.hover();

          case 7:
            _context3.t2 = expect;
            _context3.next = 10;
            return inputAreaTestkit.isHovered();

          case 10:
            _context3.t3 = _context3.sent;
            (0, _context3.t2)(_context3.t3).toBeTruthy();

          case 12:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  })));

  _eyes2.default.it('should show hover and focus styles', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.t0 = expect;
            _context4.next = 3;
            return inputAreaTestkit.isHovered();

          case 3:
            _context4.t1 = _context4.sent;
            (0, _context4.t0)(_context4.t1).toBeFalsy();

            expect(inputAreaTestkit.isFocused()).toBeFalsy();
            _context4.next = 8;
            return inputAreaTestkit.click();

          case 8:
            expect(inputAreaTestkit.isFocused()).toBeTruthy();
            _context4.t2 = expect;
            _context4.next = 12;
            return inputAreaTestkit.isHovered();

          case 12:
            _context4.t3 = _context4.sent;
            (0, _context4.t2)(_context4.t3).toBeTruthy();

          case 14:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  })));
});