'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Input = require('../Input/Input.driver');

var _Input2 = _interopRequireDefault(_Input);

var _DropdownLayout = require('../DropdownLayout/DropdownLayout.driver');

var _DropdownLayout2 = _interopRequireDefault(_DropdownLayout);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var inputWithOptionsDriverFactory = function inputWithOptionsDriverFactory(_ref) {
  var element = _ref.element,
      wrapper = _ref.wrapper,
      component = _ref.component;


  var _inputWrapper = element && element.childNodes[0];
  var inputDriver = element && (0, _Input2.default)({ element: _inputWrapper.childNodes[0], wrapper: _inputWrapper });
  var dropdownLayoutDriver = element && (0, _DropdownLayout2.default)({ element: element.childNodes[1].childNodes[0], wrapper: wrapper });

  var driver = {
    exists: function exists() {
      return !!element;
    },
    isReadOnly: function isReadOnly() {
      return inputDriver.getReadOnly() && _inputWrapper.className.includes('readonly');
    },
    inputWrapper: function inputWrapper() {
      return _inputWrapper;
    },
    focus: function focus() {
      return inputDriver.focus();
    },
    blur: function blur() {
      return dropdownLayoutDriver.mouseClickOutside();
    },
    pressDownKey: function pressDownKey() {
      return inputDriver.keyDown('ArrowDown');
    },
    pressUpKey: function pressUpKey() {
      return inputDriver.keyDown('ArrowUp');
    },
    pressAnyKey: function pressAnyKey() {
      return inputDriver.keyDown('Any');
    },
    pressEnterKey: function pressEnterKey() {
      return inputDriver.keyDown('Enter');
    },
    pressSpaceKey: function pressSpaceKey() {
      return inputDriver.keyDown(' ');
    },
    pressTabKey: function pressTabKey() {
      return inputDriver.keyDown('Tab');
    },
    pressEscKey: function pressEscKey() {
      return inputDriver.keyDown('Escape');
    },
    outsideClick: function outsideClick() {
      return document.body.dispatchEvent(new Event('mouseup', { cancelable: true }));
    },
    setProps: function setProps(props) {
      var ClonedWithProps = _react2.default.cloneElement.apply(_react2.default, [component, Object.assign({}, component.props, props)].concat(_toConsumableArray(component.props.children || [])));
      _reactDom2.default.render(_react2.default.createElement(
        'div',
        { ref: function ref(r) {
            return element = r;
          } },
        ClonedWithProps
      ), wrapper);
    },
    isOptionWrappedToHighlighter: function isOptionWrappedToHighlighter(optionId) {
      var _dropdownLayoutDriver = dropdownLayoutDriver.optionById(optionId),
          element = _dropdownLayoutDriver.element;

      return !!element().querySelector('[data-hook=highlighter-' + optionId + ']');
    }
  };
  return {
    exists: function exists() {
      return driver.exists();
    },
    driver: driver,
    inputDriver: inputDriver,
    dropdownLayoutDriver: dropdownLayoutDriver
  };
};

exports.default = inputWithOptionsDriverFactory;