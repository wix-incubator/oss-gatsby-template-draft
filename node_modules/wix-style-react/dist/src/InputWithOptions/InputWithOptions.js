'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _WixComponent2 = require('../BaseComponents/WixComponent');

var _WixComponent3 = _interopRequireDefault(_WixComponent2);

var _Input = require('../Input');

var _Input2 = _interopRequireDefault(_Input);

var _omit = require('omit');

var _omit2 = _interopRequireDefault(_omit);

var _DropdownLayout = require('../DropdownLayout/DropdownLayout');

var _DropdownLayout2 = _interopRequireDefault(_DropdownLayout);

var _Highlighter = require('../Highlighter/Highlighter');

var _Highlighter2 = _interopRequireDefault(_Highlighter);

var _ChainEventHandlers = require('../utils/ChainEventHandlers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InputWithOptions = function (_WixComponent) {
  _inherits(InputWithOptions, _WixComponent);

  _createClass(InputWithOptions, [{
    key: 'inputClasses',


    // Abstraction
    value: function inputClasses() {}
  }, {
    key: 'dropdownClasses',
    value: function dropdownClasses() {}
  }, {
    key: 'dropdownAdditionalProps',
    value: function dropdownAdditionalProps() {}
  }, {
    key: 'inputAdditionalProps',
    value: function inputAdditionalProps() {}
    /**
     * An array of key codes (default ['Enter','Tab']) that act as manual submit. Will be used with the onKeyDown(event), tha key codes are values of event.key. When a manual submit key is pressed then onManuallyInput will be called.
     */

  }, {
    key: 'getManualSubmitKeys',
    value: function getManualSubmitKeys() {
      return ['Enter', 'Tab'];
    }
  }]);

  function InputWithOptions(props) {
    _classCallCheck(this, InputWithOptions);

    var _this = _possibleConstructorReturn(this, (InputWithOptions.__proto__ || Object.getPrototypeOf(InputWithOptions)).call(this, props));

    _this.state = {
      inputValue: props.value || '',
      showOptions: false,
      lastOptionsShow: 0,
      isEditing: false
    };

    _this._onSelect = _this._onSelect.bind(_this);
    _this._onFocus = _this._onFocus.bind(_this);
    _this._onBlur = _this._onBlur.bind(_this);
    _this._onChange = _this._onChange.bind(_this);
    _this._onKeyDown = _this._onKeyDown.bind(_this);
    _this.focus = _this.focus.bind(_this);
    _this.blur = _this.blur.bind(_this);
    _this.select = _this.select.bind(_this);
    _this.hideOptions = _this.hideOptions.bind(_this);
    _this.showOptions = _this.showOptions.bind(_this);
    _this._onManuallyInput = _this._onManuallyInput.bind(_this);
    _this._renderDropdownLayout = _this._renderDropdownLayout.bind(_this);
    _this._onInputClicked = _this._onInputClicked.bind(_this);
    _this.closeOnSelect = _this.closeOnSelect.bind(_this);
    _this.onCompositionChange = _this.onCompositionChange.bind(_this);
    return _this;
  }

  _createClass(InputWithOptions, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      if (!this.props.showOptionsIfEmptyInput && (!prevProps.value && this.props.value || !prevState.inputValue && this.state.inputValue)) {
        this.showOptions();
      }
    }
  }, {
    key: 'onCompositionChange',
    value: function onCompositionChange(isComposing) {
      this.setState({ isComposing: isComposing });
    }
  }, {
    key: 'onClickOutside',
    value: function onClickOutside() {
      this.hideOptions();
    }
  }, {
    key: 'renderInput',
    value: function renderInput() {
      var _this2 = this;

      var inputAdditionalProps = this.inputAdditionalProps();
      var inputProps = Object.assign((0, _omit2.default)(Object.keys(_DropdownLayout2.default.propTypes).concat(['onChange', 'dataHook']), this.props), inputAdditionalProps);

      var inputElement = inputProps.inputElement;

      return _react2.default.cloneElement(inputElement, _extends({
        menuArrow: true,
        ref: function ref(input) {
          return _this2.input = input;
        }
      }, inputProps, {
        onKeyDown: (0, _ChainEventHandlers.chainEventHandlers)(inputAdditionalProps && inputAdditionalProps.onKeyDown, this._onKeyDown),
        theme: this.props.theme,
        onChange: this._onChange,
        onInputClicked: this._onInputClicked,
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onCompositionChange: this.onCompositionChange,
        width: inputElement.props.width,
        textOverflow: inputElement.props.textOverflow
      }));
    }
  }, {
    key: '_processOptions',
    value: function _processOptions(options) {
      var _this3 = this;

      return !this.props.highlight ? options : options.map(function (option) {
        return _extends({}, option, {
          value: option.value === _DropdownLayout.DIVIDER_OPTION_VALUE ? option.value : _react2.default.createElement(
            _Highlighter2.default,
            { match: _this3.state.inputValue, dataHook: 'highlighter-' + option.id },
            option.value
          )
        });
      });
    }
  }, {
    key: '_renderDropdownLayout',
    value: function _renderDropdownLayout() {
      var _this4 = this;

      var inputOnlyProps = (0, _omit2.default)(['tabIndex'], _Input2.default.propTypes);
      var dropdownProps = Object.assign((0, _omit2.default)(Object.keys(inputOnlyProps).concat(['dataHook']), this.props), this.dropdownAdditionalProps());

      var customStyle = { marginLeft: this.props.dropdownOffsetLeft };

      if (this.props.dropdownWidth) {
        customStyle.width = this.props.dropdownWidth;
      }

      var isDropdownLayoutVisible = this.state.showOptions && (this.props.showOptionsIfEmptyInput || this.state.inputValue.length > 0);

      return _react2.default.createElement(
        'div',
        { className: this.dropdownClasses(), style: customStyle, 'data-hook': 'dropdown-layout-wrapper' },
        _react2.default.createElement(_DropdownLayout2.default, _extends({
          ref: function ref(dropdownLayout) {
            return _this4.dropdownLayout = dropdownLayout;
          }
        }, dropdownProps, {
          options: this._processOptions(dropdownProps.options),
          theme: this.props.theme,
          visible: isDropdownLayoutVisible,
          onClose: this.hideOptions,
          onSelect: this._onSelect,
          isComposing: this.state.isComposing
        }))
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var dropDirectionUp = this.props.dropDirectionUp;

      return _react2.default.createElement(
        'div',
        null,
        dropDirectionUp ? this._renderDropdownLayout() : null,
        _react2.default.createElement(
          'div',
          { 'data-input-parent': true, className: this.inputClasses() },
          this.renderInput()
        ),
        !dropDirectionUp ? this._renderDropdownLayout() : null
      );
    }
  }, {
    key: 'hideOptions',
    value: function hideOptions() {
      if (this.state.showOptions) {
        this.setState({ showOptions: false });
      }
    }
  }, {
    key: 'showOptions',
    value: function showOptions() {
      this.setState({ showOptions: true, lastOptionsShow: Date.now() });
    }
  }, {
    key: 'closeOnSelect',
    value: function closeOnSelect() {
      return this.props.closeOnSelect;
    }
  }, {
    key: '_onManuallyInput',
    value: function _onManuallyInput() {
      var inputValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      if (this.state.isComposing) {
        return;
      }

      inputValue = inputValue.trim();
      if (this.closeOnSelect()) {
        this.hideOptions();
      }

      var suggestedOption = this.props.options.find(function (element) {
        return element.value === inputValue;
      });

      if (this.props.onManuallyInput) {
        this.props.onManuallyInput(inputValue, suggestedOption);
      }
    }
  }, {
    key: '_onSelect',
    value: function _onSelect(option, isSelectedOption) {
      this.showOptions();
      var onSelect = this.props.onSelect;


      if (this.closeOnSelect()) {
        this.setState({ showOptions: false });
      }

      if (isSelectedOption) {
        this.setState({ showOptions: false });
      } else if (onSelect) {
        onSelect(this.props.highlight ? this.props.options.find(function (opt) {
          return opt.id === option.id;
        }) : option);
      }
    }
  }, {
    key: '_onChange',
    value: function _onChange(event) {
      this.setState({ inputValue: event.target.value });
      if (this.props.onChange) {
        this.props.onChange(event);
      }
    }
  }, {
    key: '_onInputClicked',
    value: function _onInputClicked(event) {
      if (this.state.showOptions && Date.now() - this.state.lastOptionsShow > 2000) {
        this.hideOptions();
      }

      if (this.props.onInputClicked) {
        this.props.onInputClicked(event);
      }
    }
  }, {
    key: '_onFocus',
    value: function _onFocus(e) {
      if (this.props.disabled) {
        return;
      }
      this._focused = true;
      this.setState({ isEditing: false });
      this.showOptions();
      if (this.props.onFocus) {
        this.props.onFocus(e);
      }
    }
  }, {
    key: '_onBlur',
    value: function _onBlur(e) {
      this._focused = false;
      if (this.props.onBlur) {
        this.props.onBlur(e);
      }
    }
  }, {
    key: '_onKeyDown',
    value: function _onKeyDown(event) {
      if (this.props.disabled) {
        return;
      }

      if (event.key !== 'ArrowDown' && event.key !== 'ArrowUp') {
        this.setState({ isEditing: true });
      }

      var shouldDelegate = !['Spacebar', ' '].includes(event.key) || this.isReadOnly;

      if (shouldDelegate && !this.dropdownLayout._onKeyDown(event)) {
        if (this.getManualSubmitKeys().indexOf(event.key) !== -1) {
          this._onManuallyInput(this.state.inputValue);
        } else {
          this.showOptions();
        }
      }
    }
  }, {
    key: 'focus',
    value: function focus() {
      this.input.focus();
    }
  }, {
    key: 'blur',
    value: function blur() {
      this.input.blur();
    }
  }, {
    key: 'select',
    value: function select() {
      this.input.select();
    }
  }, {
    key: 'isReadOnly',
    get: function get() {
      var _ref = this.inputAdditionalProps() || {},
          readOnly = _ref.readOnly;

      return readOnly;
    }
  }]);

  return InputWithOptions;
}(_WixComponent3.default);

InputWithOptions.defaultProps = _extends({}, _Input2.default.defaultProps, _DropdownLayout2.default.defaultProps, {
  onSelect: function onSelect() {},
  options: [],
  closeOnSelect: true,
  inputElement: _react2.default.createElement(_Input2.default, null),
  valueParser: function valueParser(option) {
    return option.value;
  },
  dropdownWidth: null,
  dropdownOffsetLeft: '0',
  showOptionsIfEmptyInput: true
});

InputWithOptions.propTypes = _extends({}, _Input2.default.propTypes, _DropdownLayout2.default.propTypes, {
  autocomplete: _propTypes2.default.string,
  inputElement: _propTypes2.default.element,
  closeOnSelect: _propTypes2.default.bool,
  onManuallyInput: _propTypes2.default.func,
  /** Function that receives an option, and should return the value to be displayed. By default returns `option.value`. */
  valueParser: _propTypes2.default.func,
  dropdownWidth: _propTypes2.default.string,
  dropdownOffsetLeft: _propTypes2.default.string,
  /** Controls whether to show options if input is empty */
  showOptionsIfEmptyInput: _propTypes2.default.bool,
  highlight: _propTypes2.default.bool
});

InputWithOptions.displayName = 'InputWithOptions';

exports.default = InputWithOptions;