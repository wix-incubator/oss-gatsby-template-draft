'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _testUtils = require('react-dom/test-utils');

var _testUtils2 = _interopRequireDefault(_testUtils);

var _LanguagePicker = require('./LanguagePicker.driver');

var _LanguagePicker2 = _interopRequireDefault(_LanguagePicker);

var _LanguagePicker3 = require('./LanguagePicker');

var _LanguagePicker4 = _interopRequireDefault(_LanguagePicker3);

var _driverFactory = require('wix-ui-test-utils/driver-factory');

var _testkit = require('../../testkit');

var _enzyme = require('../../testkit/enzyme');

var _enzyme2 = require('enzyme');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('LanguagePicker', function () {
  var createDriver = (0, _driverFactory.createDriverFactory)(_LanguagePicker2.default);

  var languagePicker = function languagePicker() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return _react2.default.createElement(
      _LanguagePicker4.default,
      props,
      _react2.default.createElement(
        _LanguagePicker4.default.Option,
        { languageKey: 'en' },
        'English'
      ),
      _react2.default.createElement(
        _LanguagePicker4.default.Option,
        { languageKey: 'fr' },
        'French'
      )
    );
  };

  it('should have big items height by default', function () {
    var _createDriver = createDriver(languagePicker()),
        dropdownLayoutDriver = _createDriver.dropdownLayoutDriver;

    expect(dropdownLayoutDriver.isOptionHeightBig(0)).toBe(true);
  });

  it('should call onSelect prop when language is selected', function () {
    var onSelect = jest.fn();

    var _createDriver2 = createDriver(languagePicker({ onSelect: onSelect })),
        driver = _createDriver2.driver,
        dropdownLayoutDriver = _createDriver2.dropdownLayoutDriver;

    driver.mouseEnter();
    dropdownLayoutDriver.clickAtOption(0);

    expect(onSelect).toBeCalledWith({ id: 'en', value: 'English' });
  });

  it('should print console warning for bad children format', function () {
    var badLanguagePicker = function badLanguagePicker() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _react2.default.createElement(
        _LanguagePicker4.default,
        props,
        _react2.default.createElement(
          'div',
          { languageKey: 'en' },
          'English'
        ),
        _react2.default.createElement(
          _LanguagePicker4.default.Option,
          { languageKey: 'fr' },
          'French'
        )
      );
    };

    var stub = _sinon2.default.stub(console, 'error');

    createDriver(badLanguagePicker());

    expect(stub.calledWithMatch('Invalid Prop children was given. Validation failed on child number 0')).toBeTruthy();
    console.error.restore();
  });

  it('should have a divider between every language', function () {
    var _createDriver3 = createDriver(languagePicker()),
        dropdownLayoutDriver = _createDriver3.dropdownLayoutDriver;

    expect(dropdownLayoutDriver.optionsLength()).toBe(3);
    expect(dropdownLayoutDriver.isOptionADivider(1)).toBe(true);
  });

  it('should not display the selected language in the dropdown', function () {
    var _createDriver4 = createDriver(languagePicker({ selectedId: 'en' })),
        dropdownLayoutDriver = _createDriver4.dropdownLayoutDriver;

    expect(dropdownLayoutDriver.optionsLength()).toBe(1);
    expect(dropdownLayoutDriver.optionContentAt(0)).toBe('French');
  });

  describe('testkit', function () {
    it('should exist', function () {
      var div = document.createElement('div');
      var dataHook = 'myDataHook';
      var wrapper = div.appendChild(_testUtils2.default.renderIntoDocument(_react2.default.createElement(
        'div',
        null,
        languagePicker({ dataHook: dataHook })
      )));
      var languagePickerTestkit = (0, _testkit.languagePickerTestkitFactory)({ wrapper: wrapper, dataHook: dataHook });
      expect(languagePickerTestkit.driver.exists()).toBeTruthy();
      expect(languagePickerTestkit.dropdownLayoutDriver.exists()).toBeTruthy();
    });
  });

  describe('enzyme testkit', function () {
    it('should exist', function () {
      var dataHook = 'myDataHook';
      var wrapper = (0, _enzyme2.mount)(languagePicker({ dataHook: dataHook }));
      var languagePickerTestkit = (0, _enzyme.languagePickerTestkitFactory)({ wrapper: wrapper, dataHook: dataHook });
      expect(languagePickerTestkit.driver.exists()).toBeTruthy();
      expect(languagePickerTestkit.dropdownLayoutDriver.exists()).toBeTruthy();
    });
  });
});