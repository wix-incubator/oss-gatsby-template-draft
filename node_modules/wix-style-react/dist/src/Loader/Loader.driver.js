'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = require('../../test/utils');

var _Tooltip = require('../Tooltip/Tooltip.driver');

var _Tooltip2 = _interopRequireDefault(_Tooltip);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getTextElement = function getTextElement(element) {
  return element.querySelector('[data-hook="loader-text"]');
};

var loaderDriverFactory = function loaderDriverFactory(_ref) {
  var element = _ref.element;

  return {
    component: function component() {
      return element;
    },
    exists: function exists() {
      return !!element;
    },
    getColor: function getColor() {
      return (0, _utils.isClassExists)(element, 'blue') ? 'blue' : 'white';
    },
    getText: function getText() {
      return getTextElement(element).textContent;
    },
    hasText: function hasText() {
      return !!getTextElement(element);
    },
    isLarge: function isLarge() {
      return (0, _utils.isClassExists)(element, 'large');
    },
    isMedium: function isMedium() {
      return (0, _utils.isClassExists)(element, 'medium');
    },
    isSmall: function isSmall() {
      return (0, _utils.isClassExists)(element, 'small');
    },
    isTiny: function isTiny() {
      return (0, _utils.isClassExists)(element, 'tiny');
    },
    isLoading: function isLoading() {
      return (0, _utils.isClassExists)(element, 'loading');
    },
    isError: function isError() {
      return (0, _utils.isClassExists)(element, 'error');
    },
    isSuccess: function isSuccess() {
      return (0, _utils.isClassExists)(element, 'success');
    },
    getStatusMessage: function getStatusMessage() {
      var tooltipDriver = (0, _Tooltip2.default)({
        element: (0, _utils.findByHook)(element, 'loader-tooltip')
      });

      tooltipDriver.mouseEnter();
      return (0, _utils.resolveIn)(500).then(function () {
        return tooltipDriver.getContent();
      });
    }
  };
};

exports.default = loaderDriverFactory;