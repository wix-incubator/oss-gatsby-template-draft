'use strict';

var _eyes = require('eyes.it');

var _eyes2 = _interopRequireDefault(_eyes);

var _protractor = require('../../testkit/protractor');

var _protractor2 = require('wix-ui-test-utils/protractor');

var _storybookHelpers = require('../../test/utils/storybook-helpers');

var _protractorHelpers = require('../../test/utils/protractor-helpers');

var _AutoExampleDriver = require('wix-storybook-utils/AutoExampleDriver');

var _AutoExampleDriver2 = _interopRequireDefault(_AutoExampleDriver);

var _protractor3 = require('protractor');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('Loader', function () {
  var storyUrl = (0, _storybookHelpers.getStoryUrl)('1. Foundation', '1.5 Loader');
  var loaderDriver = (0, _protractor.loaderTestkitFactory)({ dataHook: 'storybook-loader' });

  beforeAll(function () {
    browser.get(storyUrl);
    browser.executeScript(_protractorHelpers.disableCSSAnimation);
  });

  beforeEach(function () {
    _AutoExampleDriver2.default.reset();
  });

  _eyes2.default.it('should render given valid props', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _AutoExampleDriver2.default.setProps({ size: 'large', color: 'white', text: 'Wubba Lubba Dub Dub' });

            _context.next = 3;
            return (0, _protractor2.waitForVisibilityOf)(loaderDriver.element(), 'Cannot find <Loader/>');

          case 3:
            expect(loaderDriver.isLarge()).toBe(true);
            expect(loaderDriver.getColor()).toBe('white');
            expect(loaderDriver.hasText()).toBe(true);
            expect(loaderDriver.getText()).toBe('WUBBA LUBBA DUB DUB');

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));

  _eyes2.default.it('should render different Loader sizes', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _AutoExampleDriver2.default.setProps({ size: 'tiny' });
            _context2.next = 3;
            return (0, _protractor2.waitForVisibilityOf)(loaderDriver.element(), 'Cannot find <Loader/>');

          case 3:
            _context2.next = 5;
            return _eyes2.default.checkWindow('tiny loader');

          case 5:

            expect(loaderDriver.isTiny()).toBe(true);

            _AutoExampleDriver2.default.setProps({ size: 'small' });
            _context2.next = 9;
            return (0, _protractor2.waitForVisibilityOf)(loaderDriver.element(), 'Cannot find <Loader/>');

          case 9:
            _context2.next = 11;
            return _eyes2.default.checkWindow('small loader');

          case 11:

            expect(loaderDriver.isSmall()).toBe(true);

            _AutoExampleDriver2.default.setProps({ size: 'medium' });
            _context2.next = 15;
            return (0, _protractor2.waitForVisibilityOf)(loaderDriver.element(), 'Cannot find <Loader/>');

          case 15:
            _context2.next = 17;
            return _eyes2.default.checkWindow('medium loader');

          case 17:

            expect(loaderDriver.isMedium()).toBe(true);

            _AutoExampleDriver2.default.setProps({ size: 'large' });
            _context2.next = 21;
            return (0, _protractor2.waitForVisibilityOf)(loaderDriver.element(), 'Cannot find <Loader/>');

          case 21:
            _context2.next = 23;
            return _eyes2.default.checkWindow('large loader');

          case 23:

            expect(loaderDriver.isLarge()).toBe(true);

          case 24:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));

  _eyes2.default.it('should render different loader colors', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _AutoExampleDriver2.default.setProps({ color: 'blue' });

            _context3.next = 3;
            return (0, _protractor2.waitForVisibilityOf)(loaderDriver.element(), 'Cannot find <Loader/>');

          case 3:
            _context3.next = 5;
            return _eyes2.default.checkWindow('blue loader');

          case 5:

            expect(loaderDriver.getColor()).toBe('blue');

            _AutoExampleDriver2.default.setProps({ color: 'white' });

            _context3.next = 9;
            return (0, _protractor2.waitForVisibilityOf)(loaderDriver.element(), 'Cannot find <Loader/>');

          case 9:
            _context3.next = 11;
            return _eyes2.default.checkWindow('white loader');

          case 11:

            expect(loaderDriver.getColor()).toBe('white');

          case 12:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  })));

  _eyes2.default.it('should render different loader status', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _AutoExampleDriver2.default.setProps({ status: 'loading' });
            _context4.next = 3;
            return browser.wait(_protractor3.ExpectedConditions.and(loaderDriver.isLoading));

          case 3:
            _context4.next = 5;
            return _eyes2.default.checkWindow('loading status');

          case 5:

            _AutoExampleDriver2.default.setProps({ status: 'error' });
            _context4.next = 8;
            return browser.wait(_protractor3.ExpectedConditions.and(loaderDriver.isError));

          case 8:
            _context4.next = 10;
            return _eyes2.default.checkWindow('error status');

          case 10:

            _AutoExampleDriver2.default.setProps({ status: 'success' });
            _context4.next = 13;
            return browser.wait(_protractor3.ExpectedConditions.and(loaderDriver.isSuccess));

          case 13:
            _context4.next = 15;
            return _eyes2.default.checkWindow('success status');

          case 15:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  })));
});