'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Loader = require('./Loader.scss');

var _Loader2 = _interopRequireDefault(_Loader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hasClass = function hasClass(element, styles, cls) {
  return element.getAttribute('class').then(function (classes) {
    return classes.split(' ').some(function (c) {
      return c.includes(styles[cls]);
    });
  });
};

var getLoaderTextElement = function getLoaderTextElement(component) {
  return component.$('[data-hook="loader-text"]');
};

var loaderDriverFactory = function loaderDriverFactory(component) {
  return {
    element: function element() {
      return component;
    },
    isTiny: function isTiny() {
      return hasClass(component, _Loader2.default, 'tiny');
    },
    isSmall: function isSmall() {
      return hasClass(component, _Loader2.default, 'small');
    },
    isMedium: function isMedium() {
      return hasClass(component, _Loader2.default, 'medium');
    },
    isLarge: function isLarge() {
      return hasClass(component, _Loader2.default, 'large');
    },
    getColor: function getColor() {
      return hasClass(component, _Loader2.default, 'blue').then(function (hasClass) {
        return hasClass ? 'blue' : 'white';
      });
    },
    hasText: function hasText() {
      return getLoaderTextElement(component).isPresent();
    },
    getText: function getText() {
      return getLoaderTextElement(component).getText();
    },
    isError: function isError() {
      return hasClass(component, _Loader2.default, 'error');
    },
    isSuccess: function isSuccess() {
      return hasClass(component, _Loader2.default, 'success');
    },
    isLoading: function isLoading() {
      return hasClass(component, _Loader2.default, 'loading');
    }
  };
};

exports.default = loaderDriverFactory;