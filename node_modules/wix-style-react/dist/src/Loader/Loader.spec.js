'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Loader = require('./Loader');

var _Loader2 = _interopRequireDefault(_Loader);

var _Loader3 = require('./Loader.driver');

var _Loader4 = _interopRequireDefault(_Loader3);

var _driverFactory = require('wix-ui-test-utils/driver-factory');

var _testkit = require('../../testkit');

var _enzyme = require('../../testkit/enzyme');

var _testkitSanity = require('../../test/utils/testkit-sanity');

var _enzyme2 = require('enzyme');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('Loader', function () {
  var createDriver = (0, _driverFactory.createDriverFactory)(_Loader4.default);

  describe('size property', function () {
    it('should create a component with default medium size', function () {
      var driver = createDriver(_react2.default.createElement(_Loader2.default, null));
      expect(driver.isMedium()).toEqual(true);
    });

    it('should allow creating a tiny loader', function () {
      var driver = createDriver(_react2.default.createElement(_Loader2.default, { size: 'tiny' }));
      expect(driver.isTiny()).toEqual(true);
    });

    it('should allow creating a small loader', function () {
      var driver = createDriver(_react2.default.createElement(_Loader2.default, { size: 'small' }));
      expect(driver.isSmall()).toEqual(true);
    });

    it('should allow creating a medium loader', function () {
      var driver = createDriver(_react2.default.createElement(_Loader2.default, { size: 'medium' }));
      expect(driver.isMedium()).toEqual(true);
    });

    it('should allow creating a large loader', function () {
      var driver = createDriver(_react2.default.createElement(_Loader2.default, { size: 'large' }));
      expect(driver.isLarge()).toEqual(true);
    });
  });

  describe('text property', function () {
    it('should create a component with no text by default', function () {
      var driver = createDriver(_react2.default.createElement(_Loader2.default, null));
      expect(driver.hasText()).toEqual(false);
    });

    it('should create a component with text', function () {
      var text = 'All computers wait at the same speed';
      var driver = createDriver(_react2.default.createElement(_Loader2.default, { text: text }));
      expect(driver.hasText()).toEqual(true);
      expect(driver.getText()).toEqual(text);
    });

    it('should create a component with text element', function () {
      var text = 'All computers wait at the same speed';
      var textElement = _react2.default.createElement(
        'div',
        null,
        text
      );
      var driver = createDriver(_react2.default.createElement(_Loader2.default, { text: textElement }));
      expect(driver.hasText()).toEqual(true);
      expect(driver.getText()).toMatch(text);
    });

    it('should not show text next to tiny loader', function () {
      var size = 'tiny';
      var text = 'All computers wait at the same speed';
      var driver = createDriver(_react2.default.createElement(_Loader2.default, { size: size, text: text }));
      expect(driver.hasText()).toEqual(false);
    });
  });

  describe('color property', function () {
    it('should be blue by default', function () {
      var driver = createDriver(_react2.default.createElement(_Loader2.default, null));
      expect(driver.getColor()).toEqual('blue');
    });

    it('should get the given color', function () {
      var driver = createDriver(_react2.default.createElement(_Loader2.default, { color: 'white' }));
      expect(driver.getColor()).toEqual('white');
    });
  });

  describe('status property', function () {
    it('should be loading by default', function () {
      var driver = createDriver(_react2.default.createElement(_Loader2.default, null));
      expect(driver.isLoading()).toEqual(true);
    });

    it('should allow setting error status', function () {
      var driver = createDriver(_react2.default.createElement(_Loader2.default, { status: 'error' }));
      expect(driver.isError()).toEqual(true);
    });

    it('should allow setting success status', function () {
      var driver = createDriver(_react2.default.createElement(_Loader2.default, { status: 'success' }));
      expect(driver.isSuccess()).toEqual(true);
    });

    describe('tooltip message when hovered', function () {
      afterEach(function () {
        document.body.innerHTML = ''; // required for tooltip element to be removed and not to leak in consecutive tests
      });

      it('should show tooltip when hovered', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var statusMessage, driver;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                statusMessage = 'this is a some message';
                driver = createDriver(_react2.default.createElement(_Loader2.default, { status: 'success', statusMessage: statusMessage }));
                _context.t0 = expect;
                _context.next = 5;
                return driver.getStatusMessage();

              case 5:
                _context.t1 = _context.sent;
                _context.t2 = statusMessage;
                (0, _context.t0)(_context.t1).toBe(_context.t2);

              case 8:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, undefined);
      })));
    });
  });

  describe('testkit', function () {
    it('should exist', function () {
      expect((0, _testkitSanity.isTestkitExists)(_react2.default.createElement(_Loader2.default, null), _testkit.loaderTestkitFactory)).toBe(true);
    });
  });

  describe('enzyme testkit', function () {
    it('should exist', function () {
      expect((0, _testkitSanity.isEnzymeTestkitExists)(_react2.default.createElement(_Loader2.default, null), _enzyme.loaderTestkitFactory, _enzyme2.mount)).toBe(true);
    });
  });

  it('shouldn\'t throw when the Loader doesn\'t exist', function () {
    expect(function () {
      return (0, _Loader4.default)({});
    }).not.toThrow();
  });
});