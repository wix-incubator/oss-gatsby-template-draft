'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _MessageBoxFunctionalLayout = require('./MessageBoxFunctionalLayout.scss');

var _MessageBoxFunctionalLayout2 = _interopRequireDefault(_MessageBoxFunctionalLayout);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var messageBoxFunctionalLayoutDriverFactory = function messageBoxFunctionalLayoutDriverFactory(component) {
  var body = function body() {
    return component.$('[data-hook="message-box-body"]');
  };

  return {
    element: function element() {
      return component;
    },
    toHaveFooterBorder: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var bodyClassNames;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return body().getAttribute('class');

              case 2:
                bodyClassNames = _context.sent;
                return _context.abrupt('return', bodyClassNames.includes(_MessageBoxFunctionalLayout2.default.footerBorder));

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, undefined);
      }));

      return function toHaveFooterBorder() {
        return _ref.apply(this, arguments);
      };
    }(),
    scrollBodyDown: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(offset) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.t0 = browser;
                _context2.t1 = 'arguments[0].scrollTop = ' + offset + ';';
                _context2.next = 4;
                return body().getWebElement();

              case 4:
                _context2.t2 = _context2.sent;
                return _context2.abrupt('return', _context2.t0.executeScript.call(_context2.t0, _context2.t1, _context2.t2));

              case 6:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, undefined);
      }));

      return function scrollBodyDown(_x) {
        return _ref2.apply(this, arguments);
      };
    }()
  };
};

exports.default = messageBoxFunctionalLayoutDriverFactory;