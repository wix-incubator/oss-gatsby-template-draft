'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _testUtils = require('react-dom/test-utils');

var _testUtils2 = _interopRequireDefault(_testUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var modalDriverFactory = function modalDriverFactory(_ref) {
  var _element = _ref.element,
      wrapper = _ref.wrapper,
      component = _ref.component;


  var getPortal = function getPortal() {
    return document.body.querySelector('.portal');
  };
  var getOverlay = function getOverlay() {
    return document.body.querySelector('.ReactModal__Overlay');
  };
  var getContent = function getContent() {
    return document.body.querySelector('.ReactModal__Content');
  };
  var getCloseButton = function getCloseButton() {
    return document.body.querySelector('[data-hook="modal-close-button"]');
  };
  return {
    exists: function exists() {
      return !!getPortal();
    },
    element: function element() {
      return _element;
    },
    isOpen: function isOpen() {
      return !!getContent();
    },
    isThemeExist: function isThemeExist(theme) {
      return !!getPortal().querySelector('.' + theme);
    },
    getChildBySelector: function getChildBySelector(selector) {
      return getPortal().querySelector(selector);
    },
    isScrollable: function isScrollable() {
      return !getPortal().classList.contains('portalNonScrollable');
    },
    closeButtonExists: function closeButtonExists() {
      return !!getCloseButton();
    },
    clickOnOverlay: function clickOnOverlay() {
      var overlay = getOverlay();
      _testUtils2.default.Simulate.click(overlay);
    },
    clickOnCloseButton: function clickOnCloseButton() {
      var button = getCloseButton();
      _testUtils2.default.Simulate.click(button);
    },
    getContentStyle: function getContentStyle() {
      return getContent().style;
    },
    setProps: function setProps(props) {
      var ClonedWithProps = _react2.default.cloneElement.apply(_react2.default, [component, Object.assign({}, component.props, props)].concat(_toConsumableArray(component.props.children || [])));
      _reactDom2.default.render(_react2.default.createElement(
        'div',
        { ref: function ref(r) {
            return _element = r;
          } },
        ClonedWithProps
      ), wrapper);
    }
  };
};

exports.default = modalDriverFactory;