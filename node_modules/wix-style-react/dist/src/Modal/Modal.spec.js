'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Modal = require('./Modal');

var _Modal2 = _interopRequireDefault(_Modal);

var _Modal3 = require('./Modal.driver');

var _Modal4 = _interopRequireDefault(_Modal3);

var _driverFactory = require('wix-ui-test-utils/driver-factory');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _testkitSanity = require('../../test/utils/testkit-sanity');

var _testkit = require('../../testkit');

var _enzyme = require('../../testkit/enzyme');

var _enzyme2 = require('enzyme');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Modal', function () {
  var createDriver = (0, _driverFactory.createDriverFactory)(_Modal4.default);

  var props = {};

  beforeEach(function () {
    document.body.innerHTML = ''; //remove previous modals from body
    props = {};
    props.isOpen = true;
    props.contentLabel = 'modal_' + Math.random();
  });

  describe('content', function () {

    it('should not render the modal content if not open by default', function () {
      props.isOpen = false;

      var driver = createDriver(_react2.default.createElement(
        _Modal2.default,
        props,
        _react2.default.createElement('div', { 'data-hook': 'inner-div' })
      ));
      expect(driver.getChildBySelector('[data-hook="inner-div"]')).toBeNull();
    });

    it('should render the passed children in the markup', function () {
      props.isOpen = true;
      var driver = createDriver(_react2.default.createElement(
        _Modal2.default,
        props,
        _react2.default.createElement('div', { 'data-hook': 'inner-div' })
      ));
      expect(driver.getChildBySelector('[data-hook="inner-div"]')).not.toBeNull();
    });

    describe('maxHeight', function () {
      it('should render maxHeight passed in props', function () {
        var driver = createDriver(_react2.default.createElement(_Modal2.default, _extends({}, props, { scrollableContent: true, maxHeight: 'calc(100vh - 48px)' })));
        var driver2 = createDriver(_react2.default.createElement(_Modal2.default, _extends({}, props, { scrollableContent: false, maxHeight: 'calc(100vh - 48px)' })));
        expect(driver.getContentStyle().maxHeight).toBe('calc(100vh - 48px)');
        expect(driver2.getContentStyle().maxHeight).toBe('calc(100vh - 48px)');
      });

      it('should render 100vh maxHeight when maxHeight is set to auto and content is scrollable', function () {
        var driver = createDriver(_react2.default.createElement(_Modal2.default, _extends({}, props, { scrollableContent: true, maxHeight: 'auto' })));
        expect(driver.getContentStyle().maxHeight).toBe('100vh');
      });

      it('content position should be relative', function () {
        var driver = createDriver(_react2.default.createElement(_Modal2.default, props));
        expect(driver.getContentStyle().position).toBe('relative');
      });
    });
  });

  describe('callbacks', function () {
    it('should trigger the onAfterOpen function', function () {
      props.onAfterOpen = _sinon2.default.spy();

      createDriver(_react2.default.createElement(_Modal2.default, props));
      expect(props.onAfterOpen.calledOnce).toBeTruthy();
    });

    it('should trigger the onRequestClose function when clicking the overlay', function () {

      props.onRequestClose = _sinon2.default.spy();
      props.shouldCloseOnOverlayClick = true;
      props.closeTimeoutMS = 0;

      var driver = createDriver(_react2.default.createElement(_Modal2.default, props));
      driver.clickOnOverlay();

      expect(props.onRequestClose.calledOnce).toBeTruthy();
    });

    it('should trigger the onRequestClose function when clicking the close button', function () {

      props.onRequestClose = _sinon2.default.spy();
      props.shouldDisplayCloseButton = true;
      props.closeTimeoutMS = 0;

      var driver = createDriver(_react2.default.createElement(_Modal2.default, props));
      driver.clickOnCloseButton();

      expect(props.onRequestClose.calledOnce).toBeTruthy();
    });

    describe('timeout', function () {
      var originalTimeout = void 0;

      beforeEach(function () {
        originalTimeout = jasmine.DEFAULT_TIMEOUT_INTERVAL;
      });
      afterEach(function () {
        jasmine.DEFAULT_TIMEOUT_INTERVAL = originalTimeout;
      });

      it('should wait closeTimeoutMS before removing the modal', function (done) {
        props.closeTimeoutMS = 400;
        jasmine.DEFAULT_TIMEOUT_INTERVAL = props.closeTimeoutMS + 500;

        var driver = createDriver(_react2.default.createElement(_Modal2.default, props));
        driver.setProps({
          isOpen: false
        });

        setTimeout(function () {
          expect(driver.isOpen()).toBeTruthy();
        }, props.closeTimeoutMS - 50);

        setTimeout(function () {
          expect(driver.isOpen()).toBeFalsy();
          done();
        }, props.closeTimeoutMS + 50);
      });
    });
  });

  describe('theme', function () {
    it('should set the theme by default to "blue"', function () {
      var driver = createDriver(_react2.default.createElement(_Modal2.default, props));
      expect(driver.isThemeExist('blue')).toBeTruthy();
    });

    it('should allowing setting the theme', function () {
      props.theme = 'green';
      var driver = createDriver(_react2.default.createElement(_Modal2.default, props));
      expect(driver.isThemeExist('green')).toBeTruthy();
      expect(driver.isThemeExist('blue')).toBeFalsy();
    });
  });

  describe('scrollable', function () {
    it('should be set to true by default', function () {
      var driver = createDriver(_react2.default.createElement(_Modal2.default, props));
      expect(driver.isScrollable()).toBe(true);
    });
    it('should allow disabling the scrolling', function () {
      var driver = createDriver(_react2.default.createElement(_Modal2.default, _extends({}, props, { scrollable: false })));
      expect(driver.isScrollable()).toBe(false);
    });
  });

  describe('close button', function () {
    it('should not have a close button', function () {
      props.shouldDisplayCloseButton = false;
      var driver = createDriver(_react2.default.createElement(_Modal2.default, props));
      expect(driver.closeButtonExists()).toBe(false);
    });
    it('should have a close button', function () {
      props.shouldDisplayCloseButton = true;
      var driver = createDriver(_react2.default.createElement(_Modal2.default, props));
      expect(driver.closeButtonExists()).toBe(true);
    });
  });

  describe('appName', function () {
    it('should add aria-hidden body if appElement is not specified', function () {
      createDriver(_react2.default.createElement(_Modal2.default, props));
      expect(document.getElementsByTagName('body')[0].getAttribute('aria-hidden')).toBe('true');
    });

    it('should add aria-hidden to selected element', function () {
      var appElemnt = document.createElement('div');
      appElemnt.setAttribute('id', 'app');
      document.body.appendChild(appElemnt);
      props.appElement = '#app';
      createDriver(_react2.default.createElement(_Modal2.default, props));
      expect(appElemnt.getAttribute('aria-hidden')).toBe('true');
    });
  });

  describe('testkit', function () {
    it('should exist', function () {
      expect((0, _testkitSanity.isTestkitExists)(_react2.default.createElement(_Modal2.default, props), _testkit.modalTestkitFactory)).toBe(true);
    });
  });

  describe('enzyme testkit', function () {
    it('should exist', function () {
      expect((0, _testkitSanity.isEnzymeTestkitExists)(_react2.default.createElement(_Modal2.default, props), _enzyme.modalTestkitFactory, _enzyme2.mount)).toBe(true);
    });
  });
});