'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Tag = require('../Tag/Tag');

var _Tag2 = _interopRequireDefault(_Tag);

var _Input = require('../Input');

var _Input2 = _interopRequireDefault(_Input);

var _InputSuffix = require('../Input/InputSuffix');

var _InputSuffix2 = _interopRequireDefault(_InputSuffix);

var _InputWithTags = require('./InputWithTags.scss');

var _InputWithTags2 = _interopRequireDefault(_InputWithTags);

var _omit = require('omit');

var _omit2 = _interopRequireDefault(_omit);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _isUndefined = require('lodash/isUndefined');

var _isUndefined2 = _interopRequireDefault(_isUndefined);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InputWithTags = function (_React$Component) {
  _inherits(InputWithTags, _React$Component);

  function InputWithTags(props) {
    _classCallCheck(this, InputWithTags);

    var _this = _possibleConstructorReturn(this, (InputWithTags.__proto__ || Object.getPrototypeOf(InputWithTags)).call(this, props));

    _this.focus = _this.focus.bind(_this);
    _this.blur = _this.blur.bind(_this);
    _this.select = _this.select.bind(_this);

    _this.state = { inputValue: '', inputHasFocus: false, hasHover: false };
    return _this;
  }

  _createClass(InputWithTags, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.props.autoFocus && this.props.onFocus();
    }
  }, {
    key: 'handleClick',
    value: function handleClick(e) {
      this.input.focus();
      this.props.onInputClicked && this.props.onInputClicked(e);
    }
  }, {
    key: 'handleInputFocus',
    value: function handleInputFocus(e) {
      var _this2 = this;

      !this.state.inputHasFocus && this.setState({ inputHasFocus: true }, function () {
        _this2.props.onFocus && _this2.props.onFocus(e);
      });
    }
  }, {
    key: 'handleInputBlur',
    value: function handleInputBlur(e) {
      var _this3 = this;

      this.state.inputHasFocus && this.setState({ inputHasFocus: false }, function () {
        _this3.props.onBlur && _this3.props.onBlur(e);
      });
    }
  }, {
    key: 'handleHover',
    value: function handleHover() {
      var tags = this.props.tags;

      if (!this.state.hasHover && tags.length === 0) {
        this.setState({ hasHover: true });
      } else {
        this.setState({ hasHover: false });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _classNames,
          _this4 = this;

      var _props = this.props,
          tags = _props.tags,
          onRemoveTag = _props.onRemoveTag,
          placeholder = _props.placeholder,
          error = _props.error,
          errorMessage = _props.errorMessage,
          disabled = _props.disabled,
          delimiters = _props.delimiters,
          mode = _props.mode,
          inputProps = _objectWithoutProperties(_props, ['tags', 'onRemoveTag', 'placeholder', 'error', 'errorMessage', 'disabled', 'delimiters', 'mode']);

      var _state = this.state,
          hasFocus = _state.inputHasFocus,
          hasHover = _state.hasHover;

      var isSelectMode = mode === 'select';

      var className = (0, _classnames2.default)((_classNames = {}, _defineProperty(_classNames, _InputWithTags2.default.tagsContainer, true), _defineProperty(_classNames, _InputWithTags2.default.disabled, disabled), _defineProperty(_classNames, _InputWithTags2.default.error, error), _defineProperty(_classNames, _InputWithTags2.default.empty, !tags.length), _defineProperty(_classNames, _InputWithTags2.default.readOnly, isSelectMode), _defineProperty(_classNames, _InputWithTags2.default.hasFocus, hasFocus), _defineProperty(_classNames, _InputWithTags2.default.hasHover, hasHover), _defineProperty(_classNames, _InputWithTags2.default.hasMaxHeight, !(0, _isUndefined2.default)(this.props.maxHeight) || !(0, _isUndefined2.default)(this.props.maxNumRows)), _classNames));

      var desiredProps = (0, _omit2.default)(['onManuallyInput', 'inputElement', 'closeOnSelect', 'predicate', 'onClickOutside', 'fixedHeader', 'fixedFooter', 'dataHook', 'onFocus', 'withSelection', 'onBlur', 'menuArrow', 'errorMessage', 'onInputClicked'], inputProps);
      var fontSize = desiredProps.size && desiredProps.size === 'small' ? '14px' : '16px';

      var rowMultiplier = void 0;
      if (tags.length && tags[0].size === 'large') {
        rowMultiplier = 47;
      } else {
        rowMultiplier = 35;
      }
      var maxHeight = this.props.maxHeight || this.props.maxNumRows * rowMultiplier || 'initial';

      return _react2.default.createElement(
        'div',
        {
          className: className,
          style: { maxHeight: maxHeight },
          onClick: function onClick() {
            return _this4.handleClick();
          },
          onMouseOver: function onMouseOver() {
            return _this4.handleHover();
          },
          onMouseOut: function onMouseOut() {
            return _this4.handleHover();
          },
          'data-hook': this.props.dataHook
        },
        tags.map(function (_ref) {
          var label = _ref.label,
              rest = _objectWithoutProperties(_ref, ['label']);

          return _react2.default.createElement(
            _Tag2.default,
            _extends({ key: rest.id, disabled: disabled, onRemove: onRemoveTag }, rest),
            label
          );
        }),
        _react2.default.createElement(
          'span',
          { className: (0, _classnames2.default)(_InputWithTags2.default.input, _defineProperty({}, _InputWithTags2.default.emptyInput, !tags.length)), 'data-hook': 'inner-input-with-tags' },
          _react2.default.createElement(
            'div',
            { className: _InputWithTags2.default.hiddenDiv, style: { fontSize: fontSize } },
            this.state.inputValue
          ),
          _react2.default.createElement(_Input2.default, _extends({
            width: this.props.width,
            ref: function ref(input) {
              return _this4.input = input;
            },
            onFocus: function onFocus() {
              return _this4.handleInputFocus();
            },
            onBlur: function onBlur() {
              return _this4.handleInputBlur();
            },
            placeholder: tags.length === 0 ? placeholder : ''
          }, desiredProps, {
            dataHook: 'inputWithTags-input',
            disabled: disabled,
            readOnly: isSelectMode,
            onChange: function onChange(e) {
              if (!delimiters.includes(e.target.value)) {
                _this4.setState({ inputValue: e.target.value });
                desiredProps.onChange && desiredProps.onChange(e);
              }
            },
            withSelection: true
          }))
        ),
        (isSelectMode || error) && _react2.default.createElement(
          'div',
          { className: _InputWithTags2.default.inputSuffix },
          _react2.default.createElement(_InputSuffix2.default, {
            disabled: disabled,
            status: error && 'error',
            statusMessage: errorMessage,
            menuArrow: isSelectMode
          })
        )
      );
    }
  }, {
    key: 'focus',
    value: function focus() {
      this.input.focus();
    }
  }, {
    key: 'blur',
    value: function blur() {
      this.input.blur();
    }
  }, {
    key: 'select',
    value: function select() {
      this.input.select();
    }
  }, {
    key: 'clear',
    value: function clear() {
      this.setState({
        inputValue: ''
      });
    }
  }]);

  return InputWithTags;
}(_react2.default.Component);

InputWithTags.propTypes = {
  onRemoveTag: _propTypes2.default.func,
  tags: _propTypes2.default.array,
  maxHeight: _propTypes2.default.string,
  maxNumRows: _propTypes2.default.number,
  onKeyDown: _propTypes2.default.func,
  dataHook: _propTypes2.default.string,
  placeholder: _propTypes2.default.string,
  onFocus: _propTypes2.default.func,
  onBlur: _propTypes2.default.func,
  onInputClicked: _propTypes2.default.func,
  autoFocus: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  error: _propTypes2.default.bool,
  errorMessage: _propTypes2.default.string,
  mode: _propTypes2.default.oneOf(['select']),
  delimiters: _propTypes2.default.array,
  width: _propTypes2.default.string
};

InputWithTags.defaultProps = {
  onRemoveTag: function onRemoveTag() {},
  tags: [],
  placeholder: '',
  delimiters: []
};

exports.default = InputWithTags;