'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _InputWithOptions2 = require('../InputWithOptions/InputWithOptions');

var _InputWithOptions3 = _interopRequireDefault(_InputWithOptions2);

var _InputWithTags = require('./InputWithTags');

var _InputWithTags2 = _interopRequireDefault(_InputWithTags);

var _last = require('lodash/last');

var _last2 = _interopRequireDefault(_last);

var _difference = require('difference');

var _difference2 = _interopRequireDefault(_difference);

var _uniqueId = require('lodash/uniqueId');

var _uniqueId2 = _interopRequireDefault(_uniqueId);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MultiSelect = function (_InputWithOptions) {
  _inherits(MultiSelect, _InputWithOptions);

  function MultiSelect(props) {
    _classCallCheck(this, MultiSelect);

    var _this = _possibleConstructorReturn(this, (MultiSelect.__proto__ || Object.getPrototypeOf(MultiSelect)).call(this, props));

    _this.onKeyDown = _this.onKeyDown.bind(_this);
    _this.onPaste = _this.onPaste.bind(_this);
    _this.state = { pasteDetected: false };

    if (props.maxHeight) {
      console.warn('MultiSelect: maxHeight is deprecated, please use maxNumRows instead. maxHeight will not be supported starting from 03/12/2017');
    }
    return _this;
  }

  _createClass(MultiSelect, [{
    key: 'hideOptions',
    value: function hideOptions() {
      _get(MultiSelect.prototype.__proto__ || Object.getPrototypeOf(MultiSelect.prototype), 'hideOptions', this).call(this);
      this.clearInput();
    }
  }, {
    key: 'onClickOutside',
    value: function onClickOutside() {
      var _props = this.props,
          value = _props.value,
          options = _props.options,
          onSelect = _props.onSelect;

      if (!options.length && value) {
        onSelect([{ id: value.trim(), label: value.trim() }]);
      }
      this.hideOptions();
    }
  }, {
    key: 'getUnselectedOptions',
    value: function getUnselectedOptions() {
      var optionIds = this.props.options.map(function (option) {
        return option.id;
      });
      var tagIds = this.props.tags.map(function (tag) {
        return tag.id;
      });
      var unselectedOptionsIds = (0, _difference2.default)(optionIds, tagIds);
      return this.props.options.filter(function (option) {
        return unselectedOptionsIds.includes(option.id);
      });
    }
  }, {
    key: 'dropdownAdditionalProps',
    value: function dropdownAdditionalProps() {
      return {
        options: this.getUnselectedOptions().filter(this.props.predicate),
        closeOnSelect: false,
        selectedHighlight: false
      };
    }
  }, {
    key: 'closeOnSelect',
    value: function closeOnSelect() {
      return false;
    }
  }, {
    key: 'inputAdditionalProps',
    value: function inputAdditionalProps() {
      return {
        inputElement: _react2.default.createElement(_InputWithTags2.default, {
          maxHeight: this.props.maxHeight,
          maxNumRows: this.props.maxNumRows,
          mode: this.props.mode
        }),
        onKeyDown: this.onKeyDown,
        delimiters: this.props.delimiters,
        onPaste: this.onPaste
      };
    }
  }, {
    key: 'onPaste',
    value: function onPaste() {
      this.setState({ pasteDetected: true });
    }
  }, {
    key: '_onChange',
    value: function _onChange(event) {
      var _this2 = this;

      if (!this.state.pasteDetected) {
        this.setState({ inputValue: event.target.value });
        this.props.onChange && this.props.onChange(event);
      } else {
        var delimitersRegexp = new RegExp(this.props.delimiters.join('|'), 'g');
        var value = event.target.value.replace(delimitersRegexp, ',');
        var tags = value.split(',').map(function (str) {
          return str.trim();
        }).filter(function (str) {
          return str;
        });

        this.clearInput();
        this.setState({ pasteDetected: false });

        var suggestedOptions = tags.map(function (tag) {
          var tagObj = _this2.getUnselectedOptions().find(function (element) {
            return _this2.props.valueParser(element).toLowerCase() === tag.toLowerCase();
          });
          return tagObj ? tagObj : { id: (0, _uniqueId2.default)('customOption_'), value: tag, theme: 'error' };
        });

        this.onSelect(suggestedOptions);
      }
    }
  }, {
    key: '_onSelect',
    value: function _onSelect(option) {
      this.onSelect([option]);
    }
  }, {
    key: '_onManuallyInput',
    value: function _onManuallyInput(inputValue) {
      var _props2 = this.props,
          value = _props2.value,
          options = _props2.options;


      if (value && value.trim()) {
        if (options.length) {
          var unselectedOptions = this.getUnselectedOptions();
          var visibleOptions = unselectedOptions.filter(this.props.predicate);
          var maybeNearestOption = visibleOptions[0];

          if (maybeNearestOption) {
            this.onSelect([maybeNearestOption]);
          }
        } else {
          this.props.onSelect([{ id: value.trim(), label: value.trim() }]);
        }
      }

      if (inputValue) {
        inputValue = inputValue.trim();
        if (this.closeOnSelect()) {
          this.hideOptions();
        }

        this.onManuallyInput(inputValue);
      }
      this.clearInput();
    }
  }, {
    key: 'getManualSubmitKeys',
    value: function getManualSubmitKeys() {
      return ['Enter', 'Tab'].concat(this.props.delimiters);
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(event) {
      var _props3 = this.props,
          tags = _props3.tags,
          value = _props3.value,
          onRemoveTag = _props3.onRemoveTag;


      if (tags.length > 0 && (event.key === 'Delete' || event.key === 'Backspace') && value.length === 0) {
        onRemoveTag((0, _last2.default)(tags).id);
      }

      if (event.key === 'Escape') {
        this.clearInput();
        _get(MultiSelect.prototype.__proto__ || Object.getPrototypeOf(MultiSelect.prototype), 'hideOptions', this).call(this);
      }

      if (this.props.onKeyDown) {
        this.props.onKeyDown(event);
      }
    }
  }, {
    key: 'optionToTag',
    value: function optionToTag(_ref) {
      var id = _ref.id,
          value = _ref.value,
          tag = _ref.tag,
          theme = _ref.theme;

      return tag ? _extends({ id: id }, tag) : { id: id, label: value, theme: theme };
    }
  }, {
    key: 'onSelect',
    value: function onSelect(options) {
      this.clearInput();

      if (this.props.onSelect) {
        options = options.map(this.optionToTag);
        this.props.onSelect(options);
      }

      this.input.focus();
    }
  }, {
    key: 'onManuallyInput',
    value: function onManuallyInput(inputValue) {
      if (!inputValue) {
        this.input.blur();
        return;
      }

      if (this.props.onManuallyInput) {
        this.props.onManuallyInput(inputValue, this.optionToTag({ id: (0, _uniqueId2.default)('customOption_'), value: inputValue }));
      }

      this.clearInput();
    }
  }, {
    key: 'clearInput',
    value: function clearInput() {
      this.input.clear();
      if (this.props.onChange) {
        this.props.onChange({ target: { value: '' } });
      }
    }
  }]);

  return MultiSelect;
}(_InputWithOptions3.default);

MultiSelect.propTypes = _extends({}, _InputWithOptions3.default.propTypes, {
  predicate: _propTypes2.default.func,
  tags: _propTypes2.default.array,
  maxHeight: _propTypes2.default.string,
  maxNumRows: _propTypes2.default.number,
  delimiters: _propTypes2.default.array,
  mode: _propTypes2.default.string,
  error: _propTypes2.default.bool,
  errorMessage: _propTypes2.default.string
});

MultiSelect.defaultProps = _extends({}, _InputWithOptions3.default.defaultProps, {
  highlight: true,
  theme: 'tags',
  predicate: function predicate() {
    return true;
  },
  tags: [],
  delimiters: [',']
});

exports.default = MultiSelect;