'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _testkitSanity = require('../../test/utils/testkit-sanity');

var _Notification = require('./Notification.driver');

var _Notification2 = _interopRequireDefault(_Notification);

var _driverFactory = require('wix-ui-test-utils/driver-factory');

var _testkit = require('../../testkit');

var _enzyme2 = require('../../testkit/enzyme');

var _Notification3 = require('./Notification');

var _Notification4 = _interopRequireDefault(_Notification3);

var _Button = require('../../src/Button');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var renderNotificationWithProps = function renderNotificationWithProps() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _react2.default.createElement(
    _Notification4.default,
    props,
    _react2.default.createElement(
      _Notification4.default.TextLabel,
      null,
      'label'
    ),
    _react2.default.createElement(_Notification4.default.CloseButton, null)
  );
};

describe('Notification', function () {
  var createDriver = (0, _driverFactory.createDriverFactory)(_Notification2.default);

  describe('Visibility', function () {
    it('should verify component exists', function () {
      var driver = createDriver(renderNotificationWithProps());
      expect(driver.exists()).toBeTruthy();
    });

    it('should be visible', function () {
      var driver = createDriver(renderNotificationWithProps({ show: true }));
      expect(driver.visible()).toBeTruthy();
    });

    it('should not be visible', function () {
      var driver = createDriver(renderNotificationWithProps({ show: false }));
      expect(driver.visible()).toBeFalsy();
    });
  });

  describe('Themes', function () {
    it('should support default theme', function () {
      var driver = createDriver(renderNotificationWithProps({ show: true }));
      expect(driver.isStandardNotification()).toBeTruthy();
      expect(driver.hasTheme('standard')).toBeTruthy();
    });

    it('should support standard theme', function () {
      var driver = createDriver(renderNotificationWithProps({ show: true, theme: 'standard' }));
      expect(driver.isStandardNotification()).toBeTruthy();
    });

    it('should support error theme', function () {
      var driver = createDriver(renderNotificationWithProps({ show: true, theme: 'error' }));
      expect(driver.isErrorNotification()).toBeTruthy();
    });

    it('should support success theme', function () {
      var driver = createDriver(renderNotificationWithProps({ show: true, theme: 'success' }));
      expect(driver.isSuccessNotification()).toBeTruthy();
    });

    it('should support warning theme', function () {
      var driver = createDriver(renderNotificationWithProps({ show: true, theme: 'warning' }));
      expect(driver.isWarningNotification()).toBeTruthy();
    });

    it('should support premium theme', function () {
      var driver = createDriver(renderNotificationWithProps({ show: true, theme: 'premium' }));
      expect(driver.isPremiumNotification()).toBeTruthy();
    });
  });

  describe('Content', function () {
    describe('Label', function () {
      it('should show have a text to show', function () {
        var labelText = 'Label Text';
        var driver = createDriver(_react2.default.createElement(
          _Notification4.default,
          { show: true },
          _react2.default.createElement(
            _Notification4.default.TextLabel,
            null,
            labelText
          ),
          _react2.default.createElement(_Notification4.default.CloseButton, null)
        ));
        expect(driver.getLabelText()).toEqual(labelText);
      });
    });

    describe('Action Button', function () {
      it('should have an action button', function () {
        var actionButtonText = 'Action Button Text';
        var driver = createDriver(_react2.default.createElement(
          _Notification4.default,
          { show: true },
          _react2.default.createElement(
            _Notification4.default.TextLabel,
            null,
            'label'
          ),
          _react2.default.createElement(
            _Notification4.default.ActionButton,
            null,
            actionButtonText
          ),
          _react2.default.createElement(_Notification4.default.CloseButton, null)
        ));
        expect(driver.getActionButtonText()).toEqual(actionButtonText);
      });

      it('should not have an action button', function () {
        var driver = createDriver(renderNotificationWithProps({ show: true }));
        expect(driver.hasActionButton()).toBeFalsy();
      });

      it('should call the supplied onClick handler when clicked', function () {
        var onClickMock = jest.fn();

        var driver = createDriver(_react2.default.createElement(
          _Notification4.default,
          { show: true },
          _react2.default.createElement(
            _Notification4.default.TextLabel,
            null,
            'label'
          ),
          _react2.default.createElement(
            _Notification4.default.ActionButton,
            { onClick: onClickMock },
            'action'
          ),
          _react2.default.createElement(_Notification4.default.CloseButton, null)
        ));

        driver.clickOnActionButton();

        expect(onClickMock).toBeCalled();
      });
    });

    describe('Close Button', function () {
      it('should have a close button (with action button)', function () {
        var driver = createDriver(renderNotificationWithProps({ show: true }));
        expect(driver.hasCloseButton()).toBeTruthy();
      });

      it('should have a close button (without action button)', function () {
        var driver = createDriver(renderNotificationWithProps({ show: true }));
        expect(driver.hasActionButton()).toBeFalsy();
        expect(driver.hasCloseButton()).toBeTruthy();
      });
    });
  });

  describe('Type', function () {
    it('should set default type to global and position relative', function () {
      var driver = createDriver(renderNotificationWithProps({ show: true }));
      expect(driver.isRelativelyPositioned()).toBeTruthy();
    });

    it('should set the type to global and position relative', function () {
      var driver = createDriver(renderNotificationWithProps({ show: true, type: 'global' }));
      expect(driver.isRelativelyPositioned()).toBeTruthy();
    });

    it('should set the type to local and position absolute', function () {
      var driver = createDriver(renderNotificationWithProps({ show: true, type: 'local' }));
      expect(driver.isAbsolutePositioned()).toBeTruthy();
    });

    it('should set the type to sticky and position fixed', function () {
      var driver = createDriver(renderNotificationWithProps({ show: true, type: 'sticky' }));
      expect(driver.isFixedPositioned()).toBeTruthy();
    });
  });

  describe('Closing', function () {
    var driver = void 0;

    beforeEach(function () {
      jest.useFakeTimers();
    });

    describe('Closing when clicking on close button', function () {

      beforeEach(function () {
        driver = createDriver(renderNotificationWithProps({ show: true }));
        driver.clickOnCloseButton();
      });

      beforeEach(function () {
        jest.runAllTimers();
      });

      it('should close the notification', function () {
        expect(driver.visible()).toBeFalsy();
      });

      it('should allow reopening the notification after closed by close button', function () {
        driver.setProps({ show: true });
        expect(driver.visible()).toBeTruthy();
      });
    });

    ['local', 'sticky', 'global'].forEach(function (type) {
      describe('Closing after timeout for ' + type + ' Notification', function () {
        var someTimeout = 132;

        if (type !== 'global') {
          it('should close after default timeout (6s)', function () {
            var defaultTimeout = 6000;
            driver = createDriver(renderNotificationWithProps({ show: true, type: type }));
            jest.runAllTimers();

            expect(driver.visible()).toBeFalsy();
            expect(setTimeout.mock.calls.find(function (call) {
              return call[1] === defaultTimeout;
            })).toBeTruthy();
          });
        } else {
          it('should not close after default timeout (6s) for ' + type + ' Notification', function () {
            driver = createDriver(renderNotificationWithProps({ show: true, type: type }));
            jest.runAllTimers();

            expect(driver.visible()).toBeTruthy();
            expect(setTimeout).not.toBeCalled();
          });
        }

        it('should close after a given timeout', function () {
          driver = createDriver(renderNotificationWithProps({ show: true, type: type, timeout: someTimeout }));

          jest.runAllTimers();

          expect(driver.visible()).toBeFalsy();
          expect(setTimeout.mock.calls.find(function (call) {
            return call[1] === someTimeout;
          })).toBeTruthy();
        });

        it('should be able to show notification again after timeout', function () {
          driver = createDriver(renderNotificationWithProps({ show: true, type: type, timeout: someTimeout }));

          jest.runAllTimers();
          expect(driver.visible()).toBeFalsy();
          expect(setTimeout.mock.calls.find(function (call) {
            return call[1] === someTimeout;
          })).toBeTruthy();
          jest.clearAllTimers();

          driver.setProps({ show: true });
          expect(driver.visible()).toBeTruthy();
        });

        it('should close after starting from a closed status', function () {
          driver = createDriver(renderNotificationWithProps({ show: false, type: type, timeout: someTimeout }));

          jest.runAllTimers();
          expect(driver.visible()).toBeFalsy();
          driver.setProps({ show: true });
          expect(driver.visible()).toBeTruthy();
          jest.runAllTimers();
          expect(driver.visible()).toBeFalsy();

          expect(setTimeout.mock.calls.find(function (call) {
            return call[1] === someTimeout;
          })).toBeTruthy();
        });
      });
    });

    afterEach(function () {
      jest.clearAllTimers();
    });
  });

  describe('Style', function () {
    it('should accept a z-index', function () {
      var zIndex = 999;
      var driver = createDriver(renderNotificationWithProps({ show: true, zIndex: zIndex }));
      expect(driver.getZIndex()).toEqual(zIndex);
    });
  });

  describe('testkit', function () {
    it('should exist', function () {
      var component = renderNotificationWithProps({ show: true });
      expect((0, _testkitSanity.isTestkitExists)(component, _testkit.notificationTestkitFactory)).toBeTruthy();
    });
  });

  describe('enzyme testkit', function () {
    it('should exist', function () {
      var component = (0, _enzyme.mount)(_react2.default.createElement(ControlledNotification, null));

      var enzymeNotificationTestkit = (0, _enzyme2.notificationTestkitFactory)({ wrapper: component, dataHook: 'notification_dh' });
      var enzymeButtonTestkit = (0, _enzyme2.buttonTestkitFactory)({ wrapper: component, dataHook: 'button_dh' });

      expect(enzymeNotificationTestkit.visible()).toBeFalsy();
      expect(enzymeButtonTestkit.exists()).toBeTruthy();

      enzymeButtonTestkit.click();

      expect(enzymeNotificationTestkit.visible()).toBeTruthy();
    });
  });

  describe('Notification.ActionButton', function () {
    it('should display a Button when passing by default', function () {
      var component = (0, _enzyme.mount)(_react2.default.createElement(
        _Notification4.default.ActionButton,
        null,
        'Action Button'
      ));

      expect(component.find('Button').length).toEqual(1);
    });

    it('should display a Button when explicitly required', function () {
      var component = (0, _enzyme.mount)(_react2.default.createElement(
        _Notification4.default.ActionButton,
        { type: 'button' },
        'Action Button'
      ));

      expect(component.find('Button').length).toEqual(1);
    });

    it('should display a TextLink explicitly required', function () {
      var component = (0, _enzyme.mount)(_react2.default.createElement(
        _Notification4.default.ActionButton,
        { type: 'textLink', link: 'some link' },
        'Action Button'
      ));

      expect(component.find('TextLink').length).toEqual(1);
    });
  });
});

var ControlledNotification = function (_React$Component) {
  _inherits(ControlledNotification, _React$Component);

  function ControlledNotification(props) {
    _classCallCheck(this, ControlledNotification);

    var _this = _possibleConstructorReturn(this, (ControlledNotification.__proto__ || Object.getPrototypeOf(ControlledNotification)).call(this, props));

    _this.state = { showNotification: false };
    return _this;
  }

  _createClass(ControlledNotification, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          _Button2.default,
          { dataHook: 'button_dh', onClick: function onClick() {
              return _this2.setState({ showNotification: !_this2.state.showNotification });
            } },
          'button'
        ),
        _react2.default.createElement(
          _Notification4.default,
          { dataHook: 'notification_dh', show: this.state.showNotification },
          _react2.default.createElement(
            _Notification4.default.TextLabel,
            null,
            'label'
          ),
          _react2.default.createElement(_Notification4.default.CloseButton, null)
        )
      );
    }
  }]);

  return ControlledNotification;
}(_react2.default.Component);