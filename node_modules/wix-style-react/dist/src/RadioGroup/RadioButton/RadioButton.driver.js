'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _testUtils = require('react-dom/test-utils');

var _testUtils2 = _interopRequireDefault(_testUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var radioButtonDriverFactory = function radioButtonDriverFactory(_ref) {
  var element = _ref.element,
      wrapper = _ref.wrapper,
      component = _ref.component;

  var radioButton = element.childNodes[0];
  var label = element.childNodes[1];

  return {
    exists: function exists() {
      return !!element;
    },
    check: function check() {
      return _testUtils2.default.Simulate.change(radioButton);
    },
    isChecked: function isChecked() {
      return radioButton.checked;
    },
    isDisabled: function isDisabled() {
      return radioButton.disabled;
    },
    getLabel: function getLabel() {
      return label.textContent;
    },
    getContent: function getContent() {
      return element.querySelector('[data-hook="radio-button-content"]');
    },
    setProps: function setProps(props) {
      var ClonedWithProps = _react2.default.cloneElement.apply(_react2.default, [component, Object.assign({}, component.props, props)].concat(_toConsumableArray(component.props.children || [])));
      _reactDom2.default.render(_react2.default.createElement(
        'div',
        { ref: function ref(r) {
            return element = r;
          } },
        ClonedWithProps
      ), wrapper);
    }
  };
};

exports.default = radioButtonDriverFactory;