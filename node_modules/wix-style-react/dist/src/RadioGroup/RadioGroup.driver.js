'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _testUtils = require('react-dom/test-utils');

var _testUtils2 = _interopRequireDefault(_testUtils);

var _toArray = require('lodash/toArray');

var _toArray2 = _interopRequireDefault(_toArray);

var _utils = require('../../test/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var radioGroupDriverFactory = function radioGroupDriverFactory(_ref) {
  var element = _ref.element,
      wrapper = _ref.wrapper,
      component = _ref.component;

  var radios = (0, _toArray2.default)(element.children) || [];
  var radioButtons = radios.map(function (radio) {
    return radio.childNodes[0];
  });
  var labels = radios.map(function (radio) {
    return radio.childNodes[1];
  });
  var selectedRadio = function selectedRadio() {
    return radios.find(function (radio) {
      return radio.childNodes[0].checked;
    });
  };
  var getRadioByValue = function getRadioByValue(value) {
    return radioButtons.find(function (radioButton) {
      return radioButton.value === value.toString();
    });
  };

  return {
    exists: function exists() {
      return !!element;
    },
    selectByValue: function selectByValue(value) {
      return _testUtils2.default.Simulate.change(getRadioByValue(value));
    },
    selectByIndex: function selectByIndex(index) {
      return _testUtils2.default.Simulate.change(radioButtons[index]);
    },
    getRadioValueAt: function getRadioValueAt(index) {
      return radioButtons[index].value;
    },
    getRadioAtIndex: function getRadioAtIndex(index) {
      return radios[index];
    },
    getSelectedValue: function getSelectedValue() {
      return selectedRadio() ? selectedRadio().childNodes[0].value : null;
    },
    getClassOfLabelAt: function getClassOfLabelAt(index) {
      return labels[index].className;
    },
    isVerticalDisplay: function isVerticalDisplay() {
      return (0, _utils.isClassExists)(element, 'vertical');
    },
    isHorizontalDisplay: function isHorizontalDisplay() {
      return (0, _utils.isClassExists)(element, 'horizontal');
    },
    isButtonType: function isButtonType() {
      return (0, _utils.isClassExists)(element, 'buttonType');
    },
    spacing: function spacing() {
      return radios[1].style._values['margin-top'];
    },
    lineHeight: function lineHeight() {
      return labels[0].style._values['line-height'];
    },
    getNumberOfRadios: function getNumberOfRadios() {
      return radios.length;
    },
    setProps: function setProps(props) {
      var ClonedWithProps = _react2.default.cloneElement.apply(_react2.default, [component, Object.assign({}, component.props, props)].concat(_toConsumableArray(component.props.children || [])));
      _reactDom2.default.render(_react2.default.createElement(
        'div',
        { ref: function ref(r) {
            return element = r;
          } },
        ClonedWithProps
      ), wrapper);
    }
  };
};

exports.default = radioGroupDriverFactory;