'use strict';

var _eyes = require('eyes.it');

var _eyes2 = _interopRequireDefault(_eyes);

var _protractor = require('../../testkit/protractor');

var _protractor2 = require('wix-ui-test-utils/protractor');

var _storybookHelpers = require('../../test/utils/storybook-helpers');

var _AutoExampleDriver = require('wix-storybook-utils/AutoExampleDriver');

var _AutoExampleDriver2 = _interopRequireDefault(_AutoExampleDriver);

var _RadioGroup = require('../../stories/RadioGroup.story');

var _privateDrivers = require('../../test/utils/private-drivers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('RadioGroup', function () {
  var storyUrl = (0, _storybookHelpers.getStoryUrl)('4. Selection', '4.3 Radio Button Group');
  var dataHook = 'storybook-radiogroup';
  var radioGroupDriver = (0, _protractor.radioGroupTestkitFactory)({ dataHook: dataHook });

  beforeAll(function () {
    return browser.get(storyUrl);
  });

  afterEach(function () {
    _AutoExampleDriver2.default.reset();
  });

  _eyes2.default.it('should select the second option in a group', function () {
    (0, _protractor2.waitForVisibilityOf)(radioGroupDriver.element(), 'Cannot find RadioGroup').then(function () {
      radioGroupDriver.selectByIndex(1).click();
      expect(radioGroupDriver.isRadioChecked(1)).toBe(true);
    });
  });

  _eyes2.default.it('should not select disabled option', function () {
    _AutoExampleDriver2.default.setProps({ disabledRadios: [4] });

    (0, _protractor2.waitForVisibilityOf)(radioGroupDriver.element(), 'Cannot find RadioGroup').then(function () {
      expect(radioGroupDriver.isRadioDisabled(3)).toBe(true);
      browser.actions().mouseMove(radioGroupDriver.getRadioAtIndex(3)).click();
      expect(radioGroupDriver.isRadioChecked(3)).toBe(false);
    });
  });

  describe('Focus tests', function () {

    var pressTab = function pressTab() {
      return browser.actions().sendKeys(protractor.Key.TAB).perform();
    };
    var groupDriver = radioGroupDriver;

    var expectNotFocused = function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(msg, driver) {
        var prefix;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                prefix = msg ? msg + ' - ' : '';
                _context.t0 = expect;
                _context.next = 4;
                return driver.isFocused();

              case 4:
                _context.t1 = _context.sent;
                _context.t2 = prefix + 'focused';
                (0, _context.t0)(_context.t1).toBe(false, _context.t2);
                _context.t3 = expect;
                _context.next = 10;
                return driver.hasFocusState();

              case 10:
                _context.t4 = _context.sent;
                _context.t5 = prefix + 'hasFocusState';
                (0, _context.t3)(_context.t4).toBe(false, _context.t5);
                _context.t6 = expect;
                _context.next = 16;
                return driver.hasFocusVisibleState();

              case 16:
                _context.t7 = _context.sent;
                _context.t8 = prefix + 'hasFocusVisibleState';
                (0, _context.t6)(_context.t7).toBe(false, _context.t8);

              case 19:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, undefined);
      }));

      return function expectNotFocused(_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }();

    var expectFocusedByKeyboard = function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(msg, driver) {
        var prefix;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                prefix = msg ? msg + ' - ' : '';
                _context2.t0 = expect;
                _context2.next = 4;
                return driver.isFocused();

              case 4:
                _context2.t1 = _context2.sent;
                _context2.t2 = prefix + 'focused';
                (0, _context2.t0)(_context2.t1).toBe(true, _context2.t2);
                _context2.t3 = expect;
                _context2.next = 10;
                return driver.hasFocusState();

              case 10:
                _context2.t4 = _context2.sent;
                _context2.t5 = prefix + 'hasFocusState';
                (0, _context2.t3)(_context2.t4).toBe(true, _context2.t5);
                _context2.t6 = expect;
                _context2.next = 16;
                return driver.hasFocusVisibleState();

              case 16:
                _context2.t7 = _context2.sent;
                _context2.t8 = prefix + 'hasFocusVisibleState';
                (0, _context2.t6)(_context2.t7).toBe(true, _context2.t8);

              case 19:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, undefined);
      }));

      return function expectFocusedByKeyboard(_x3, _x4) {
        return _ref2.apply(this, arguments);
      };
    }();

    var expectFocusedByMouse = function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(msg, driver) {
        var prefix;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                prefix = msg ? msg + ' - ' : '';
                _context3.t0 = expect;
                _context3.next = 4;
                return driver.isFocused();

              case 4:
                _context3.t1 = _context3.sent;
                _context3.t2 = prefix + 'focused';
                (0, _context3.t0)(_context3.t1).toBe(true, _context3.t2);
                _context3.t3 = expect;
                _context3.next = 10;
                return driver.hasFocusState();

              case 10:
                _context3.t4 = _context3.sent;
                _context3.t5 = prefix + 'hasFocusState';
                (0, _context3.t3)(_context3.t4).toBe(true, _context3.t5);
                _context3.t6 = expect;
                _context3.next = 16;
                return driver.hasFocusVisibleState();

              case 16:
                _context3.t7 = _context3.sent;
                _context3.t8 = prefix + 'hasFocusVisibleState';
                (0, _context3.t6)(_context3.t7).toBe(false, _context3.t8);

              case 19:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, undefined);
      }));

      return function expectFocusedByMouse(_x5, _x6) {
        return _ref3.apply(this, arguments);
      };
    }();

    beforeEach(function () {
      // Needed in order to reset the focus state
      browser.get(storyUrl);
    });

    _eyes2.default.it('should show focus styles when navigated by keyboard', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              (0, _protractor2.waitForVisibilityOf)(radioGroupDriver.element(), 'Cannot find RadioGroup').then(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                var index, driver;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        index = 0;

                      case 1:
                        if (!(index < _RadioGroup.NUM_OF_BUTTONS_IN_EXAMPLE)) {
                          _context4.next = 16;
                          break;
                        }

                        driver = (0, _privateDrivers.flattenInternalDriver)(groupDriver.getButtonDriver(index));
                        _context4.next = 5;
                        return expectNotFocused('button ' + index + ' - before', driver);

                      case 5:
                        _context4.next = 7;
                        return pressTab();

                      case 7:
                        _context4.next = 9;
                        return expectFocusedByKeyboard('button ' + index + ' - after', driver);

                      case 9:
                        _context4.t0 = index === 0;

                        if (!_context4.t0) {
                          _context4.next = 13;
                          break;
                        }

                        _context4.next = 13;
                        return _eyes2.default.checkWindow('button ' + index + ' with focus-visible');

                      case 13:
                        index++;
                        _context4.next = 1;
                        break;

                      case 16:
                      case 'end':
                        return _context4.stop();
                    }
                  }
                }, _callee4, undefined);
              })));

            case 1:
            case 'end':
              return _context5.stop();
          }
        }
      }, _callee5, undefined);
    })));

    it('should to be selected but NOT to show focus styles when clicked by mouse', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              (0, _protractor2.waitForVisibilityOf)(radioGroupDriver.element(), 'Cannot find RadioGroup').then(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
                var index, driver;
                return regeneratorRuntime.wrap(function _callee6$(_context6) {
                  while (1) {
                    switch (_context6.prev = _context6.next) {
                      case 0:
                        index = 0;

                      case 1:
                        if (!(index < _RadioGroup.NUM_OF_BUTTONS_IN_EXAMPLE)) {
                          _context6.next = 17;
                          break;
                        }

                        driver = (0, _privateDrivers.flattenInternalDriver)(groupDriver.getButtonDriver(index));
                        _context6.next = 5;
                        return expectNotFocused('button ' + index + ' - before', driver);

                      case 5:
                        _context6.next = 7;
                        return driver.clickRoot();

                      case 7:
                        _context6.t0 = expect;
                        _context6.next = 10;
                        return radioGroupDriver.isRadioChecked(index);

                      case 10:
                        _context6.t1 = _context6.sent;
                        (0, _context6.t0)(_context6.t1).toBe(true);
                        _context6.next = 14;
                        return expectFocusedByMouse('button ' + index + ' - after', driver);

                      case 14:
                        index++;
                        _context6.next = 1;
                        break;

                      case 17:
                      case 'end':
                        return _context6.stop();
                    }
                  }
                }, _callee6, undefined);
              })));

            case 1:
            case 'end':
              return _context7.stop();
          }
        }
      }, _callee7, undefined);
    })));

    _eyes2.default.it('should show focus styles on first item (selected)', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
      return regeneratorRuntime.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return _AutoExampleDriver2.default.setProps({ value: 1 });

            case 2:
              _context9.next = 4;
              return (0, _protractor2.waitForVisibilityOf)(radioGroupDriver.element(), 'Cannot find RadioGroup').then(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
                var driver;
                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                  while (1) {
                    switch (_context8.prev = _context8.next) {
                      case 0:
                        driver = (0, _privateDrivers.flattenInternalDriver)(groupDriver.getButtonDriver(0));
                        _context8.t0 = expect;
                        _context8.next = 4;
                        return radioGroupDriver.isRadioChecked(0);

                      case 4:
                        _context8.t1 = _context8.sent;
                        (0, _context8.t0)(_context8.t1).toBe(true);
                        _context8.next = 8;
                        return expectNotFocused('button 0 - before', driver);

                      case 8:
                        _context8.next = 10;
                        return pressTab();

                      case 10:
                        _context8.next = 12;
                        return expectFocusedByKeyboard('button 0 - after', driver);

                      case 12:
                      case 'end':
                        return _context8.stop();
                    }
                  }
                }, _callee8, undefined);
              })));

            case 4:
            case 'end':
              return _context9.stop();
          }
        }
      }, _callee9, undefined);
    })));
  });
});