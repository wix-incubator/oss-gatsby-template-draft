'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RadioGroup = require('./RadioGroup');

var _RadioGroup2 = _interopRequireDefault(_RadioGroup);

var _RadioGroup3 = require('./RadioGroup.driver');

var _RadioGroup4 = _interopRequireDefault(_RadioGroup3);

var _driverFactory = require('wix-ui-test-utils/driver-factory');

var _testkit = require('../../testkit');

var _testkitSanity = require('../../test/utils/testkit-sanity');

var _enzyme = require('../../testkit/enzyme');

var _enzyme2 = require('enzyme');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('RadioGroup', function () {
  var createDriver = (0, _driverFactory.createDriverFactory)(_RadioGroup4.default);

  var elementToRender = function elementToRender(props) {
    return _react2.default.createElement(
      _RadioGroup2.default,
      props,
      _react2.default.createElement(
        _RadioGroup2.default.Radio,
        { value: 1 },
        'Option 1'
      ),
      _react2.default.createElement(
        _RadioGroup2.default.Radio,
        { value: 2 },
        'Option 2'
      ),
      _react2.default.createElement(
        _RadioGroup2.default.Radio,
        { value: 3 },
        'Option 3'
      ),
      _react2.default.createElement(
        _RadioGroup2.default.Radio,
        { value: 4 },
        'Option 4'
      )
    );
  };

  it('should have the correct radio buttons', function () {
    var driver = createDriver(elementToRender());
    expect(driver.getNumberOfRadios()).toBe(4);
    expect(driver.getRadioValueAt(0)).toBe('1');
  });

  it('should check the option that matches the initial value', function () {
    var value = 2;
    var driver = createDriver(elementToRender({ value: value }));
    expect(driver.getSelectedValue()).toBe(value.toString());
  });

  it('should update selected value after change to props', function () {
    var driver = createDriver(elementToRender({ value: 1 }));
    var value = 2;
    driver.setProps({ value: value });
    expect(driver.getSelectedValue()).toBe(value.toString());
  });

  it('should not check any options if value was not matched', function () {
    var value = 10;
    var driver = createDriver(elementToRender({ value: value }));
    expect(driver.getSelectedValue()).toBe(null);
  });

  describe('onChange attribute', function () {
    it('should be called with the correct option value', function () {
      var onChange = jest.fn();
      var driver = createDriver(elementToRender({ onChange: onChange }));
      driver.selectByValue(1);
      expect(onChange).toBeCalledWith(1);
    });

    it('should not be called upon checked option', function () {
      var value = 1;
      var onChange = jest.fn();
      var driver = createDriver(elementToRender({ onChange: onChange, value: value }));

      driver.selectByValue(1);
      expect(onChange.mock.calls.length).toBe(0);
    });

    it('should not be called upon disabled option', function () {
      var disabledRadios = [1];
      var onChange = jest.fn();
      var driver = createDriver(elementToRender({ onChange: onChange, disabledRadios: disabledRadios }));

      driver.selectByValue(1);
      expect(onChange.mock.calls.length).toBe(0);
    });
  });

  describe('vAlign attribute', function () {
    var elementToRender = function elementToRender(props) {
      return _react2.default.createElement(
        _RadioGroup2.default,
        props,
        _react2.default.createElement(
          _RadioGroup2.default.Radio,
          { value: 1 },
          'Option 1'
        ),
        _react2.default.createElement(
          _RadioGroup2.default.Radio,
          { value: 2 },
          'Option 2'
        )
      );
    };

    it('should have a default vcenter class', function () {
      var driver = createDriver(elementToRender());
      expect(driver.getClassOfLabelAt(0)).toContain('vcenter');
      expect(driver.getClassOfLabelAt(1)).toContain('vcenter');
    });

    it('should have a vtop class', function () {
      var driver = createDriver(elementToRender({ vAlign: 'top' }));
      expect(driver.getClassOfLabelAt(0)).toContain('vtop');
      expect(driver.getClassOfLabelAt(1)).toContain('vtop');
    });
  });

  describe('display attribute', function () {
    it('should be vertical by default', function () {
      var driver = createDriver(elementToRender());
      expect(driver.isVerticalDisplay()).toBe(true);
    });

    it('should be horizontal', function () {
      var driver = createDriver(elementToRender({ display: 'horizontal' }));
      expect(driver.isHorizontalDisplay()).toBe(true);
    });
  });

  describe('spacing attribute', function () {
    it('should be 12px by default', function () {
      var driver = createDriver(elementToRender());
      expect(driver.spacing()).toBe('12px');
    });

    it('should be spaced', function () {
      var driver = createDriver(elementToRender({ spacing: '30px' }));
      expect(driver.spacing()).toBe('30px');
    });
  });

  describe('line-height attribute', function () {
    it('should have default value', function () {
      var driver = createDriver(elementToRender());
      expect(driver.lineHeight()).toBe(_RadioGroup2.default.defaultProps.lineHeight);
    });
  });

  describe('label appearance', function () {
    it('should be T1.1 by default', function () {
      var driver = createDriver(elementToRender());
      expect(driver.getClassOfLabelAt(0)).toContain('t1_1');
    });

    it('should be T1.4 when disabled', function () {
      var driver = createDriver(elementToRender({ disabled: true }));
      expect(driver.getClassOfLabelAt(0)).toContain('t1_4');
    });
  });

  describe('testkit', function () {
    it('should exist', function () {
      expect((0, _testkitSanity.isTestkitExists)(_react2.default.createElement(_RadioGroup2.default, null), _testkit.radioGroupTestkitFactory)).toBe(true);
    });
  });

  describe('enzyme testkit', function () {
    it('should exist', function () {
      expect((0, _testkitSanity.isEnzymeTestkitExists)(_react2.default.createElement(_RadioGroup2.default, null), _enzyme.radioGroupTestkitFactory, _enzyme2.mount)).toBe(true);
    });
  });
});