'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _eyes = require('eyes.it');

var _eyes2 = _interopRequireDefault(_eyes);

var _protractor = require('../../testkit/protractor');

var _protractor2 = require('wix-ui-test-utils/protractor');

var _storybookHelpers = require('../../test/utils/storybook-helpers');

var _StorySettings = require('../../stories/Range/StorySettings');

var _StorySettings2 = _interopRequireDefault(_StorySettings);

var _InputProtractor = require('../Input/Input.protractor.driver');

var _InputProtractor2 = _interopRequireDefault(_InputProtractor);

var _DatePickerProtractor = require('../DatePicker/DatePicker.protractor.driver');

var _DatePickerProtractor2 = _interopRequireDefault(_DatePickerProtractor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var rangeTestkitE2EFactory = function rangeTestkitE2EFactory(rangeDriver) {
  var component = rangeDriver.element();
  var byDataHook = function byDataHook(_ref) {
    var component = _ref.component,
        dataHook = _ref.dataHook;
    return component.$('[data-hook=\'' + dataHook + '\']');
  };
  var firstItem = byDataHook({ dataHook: 'first-item', component: component });
  var lastItem = byDataHook({ dataHook: 'last-item', component: component });

  var inputDriverFirst = function inputDriverFirst() {
    return (0, _InputProtractor2.default)(firstItem);
  };
  var inputDriverLast = function inputDriverLast() {
    return (0, _InputProtractor2.default)(lastItem);
  };

  var datePickerDriverFirst = function datePickerDriverFirst() {
    return (0, _DatePickerProtractor2.default)(firstItem);
  };
  var datePickerDriverLast = function datePickerDriverLast() {
    return (0, _DatePickerProtractor2.default)(lastItem);
  };

  return _extends({}, rangeDriver, {
    inputType: {
      isFocusedFirst: function isFocusedFirst() {
        return inputDriverFirst().isFocused();
      },
      isFocusedLast: function isFocusedLast() {
        return inputDriverLast().isFocused();
      },
      clickFirst: function clickFirst() {
        return inputDriverFirst().click();
      },
      clickLast: function clickLast() {
        return inputDriverLast().click();
      }
    },
    dateType: {
      isFocusedFirst: function isFocusedFirst() {
        return datePickerDriverFirst().inputDriver.isFocused();
      },
      isFocusedLast: function isFocusedLast() {
        return datePickerDriverLast().inputDriver.isFocused();
      },
      clickFirst: function clickFirst() {
        return datePickerDriverFirst().inputDriver.click();
      },
      clickLast: function clickLast() {
        return datePickerDriverLast().inputDriver.click();
      }
    }
  });
};

describe('Range', function () {
  var storyUrl = (0, _storybookHelpers.getStoryUrl)(_StorySettings2.default.kind, _StorySettings2.default.storyName);

  var driverInput = rangeTestkitE2EFactory((0, _protractor.rangeTestkitFactory)({ dataHook: _StorySettings2.default.dataHookInput }));
  var driverDate = rangeTestkitE2EFactory((0, _protractor.rangeTestkitFactory)({ dataHook: _StorySettings2.default.dataHookDatePicker }));
  var waitForRange = function waitForRange() {
    return (0, _protractor2.waitForVisibilityOf)(driverInput.element(), 'Cannot find Range');
  };

  beforeAll(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return browser.get(storyUrl);

          case 2:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));

  beforeEach(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return waitForRange();

          case 2:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));

  describe('Input type', function () {
    var driver = driverInput.inputType;
    _eyes2.default.it('should have default props', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              expect(driver.isFocusedFirst()).toBe(false, 'isFocused');
              expect(driver.isFocusedLast()).toBe(false, 'isFocused');

            case 2:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, undefined);
    })));

    _eyes2.default.it('should show focused styles for first item', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              expect(driver.isFocusedFirst()).toBe(false);
              _context4.next = 3;
              return driver.clickFirst();

            case 3:
              expect(driver.isFocusedFirst()).toBe(true);

            case 4:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee4, undefined);
    })));

    _eyes2.default.it('should show focused styles for last item', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              expect(driver.isFocusedLast()).toBe(false);
              _context5.next = 3;
              return driver.clickLast();

            case 3:
              expect(driver.isFocusedLast()).toBe(true);

            case 4:
            case 'end':
              return _context5.stop();
          }
        }
      }, _callee5, undefined);
    })));
  });

  describe('DatePicker type', function () {
    var driver = driverDate.dateType;
    _eyes2.default.it('should have default props', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              expect(driver.isFocusedFirst()).toBe(false, 'isFocusedFirst');
              expect(driver.isFocusedLast()).toBe(false, 'isFocusedLast');

            case 2:
            case 'end':
              return _context6.stop();
          }
        }
      }, _callee6, undefined);
    })));

    _eyes2.default.it('should show focused styles for first item', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              expect(driver.isFocusedFirst()).toBe(false);
              _context7.next = 3;
              return driver.clickFirst();

            case 3:
              expect(driver.isFocusedFirst()).toBe(true);

            case 4:
            case 'end':
              return _context7.stop();
          }
        }
      }, _callee7, undefined);
    })), { version: '<Input/>-On text click - select all' });

    _eyes2.default.it('should show focused styles for last item', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
      return regeneratorRuntime.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              expect(driver.isFocusedLast()).toBe(false);
              _context8.next = 3;
              return driver.clickLast();

            case 3:
              _context8.next = 5;
              return driver.clickLast();

            case 5:
              // TODO: temporary :)
              expect(driver.isFocusedLast()).toBe(true);

            case 6:
            case 'end':
              return _context8.stop();
          }
        }
      }, _callee8, undefined);
    })));
  });
});