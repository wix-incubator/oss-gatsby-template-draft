'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _testUtils = require('react-dom/test-utils');

var _testUtils2 = _interopRequireDefault(_testUtils);

var _RichTextArea = require('./RichTextArea.scss');

var _RichTextArea2 = _interopRequireDefault(_RichTextArea);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var richTextAreaDriverFactory = function richTextAreaDriverFactory(_ref) {
  var element = _ref.element,
      wrapper = _ref.wrapper,
      component = _ref.component;

  var getButtons = function getButtons() {
    return [].concat(_toConsumableArray(element.querySelectorAll('[data-hook*="rich-text-area-button"]')));
  };
  var getEditorWrapper = function getEditorWrapper() {
    return element.querySelector('[data-hook=editor-wrapper]');
  };
  var getButtonType = function getButtonType(button) {
    return button.getAttribute('data-hook').replace(/^rich-text-area-button-/, '');
  };
  var getImage = function getImage() {
    return element.querySelector('[data-hook=editor-image]');
  };
  var getButtonByType = function getButtonByType(type) {
    return getButtons().find(function (button) {
      return getButtonType(button) === type;
    });
  };
  var clickButtonByType = function clickButtonByType(type) {
    return function () {
      return _testUtils2.default.Simulate.mouseDown(getButtonByType(type));
    };
  };
  var getDefaultBlock = function getDefaultBlock() {
    return element.querySelector('[data-key=\'defaultBlock\']');
  };

  return {
    exists: function exists() {
      return !!element;
    },
    getButtonTypes: function getButtonTypes() {
      return getButtons().map(getButtonType);
    },
    clickBoldButton: clickButtonByType('bold'),
    clickItalicButton: clickButtonByType('italic'),
    clickUnderlineButton: clickButtonByType('underline'),
    clickImageButton: clickButtonByType('image'),
    clickUnorderedListButton: clickButtonByType('unordered-list'),
    clickOrderedListButton: clickButtonByType('ordered-list'),
    getContent: function getContent() {
      return element.childNodes[1].textContent;
    },
    enterText: function enterText(text) {
      var props = { value: text, isAppend: true };
      var ClonedWithProps = _react2.default.cloneElement.apply(_react2.default, [component, Object.assign({}, component.props, props)].concat(_toConsumableArray(component.props.children || [])));
      _reactDom2.default.render(_react2.default.createElement(
        'div',
        { ref: function ref(r) {
            return element = r;
          } },
        ClonedWithProps
      ), wrapper);
    },
    isErrorIndicatorVisible: function isErrorIndicatorVisible() {
      return Boolean(element.classList.contains(_RichTextArea2.default.withError));
    },
    isDisabled: function isDisabled() {
      return getButtons().every(function (button) {
        return button.classList.contains(_RichTextArea2.default.disabled);
      }) && element.childNodes[1].classList.contains(_RichTextArea2.default.disabled);
    },
    isImageExist: function isImageExist() {
      return !!getImage();
    },
    isAddImageButtonExist: function isAddImageButtonExist() {
      return !!getButtonByType('image');
    },
    isResizable: function isResizable() {
      return getEditorWrapper().classList.contains(_RichTextArea2.default.resizable);
    },
    isDefaultBlockExist: function isDefaultBlockExist() {
      return getDefaultBlock();
    },
    setProps: function setProps(props) {
      var ClonedWithProps = _react2.default.cloneElement.apply(_react2.default, [component, Object.assign({}, component.props, props)].concat(_toConsumableArray(component.props.children || [])));
      _reactDom2.default.render(_react2.default.createElement(
        'div',
        { ref: function ref(r) {
            return element = r;
          } },
        ClonedWithProps
      ), wrapper);
    }
  };
};

exports.default = richTextAreaDriverFactory;