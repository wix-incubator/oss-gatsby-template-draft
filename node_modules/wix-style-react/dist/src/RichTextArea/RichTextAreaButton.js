'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Tooltip = require('../Tooltip');

var _Tooltip2 = _interopRequireDefault(_Tooltip);

var _TextAreaBold = require('./../new-icons/system/TextAreaBold');

var _TextAreaBold2 = _interopRequireDefault(_TextAreaBold);

var _TextAreaItalic = require('./../new-icons/system/TextAreaItalic');

var _TextAreaItalic2 = _interopRequireDefault(_TextAreaItalic);

var _TextAreaUnderline = require('./../new-icons/system/TextAreaUnderline');

var _TextAreaUnderline2 = _interopRequireDefault(_TextAreaUnderline);

var _TextAreaBulletList = require('./../new-icons/system/TextAreaBulletList');

var _TextAreaBulletList2 = _interopRequireDefault(_TextAreaBulletList);

var _TextAreaNumberedList = require('./../new-icons/system/TextAreaNumberedList');

var _TextAreaNumberedList2 = _interopRequireDefault(_TextAreaNumberedList);

var _TextAreaLink = require('./../new-icons/system/TextAreaLink');

var _TextAreaLink2 = _interopRequireDefault(_TextAreaLink);

var _TextAreaImage = require('./../new-icons/system/TextAreaImage');

var _TextAreaImage2 = _interopRequireDefault(_TextAreaImage);

var _RichTextAreaButton = require('./RichTextAreaButton.scss');

var _RichTextAreaButton2 = _interopRequireDefault(_RichTextAreaButton);

var _Focusable = require('../common/Focusable');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var buttons = {
  bold: {
    icon: _TextAreaBold2.default,
    tooltipText: 'Bold'
  },
  italic: {
    icon: _TextAreaItalic2.default,
    tooltipText: 'Italic'
  },
  underline: {
    icon: _TextAreaUnderline2.default,
    tooltipText: 'Underline'
  },
  'unordered-list': {
    icon: _TextAreaBulletList2.default,
    tooltipText: 'Bulletted list'
  },
  'ordered-list': {
    icon: _TextAreaNumberedList2.default,
    tooltipText: 'Numbered list'
  },
  link: {
    icon: _TextAreaLink2.default,
    tooltipText: 'Link'
  },
  image: {
    icon: _TextAreaImage2.default,
    tooltipText: 'Image'
  }
};

var RichTextAreaButton = function (_Component) {
  _inherits(RichTextAreaButton, _Component);

  function RichTextAreaButton() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, RichTextAreaButton);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RichTextAreaButton.__proto__ || Object.getPrototypeOf(RichTextAreaButton)).call.apply(_ref, [this].concat(args))), _this), _this.handleMouseDown = function (event) {
      event.preventDefault();
      if (!_this.props.disabled) {
        _this.props.onClick();
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(RichTextAreaButton, [{
    key: 'render',
    value: function render() {
      var _classNames;

      var _props = this.props,
          type = _props.type,
          isActive = _props.isActive,
          isTooltipDisabled = _props.isTooltipDisabled,
          disabled = _props.disabled;

      var tooltipContent = _react2.default.createElement(
        'p',
        { className: _RichTextAreaButton2.default.tooltipContent },
        buttons[type].tooltipText
      );
      var className = (0, _classnames2.default)(_RichTextAreaButton2.default.button, (_classNames = {}, _defineProperty(_classNames, _RichTextAreaButton2.default.isActive, isActive), _defineProperty(_classNames, _RichTextAreaButton2.default.disabled, disabled), _classNames));
      return _react2.default.createElement(
        _Tooltip2.default,
        {
          appendToParent: true,
          content: tooltipContent,
          overlay: '',
          theme: 'dark',
          alignment: 'center',
          moveBy: { x: 2, y: 2 },
          hideDelay: 0,
          disabled: isTooltipDisabled
        },
        _react2.default.createElement(
          'button',
          _extends({
            type: 'button',
            className: className,
            'data-hook': 'rich-text-area-button-' + type
          }, (0, _Focusable.focusableStates)(this.props), {
            onFocus: this.props.focusableOnFocus // eslint-disable-line react/prop-types
            , onBlur: this.props.focusableOnBlur // eslint-disable-line react/prop-types
            , onMouseDown: this.handleMouseDown
          }),
          _react2.default.createElement(
            'span',
            { className: _RichTextAreaButton2.default.wrapper },
            this.renderIcon()
          )
        )
      );
    }
  }, {
    key: 'renderIcon',
    value: function renderIcon() {
      var Icon = buttons[this.props.type].icon;

      return _react2.default.createElement(Icon, null);
    }
  }]);

  return RichTextAreaButton;
}(_react.Component);

RichTextAreaButton.propTypes = {
  type: _propTypes2.default.string.isRequired,
  onClick: _propTypes2.default.func.isRequired,
  isActive: _propTypes2.default.bool,
  isTooltipDisabled: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool
};

exports.default = (0, _Focusable.withFocusable)(RichTextAreaButton);