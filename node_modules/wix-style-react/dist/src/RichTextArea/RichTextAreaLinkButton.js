'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Tooltip = require('../Tooltip');

var _Tooltip2 = _interopRequireDefault(_Tooltip);

var _RichTextAreaLinkForm = require('./RichTextAreaLinkForm');

var _RichTextAreaLinkForm2 = _interopRequireDefault(_RichTextAreaLinkForm);

var _RichTextAreaButton = require('./RichTextAreaButton');

var _RichTextAreaButton2 = _interopRequireDefault(_RichTextAreaButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RichTextAreaLinkButton = function (_Component) {
  _inherits(RichTextAreaLinkButton, _Component);

  function RichTextAreaLinkButton() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, RichTextAreaLinkButton);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RichTextAreaLinkButton.__proto__ || Object.getPrototypeOf(RichTextAreaLinkButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      isFormVisible: false
    }, _this.toggleForm = function () {
      _this.state.isFormVisible ? _this.hideForm() : _this.showForm();
    }, _this.showForm = function () {
      _this.setState({ isFormVisible: true });
    }, _this.hideForm = function () {
      _this.setState({ isFormVisible: false });
    }, _this.handleFormSubmit = function (linkData) {
      _this.props.onClick(linkData);
      _this.hideForm();
    }, _this.getTooltipContent = function (isSelectionExpanded) {
      return _react2.default.createElement(_RichTextAreaLinkForm2.default, {
        selection: _this.props.selection,
        onSubmit: _this.handleFormSubmit,
        onCancel: _this.hideForm,
        isTextInputVisible: isSelectionExpanded
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(RichTextAreaLinkButton, [{
    key: 'render',
    value: function render() {
      var isFormVisible = this.state.isFormVisible;
      var _props = this.props,
          isActive = _props.isActive,
          onClick = _props.onClick,
          isSelectionExpanded = _props.isSelectionExpanded;


      return _react2.default.createElement(
        _Tooltip2.default,
        {
          padding: 18,
          appendToParent: true,
          content: this.getTooltipContent(isSelectionExpanded),
          overlay: '',
          alignment: 'center',
          placement: 'bottom',
          showTrigger: 'custom',
          hideTrigger: 'custom',
          hideDelay: 0,
          moveBy: { x: 2, y: 0 },
          active: isFormVisible,
          onClickOutside: this.hideForm,
          maxWidth: '240px'
        },
        _react2.default.createElement(_RichTextAreaButton2.default, {
          disabled: this.props.disabled,
          onClick: isActive ? onClick : this.toggleForm,
          type: 'link',
          isActive: isActive,
          isTooltipDisabled: isFormVisible
        })
      );
    }
  }]);

  return RichTextAreaLinkButton;
}(_react.Component);

RichTextAreaLinkButton.propTypes = {
  selection: _propTypes2.default.string,
  onClick: _propTypes2.default.func.isRequired,
  isActive: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  isSelectionExpanded: _propTypes2.default.bool
};

exports.default = RichTextAreaLinkButton;