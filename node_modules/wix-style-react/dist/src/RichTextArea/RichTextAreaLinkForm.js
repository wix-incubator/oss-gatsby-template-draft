'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _TextField = require('../TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

var _X = require('../new-icons/X');

var _X2 = _interopRequireDefault(_X);

var _Check = require('../new-icons/Check');

var _Check2 = _interopRequireDefault(_Check);

var _Input = require('../Input');

var _Input2 = _interopRequireDefault(_Input);

var _RichTextAreaLinkForm = require('./RichTextAreaLinkForm.scss');

var _RichTextAreaLinkForm2 = _interopRequireDefault(_RichTextAreaLinkForm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RichTextAreaLinkForm = function (_Component) {
  _inherits(RichTextAreaLinkForm, _Component);

  function RichTextAreaLinkForm() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, RichTextAreaLinkForm);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RichTextAreaLinkForm.__proto__ || Object.getPrototypeOf(RichTextAreaLinkForm)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      text: _this.props.selection
    }, _this.getChangeHandler = function (field) {
      return function (_ref2) {
        var value = _ref2.target.value;

        _this.setState(_defineProperty({}, field, value));
      };
    }, _this.handleSubmit = function (event) {
      event.preventDefault();

      var onSubmit = _this.props.onSubmit;

      onSubmit && onSubmit(_this.state);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(RichTextAreaLinkForm, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'form',
        { onSubmit: this.handleSubmit },
        this.renderTextInput(),
        _react2.default.createElement(
          'div',
          { className: _RichTextAreaLinkForm2.default.input },
          _react2.default.createElement(
            _TextField2.default,
            null,
            _react2.default.createElement(_Input2.default, {
              dataHook: 'rich-text-area-link-url',
              onChange: this.getChangeHandler('href'),
              placeholder: 'URL this link should go to',
              size: 'small',
              width: '190px'
            })
          )
        ),
        _react2.default.createElement(
          'div',
          { className: _RichTextAreaLinkForm2.default.buttons },
          _react2.default.createElement(
            'span',
            { className: _RichTextAreaLinkForm2.default.button },
            _react2.default.createElement(
              _Button2.default,
              { theme: 'icon-standardsecondary', onClick: this.props.onCancel, height: 'small', type: 'button' },
              _react2.default.createElement(_X2.default, null)
            )
          ),
          _react2.default.createElement(
            'span',
            { className: _RichTextAreaLinkForm2.default.button },
            _react2.default.createElement(
              _Button2.default,
              { theme: 'icon-standard', height: 'small', type: 'submit', disabled: !this.state.href },
              _react2.default.createElement(_Check2.default, null)
            )
          )
        )
      );
    }
  }, {
    key: 'renderTextInput',
    value: function renderTextInput() {
      return _react2.default.createElement(
        'div',
        { className: _RichTextAreaLinkForm2.default.input },
        _react2.default.createElement(
          _TextField2.default,
          null,
          _react2.default.createElement(_Input2.default, {
            dataHook: 'rich-text-area-link-text',
            defaultValue: this.props.selection,
            onChange: this.getChangeHandler('text'),
            placeholder: 'Text to display',
            size: 'small',
            width: '190px'
          })
        )
      );
    }
  }]);

  return RichTextAreaLinkForm;
}(_react.Component);

RichTextAreaLinkForm.propTypes = {
  selection: _propTypes2.default.string,
  onCancel: _propTypes2.default.func,
  onSubmit: _propTypes2.default.func,
  isTextInputVisible: _propTypes2.default.bool
};

exports.default = RichTextAreaLinkForm;