'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _testUtils = require('react-dom/test-utils');

var _testUtils2 = _interopRequireDefault(_testUtils);

var _vanilla = require('wix-ui-test-utils/vanilla');

var _utils = require('../../test/utils');

var _Text = require('../Text/Text.driver');

var _Text2 = _interopRequireDefault(_Text);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var textTestkitFactory = (0, _vanilla.testkitFactoryCreator)(_Text2.default);

var selectorDriverFactory = function selectorDriverFactory(_ref) {
  var element = _ref.element,
      wrapper = _ref.wrapper,
      component = _ref.component;

  var toggleInput = function toggleInput() {
    return element.querySelector('[data-hook="toggle"] > input');
  };
  var image = function image() {
    return element.querySelector('[data-hook="selector-image"]');
  };
  var titleTextDriver = function titleTextDriver() {
    return textTestkitFactory({ wrapper: element, dataHook: 'selector-title' });
  };
  var subtitleTextDriver = function subtitleTextDriver() {
    return textTestkitFactory({ wrapper: element, dataHook: 'selector-subtitle' });
  };
  var extraNode = function extraNode() {
    return element.querySelector('[data-hook="selector-extra-node"]');
  };

  return {
    exists: function exists() {
      return !!element;
    },
    isImageTiny: function isImageTiny() {
      return (0, _utils.isClassExists)(image(), 'tiny');
    },
    isImageSmall: function isImageSmall() {
      return (0, _utils.isClassExists)(image(), 'small');
    },
    isImagePortrait: function isImagePortrait() {
      return (0, _utils.isClassExists)(image(), 'portrait');
    },
    isImageLarge: function isImageLarge() {
      return (0, _utils.isClassExists)(image(), 'large');
    },
    isImageCinema: function isImageCinema() {
      return (0, _utils.isClassExists)(image(), 'cinema');
    },
    isImageCircle: function isImageCircle() {
      return (0, _utils.isClassExists)(image(), 'circle');
    },
    isImageRectangular: function isImageRectangular() {
      return (0, _utils.isClassExists)(image(), 'rectangular');
    },
    isDisabled: function isDisabled() {
      return toggleInput().disabled;
    },
    toggleType: function toggleType() {
      return toggleInput().type;
    },
    isChecked: function isChecked() {
      return !!toggleInput().checked;
    },
    hasImage: function hasImage() {
      return !!image();
    },
    getImage: function getImage() {
      return image().childNodes[0];
    },
    titleTextDriver: titleTextDriver,
    subtitleTextDriver: subtitleTextDriver,
    hasExtraNode: function hasExtraNode() {
      return !!extraNode();
    },
    getExtraNode: function getExtraNode() {
      return extraNode().childNodes[0];
    },
    toggle: function toggle() {
      return _testUtils2.default.Simulate.click(element);
    },
    setProps: function setProps(props) {
      var ClonedWithProps = _react2.default.cloneElement.apply(_react2.default, [component, Object.assign({}, component.props, props)].concat(_toConsumableArray(component.props.children || [])));
      _reactDom2.default.render(_react2.default.createElement(
        'div',
        { ref: function ref(r) {
            return element = r;
          } },
        ClonedWithProps
      ), wrapper);
    }
  };
};

exports.default = selectorDriverFactory;