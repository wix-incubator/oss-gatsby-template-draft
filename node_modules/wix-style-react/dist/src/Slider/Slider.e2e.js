'use strict';

var _eyes = require('eyes.it');

var _eyes2 = _interopRequireDefault(_eyes);

var _protractor = require('../../testkit/protractor');

var _protractor2 = require('wix-ui-test-utils/protractor');

var _storybookHelpers = require('../../test/utils/storybook-helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('Slider', function () {
  var storyUrl = (0, _storybookHelpers.getStoryUrl)('4. Selection', '4.7 Slider');

  _eyes2.default.it('single handle flow', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var dataHook, driver, handleTooltipValue;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            dataHook = 'story-slider';
            driver = (0, _protractor.sliderTestkitFactory)({ dataHook: dataHook });
            handleTooltipValue = void 0;


            browser.get(storyUrl);

            (0, _protractor2.waitForVisibilityOf)(driver.element(), 'Cant find Slider');

            _context.next = 7;
            return driver.handleTooltipValue({ index: 0 });

          case 7:
            handleTooltipValue = _context.sent;

            expect(handleTooltipValue).toEqual(3);

            _context.next = 11;
            return driver.hoverHandle({ index: 0 });

          case 11:
            expect(driver.isHandleTooltipDisplayed()).toBe(true);

            _context.next = 14;
            return driver.unHoverHandle({ index: 0 });

          case 14:
            expect(driver.isHandleTooltipDisplayed()).toBe(false);

            driver.dragHandle({ index: 0, offset: 1 });
            _context.next = 18;
            return driver.handleTooltipValue({ index: 0 });

          case 18:
            handleTooltipValue = _context.sent;

            expect(handleTooltipValue).toBe(4);

          case 20:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));

  _eyes2.default.it('multiple handles flow', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var dataHook, driver, handleTooltipValue;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            dataHook = 'story-slider-multiple';
            driver = (0, _protractor.sliderTestkitFactory)({ dataHook: dataHook });
            handleTooltipValue = void 0;


            browser.get(storyUrl);

            (0, _protractor2.waitForVisibilityOf)(driver.element(), 'Cant find Slider');

            _context2.next = 7;
            return driver.handleTooltipValue({ index: 0 });

          case 7:
            handleTooltipValue = _context2.sent;

            expect(handleTooltipValue).toEqual(3);

            _context2.next = 11;
            return driver.handleTooltipValue({ index: 1 });

          case 11:
            handleTooltipValue = _context2.sent;

            expect(handleTooltipValue).toEqual(4);

            _context2.next = 15;
            return driver.handleTooltipValue({ index: 2 });

          case 15:
            handleTooltipValue = _context2.sent;

            expect(handleTooltipValue).toEqual(5);

            driver.dragHandle({ index: 0, offset: 3 });
            _context2.next = 20;
            return driver.handleTooltipValue({ index: 0 });

          case 20:
            handleTooltipValue = _context2.sent;

            expect(handleTooltipValue).toEqual(4);

            _context2.next = 24;
            return driver.handleTooltipValue({ index: 1 });

          case 24:
            handleTooltipValue = _context2.sent;

            expect(handleTooltipValue).toEqual(5);

            _context2.next = 28;
            return driver.handleTooltipValue({ index: 2 });

          case 28:
            handleTooltipValue = _context2.sent;

            expect(handleTooltipValue).toEqual(6);

          case 30:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));
});