'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

require('./SliderHandle.scss');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SliderHandle = function (_Component) {
  _inherits(SliderHandle, _Component);

  function SliderHandle(props) {
    _classCallCheck(this, SliderHandle);

    var _this = _possibleConstructorReturn(this, (SliderHandle.__proto__ || Object.getPrototypeOf(SliderHandle)).call(this, props));

    _this.state = {
      showTooltip: false,
      dragging: false
    };

    _this.handleMouseDown = _this.handleMouseDown.bind(_this);
    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);
    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);
    _this.handleMouseUp = _this.handleMouseUp.bind(_this);
    return _this;
  }

  _createClass(SliderHandle, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      document.addEventListener('mouseup', this.handleMouseUp);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      document.removeEventListener('mouseup', this.handleMouseUp);
    }
  }, {
    key: 'handleMouseUp',
    value: function handleMouseUp() {
      this.toggleTooltip(false);
      this.setState({ dragging: false });
    }
  }, {
    key: 'handleMouseDown',
    value: function handleMouseDown() {
      this.toggleTooltip(true);
      this.setState({ dragging: true });
    }
  }, {
    key: 'handleMouseEnter',
    value: function handleMouseEnter() {
      this.toggleTooltip(true);
    }
  }, {
    key: 'handleMouseLeave',
    value: function handleMouseLeave() {
      if (!this.state.dragging) {
        this.toggleTooltip(false);
      }
    }
  }, {
    key: 'toggleTooltip',
    value: function toggleTooltip(showTooltip) {
      var displayTooltip = this.props.displayTooltip;

      this.setState({ showTooltip: displayTooltip && showTooltip });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        {
          onMouseEnter: this.handleMouseEnter,
          onMouseLeave: this.handleMouseLeave,
          onMouseDown: this.handleMouseDown,
          onMouseUp: this.handleMouseUp,
          className: 'slider-handle',
          style: { left: this.props.offset + '%' }
        },
        this.state.showTooltip && _react2.default.createElement(
          'div',
          { className: 'slider-tooltip' },
          this.props.value
        ),
        _react2.default.createElement('div', { className: 'slider-handle-inner' })
      );
    }
  }]);

  return SliderHandle;
}(_react.Component);

exports.default = SliderHandle;


SliderHandle.propTypes = {
  displayTooltip: _propTypes2.default.bool,
  offset: _propTypes2.default.number,
  value: _propTypes2.default.number
};

SliderHandle.defaultProps = {
  displayTooltip: true
};