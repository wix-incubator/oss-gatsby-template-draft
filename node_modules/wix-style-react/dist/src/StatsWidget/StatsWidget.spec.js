'use strict';

var _driverFactory = require('wix-ui-test-utils/driver-factory');

var _StatsWidget = require('./StatsWidget.driver');

var _StatsWidget2 = _interopRequireDefault(_StatsWidget);

var _StatsWidget3 = require('./StatsWidget');

var _StatsWidget4 = _interopRequireDefault(_StatsWidget3);

var _ButtonWithOptions = require('../../src/ButtonWithOptions');

var _ButtonWithOptions2 = _interopRequireDefault(_ButtonWithOptions);

var _testkitSanity = require('../../test/utils/testkit-sanity');

var _testkit = require('../../testkit');

var _enzyme = require('../../testkit/enzyme');

var _enzyme2 = require('enzyme');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('StatsWidget', function () {
  var createDriver = (0, _driverFactory.createDriverFactory)(_StatsWidget2.default);

  var title = 'Stats Widget title';
  var statistics = [{
    title: '10$',
    subtitle: 'Revenue'
  }, {
    title: '2',
    subtitle: 'Products'
  }, {
    title: '1',
    subtitle: 'Transactions'
  }, {
    title: '5',
    subtitle: 'Profit'
  }, {
    title: '15',
    subtitle: 'Music'
  }];

  var statisticsWithPercents = [{
    title: '10$',
    subtitle: 'Revenue',
    percent: 15
  }, {
    title: '2',
    subtitle: 'Products',
    percent: -15
  }, {
    title: '1',
    subtitle: 'Transactions',
    percent: 0
  }];

  var driver = void 0;

  var stub = console.error = jest.fn();

  function createComponent(props) {
    driver = createDriver(React.createElement(_StatsWidget4.default, props));
  }

  var React = void 0;

  beforeEach(function () {
    React = require('react');
  });

  afterEach(function () {
    jest.resetModules();
    stub.mockReset();
  });

  it('should have correct title', function () {
    createComponent({ title: title, statistics: statistics });
    expect(driver.titleText()).toBe(title);
  });

  it('should show statistics and not empty state', function () {
    createComponent({ title: title, statistics: statistics });
    expect(driver.getStatisticTitle(0)).toBe(statistics[0].title);
    expect(driver.getStatisticSubTitle(0)).toBe(statistics[0].subtitle);
    expect(driver.isEmptyStateExists()).toBe(false);
  });

  it('should show empty state and not statistics', function () {
    createComponent({ title: title, emptyState: React.createElement(
        'div',
        null,
        'Empty'
      ) });
    expect(driver.isEmptyStateExists()).toBe(true);
    expect(driver.isStatisticsContentExists()).toBe(false);
  });

  it('should show abs of percentage', function () {
    createComponent({ title: title, statistics: statisticsWithPercents });
    expect(driver.getStatisticPercentValue(0)).toBe(Math.abs(statisticsWithPercents[0].percent) + '%');
    expect(driver.getStatisticPercentValue(1)).toBe(Math.abs(statisticsWithPercents[1].percent) + '%');
  });

  it('should put proper classes to percentage according to value', function () {
    createComponent({ title: title, statistics: statisticsWithPercents });

    expect(driver.getStatisticPercentClass(0)).toContain('isPositive');
    expect(driver.getStatisticPercentClass(1)).toContain('isNegative');

    expect(driver.getStatisticPercentClass(2)).not.toContain('isNegative');
    expect(driver.getStatisticPercentClass(2)).not.toContain('isPositive');
  });

  it('should show filter with ButtonWithOptions inside', function () {
    var children = React.createElement(
      _StatsWidget4.default.Filter,
      { selectedId: 1, dataHook: 'stats-widget-filter', onSelect: stub },
      React.createElement(_ButtonWithOptions2.default.Button, null),
      [React.createElement(
        _ButtonWithOptions2.default.Option,
        { key: 1 },
        'value'
      )]
    );
    createComponent({ title: title, statistics: statistics, children: children });
    expect(driver.getFilterDriver('stats-widget-filter').dropdownLayoutDriver.exists()).toBe(true);
  });

  it('filters should have selectable options', function () {
    var stub = jest.fn();
    var children = React.createElement(
      _StatsWidget4.default.Filter,
      { selectedId: 1, dataHook: 'stats-widget-filter', onSelect: stub },
      React.createElement(_ButtonWithOptions2.default.Button, null),
      [React.createElement(
        _ButtonWithOptions2.default.Option,
        { key: 1 },
        'value'
      )]
    );
    createComponent({ title: title, statistics: statistics, children: children });
    driver.getFilterDriver('stats-widget-filter').dropdownLayoutDriver.clickAtOption(0);
    expect(stub).toHaveBeenCalled();
  });

  it('should show filters with option value specified', function () {
    var value = 'Last Week';
    var children = React.createElement(
      _StatsWidget4.default.Filter,
      { selectedId: 1, dataHook: 'stats-widget-filter', onSelect: stub },
      React.createElement(_ButtonWithOptions2.default.Button, null),
      [React.createElement(
        _ButtonWithOptions2.default.Option,
        { key: 1 },
        value
      )]
    );
    createComponent({ title: title, statistics: statistics, children: children });
    expect(driver.getFilterDriver('stats-widget-filter').dropdownLayoutDriver.optionsContent()).toContain(value);
  });

  it('should not initialize component with 1 bad child', function () {
    var PageRequiredChildrenArrayError = 'Warning: Failed prop type: Invalid prop `children` of type `object` supplied to `StatsWidget`, expected an array.\n    in StatsWidget';
    createComponent({ title: title, statistics: statistics, children: React.createElement('div', null) });

    expect(stub).toHaveBeenCalledWith(PageRequiredChildrenArrayError);
  });

  it('should not initialize component with percent which are not a numbers', function () {

    var wrongStatistics = [{
      title: '10$',
      subtitle: 'Revenue',
      percent: '15%'
    }, {
      title: '2',
      subtitle: 'Products',
      percent: '-15%'
    }, {
      title: '1',
      subtitle: 'Transactions',
      percent: '0'
    }];

    var PageRequiredChildrenArrayError = 'Warning: Failed prop type: Invalid prop `statistics[0].percent` of type `string` supplied to `StatsWidget`, expected `number`.\n    in StatsWidget';
    createComponent({ title: title, statistics: wrongStatistics });

    expect(stub).toHaveBeenCalledWith(PageRequiredChildrenArrayError);
  });

  describe('testkit', function () {
    it('should exist', function () {
      expect((0, _testkitSanity.isTestkitExists)(React.createElement(_StatsWidget4.default, { title: 'test title', statistics: statistics }), _testkit.statsWidgetTestkitFactory)).toBeTruthy();
    });
  });

  describe('enzyme testkit', function () {
    it('should exist', function () {
      expect((0, _testkitSanity.isEnzymeTestkitExists)(React.createElement(_StatsWidget4.default, { title: 'test title', statistics: statistics }), _enzyme.statsWidgetTestkitFactory, _enzyme2.mount)).toBeTruthy();
    });
  });
});