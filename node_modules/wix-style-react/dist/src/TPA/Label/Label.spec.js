'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _testUtils = require('react-dom/test-utils');

var _testUtils2 = _interopRequireDefault(_testUtils);

var _Label = require('./Label');

var _Label2 = _interopRequireDefault(_Label);

var _testkit = require('../../../testkit');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Label', function () {
  it('should exist', function () {
    var div = document.createElement('div');
    var dataHook = 'Label-hook';
    var wrapper = div.appendChild(_testUtils2.default.renderIntoDocument(_react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(_Label2.default, { dataHook: dataHook })
    )));
    var labelTestkit = (0, _testkit.tpaLabelTestkitFactory)({ wrapper: wrapper, dataHook: dataHook });
    expect(labelTestkit.exists()).toBeTruthy();
  });

  it('should contain passed text', function () {
    var div = document.createElement('div');
    var dataHook = 'Label-hook';
    var wrapper = div.appendChild(_testUtils2.default.renderIntoDocument(_react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        _Label2.default,
        { dataHook: dataHook },
        'some text'
      )
    )));
    var labelTestkit = (0, _testkit.tpaLabelTestkitFactory)({ wrapper: wrapper, dataHook: dataHook });
    expect(labelTestkit.getContent()).toEqual('some text');
  });

  it('should contain passed dom element', function () {
    var div = document.createElement('div');
    var dataHook = 'Label-hook';
    var wrapper = div.appendChild(_testUtils2.default.renderIntoDocument(_react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        _Label2.default,
        { dataHook: dataHook },
        _react2.default.createElement(
          'span',
          null,
          'some text'
        )
      )
    )));
    var labelTestkit = (0, _testkit.tpaLabelTestkitFactory)({ wrapper: wrapper, dataHook: dataHook });
    expect(labelTestkit.getContent()).toEqual('<span>some text</span>');
  });

  it('should contain passed dom element', function () {
    var div = document.createElement('div');
    var dataHook = 'Label-hook';
    var wrapper = div.appendChild(_testUtils2.default.renderIntoDocument(_react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        _Label2.default,
        { 'for': 'some-id', dataHook: dataHook },
        _react2.default.createElement(
          'span',
          null,
          'some text'
        )
      )
    )));
    var labelTestkit = (0, _testkit.tpaLabelTestkitFactory)({ wrapper: wrapper, dataHook: dataHook });
    expect(labelTestkit.getAttribute('for')).toEqual('some-id');
  });
  it('should contain passed dom element', function () {
    var div = document.createElement('div');
    var dataHook = 'Label-hook';
    var wrapper = div.appendChild(_testUtils2.default.renderIntoDocument(_react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        _Label2.default,
        { 'for': 'some-id', dataHook: dataHook },
        _react2.default.createElement(
          'span',
          null,
          'some text'
        )
      )
    )));
    var labelTestkit = (0, _testkit.tpaLabelTestkitFactory)({ wrapper: wrapper, dataHook: dataHook });
    expect(labelTestkit.getAttribute('data-hook')).toEqual('Label-hook');
  });

  it('should contain custom class name', function () {
    var div = document.createElement('div');
    var dataHook = 'Label-hook';
    var wrapper = div.appendChild(_testUtils2.default.renderIntoDocument(_react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        _Label2.default,
        { 'for': 'some-id', labelClassName: 'customLabelStyle', dataHook: dataHook },
        _react2.default.createElement(
          'span',
          null,
          'some text'
        )
      )
    )));
    var labelTestkit = (0, _testkit.tpaLabelTestkitFactory)({ wrapper: wrapper, dataHook: dataHook });
    expect(labelTestkit.hasClass('customLabelStyle')).toBeTruthy();
  });
});