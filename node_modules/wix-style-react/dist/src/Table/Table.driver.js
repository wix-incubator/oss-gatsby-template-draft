'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _DataTable = require('../DataTable/DataTable.driver');

var _DataTable2 = _interopRequireDefault(_DataTable);

var _Checkbox = require('../Checkbox/Checkbox.driver');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tableDriverFactory = function tableDriverFactory(_ref) {
  var element = _ref.element,
      wrapper = _ref.wrapper,
      component = _ref.component,
      eventTrigger = _ref.eventTrigger;

  var dataTableDriver = (0, _DataTable2.default)({ element: element, wrapper: wrapper, component: component });
  var getTitlebar = function getTitlebar() {
    return element.querySelector('[data-hook="table-title-bar"]');
  };
  var getRowCheckboxDriver = function getRowCheckboxDriver(index) {
    return (0, _Checkbox2.default)({
      element: dataTableDriver.getCell(index, 0).querySelector('[data-hook="row-select"]'),
      eventTrigger: eventTrigger
    });
  };
  var getBulkSelectionCheckboxDriver = function getBulkSelectionCheckboxDriver() {
    return (0, _Checkbox2.default)({
      element: dataTableDriver.getHeaderCell(0).querySelector('[data-hook="table-select"]'),
      eventTrigger: eventTrigger
    });
  };

  var isBulkSelectionChecked = function isBulkSelectionChecked() {
    var checkboxDriver = getBulkSelectionCheckboxDriver();
    return checkboxDriver.isChecked() && !checkboxDriver.isIndeterminate();
  };
  var isBulkSelectionIndeterminate = function isBulkSelectionIndeterminate() {
    var checkboxDriver = getBulkSelectionCheckboxDriver();
    return !checkboxDriver.isChecked() && checkboxDriver.isIndeterminate();
  };
  var isBulkSelectionUnchecked = function isBulkSelectionUnchecked() {
    var checkboxDriver = getBulkSelectionCheckboxDriver();
    return !checkboxDriver.isChecked() && !checkboxDriver.isIndeterminate();
  };

  return _extends({}, dataTableDriver, {
    element: element,
    /** Get driver of row selection checbox by row index */
    getRowCheckboxDriver: getRowCheckboxDriver,
    /** Get driver of row bulk-selection checbox */
    getBulkSelectionCheckboxDriver: getBulkSelectionCheckboxDriver,
    /** Click the row selection checkbox */
    clickRowChecbox: function clickRowChecbox(index) {
      return getRowCheckboxDriver(index).click();
    },
    /** Click the bulk-selection checkbox */
    clickBulkSelectionCheckbox: function clickBulkSelectionCheckbox() {
      return getBulkSelectionCheckboxDriver().click();
    },
    /** Is row selected by index */
    isRowSelected: function isRowSelected(index) {
      return getRowCheckboxDriver(index).isChecked();
    },
    /** Get bulk seleciton state. Possible value 'ALL', 'SOME', 'NONE. */
    getBulkSelectionState: function getBulkSelectionState() {
      if (isBulkSelectionChecked()) {
        return 'ALL';
      }
      if (isBulkSelectionIndeterminate()) {
        return 'SOME';
      }
      if (isBulkSelectionUnchecked()) {
        return 'NONE';
      }
    },
    /** Get title-bar (column titles) */
    getTitlebar: getTitlebar
  });
};

exports.default = tableDriverFactory;