'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Table = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.createColumns = createColumns;
exports.getDataTableProps = getDataTableProps;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _defaultTo = require('lodash/defaultTo');

var _defaultTo2 = _interopRequireDefault(_defaultTo);

var _DataTable = require('../DataTable');

var _DataTable2 = _interopRequireDefault(_DataTable);

var _WixComponent2 = require('../BaseComponents/WixComponent');

var _WixComponent3 = _interopRequireDefault(_WixComponent2);

var _Checkbox = require('../Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _TableContext = require('./TableContext');

var _BulkSelection = require('./BulkSelection');

var _components = require('./components');

var _Tooltip = require('../Tooltip/Tooltip');

var _Tooltip2 = _interopRequireDefault(_Tooltip);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function createColumns(_ref2) {
  var tableProps = _ref2.tableProps,
      bulkSelectionContext = _ref2.bulkSelectionContext;

  var createCheckboxColumn = function createCheckboxColumn(_ref3) {
    var toggleAll = _ref3.toggleAll,
        bulkSelectionState = _ref3.bulkSelectionState,
        toggleSelectionById = _ref3.toggleSelectionById,
        isSelected = _ref3.isSelected;

    return {
      title: _react2.default.createElement(_Checkbox2.default, {
        dataHook: 'table-select',
        checked: bulkSelectionState === _BulkSelection.BulkSelectionState.ALL,
        indeterminate: bulkSelectionState === _BulkSelection.BulkSelectionState.SOME,
        onChange: function onChange() {
          return toggleAll();
        }
      }),
      render: function render(row, rowNum) {
        var id = (0, _defaultTo2.default)(row.id, rowNum);
        return _react2.default.createElement(_Checkbox2.default, {
          dataHook: 'row-select',
          checked: isSelected(id),
          onChange: function onChange() {
            return toggleSelectionById(id);
          }
        });
      },
      width: '12px'
    };
  };

  return tableProps.showSelection ? [createCheckboxColumn(bulkSelectionContext)].concat(_toConsumableArray(tableProps.columns)) : tableProps.columns;
}

function getDataTableProps(tableProps) {
  return _extends({}, (0, _omit2.default)(tableProps, 'showSelection', 'selectedIds', 'onSelectionChanged', 'dataHook', 'newDesign', 'hideHeader'), {
    newDesign: true
  });
}

/**
 * Table is a composit component that allows adding SelectionColumn, Toolbar (on top of the TitleBar).
 * It is a context provider, and thus the Table.Consumer, Table.TitleBar and Table.Content can be rendered separatly.
 */

var Table = exports.Table = function (_WixComponent) {
  _inherits(Table, _WixComponent);

  function Table(props) {
    _classCallCheck(this, Table);

    var _this = _possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).call(this, props));

    _this.state = props;
    return _this;
  }

  _createClass(Table, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      // The state IS the props since Table acts as a context provider for all Table props.
      this.setState(nextProps);
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      // Table is not really a PureComponent
      return true;
    }
  }, {
    key: 'setSelectedIds',
    value: function setSelectedIds(selectedIds) {
      this.bulkSelection.setSelectedIds(selectedIds);
    }
  }, {
    key: 'renderChildren',
    value: function renderChildren() {
      var children = this.props.children;
      return this.props.withWrapper ? _react2.default.createElement(
        'div',
        null,
        children
      ) : children;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        _TableContext.TableContext.Provider,
        { value: this.state },
        this.props.showSelection ? _react2.default.createElement(
          _BulkSelection.BulkSelection,
          {
            ref: function ref(_ref) {
              return _this2.bulkSelection = _ref;
            },
            selectedIds: this.props.selectedIds,
            allIds: this.state.data.map(function (rowData, rowIndex) {
              return (0, _defaultTo2.default)(rowData.id, rowIndex);
            }),
            onSelectionChanged: this.props.onSelectionChanged
          },
          this.renderChildren()
        ) : this.renderChildren()
      );
    }
  }]);

  return Table;
}(_WixComponent3.default);

Table.ToolbarContainer = _components.TableToolbarContainer;
Table.Titlebar = _components.TableTitleBar;
Table.Content = _components.TableContent;
Table.ToggledToolbar = _components.TableToolbarToggler;


Table.displayName = 'Table';

Table.defaultProps = _extends({}, _DataTable2.default.defaultProps, {
  showSelection: false,
  children: [_react2.default.createElement(Table.Content, { key: 'content' })],
  withWrapper: true,
  showLastRowDivider: false
});

Table.propTypes = {
  children: _propTypes.any,
  dataHook: _propTypes.string,

  //DataTable Props
  /** Allows to open multiple row details */
  allowMultiDetailsExpansion: _propTypes.bool,
  /** The data to display. (If data.id exists then it will be used as the React key value for each row, otherwise, the rowIndex will be used) */
  data: _propTypes.array, // Not performing any shape validation to not hurt performance.
  /** Configuration of the table's columns. See table below */
  columns: (0, _propTypes.arrayOf)((0, _propTypes.shape)({
    title: (0, _propTypes.oneOfType)([_propTypes.node, _propTypes.string]).isRequired,
    render: _propTypes.func.isRequired,
    sortable: _propTypes.bool,
    infoTooltipProps: (0, _propTypes.shape)(_Tooltip2.default.propTypes),
    sortDescending: _propTypes.bool
  })).isRequired,
  /** A func that gets row data and returns a class(es) to apply to that specific row */
  dynamicRowClass: _propTypes.func,
  /** Whether there are more items to be loaded. Event listeners are removed if false. */
  hasMore: _propTypes.bool,
  /** Should we hide the header of the table. */
  hideHeader: _propTypes.bool,
  /** An id to pass to the table */
  id: _propTypes.string,
  /** If true, table will not render all data to begin with, but will gradually render the data as the user scrolls */
  infiniteScroll: _propTypes.bool,
  /** If infiniteScroll is on, this prop will determine how many rows will be rendered on each load */
  itemsPerPage: _propTypes.number,
  /** The loader to show when loading more items. */
  loader: _propTypes.node,
  /** A callback when more items are requested by the user. */
  loadMore: _propTypes.func,
  /** A callback method to be called on row click. Signature: `onRowClick(rowData, rowNum)` */
  onRowClick: _propTypes.func,
  /** A callback method to be called on row mouse enter. Signature: `onMouseEnterRow(rowData, rowNum)` */
  onMouseEnterRow: _propTypes.func,
  /** A callback method to be called on row mouse leave. Signature: `onMouseLeaveRow(rowData, rowNum)` */
  onMouseLeaveRow: _propTypes.func,

  /** Add scroll listeners to the window, or else, the component's parentNode. */
  useWindow: _propTypes.bool,
  /** Add scroll listeners to specified DOM Object. */
  scrollElement: _propTypes.object,
  /** Table cell vertical padding. should be 'medium' or 'large'  */
  rowVerticalPadding: (0, _propTypes.oneOf)(['medium', 'large']),
  /** Function that returns React component that will be rendered in row details section. Example: `rowDetails={(row, rowNum) => <MyRowDetailsComponent {...row} />}` */
  rowDetails: _propTypes.func,
  /** A string data-hook to apply to all table body rows. or a func which calculates the data-hook for each row  - Signature: `(rowData, rowNum) => string` */
  rowDataHook: (0, _propTypes.oneOfType)([_propTypes.func, _propTypes.string]),
  /** A class to apply to all table body rows */
  rowClass: _propTypes.string,

  /** Should the table show the header when data is empty */
  showHeaderWhenEmpty: _propTypes.bool,

  // Table props

  /** Called when row selection changes.
   * Receives 2 arguments: `selectedIds` array, and a `change` object ( in this order).
   * `selectedIds` is the updated selected ids.
   * `change` object has a `type` property with the following possible values: 'ALL', 'NONE', 'SINGLE_TOGGLE'.
   * In case of 'SINGLE_TOGGLE' the `change` object will also include an `id` prop with the item's id,
   * and a `value` prop with the new boolean selection state of the item. */
  onSelectionChanged: _propTypes.func,
  /** Indicates wether to show a selection column (with checkboxes) */
  showSelection: _propTypes.bool,
  /** Array of selected row ids.
   *  Idealy, id should be a property on the data row object.
   *  If data objects do not have id property, then the data row's index would be used as an id. */
  selectedIds: (0, _propTypes.oneOfType)([(0, _propTypes.arrayOf)(_propTypes.string), (0, _propTypes.arrayOf)(_propTypes.number)]),
  /** The width of the fixed table. Can be in percentages or pixels. */
  width: _propTypes.string,
  /**
   *  When false then Table would not create a `<div/>` wrapper around it's children.
   *  Useful when using `<Table/>` to wrap a `<Page/>` component, in that case we use the `<Table/>` only as a context provider and it doesn't render anything to the DOM by itself.*/
  withWrapper: _propTypes.bool
};

// export default Table;