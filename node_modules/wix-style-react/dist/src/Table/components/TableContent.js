'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TableContent = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _DataTable = require('../../DataTable');

var _DataTable2 = _interopRequireDefault(_DataTable);

var _Table = require('../Table');

var _TableContext = require('../TableContext');

var _BulkSelection = require('../BulkSelection');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TableContent = exports.TableContent = function TableContent(_ref) {
  var titleBarVisible = _ref.titleBarVisible;

  //TODO: figure out if we need to put result of createColumns() on state, in order to avoid
  // redundant renders.
  return _react2.default.createElement(
    _TableContext.TableContext.Consumer,
    null,
    function (tableProps) {
      var dataTableProps = _extends({}, (0, _Table.getDataTableProps)(tableProps), {
        dataHook: 'table-content',
        hideHeader: !titleBarVisible
      });

      if (tableProps.showSelection) {
        return _react2.default.createElement(
          _BulkSelection.BulkSelectionConsumer,
          { consumerCompName: 'Table.Content', providerCompName: 'Table' },
          function (bulkSelectionContext) {
            return _react2.default.createElement(_DataTable2.default, _extends({}, dataTableProps, {
              columns: (0, _Table.createColumns)({ tableProps: tableProps, bulkSelectionContext: bulkSelectionContext })
            }));
          }
        );
      } else {
        return _react2.default.createElement(_DataTable2.default, dataTableProps);
      }
    }
  );
};
TableContent.displayName = 'Table.Content';
TableContent.propTypes = {
  titleBarVisible: _propTypes.bool
};
TableContent.defaultProps = {
  titleBarVisible: true
};