'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sinon = require('sinon');

var _enzyme = require('enzyme');

var _utils = require('../utils');

var Utils = _interopRequireWildcard(_utils);

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

var _Tooltip = require('../../../Tooltip');

var _Tooltip2 = _interopRequireDefault(_Tooltip);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('withTooltip hoc', function () {

  (0, _sinon.stub)(Utils, 'getWidth');

  afterEach(function () {
    Utils.getWidth.reset();
    Utils.getWidth.resetBehavior();
  });

  afterAll(function () {
    Utils.getWidth.restore();
  });

  var type = 'compactSide';
  var item = { id: 0, title: 'Title' };

  var Component = function Component(_ref) {
    var initHasTooltip = _ref.initHasTooltip;
    return (// eslint-disable-line react/prop-types
      _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement('div', { ref: function ref(el) {
            return initHasTooltip(el);
          } })
      )
    );
  };

  var aComponent = function aComponent() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return (0, _enzyme.mount)(_react2.default.createElement((0, _index2.default)(Component), _extends({ type: type, item: item }, props)));
  };

  it('does not add a tooltip for non compactSide types', function () {
    stubSizes({ elementSize: 10, parentSize: 100 });
    var comp = aComponent({ type: '' });
    expect(comp.find(_Tooltip2.default).exists()).toBeFalsy();
  });

  it('adds a tooltip if element exceeds it` parent', function () {
    stubSizes({ elementSize: 20, parentSize: 30 });
    var comp = aComponent();
    expect(comp.find(_Tooltip2.default).exists()).toBeTruthy();
  });

  it('does not add a tooltip if element does not exceed it`s parent', function () {
    stubSizes({ elementSize: 100, parentSize: 100 });
    var comp = aComponent();
    expect(comp.find(_Tooltip2.default).exists()).toBeFalsy();
  });

  it('passes props to the wrapped component', function () {
    var props = { p1: true, p2: 'true', p3: 1 };
    var comp = aComponent(props);
    expect(comp.find(Component).props()).toMatchObject(props);
  });

  function stubSizes(_ref2) {
    var elementSize = _ref2.elementSize,
        parentSize = _ref2.parentSize;

    // First render
    Utils.getWidth.onCall(0).returns(parentSize);
    Utils.getWidth.onCall(1).returns(elementSize);

    // Second render
    Utils.getWidth.onCall(2).returns(parentSize);
    Utils.getWidth.onCall(3).returns(elementSize);
  }
});