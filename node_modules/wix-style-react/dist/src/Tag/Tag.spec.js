'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Tag = require('./Tag');

var _Tag2 = _interopRequireDefault(_Tag);

var _Tag3 = require('./Tag.driver');

var _Tag4 = _interopRequireDefault(_Tag3);

var _driverFactory = require('wix-ui-test-utils/driver-factory');

var _testkit = require('../../testkit');

var _enzyme = require('../../testkit/enzyme');

var _testkitSanity = require('../../test/utils/testkit-sanity');

var _enzyme2 = require('enzyme');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Tag', function () {

  var createDriver = (0, _driverFactory.createDriverFactory)(_Tag4.default);
  var id = 'myId';
  var label = 'Hey';
  var onRemove = jest.fn();
  var onClick = jest.fn();

  it('should have a default small size', function () {
    var driver = createDriver(_react2.default.createElement(
      _Tag2.default,
      { id: id },
      label
    ));
    expect(driver.isLarge()).toBeFalsy();
  });

  it('should have a large size', function () {
    var driver = createDriver(_react2.default.createElement(
      _Tag2.default,
      { id: id, size: 'large' },
      label
    ));
    expect(driver.isLarge()).toBeTruthy();
  });

  it('should have a label', function () {
    var driver = createDriver(_react2.default.createElement(
      _Tag2.default,
      { id: id },
      label
    ));
    expect(driver.getLabel()).toBe(label);
  });

  it('should be removable by default', function () {
    var driver = createDriver(_react2.default.createElement(
      _Tag2.default,
      { id: id },
      label
    ));
    expect(driver.isRemovable()).toBeTruthy();
  });

  it('should not be removable', function () {
    var driver = createDriver(_react2.default.createElement(
      _Tag2.default,
      { id: id, removable: false },
      label
    ));
    expect(driver.isRemovable()).toBeFalsy();
  });

  it('should have not remove button if disabled is true', function () {
    var driver = createDriver(_react2.default.createElement(
      _Tag2.default,
      { id: id, disabled: true },
      label
    ));
    expect(driver.isRemovable()).toBeFalsy();
  });

  it('should have disabled class if disabled is true', function () {
    var driver = createDriver(_react2.default.createElement(
      _Tag2.default,
      { id: id, disabled: true },
      label
    ));
    expect(driver.isDisabled()).toBeTruthy();
  });

  it('should call onRemove function on remove', function () {
    var driver = createDriver(_react2.default.createElement(
      _Tag2.default,
      { id: id, onRemove: onRemove, onClick: onClick },
      label
    ));

    driver.removeTag();
    expect(onRemove).toBeCalledWith(id);
    expect(onClick).not.toBeCalled();
  });

  it('should call onClick function on click', function () {
    var driver = createDriver(_react2.default.createElement(
      _Tag2.default,
      { id: id, onClick: onClick },
      label
    ));

    driver.click();
    expect(onClick).toBeCalledWith(id);
  });

  it('should not display thumb by default', function () {
    var driver = createDriver(_react2.default.createElement(
      _Tag2.default,
      { id: id },
      label
    ));
    expect(driver.isThumbExists()).toBeFalsy();
  });

  it('should display thumb', function () {
    var driver = createDriver(_react2.default.createElement(
      _Tag2.default,
      { id: id, thumb: _react2.default.createElement(
          'span',
          null,
          'Ho'
        ) },
      label
    ));
    expect(driver.isThumbExists()).toBeTruthy();
  });

  it('should wrap label text', function () {
    var longLabel = 'Very very very very very very very very long label';
    var driver = createDriver(_react2.default.createElement(
      _Tag2.default,
      { id: id, wrap: true },
      longLabel
    ));

    expect(driver.getTitle()).toBe(longLabel);
    expect(driver.getLabel()).toBe(longLabel);
    expect(driver.isWrapped()).toBe(true);
  });

  describe('theme attribute', function () {
    it('should have standard theme by default', function () {
      var driver = createDriver(_react2.default.createElement(
        _Tag2.default,
        { id: id },
        'a'
      ));
      expect(driver.isStandardTheme()).toBe(true);
    });

    it('should have warning theme', function () {
      var driver = createDriver(_react2.default.createElement(
        _Tag2.default,
        { id: id, theme: 'warning' },
        'a'
      ));
      expect(driver.isWarningTheme()).toBe(true);
    });

    it('should have error theme', function () {
      var driver = createDriver(_react2.default.createElement(
        _Tag2.default,
        { id: id, theme: 'error' },
        'a'
      ));
      expect(driver.isErrorTheme()).toBe(true);
    });
  });

  describe('testkit', function () {
    it('should exist', function () {
      var id = 'hello';
      expect((0, _testkitSanity.isTestkitExists)(_react2.default.createElement(
        _Tag2.default,
        { id: id },
        'a'
      ), _testkit.tagTestkitFactory)).toBe(true);
    });
  });

  describe('enzyme testkit', function () {
    it('should exist', function () {
      var id = 'hello';
      expect((0, _testkitSanity.isEnzymeTestkitExists)(_react2.default.createElement(
        _Tag2.default,
        { id: id },
        'a'
      ), _enzyme.tagTestkitFactory, _enzyme2.mount)).toBe(true);
    });
  });
});