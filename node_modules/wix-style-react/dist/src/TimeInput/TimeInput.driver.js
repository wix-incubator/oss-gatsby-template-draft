'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _Ticker = require('../Input/Ticker/testkit/Ticker');

var _testUtils = require('react-dom/test-utils');

var _testUtils2 = _interopRequireDefault(_testUtils);

var _TimeInput = require('./TimeInput.scss');

var _TimeInput2 = _interopRequireDefault(_TimeInput);

var _vanilla = require('wix-ui-test-utils/vanilla');

var _Input = require('../Input/Input.driver');

var _Input2 = _interopRequireDefault(_Input);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var inputTestkitFactory = (0, _vanilla.testkitFactoryCreator)(_Input2.default);

var timeInputDriverFactory = function timeInputDriverFactory(_ref) {
  var element = _ref.element,
      wrapper = _ref.wrapper,
      component = _ref.component;

  var input = function input() {
    return inputTestkitFactory({ wrapper: element, dataHook: 'time-input' });
  };
  var inputTicker = function inputTicker() {
    return (0, _Ticker.tickerTestkitFactory)({ wrapper: element });
  };
  var amPmIndicator = function amPmIndicator() {
    return element.querySelector('[data-hook="am-pm-indicator"]');
  };
  return {
    exists: function exists() {
      return !!element;
    },
    getValue: function getValue() {
      return input().getValue();
    },
    isDisabled: function isDisabled() {
      return input().isDisabled();
    },
    clickTickerUp: function clickTickerUp() {
      return inputTicker().clickUp();
    },
    clickTickerDown: function clickTickerDown() {
      return inputTicker().clickDown();
    },
    isAmPmIndicatorExist: function isAmPmIndicatorExist() {
      return !!amPmIndicator();
    },
    toggleAmPmIndicator: function toggleAmPmIndicator() {
      return _testUtils2.default.Simulate.click(amPmIndicator());
    },
    getAmPmIndicatorText: function getAmPmIndicatorText() {
      return amPmIndicator().textContent;
    },
    isRtl: function isRtl() {
      return !!element.querySelector('.' + _TimeInput2.default.rtl);
    },
    setValue: function setValue(value) {
      return input().enterText(value);
    },
    blur: function blur() {
      return input().blur();
    },
    setProps: function setProps(props) {
      var ClonedWithProps = _react2.default.cloneElement.apply(_react2.default, [component, Object.assign({}, component.props, props)].concat(_toConsumableArray(component.props.children || [])));
      _reactDom2.default.render(_react2.default.createElement(
        'div',
        { ref: function ref(r) {
            return element = r;
          } },
        ClonedWithProps
      ), wrapper);
    }
  };
};
exports.default = timeInputDriverFactory;