'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _testUtils = require('react-dom/test-utils');

var _testUtils2 = _interopRequireDefault(_testUtils);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _Tooltip = require('./Tooltip');

var _Tooltip2 = _interopRequireDefault(_Tooltip);

var _last = require('lodash/last');

var _last2 = _interopRequireDefault(_last);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var arrowDirectionToPlacement = {
  top: 'bottom',
  bottom: 'top',
  left: 'right',
  right: 'left'
};

var tooltipDriverFactory = function tooltipDriverFactory(_ref) {
  var element = _ref.element,
      wrapper = _ref.wrapper;

  var bodyOrWrapper = {
    querySelector: function querySelector(query) {
      return document.body.querySelector(query) || wrapper.querySelector && wrapper.querySelector(query);
    },
    querySelectorAll: function querySelectorAll(query) {
      var documentResult = document.body.querySelectorAll(query);
      return documentResult.length > 0 ? documentResult : wrapper.querySelectorAll && wrapper.querySelectorAll(query);
    }
  };
  var getTooltipContent = function getTooltipContent() {
    return bodyOrWrapper.querySelector('.tooltip');
  };

  return {
    isShown: function isShown() {
      return !!bodyOrWrapper.querySelector('.tooltip');
    },
    focus: function focus() {
      return _testUtils2.default.Simulate.focus(element);
    },
    blur: function blur() {
      return _testUtils2.default.Simulate.blur(element);
    },
    click: function click() {
      return _testUtils2.default.Simulate.click(element);
    },
    mouseEnter: function mouseEnter() {
      return _testUtils2.default.Simulate.mouseEnter(element);
    },
    mouseLeave: function mouseLeave() {
      return _testUtils2.default.Simulate.mouseLeave(element);
    },
    hasErrorTheme: function hasErrorTheme() {
      return !!bodyOrWrapper.querySelector('.error');
    },
    hasDarkTheme: function hasDarkTheme() {
      return !!bodyOrWrapper.querySelector('.dark');
    },
    hasLightTheme: function hasLightTheme() {
      return !!bodyOrWrapper.querySelector('.light');
    },
    hasAnimationClass: function hasAnimationClass() {
      return !!bodyOrWrapper.querySelector('.fadeIn');
    },
    getTooltipWrapper: getTooltipContent,
    getChildren: function getChildren() {
      return element.innerHTML;
    },
    getPlacement: function getPlacement() {
      var arrowDirection = (0, _last2.default)(bodyOrWrapper.querySelectorAll('.arrow')).className.split(' ')[1];
      return arrowDirectionToPlacement[arrowDirection];
    },
    getContent: function getContent() {
      var content = getTooltipContent();
      while (content.children.length > 0) {
        content = content.children[0];
      }
      return content.innerHTML;
    },
    getMaxWidth: function getMaxWidth() {
      var content = getTooltipContent();
      var values = content.style._values;
      return values['max-width'];
    },
    getMinWidth: function getMinWidth() {
      var content = getTooltipContent();
      var values = content.style._values;
      return values['min-width'];
    },
    getAlignment: function getAlignment() {
      var content = getTooltipContent();
      var values = content.style._values;
      return values['text-align'];
    },
    getPadding: function getPadding() {
      var content = getTooltipContent();
      var values = content.style._values;
      return values.padding;
    },
    setProps: function setProps(props) {
      _reactDom2.default.render(_react2.default.createElement(
        'div',
        { ref: function ref(r) {
            return element = r;
          } },
        _react2.default.createElement(_Tooltip2.default, props)
      ), wrapper);
    }
  };
};

exports.default = tooltipDriverFactory;