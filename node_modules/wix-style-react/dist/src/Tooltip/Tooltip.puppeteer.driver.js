'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var tooltipDriverFactory = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(component, page) {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt('return', {
              element: function element() {
                return component;
              },
              getTooltipTextContent: function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;
                  var content;
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return new Promise(function (resolve) {
                            setTimeout(resolve, delay);
                          });

                        case 2:
                          _context.next = 4;
                          return page.$('[data-hook="tooltip-content"]');

                        case 4:
                          content = _context.sent;
                          return _context.abrupt('return', page.evaluate(function (_content) {
                            return _content.innerText;
                          }, content));

                        case 6:
                        case 'end':
                          return _context.stop();
                      }
                    }
                  }, _callee, undefined);
                }));

                return function getTooltipTextContent() {
                  return _ref2.apply(this, arguments);
                };
              }()
            });

          case 1:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function tooltipDriverFactory(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = tooltipDriverFactory;