'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _testUtils = require('react-dom/test-utils');

var _testUtils2 = _interopRequireDefault(_testUtils);

var _Tooltip = require('./Tooltip.driver');

var _Tooltip2 = _interopRequireDefault(_Tooltip);

var _Tooltip3 = require('./Tooltip');

var _Tooltip4 = _interopRequireDefault(_Tooltip3);

var _TooltipContent = require('./TooltipContent');

var _TooltipContent2 = _interopRequireDefault(_TooltipContent);

var _driverFactory = require('wix-ui-test-utils/driver-factory');

var _testkit = require('../../testkit');

var _enzyme = require('../../testkit/enzyme');

var _enzyme2 = require('enzyme');

var _Button = require('../../src/Button');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Tooltip', function () {

  var createDriver = (0, _driverFactory.createDriverFactory)(_Tooltip2.default);
  var _props = { showDelay: 5, hideDelay: 5, content: _react2.default.createElement(_TooltipContent2.default, { children: 'I\'m the content' }) };
  var children = _react2.default.createElement(
    'div',
    null,
    'Here there is a children'
  );

  beforeEach(function () {
    document.body.innerHTML = '';
  });

  it('should be hidden by default', function () {
    var driver = createDriver(_react2.default.createElement(
      _Tooltip4.default,
      _props,
      children
    ));
    expect(driver.isShown()).toBeFalsy();
  });

  it('should show a tooltip once hovering', function () {
    var driver = createDriver(_react2.default.createElement(
      _Tooltip4.default,
      _props,
      children
    ));
    driver.mouseEnter();
    expect(driver.isShown()).toBeFalsy();
    return resolveIn(30).then(function () {
      expect(driver.isShown()).toBeTruthy();
    });
  });

  it('should hide when mouse leaving', function () {
    var driver = createDriver(_react2.default.createElement(
      _Tooltip4.default,
      _props,
      children
    ));
    driver.mouseEnter();
    expect(driver.isShown()).toBeFalsy();
    return resolveIn(30).then(function () {
      expect(driver.isShown()).toBeTruthy();
      driver.mouseLeave();
      return resolveIn(30).then(function () {
        expect(driver.isShown()).toBeFalsy();
      });
    });
  });

  it('should test inner component', function () {
    var dataHook = 'button_data_hook';
    var buttonContent = _react2.default.createElement(
      'div',
      null,
      'Custom Content...\xA0',
      _react2.default.createElement(
        _Button2.default,
        { dataHook: dataHook, id: 'inner-button', height: 'small' },
        'Button content'
      )
    );
    var driver = createDriver(_react2.default.createElement(
      _Tooltip4.default,
      { showDelay: 5, hideDelay: 5, content: buttonContent },
      children
    ));
    driver.mouseEnter();
    expect(driver.isShown()).toBeFalsy();
    return resolveIn(30).then(function () {
      expect(driver.isShown()).toBeTruthy();
      var buttonTestkit = (0, _testkit.buttonTestkitFactory)({ wrapper: driver.getTooltipWrapper(), dataHook: dataHook });
      expect(buttonTestkit.getButtonTextContent()).toBe('Button content');
    });
  });

  it('should not override focus event', function () {
    var onFocus = jest.fn();
    var onFocusedChild = _react2.default.createElement(
      'div',
      { onFocus: onFocus },
      'Here there is a children'
    );
    var driver = createDriver(_react2.default.createElement(
      _Tooltip4.default,
      _props,
      onFocusedChild
    ));
    driver.focus();
    expect(onFocus).toBeCalled();
  });

  it('should not override blur event', function () {
    var onBlur = jest.fn();
    var onBluredChild = _react2.default.createElement(
      'div',
      { onBlur: onBlur },
      'Here there is a children'
    );
    var driver = createDriver(_react2.default.createElement(
      _Tooltip4.default,
      _props,
      onBluredChild
    ));
    driver.blur();
    expect(onBlur).toBeCalled();
  });

  it('should not override click event', function () {
    var onClick = jest.fn();
    var onClickedChild = _react2.default.createElement(
      'div',
      { onClick: onClick },
      'Here there is a children'
    );
    var driver = createDriver(_react2.default.createElement(
      _Tooltip4.default,
      _props,
      onClickedChild
    ));
    driver.click();
    expect(onClick).toBeCalled();
  });

  it('should not override mouse enter event', function () {
    var onMouseEnter = jest.fn();
    var onMouseEnteredChild = _react2.default.createElement(
      'div',
      { onMouseEnter: onMouseEnter },
      'Here there is a children'
    );
    var driver = createDriver(_react2.default.createElement(
      _Tooltip4.default,
      _props,
      onMouseEnteredChild
    ));
    driver.mouseEnter();
    expect(onMouseEnter).toBeCalled();
  });

  it('should not override mouse leave event', function () {
    var onMouseLeave = jest.fn();
    var onMouseLeavedChild = _react2.default.createElement(
      'div',
      { onMouseLeave: onMouseLeave },
      'Here there is a children'
    );
    var driver = createDriver(_react2.default.createElement(
      _Tooltip4.default,
      _props,
      onMouseLeavedChild
    ));
    driver.mouseLeave();
    expect(onMouseLeave).toBeCalled();
  });

  it('should support error theme', function () {
    var driver = createDriver(_react2.default.createElement(
      _Tooltip4.default,
      _extends({ theme: 'error' }, _props),
      children
    ));
    driver.mouseEnter();
    expect(driver.hasErrorTheme()).toBeFalsy();
    return resolveIn(30).then(function () {
      expect(driver.hasErrorTheme()).toBeTruthy();
    });
  });

  it('should support dark theme', function () {
    var driver = createDriver(_react2.default.createElement(
      _Tooltip4.default,
      _extends({ theme: 'dark' }, _props),
      children
    ));
    driver.mouseEnter();
    expect(driver.hasDarkTheme()).toBeFalsy();
    return resolveIn(30).then(function () {
      expect(driver.hasDarkTheme()).toBeTruthy();
    });
  });

  it('should support light theme', function () {
    var driver = createDriver(_react2.default.createElement(
      _Tooltip4.default,
      _extends({ theme: 'light' }, _props),
      children
    ));
    driver.mouseEnter();
    expect(driver.hasLightTheme()).toBeFalsy();
    return resolveIn(30).then(function () {
      expect(driver.hasLightTheme()).toBeTruthy();
    });
  });

  it('should have a children', function () {
    var driver = createDriver(_react2.default.createElement(
      _Tooltip4.default,
      _props,
      children
    ));
    expect(driver.getChildren()).toBe('Here there is a children');
  });

  it('should have a content', function () {
    var driver = createDriver(_react2.default.createElement(
      _Tooltip4.default,
      _props,
      children
    ));
    driver.mouseEnter();
    return resolveIn(30).then(function () {
      expect(driver.getContent()).toBe('I\'m the content');
    });
  });

  it('should cancel mouse leave, when followed by mouse enter immediately', function () {
    var driver = createDriver(_react2.default.createElement(
      _Tooltip4.default,
      _props,
      children
    ));
    driver.mouseEnter();
    driver.mouseLeave();
    driver.mouseEnter();
    return resolveIn(30).then(function () {
      expect(driver.isShown()).toBe(true);
    });
  });

  it('should call onShow when tooltip is shown', function () {
    var onShow = jest.fn();
    var driver = createDriver(_react2.default.createElement(
      _Tooltip4.default,
      _extends({}, _props, { onShow: onShow }),
      children
    ));

    driver.mouseEnter();

    expect(onShow).not.toHaveBeenCalled();
    return resolveIn(30).then(function () {
      expect(onShow).toHaveBeenCalled();
      expect(driver.isShown()).toBeTruthy();
    });
  });

  it('should call onHide when tooltip is hidden', function () {
    var onHide = jest.fn();
    var driver = createDriver(_react2.default.createElement(
      _Tooltip4.default,
      _extends({}, _props, { onHide: onHide }),
      children
    ));

    driver.mouseEnter();
    return resolveIn(30).then(function () {
      expect(driver.isShown()).toBeTruthy();

      driver.mouseLeave();

      return resolveIn(30).then(function () {
        expect(driver.isShown()).toBeFalsy();
        expect(onHide).toHaveBeenCalled();
      });
    });
  });

  it('should append to element selected', function () {
    var el = document.createElement('div');
    var driver = createDriver(_react2.default.createElement(
      _Tooltip4.default,
      _extends({}, _props, { appendTo: el }),
      children
    ));
    driver.mouseEnter();
    return resolveIn(30).then(function () {
      expect(el.childElementCount).toEqual(1);
    });
  });

  describe('custom triggers', function () {
    it('should hide tooltip', function () {
      var props = _extends({}, _props, { hideTrigger: 'custom', showTrigger: 'custom' });
      var driver = createDriver(_react2.default.createElement(
        _Tooltip4.default,
        props,
        children
      ));
      driver.mouseEnter();
      return resolveIn(30).then(function () {
        expect(driver.isShown()).toBeFalsy();
        driver.setProps(_extends({}, props, { active: true }));
        return resolveIn(30);
      }).then(function () {
        expect(driver.isShown()).toBeTruthy();
        driver.setProps(_extends({}, props, { active: false }));
        return resolveIn(30);
      }).then(function () {
        expect(driver.isShown()).toBeFalsy();
      });
    });

    it('should not show tooltip when transitioned to both active and disabled', function () {
      var props = _extends({}, _props, {
        hideTrigger: 'custom',
        showTrigger: 'custom',
        active: false,
        disabled: false
      });
      var driver = createDriver(_react2.default.createElement(
        _Tooltip4.default,
        props,
        children
      ));
      return resolveIn(30).then(function () {
        expect(driver.isShown()).toBeFalsy();
        driver.setProps(_extends({}, props, { active: true, disabled: true }));
        return resolveIn(30);
      }).then(function () {
        expect(driver.isShown()).toBeFalsy();
      });
    });
    it('should close tooltip when disabled changed to true when was active true before', function () {
      var props = _extends({}, _props, {
        hideTrigger: 'custom',
        showTrigger: 'custom',
        active: true,
        disabled: false
      });
      var driver = createDriver(_react2.default.createElement(
        _Tooltip4.default,
        props,
        children
      ));
      return resolveIn(30).then(function () {
        expect(driver.isShown()).toBeTruthy();
        driver.setProps(_extends({}, props, { disabled: true }));
        return resolveIn(30);
      }).then(function () {
        expect(driver.isShown()).toBeFalsy();
      });
    });
  });

  describe('placement attribute', function () {
    it('should be top by default', function () {
      var driver = createDriver(_react2.default.createElement(
        _Tooltip4.default,
        _extends({}, _props),
        children
      ));
      driver.mouseEnter();

      return resolveIn(30).then(function () {
        expect(driver.getPlacement()).toBe('top');
      });
    });

    ['top', 'bottom', 'left', 'right'].forEach(function (placement) {
      it('should be ' + placement, function () {
        var driver = createDriver(_react2.default.createElement(
          _Tooltip4.default,
          _extends({}, _extends({}, _props), { placement: placement }),
          children
        ));
        driver.mouseEnter();

        return resolveIn(30).then(function () {
          expect(driver.getPlacement()).toBe(placement);
        });
      });
    });
  });

  describe('maxWidth attribute', function () {
    it('should set default maxWidth 204', function () {
      var driver = createDriver(_react2.default.createElement(
        _Tooltip4.default,
        _props,
        children
      ));
      driver.mouseEnter();
      return resolveIn(30).then(function () {
        expect(driver.getMaxWidth()).toBe('204px');
      });
    });

    it('should set custom maxWidth', function () {
      var props = _extends({}, _props, { maxWidth: '400px' });
      var driver = createDriver(_react2.default.createElement(
        _Tooltip4.default,
        props,
        children
      ));
      driver.mouseEnter();
      return resolveIn(30).then(function () {
        expect(driver.getMaxWidth()).toBe('400px');
      });
    });
  });

  describe('minWidth attribute', function () {
    it('should not have any min-width as default', function () {
      var driver = createDriver(_react2.default.createElement(
        _Tooltip4.default,
        _props,
        children
      ));
      driver.mouseEnter();
      return resolveIn(30).then(function () {
        expect(driver.getMinWidth()).toBe(undefined);
      });
    });

    it('should set custom min-width', function () {
      var props = _extends({}, _props, { minWidth: '150px' });
      var driver = createDriver(_react2.default.createElement(
        _Tooltip4.default,
        props,
        children
      ));
      driver.mouseEnter();
      return resolveIn(30).then(function () {
        expect(driver.getMinWidth()).toBe('150px');
      });
    });
  });

  describe('alignment attribute', function () {
    it('should set default left', function () {
      var driver = createDriver(_react2.default.createElement(
        _Tooltip4.default,
        _props,
        children
      ));
      driver.mouseEnter();
      return resolveIn(30).then(function () {
        expect(driver.getAlignment()).toBe('left');
      });
    });
  });

  describe('padding attribute', function () {
    it('should set default to none', function () {
      var driver = createDriver(_react2.default.createElement(
        _Tooltip4.default,
        _props,
        children
      ));
      driver.mouseEnter();
      return resolveIn(30).then(function () {
        expect(driver.getPadding()).toBe(undefined);
      });
    });
    it('should set custom padding', function () {
      var props = _extends({}, _props, { padding: '5px' });
      var driver = createDriver(_react2.default.createElement(
        _Tooltip4.default,
        props,
        children
      ));
      driver.mouseEnter();
      return resolveIn(30).then(function () {
        expect(driver.getPadding()).toBe('5px');
      });
    });
  });

  describe('testkit', function () {

    var createTooltipTestkitDriver = function createTooltipTestkitDriver(props) {
      var div = document.createElement('div');
      var dataHook = 'myDataHook';
      var tooltipProps = _extends({}, _props, props);
      var wrapper = div.appendChild(_testUtils2.default.renderIntoDocument(_react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          _Tooltip4.default,
          _extends({ dataHook: dataHook }, tooltipProps),
          children
        )
      )));
      var driver = (0, _testkit.tooltipTestkitFactory)({ wrapper: wrapper, dataHook: dataHook });
      return driver;
    };

    it('should exist', function () {
      var driver = createTooltipTestkitDriver();
      driver.mouseEnter();
      expect(driver.isShown()).toBeFalsy();
      return resolveIn(30).then(function () {
        expect(driver.isShown()).toBeTruthy();
      });
    });

    it('should exist with default props when appendToParent', function () {
      var driver = createTooltipTestkitDriver({ appendToParent: true });
      driver.mouseEnter();
      expect(driver.isShown()).toBeFalsy();
      return resolveIn(30).then(function () {
        expect(driver.isShown()).toBeTruthy();
        expect(driver.getContent()).toBe('I\'m the content');
        expect(driver.hasLightTheme()).toBeTruthy();
        expect(driver.getPlacement()).toBe('top');
      });
    });

    it('should have dark theme when appendToParent', function () {
      var driver = createTooltipTestkitDriver({ appendToParent: true, theme: 'dark' });
      driver.mouseEnter();
      return resolveIn(30).then(function () {
        expect(driver.hasDarkTheme()).toBeTruthy();
      });
    });

    it('should have error theme when appendToParent', function () {
      var driver = createTooltipTestkitDriver({ appendToParent: true, theme: 'error' });
      driver.mouseEnter();
      return resolveIn(30).then(function () {
        expect(driver.hasErrorTheme()).toBeTruthy();
      });
    });
  });

  describe('enzyme testkit', function () {
    it('should exist', function () {
      var dataHook = 'myDataHook';
      var wrapper = (0, _enzyme2.mount)(_react2.default.createElement(
        _Tooltip4.default,
        _extends({ dataHook: dataHook }, _props),
        children
      ));
      var driver = (0, _enzyme.tooltipTestkitFactory)({ wrapper: wrapper, dataHook: dataHook });
      driver.mouseEnter();
      expect(driver.isShown()).toBeFalsy();
      return resolveIn(30).then(function () {
        expect(driver.isShown()).toBeTruthy();
      });
    });

    it('should remove a tooltip immediately once the component is destroyed', function () {
      var dataHook = 'myDataHook';
      var wrapper = (0, _enzyme2.mount)(_react2.default.createElement(
        _Tooltip4.default,
        _extends({ dataHook: dataHook }, _props, { hideDelay: 1000 }),
        children
      ));
      var driver = (0, _enzyme.tooltipTestkitFactory)({ wrapper: wrapper, dataHook: dataHook });
      driver.mouseEnter();
      return resolveIn(30).then(function () {
        expect(driver.isShown()).toBeTruthy();
        wrapper.unmount();
        return resolveIn(1);
      }).then(function () {
        expect(driver.isShown()).toBeFalsy();
      });
    });

    it('should have fadeIn class and delay when showImmediately is unspecified', function () {
      var driver = createDriver(_react2.default.createElement(
        _Tooltip4.default,
        _extends({}, _props, { content: _react2.default.createElement(
            'div',
            null,
            'HELLO WORLD'
          ) }),
        children
      ));
      driver.mouseEnter();
      return resolveIn(30).then(function () {
        expect(driver.hasAnimationClass()).toBeTruthy();
      });
    });

    it('should have fadeIn class and delay when showImmediately is false', function () {
      var driver = createDriver(_react2.default.createElement(
        _Tooltip4.default,
        _extends({}, _props, { content: _react2.default.createElement(
            'div',
            null,
            'HELLO WORLD'
          ), showImmediately: false }),
        children
      ));
      driver.mouseEnter();
      return resolveIn(30).then(function () {
        expect(driver.hasAnimationClass()).toBeTruthy();
      });
    });

    it('should not have fadeIn class and no delay when showImmediately is true', function () {
      var driver = createDriver(_react2.default.createElement(
        _Tooltip4.default,
        _extends({}, _props, { content: _react2.default.createElement(
            'div',
            null,
            'HELLO WORLD'
          ), showImmediately: true }),
        children
      ));
      driver.mouseEnter();
      return resolveIn(0).then(function () {
        expect(driver.hasAnimationClass()).toBeFalsy();
      });
    });
  });
});

function resolveIn(timeout) {
  return new Promise(function (resolve) {
    setTimeout(function () {
      resolve({});
    }, timeout);
  });
}