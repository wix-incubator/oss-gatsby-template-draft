'use strict';

var _GoogleMapsClient = require('./GoogleMapsClient');

var _GoogleMapsClient2 = _interopRequireDefault(_GoogleMapsClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('GoogleMapsClient', function () {

  afterEach(function () {
    return delete window.google;
  });

  it('should handle null when autocompleting and getting ZERO_RESULTS', function () {
    window.google = new GoogleMapsMock({
      getPlacePredictions: function getPlacePredictions(request, callback) {
        callback(null, window.google.maps.GeocoderStatus.ZERO_RESULTS);
      }
    });
    var client = new _GoogleMapsClient2.default();
    return client.autocomplete({ request: {} }).then(function (result) {
      expect(result).toEqual([]);
    });
  });

  it('should handle null when geocoding and getting ZERO_RESULTS', function () {
    window.google = new GoogleMapsMock(null, {
      geocode: function geocode(request, callback) {
        callback(null, window.google.maps.GeocoderStatus.ZERO_RESULTS);
      }
    });
    var client = new _GoogleMapsClient2.default();
    return client.geocode({ request: {} }).then(function (result) {
      expect(result).toEqual([]);
    });
  });

  it('should handle null when placeDetails and getting ZERO_RESULTS', function () {
    window.google = new GoogleMapsMock(null, null, {
      getDetails: function getDetails(request, callback) {
        callback(null, window.google.maps.places.PlacesServiceStatus.ZERO_RESULTS);
      }
    });
    var client = new _GoogleMapsClient2.default();
    return client.placeDetails({ request: {} }).then(function (result) {
      expect(result).toEqual(undefined);
    });
  });
});

function GoogleMapsMock(autocompleteInstance, geocoderInstance, placesServiceInstance) {
  return {
    maps: {
      Map: function Map() {},
      places: {
        AutocompleteService: function AutocompleteService() {
          return autocompleteInstance;
        },
        PlacesService: function PlacesService() {
          return placesServiceInstance;
        },
        PlacesServiceStatus: {
          OK: 'OK',
          ZERO_RESULTS: 'ZERO_RESULTS'
        }
      },
      Geocoder: function Geocoder() {
        return geocoderInstance;
      },
      GeocoderStatus: {
        OK: 'OK',
        ZERO_RESULTS: 'ZERO_RESULTS'
      }
    }
  };
}