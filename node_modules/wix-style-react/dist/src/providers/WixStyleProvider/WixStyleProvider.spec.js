'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _enzyme = require('enzyme');

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var styles = function styles(theme) {
  return {
    color: theme.color
  };
};

var Component = function Component(_ref) {
  var theme = _ref.theme;
  return _react2.default.createElement(
    'div',
    { id: 'component' },
    'My color is ' + theme.color
  );
};

Component.propTypes = {
  theme: _propTypes.object
};

var WrappedComponent = (0, _index.withStyles)(styles, Component);

describe('WixStyleProvider', function () {
  it.skip('should render the wrapped component with the correct props and context', function () {
    var color = 'green';
    var children = 'My color is ' + color;

    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
      _index2.default,
      { theme: { color: color } },
      _react2.default.createElement(WrappedComponent, null)
    ));

    expect(wrapper.html()).toBe('<div id="component">' + children + '</div>');
    expect(wrapper.text()).toBe(children);
  });

  it.skip('should have core theme by default', function () {
    var color = 'green';

    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
      _index2.default,
      null,
      _react2.default.createElement(WrappedComponent, null)
    ));

    expect(wrapper.text()).toBe('Theme is core and color is ' + color);
  });
});