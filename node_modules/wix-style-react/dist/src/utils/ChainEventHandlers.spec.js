'use strict';

var _ChainEventHandlers = require('./ChainEventHandlers');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

describe('chainEventHandlers', function () {
  var newEvent = function newEvent() {
    return { defaultPrevented: false };
  };

  it('should run handler by order', function () {
    var callResults = [];
    var funcs = [1, 2, 3, 4].map(function (i) {
      return function () {
        return callResults.push(i);
      };
    });
    _ChainEventHandlers.chainEventHandlers.apply(undefined, _toConsumableArray(funcs))(newEvent());
    expect(callResults).toEqual([1, 2, 3, 4]);
  });

  it('should skip undefined handlers', function () {
    var callResults = [];
    var funcs = [1, undefined, 3, 4].map(function (i) {
      return i ? function () {
        return callResults.push(i);
      } : undefined;
    });
    _ChainEventHandlers.chainEventHandlers.apply(undefined, _toConsumableArray(funcs))(newEvent());
    expect(callResults).toEqual([1, 3, 4]);
  });
});