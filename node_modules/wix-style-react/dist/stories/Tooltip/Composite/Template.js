'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Template = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactElementToJsxString = require('react-element-to-jsx-string');

var _reactElementToJsxString2 = _interopRequireDefault(_reactElementToJsxString);

var _Tooltip = require('wix-style-react/Tooltip');

var _Tooltip2 = _interopRequireDefault(_Tooltip);

var _Button = require('wix-style-react/Button');

var _Button2 = _interopRequireDefault(_Button);

var _TooltipForEyesOnly = require('./TooltipForEyesOnly');

var _TooltipForEyesOnly2 = _interopRequireDefault(_TooltipForEyesOnly);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Template = exports.Template = function (_Component) {
  _inherits(Template, _Component);

  function Template() {
    _classCallCheck(this, Template);

    return _possibleConstructorReturn(this, (Template.__proto__ || Object.getPrototypeOf(Template)).apply(this, arguments));
  }

  _createClass(Template, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate(props) {
      props.onChange(this.getExampleCode());
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.props.onChange(this.getExampleCode());
    }
  }, {
    key: 'getExampleCode',
    value: function getExampleCode() {
      return (0, _reactElementToJsxString2.default)(this.getComponent(), {
        showDefaultProps: false
      });
    }
  }, {
    key: 'getComponent',
    value: function getComponent() {
      return _react2.default.createElement(
        _Tooltip2.default,
        {
          placement: this.props.placement,
          alignment: 'center',
          content: this.props.tooltipContent,
          showTrigger: this.props.showTrigger,
          hideTrigger: this.props.hideTrigger,
          theme: this.props.theme,
          size: this.props.size,
          maxWidth: this.props.maxWidth,
          onShow: this.props.onShow,
          onHide: this.props.onHide,
          shouldCloseOnClickOutside: true,
          shouldUpdatePosition: this.props.shouldUpdatePosition,
          showImmediately: this.props.showImmediately,
          moveBy: this.props.moveBy
        },
        this.getTooltipTarget()
      );
    }
  }, {
    key: 'getTooltipTarget',
    value: function getTooltipTarget() {
      switch (this.props.type) {
        case 'tooltip':
          return _react2.default.createElement(
            'div',
            null,
            'Hover me to see the tooltip'
          );
        case 'popover':
          return _react2.default.createElement(
            _Button2.default,
            { type: 'button' },
            'Click Me'
          );
        default:
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        this.getComponent(),
        _react2.default.createElement(_TooltipForEyesOnly2.default, null)
      );
    }
  }]);

  return Template;
}(_react.Component);

Template.propTypes = {
  onChange: _propTypes2.default.func.isRequired,
  theme: _Tooltip2.default.propTypes.theme,
  placement: _Tooltip2.default.propTypes.placement,
  tooltipContent: _Tooltip2.default.propTypes.content,
  showTrigger: _Tooltip2.default.propTypes.showTrigger,
  hideTrigger: _Tooltip2.default.propTypes.hideTrigger,
  type: _propTypes2.default.oneOf(['tooltip', 'popover']),
  size: _Tooltip2.default.propTypes.size,
  maxWidth: _Tooltip2.default.propTypes.maxWidth,
  onShow: _Tooltip2.default.propTypes.onShow,
  onHide: _Tooltip2.default.propTypes.onHide,
  shouldUpdatePosition: _Tooltip2.default.propTypes.shouldUpdatePosition,
  showImmediately: _Tooltip2.default.propTypes.showImmediately,
  moveBy: _Tooltip2.default.propTypes.moveBy
};
exports.default = Template;