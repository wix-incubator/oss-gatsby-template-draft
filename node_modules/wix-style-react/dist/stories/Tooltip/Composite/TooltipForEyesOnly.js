'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LONG_CONTENT = exports.SHORT_CONTENT = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Tooltip = require('wix-style-react/Tooltip');

var _Tooltip2 = _interopRequireDefault(_Tooltip);

var _Button = require('wix-style-react/Button');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SHORT_CONTENT = exports.SHORT_CONTENT = 'Hello World';
var LONG_CONTENT = exports.LONG_CONTENT = 'Hello World, Hello World, Hello World, Hello World';

var TooltipForEyesOnly = function (_Component) {
  _inherits(TooltipForEyesOnly, _Component);

  function TooltipForEyesOnly() {
    _classCallCheck(this, TooltipForEyesOnly);

    var _this = _possibleConstructorReturn(this, (TooltipForEyesOnly.__proto__ || Object.getPrototypeOf(TooltipForEyesOnly)).call(this));

    _this.state = {
      content: SHORT_CONTENT,
      style: {}
    };
    return _this;
  }

  _createClass(TooltipForEyesOnly, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _state = this.state,
          style = _state.style,
          content = _state.content;

      var isE2e = global.self === global.top;

      return isE2e ? _react2.default.createElement(
        'div',
        { 'data-hook': 'tooltip-e2e-wrapper' },
        _react2.default.createElement(
          _Tooltip2.default,
          {
            active: true,
            shouldUpdatePosition: true,
            showImmediately: true,
            showTrigger: 'custom',
            hideTrigger: 'custom',
            appendToParent: true,
            content: _react2.default.createElement(
              'div',
              { 'data-hook': 'tooltip-e2e-tooltip' },
              content
            )
          },
          _react2.default.createElement(
            'div',
            { style: style },
            'My Father is a Tooltip'
          )
        ),
        _react2.default.createElement(
          _Button2.default,
          { onClick: function onClick() {
              return _this2._onClick();
            } },
          'Change State'
        )
      ) : null;
    }
  }, {
    key: '_onClick',
    value: function _onClick() {
      this.setState({
        style: { position: 'relative', left: '20px' },
        content: LONG_CONTENT
      });
    }
  }]);

  return TooltipForEyesOnly;
}(_react.Component);

TooltipForEyesOnly.displayName = 'TooltipForEyesOnly';
TooltipForEyesOnly.propTypes = {};
TooltipForEyesOnly.defaultProps = {};
exports.default = TooltipForEyesOnly;