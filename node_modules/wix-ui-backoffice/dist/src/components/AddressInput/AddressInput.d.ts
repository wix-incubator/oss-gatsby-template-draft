/// <reference types="react" />
import * as React from 'react';
import { Requireable } from 'prop-types';
import { AddressInputProps as CoreAddressInputProps } from 'wix-ui-core/AddressInput';
import { Omit } from '../../types/common';
export declare type excludeProps = 'forceContentElementVisibility' | 'forceOptions' | 'throttleInterval' | 'locationIcon';
export interface AddressInputProps extends Omit<CoreAddressInputProps, excludeProps> {
    size?: 'large' | 'medium' | 'small';
    showLocationIcon?: boolean;
    magnifyingGlass?: boolean;
}
export declare class AddressInput extends React.PureComponent<AddressInputProps> {
    static displayName: string;
    addressInputRef: any;
    static propTypes: {
        size: Requireable<any>;
        showLocationIcon: Requireable<any>;
        magnifyingGlass: Requireable<any>;
        style?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        disabled?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        onKeyDown?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        id?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        value?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        Client?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        onSelect?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        apiKey?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        lang?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        handler?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        countryCode?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        placeholder?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        readOnly?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        onChange?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        onFocus?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        onBlur?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        clearSuggestionsOnBlur?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        onManualInput?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        filterTypes?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        types?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        fallbackToManual?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        suffix?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
        fixedFooter?: (object: AddressInputProps, key: string, componentName: string, ...rest: any[]) => Error;
    };
    static defaultProps: {
        size: string;
        magnifyingGlass: boolean;
    };
    focus(): void;
    blur(): void;
    render(): JSX.Element;
}
