"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var driver_factory_1 = require("wix-ui-test-utils/driver-factory");
var AddressInput_driver_1 = require("./AddressInput.driver");
var _1 = require(".");
var enzyme_1 = require("enzyme");
var GoogleMapsClientStub_1 = require("wix-ui-core/dist/src/components/AddressInput/GoogleMapsClientStub");
var helper = require("wix-ui-core/dist/src/components/AddressInput/AddressInputTestHelper");
var waitForCond = require("wait-for-cond");
var Search_1 = require("wix-ui-icons-common/Search");
GoogleMapsClientStub_1.GoogleMapsClientStub.setAddresses([helper.ADDRESS_1, helper.ADDRESS_2]);
GoogleMapsClientStub_1.GoogleMapsClientStub.setGeocode(helper.GEOCODE_1);
var commonProps = {
    apiKey: '',
    Client: GoogleMapsClientStub_1.GoogleMapsClientStub,
    lang: 'ru',
    onSelect: function () { return null; }
};
describe('AddressInput', function () {
    var createDriver = driver_factory_1.createDriverFactory(AddressInput_driver_1.addressInputDriverFactory);
    it('should always set the core prop forceContentElementVisibility to false', function () {
        var props = __assign({}, commonProps, { forceContentElementVisibility: true });
        var driver = createDriver(React.createElement(_1.AddressInput, __assign({}, props)));
        expect(driver.isContentElementExists()).toBeFalsy();
    });
    it('should always set the core prop forceOptions to null', function () {
        var forceOptions = [{ place_id: 0, id: 0, description: 'Hello World' }];
        var props = __assign({}, commonProps, { forceOptions: forceOptions });
        var driver = createDriver(React.createElement(_1.AddressInput, __assign({}, props)));
        driver.click();
        expect(driver.isContentElementExists()).toBeFalsy();
    });
    it('should always set the core props throttleInterval value to 150', function () { return __awaiter(_this, void 0, void 0, function () {
        var props, wrapper, coreAddressInput, throttleInterval;
        return __generator(this, function (_a) {
            props = __assign({}, commonProps, { throttleInterval: 1000 });
            wrapper = enzyme_1.mount(React.createElement(_1.AddressInput, __assign({}, props)));
            coreAddressInput = wrapper.children().find('AddressInput');
            throttleInterval = coreAddressInput.prop('throttleInterval');
            expect(throttleInterval).toBe(150);
            return [2 /*return*/];
        });
    }); });
    it('Should have a focus and blur method', function () {
        var wrapper = enzyme_1.mount(React.createElement(_1.AddressInput, __assign({}, commonProps)));
        var input = wrapper.find('input').getDOMNode();
        var instance = wrapper.instance();
        expect(document.activeElement).not.toBe(input);
        instance.focus();
        expect(document.activeElement).toBe(input);
        instance.blur();
        expect(document.activeElement).not.toBe(input);
    });
    describe('locationIcon', function () {
        it('should use LocationIcon when showLocationIcon=true', function () { return __awaiter(_this, void 0, void 0, function () {
            var driver;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        driver = createDriver(React.createElement(_1.AddressInput, __assign({}, commonProps, { showLocationIcon: true })));
                        driver.click();
                        driver.setValue('n');
                        return [4 /*yield*/, waitForCond(function () { return driver.isContentElementExists(); })];
                    case 1:
                        _a.sent();
                        expect(driver.getContentElement().querySelector('[data-hook="location-icon-wrapper"]')).toBeTruthy();
                        return [2 /*return*/];
                }
            });
        }); });
        it('should NOT use LocationIcon when showLocationIcon=false', function () { return __awaiter(_this, void 0, void 0, function () {
            var driver;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        driver = createDriver(React.createElement(_1.AddressInput, __assign({}, commonProps, { showLocationIcon: false })));
                        driver.click();
                        driver.setValue('n');
                        return [4 /*yield*/, waitForCond(function () { return driver.isContentElementExists(); })];
                    case 1:
                        _a.sent();
                        expect(driver.getContentElement().querySelector('[data-hook="location-icon-wrapper"]')).toBeFalsy();
                        return [2 /*return*/];
                }
            });
        }); });
        it('should never pass through the core prop locationIcon', function () {
            var props = __assign({}, commonProps, { locationIcon: React.createElement("div", null) });
            var wrapper = enzyme_1.mount(React.createElement(_1.AddressInput, __assign({}, props)));
            var coreAddressInput = wrapper.children().find('AddressInput');
            var locationIcon = coreAddressInput.prop('locationIcon');
            expect(locationIcon).toBeFalsy();
        });
    });
    describe('magnifyingGlass', function () {
        it('should display magnifying glass icon by default', function () {
            var wrapper = enzyme_1.mount(React.createElement(_1.AddressInput, __assign({}, commonProps)));
            expect(wrapper.find(Search_1.default).exists()).toBeTruthy();
        });
        it('should NOT display magnifying glass when magnifyingGlass is false', function () {
            var wrapper = enzyme_1.mount(React.createElement(_1.AddressInput, __assign({}, commonProps, { magnifyingGlass: false })));
            expect(wrapper.find(Search_1.default).exists()).toBeFalsy();
        });
    });
});
//# sourceMappingURL=AddressInput.spec.js.map