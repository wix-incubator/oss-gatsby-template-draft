"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var defaults = require("lodash/defaults");
var driver_factory_1 = require("wix-ui-test-utils/driver-factory");
var Button_driver_1 = require("./Button.driver");
var testkit_1 = require("../../testkit");
var enzyme_1 = require("../../testkit/enzyme");
var testkitTests_1 = require("../../common/testkitTests");
var _1 = require("./");
var constants_1 = require("./constants");
var utils_1 = require("../../utils");
describe('Button', function () {
    var createDriver = driver_factory_1.createDriverFactory(Button_driver_1.buttonDriverFactory);
    var ButtonWithDefaults = withDefaultsHOC(_1.Button, {
        children: 'Click me!'
    });
    describe('skin prop', function () {
        it('should be standard by default', function () {
            var driver = createDriver(React.createElement(ButtonWithDefaults, null));
            expect(driver.getSkin()).toBe(constants_1.Skin.standard);
        });
        utils_1.enumValues(constants_1.Skin).forEach(function (skin) {
            it("should be '" + skin + "'", function () {
                var driver = createDriver(React.createElement(ButtonWithDefaults, { skin: skin }));
                expect(driver.getSkin()).toBe(skin);
            });
        });
    });
    describe('priority prop', function () {
        it('should be primary by default', function () {
            var driver = createDriver(React.createElement(ButtonWithDefaults, null));
            expect(driver.getPriority()).toBe(constants_1.Priority.primary);
        });
        utils_1.enumValues(constants_1.Priority).forEach(function (priority) {
            it("should be '" + priority + "'", function () {
                var driver = createDriver(React.createElement(ButtonWithDefaults, { priority: priority }));
                expect(driver.getPriority()).toBe(priority);
            });
        });
    });
    describe('size prop', function () {
        it('should be medium by default', function () {
            var driver = createDriver(React.createElement(ButtonWithDefaults, null));
            expect(driver.getSize()).toBe(constants_1.Size.medium);
        });
        utils_1.enumValues(constants_1.Size).forEach(function (size) {
            it("should be '" + size + "'", function () {
                var driver = createDriver(React.createElement(ButtonWithDefaults, { size: size }));
                expect(driver.getSize()).toBe(size);
            });
        });
    });
    testkitTests_1.runTestkitExistsSuite({
        Element: React.createElement(_1.Button, null),
        testkitFactory: testkit_1.buttonTestkitFactory,
        enzymeTestkitFactory: enzyme_1.buttonTestkitFactory
    });
});
// TODO: consider putting this in 'test/utils'
/**
 * Create a Component with applied default props.
 * The new component can receive Partial<P> instead of P.
 */
function withDefaultsHOC(Component, defaultProps) {
    return function (partialProps) {
        return React.createElement(Component, defaults({}, partialProps, defaultProps));
    };
}
//# sourceMappingURL=Button.spec.js.map