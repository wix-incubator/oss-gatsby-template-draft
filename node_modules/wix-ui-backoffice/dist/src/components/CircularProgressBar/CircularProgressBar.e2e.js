"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var eyes = require("eyes.it");
var protractor_1 = require("protractor");
var protractor_2 = require("wix-ui-test-utils/protractor");
var protractor_3 = require("../../testkit/protractor");
var autoExampleDriver = require("wix-storybook-utils/AutoExampleDriver");
var utils_1 = require("../../utils");
var constants_1 = require("./constants");
describe('CircularProgressBar', function () {
    var storyUrl = protractor_2.getStoryUrl('Components', 'CircularProgressBar');
    var driver;
    beforeAll(function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, protractor_1.browser.get(storyUrl)];
                case 1:
                    _a.sent();
                    driver = protractor_3.circularProgressBarTestkitFactory({ dataHook: 'circular-progress-bar-story' });
                    return [4 /*yield*/, protractor_2.waitForVisibilityOf(driver.element(), 'Cannot find CircularProgressBar')];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    afterEach(function () { return autoExampleDriver.reset(); });
    eyes.it('should exist', function () {
        expect(driver.element().isPresent()).toBe(true);
    });
    describe('sizes', function () {
        utils_1.enumValues(constants_1.Size).forEach(function (size) {
            eyes.it("should render " + size + " ProgressBar", function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, autoExampleDriver.setProps({ size: size })];
                        case 1:
                            _a.sent();
                            expect(driver.element().isPresent()).toBe(true);
                            eyes.checkWindow("size=" + size);
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    });
    describe('successIcon', function () {
        utils_1.enumValues(constants_1.Size).forEach(function (size) {
            eyes.it("should render correct successIcon for " + size + " ProgressBar", function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, autoExampleDriver.setProps({ size: size, value: 100, showProgressIndication: true })];
                        case 1:
                            _a.sent();
                            expect(driver.element().isPresent()).toBe(true);
                            eyes.checkWindow("successIcon " + size);
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    });
    describe('errorIcon', function () {
        utils_1.enumValues(constants_1.Size).forEach(function (size) {
            eyes.it("should render correct errorIcon for " + size + " ProgressBar", function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, autoExampleDriver.setProps({ size: size, error: true, value: 40, showProgressIndication: true })];
                        case 1:
                            _a.sent();
                            expect(driver.element().isPresent()).toBe(true);
                            eyes.checkWindow("errorIcon " + size);
                            protractor_1.browser
                                .actions()
                                .mouseMove(driver.element())
                                .perform();
                            return [4 /*yield*/, protractor_2.waitForVisibilityOf(driver.getTooltip(), 'Cannot find CircularProgressBar tooltip')];
                        case 2:
                            _a.sent();
                            eyes.checkWindow("errorIcon tooltip " + size);
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    });
    describe('light', function () {
        eyes.it("should render light ProgressBar", function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, autoExampleDriver.setProps({ light: true, value: 70 })];
                    case 1:
                        _a.sent();
                        expect(driver.element().isPresent()).toBe(true);
                        eyes.checkWindow('light');
                        return [4 /*yield*/, autoExampleDriver.setProps({ light: true, error: true, value: 60 })];
                    case 2:
                        _a.sent();
                        expect(driver.element().isPresent()).toBe(true);
                        eyes.checkWindow('light with error');
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
//# sourceMappingURL=CircularProgressBar.e2e.js.map