"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var driver_factory_1 = require("wix-ui-test-utils/driver-factory");
var CircularProgressBar_driver_1 = require("./CircularProgressBar.driver");
var CircularProgressBar_1 = require("./CircularProgressBar");
var testkit_1 = require("../../testkit");
var enzyme_1 = require("../../testkit/enzyme");
var testkitTests_1 = require("../../common/testkitTests");
var constants_1 = require("./constants");
describe('CircularProgressBar', function () {
    var createDriver = driver_factory_1.createDriverFactory(CircularProgressBar_driver_1.circularProgressBarDriverFactory);
    var defaultProps = {
        value: 40
    };
    describe('on error', function () {
        var errorProps = {
            error: true,
            errorMessage: 'No soup for you',
            showProgressIndication: true
        };
        it('should display tooltip text only on hover', function () {
            var driver = createDriver(React.createElement(CircularProgressBar_1.CircularProgressBar, __assign({}, defaultProps, errorProps)));
            expect(driver.isTooltipShown()).toBe(false);
            driver.getTooltip().mouseEnter();
            expect(driver.isTooltipShown()).toBe(true);
            expect(driver.getTooltip().getContentElement().innerHTML).toContain(errorProps.errorMessage);
        });
        it('should display error icon', function () {
            var driver = createDriver(React.createElement(CircularProgressBar_1.CircularProgressBar, __assign({}, defaultProps, errorProps)));
            expect(driver.isErrorIconShown()).toBe(true);
        });
    });
    describe('on completion', function () {
        var successProps = {
            value: 100,
            showProgressIndication: true,
        };
        it('should display success icon', function () {
            var driver = createDriver(React.createElement(CircularProgressBar_1.CircularProgressBar, __assign({}, successProps)));
            expect(driver.isSuccessIconShown()).toBe(true);
        });
    });
    describe('size prop', function () {
        Object.keys(constants_1.Size).forEach(function (size) {
            it("should be " + size, function () {
                var driver = createDriver(React.createElement(CircularProgressBar_1.CircularProgressBar, __assign({}, defaultProps, { size: size })));
                expect(driver.getSize()).toBe(size);
            });
        });
        it("should be default " + constants_1.Size.medium, function () {
            var driver = createDriver(React.createElement(CircularProgressBar_1.CircularProgressBar, __assign({}, defaultProps)));
            expect(driver.getSize()).toBe(constants_1.Size.medium);
        });
    });
    testkitTests_1.runTestkitExistsSuite({
        Element: React.createElement(CircularProgressBar_1.CircularProgressBar, __assign({}, defaultProps)),
        testkitFactory: testkit_1.circularProgressBarTestkitFactory,
        enzymeTestkitFactory: enzyme_1.circularProgressBarTestkitFactory
    });
});
//# sourceMappingURL=CircularProgressBar.spec.js.map