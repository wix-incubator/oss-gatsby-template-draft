"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var prop_types_1 = require("prop-types");
var isBoolean = require("lodash/isBoolean");
var pick = require("lodash/pick");
var Popover_1 = require("wix-ui-core/Popover");
var Mode;
(function (Mode) {
    Mode["Hover"] = "hover";
    Mode["ClickToClose"] = "click-to-close";
})(Mode = exports.Mode || (exports.Mode = {}));
var pickedPopoverPropTypes = pick(Popover_1.Popover.propTypes, ['className', 'placement', 'showArrow', 'moveBy', 'hideDelay', 'showDelay', 'moveArrowTo', 'appendTo', 'timeout']);
var controlledErrorMsg = function (method) { return "ClosablePopover." + method + "() can not be called when component is Controlled. (opened prop should be undefined)"; };
/**
 * Closable Popover
 * Either a normal Controlled Popover, or a Popover that is inittialy opened and can be the closed by
 * calling a closeAction.
 */
var ClosablePopover = /** @class */ (function (_super) {
    __extends(ClosablePopover, _super);
    function ClosablePopover() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            open: _this.props.initiallyOpened,
            mode: _this.props.initiallyOpened ? Mode.ClickToClose : Mode.Hover
        };
        _this.open = function () {
            _this.doOpen(Mode.ClickToClose);
        };
        _this.doOpen = function (nextMode) {
            if (_this.isControlled()) {
                throw new Error(controlledErrorMsg('open'));
            }
            !_this.state.open && _this.setState({
                open: true,
                mode: nextMode
            }, function () { _this.props.onOpen && _this.props.onOpen(); });
        };
        _this.close = function () {
            if (_this.isControlled()) {
                throw new Error(controlledErrorMsg('close'));
            }
            _this.state.open && _this.setState({
                open: false,
                mode: Mode.Hover
            }, function () { _this.props.onClose && _this.props.onClose(); });
        };
        _this.handleMouseEnter = function () {
            if (_this.state.mode === Mode.Hover) {
                _this.doOpen(Mode.Hover);
            }
        };
        _this.handleMouseLeave = function () {
            if (_this.state.mode === Mode.Hover && _this.props.closeOnMouseLeave) {
                _this.close();
            }
        };
        _this.actions = {
            close: _this.close,
        };
        return _this;
    }
    ClosablePopover.prototype.isControlled = function () {
        return isBoolean(this.props.opened);
    };
    ClosablePopover.prototype.render = function () {
        var _a = this.props, opened = _a.opened, content = _a.content, target = _a.target, children = _a.children, onClose = _a.onClose, onOpen = _a.onOpen, initiallyOpened = _a.initiallyOpened, closeOnMouseLeave = _a.closeOnMouseLeave, rest = __rest(_a, ["opened", "content", "target", "children", "onClose", "onOpen", "initiallyOpened", "closeOnMouseLeave"]);
        var open = this.isControlled() ? this.props.opened : this.state.open;
        var popoverProps = __assign({}, rest, { shown: open, onMouseEnter: this.handleMouseEnter, onMouseLeave: this.handleMouseLeave });
        return (React.createElement(Popover_1.Popover, __assign({}, popoverProps),
            React.createElement(Popover_1.Popover.Element, null, target),
            React.createElement(Popover_1.Popover.Content, null, content(this.actions))));
    };
    ClosablePopover.propTypes = __assign({}, pickedPopoverPropTypes, { opened: prop_types_1.bool, content: prop_types_1.func, target: prop_types_1.node, onOpen: prop_types_1.func, onClose: prop_types_1.func });
    ClosablePopover.defaultProps = {
        timeout: 150,
        initiallyOpened: true,
        closeOnMouseLeave: true
    };
    return ClosablePopover;
}(React.PureComponent));
exports.ClosablePopover = ClosablePopover;
;
//# sourceMappingURL=ClosablePopover.js.map