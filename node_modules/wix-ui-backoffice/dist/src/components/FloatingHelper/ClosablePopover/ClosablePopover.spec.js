"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var eventually = require("wix-eventually");
var driver_factory_1 = require("wix-ui-test-utils/driver-factory");
var ClosablePopover_driver_1 = require("./ClosablePopover.driver");
var ClosablePopover_1 = require("./ClosablePopover");
var testkitUtils_1 = require("../../../../test/testkitUtils");
describe('ClosablePopover', function () {
    var createDriver = driver_factory_1.createDriverFactory(ClosablePopover_driver_1.closablePopoverDriverFactory);
    var createEnzymeDriver = testkitUtils_1.createEnzymeDriverFactory(ClosablePopover_driver_1.closablePopoverDriverFactory);
    var waitForClose = function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        return [2 /*return*/, new Promise(function (res, rej) { return setTimeout(res, ClosablePopover_1.ClosablePopover.defaultProps.timeout * 2); })];
    }); }); }; // * 2 as arbitrary safety 
    var createComponent = function (partialProps) { return (React.createElement(ClosablePopover_1.ClosablePopover, __assign({ target: React.createElement("div", null, "this is the target"), content: function () { return React.createElement("div", null, "this is the popover content"); }, placement: "right" }, partialProps))); };
    describe('open/close on hover', function () { return __awaiter(_this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            it('should display content on hover and hide it on leave, after closed', function () { return __awaiter(_this, void 0, void 0, function () {
                var triggerClose, driver;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            driver = createDriver(createComponent({
                                content: function (_a) {
                                    var close = _a.close;
                                    triggerClose = close;
                                    return React.createElement("div", null, "the content");
                                }
                            }));
                            triggerClose();
                            driver.mouseEnter();
                            expect(driver.isContentElementExists()).toBeTruthy();
                            driver.mouseLeave();
                            return [4 /*yield*/, eventually(function () { return expect(driver.isContentElementExists()).toBeFalsy(); })];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('should NOT close on mouse leave when initially opened', function () { return __awaiter(_this, void 0, void 0, function () {
                var driver;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            driver = createDriver(createComponent());
                            driver.mouseEnter();
                            driver.mouseLeave();
                            return [4 /*yield*/, waitForClose()];
                        case 1:
                            _a.sent();
                            expect(driver.isContentElementExists()).toBeTruthy();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('should display content on hover and hide it on leave, when initially closed', function () { return __awaiter(_this, void 0, void 0, function () {
                var driver;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            driver = createDriver(createComponent({ initiallyOpened: false }));
                            driver.mouseEnter();
                            expect(driver.isContentElementExists()).toBeTruthy();
                            driver.mouseLeave();
                            return [4 /*yield*/, eventually(function () { return expect(driver.isContentElementExists()).toBeFalsy(); })];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('should not hide on mouse-leave, given closeOnMouseLeave is false', function () { return __awaiter(_this, void 0, void 0, function () {
                var triggerClose, driver;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            driver = createDriver(createComponent({
                                content: function (_a) {
                                    var close = _a.close;
                                    triggerClose = close;
                                    return React.createElement("div", null, "the content");
                                },
                                initiallyOpened: true, closeOnMouseLeave: false
                            }));
                            triggerClose();
                            return [4 /*yield*/, eventually(function () { return expect(driver.isContentElementExists()).toBeFalsy(); })];
                        case 1:
                            _a.sent();
                            driver.mouseEnter();
                            expect(driver.isContentElementExists()).toBeTruthy();
                            driver.mouseLeave();
                            return [4 /*yield*/, waitForClose()];
                        case 2:
                            _a.sent();
                            expect(driver.isContentElementExists()).toBeTruthy();
                            return [2 /*return*/];
                    }
                });
            }); });
            return [2 /*return*/];
        });
    }); });
    describe('onOpened/onClosed callbacks', function () {
        it('should call onClosed when closed by close-action', function () {
            var triggerClose;
            var onClose = jest.fn();
            var driver = createDriver(createComponent({
                content: function (_a) {
                    var close = _a.close;
                    triggerClose = close;
                    return React.createElement("div", null, "the content");
                },
                onClose: onClose
            }));
            triggerClose();
            expect(onClose).toBeCalled();
        });
        it('should call onOpened when hovered by mouse', function () {
            var triggerClose;
            var onOpen = jest.fn();
            var driver = createDriver(createComponent({
                content: function (_a) {
                    var close = _a.close;
                    triggerClose = close;
                    return React.createElement("div", null, "the content");
                },
                onOpen: onOpen
            }));
            triggerClose();
            driver.mouseEnter();
            expect(onOpen).toBeCalled();
        });
        it('should call onClosed when mouse leaves after closed by close-action', function () {
            var triggerClose;
            var onClose = jest.fn();
            var driver = createDriver(createComponent({
                content: function (_a) {
                    var close = _a.close;
                    triggerClose = close;
                    return React.createElement("div", null, "the content");
                },
                onClose: onClose
            }));
            triggerClose();
            driver.mouseEnter();
            driver.mouseLeave();
            expect(onClose.mock.calls.length).toBe(2);
        });
    });
    describe('initiallyOpened', function () {
        it('should be initially opened', function () {
            var driver = createDriver(createComponent({ initiallyOpened: true }));
            expect(driver.isOpened()).toBeTruthy();
        });
        it('should be initially closed', function () { return __awaiter(_this, void 0, void 0, function () {
            var driver;
            return __generator(this, function (_a) {
                driver = createDriver(createComponent({ initiallyOpened: false }));
                expect(driver.isOpened()).toBeFalsy();
                return [2 /*return*/];
            });
        }); });
        it('should NOT close on mouse leave when initially opened', function () { return __awaiter(_this, void 0, void 0, function () {
            var driver;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        driver = createDriver(createComponent());
                        driver.mouseEnter();
                        driver.mouseLeave();
                        return [4 /*yield*/, waitForClose()];
                    case 1:
                        _a.sent();
                        expect(driver.isContentElementExists()).toBeTruthy();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('close', function () {
        it('should be opened by default', function () {
            var driver = createDriver(createComponent());
            expect(driver.isOpened()).toBeTruthy();
        });
        it('should close when closeAction called', function () { return __awaiter(_this, void 0, void 0, function () {
            var triggerClose, driver;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        driver = createDriver(createComponent({
                            content: function (_a) {
                                var close = _a.close;
                                triggerClose = close;
                                return React.createElement("div", null, "the content");
                            }
                        }));
                        expect(driver.isOpened()).toBeTruthy();
                        triggerClose();
                        return [4 /*yield*/, eventually(function () { return expect(driver.isOpened()).toBeFalsy(); })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('programatic open', function () {
        it('should be opened by programatic open, when initially closed', function () {
            var _a = createEnzymeDriver(createComponent({ initiallyOpened: false })), wrapperInstance = _a.wrapperInstance, driver = _a.driver;
            expect(driver.isOpened()).toBeFalsy();
            wrapperInstance.open();
            expect(driver.isOpened()).toBeTruthy();
        });
        it('should be closed by programatic close, after initially opened', function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, wrapperInstance, driver;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = createEnzymeDriver(createComponent({ initiallyOpened: true })), wrapperInstance = _a.wrapperInstance, driver = _a.driver;
                        expect(driver.isOpened()).toBeTruthy();
                        wrapperInstance.close();
                        return [4 /*yield*/, eventually(function () { return expect(driver.isOpened()).toBeFalsy(); })];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it('should NOT close on mouseLeave, after programatic open', function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, wrapperInstance, driver;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = createEnzymeDriver(createComponent({ initiallyOpened: false })), wrapperInstance = _a.wrapperInstance, driver = _a.driver;
                        expect(driver.isOpened()).toBeFalsy();
                        wrapperInstance.open();
                        expect(driver.isOpened()).toBeTruthy();
                        driver.mouseEnter();
                        driver.mouseLeave();
                        return [4 /*yield*/, waitForClose()];
                    case 1:
                        _b.sent();
                        expect(driver.isContentElementExists()).toBeTruthy();
                        return [2 /*return*/];
                }
            });
        }); });
        it('should open/close on hover after click to close, after programatic open', function () { return __awaiter(_this, void 0, void 0, function () {
            var triggerClose, _a, wrapperInstance, driver;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = createEnzymeDriver(createComponent({
                            initiallyOpened: false,
                            content: function (_a) {
                                var close = _a.close;
                                triggerClose = close;
                                return React.createElement("div", null, "the content");
                            }
                        })), wrapperInstance = _a.wrapperInstance, driver = _a.driver;
                        wrapperInstance.open();
                        triggerClose();
                        driver.mouseEnter();
                        expect(driver.isContentElementExists()).toBeTruthy();
                        driver.mouseLeave();
                        return [4 /*yield*/, waitForClose()];
                    case 1:
                        _b.sent();
                        expect(driver.isContentElementExists()).toBeFalsy();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('controlled', function () {
        it('should be opened', function () {
            var _a = createEnzymeDriver(createComponent({ opened: true })), wrapperInstance = _a.wrapperInstance, driver = _a.driver;
            expect(driver.isOpened()).toBeTruthy();
        });
        it('should be closed', function () {
            var _a = createEnzymeDriver(createComponent({ opened: false })), wrapperInstance = _a.wrapperInstance, driver = _a.driver;
            expect(driver.isOpened()).toBeFalsy();
        });
    });
    describe('Controlled Error', function () {
        it('should throw error on open', function () {
            var _a = createEnzymeDriver(createComponent({ opened: false })), wrapperInstance = _a.wrapperInstance, driver = _a.driver;
            expect(function () { return wrapperInstance.open(); }).toThrow();
        });
        it('should throw error on close', function () {
            var _a = createEnzymeDriver(createComponent({ opened: true })), wrapperInstance = _a.wrapperInstance, driver = _a.driver;
            expect(function () { return wrapperInstance.close(); }).toThrow();
        });
    });
});
//# sourceMappingURL=ClosablePopover.spec.js.map