"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var enzyme_1 = require("enzyme");
var defaults = require("lodash/defaults");
var eventually = require("wix-eventually");
var testkit_1 = require("../../testkit");
var enzyme_2 = require("../../testkit/enzyme");
var FloatingHelper_driver_1 = require("./FloatingHelper.driver");
var FloatingHelper_1 = require("./FloatingHelper");
var FloatingHelperContent_1 = require("../../components/FloatingHelper/FloatingHelperContent");
var ClosablePopover_1 = require("./ClosablePopover");
var testkitTests_1 = require("../../common/testkitTests");
var testkitUtils_1 = require("../../../test/testkitUtils");
describe('FloatingHelper', function () {
    var buildComponent = function (props) {
        var defaultProps = {
            placement: 'right',
            content: React.createElement(FloatingHelperContent_1.FloatingHelperContent, { title: "my title", body: "this is the body" }),
            target: React.createElement("div", null, "This is the target element")
        };
        return React.createElement(FloatingHelper_1.FloatingHelper, __assign({}, defaults({}, props, defaultProps)));
    };
    var wrapper;
    var createEnzymeDriver = function (element) {
        var floatingHelperEnzymeDriverFactory = testkitUtils_1.createEnzymeDriverFactory(FloatingHelper_driver_1.floatingHelperDriverFactory);
        var _a = floatingHelperEnzymeDriverFactory(element), driver = _a.driver, wrapperTemp = _a.wrapper, wrapperInstance = _a.wrapperInstance;
        wrapper = wrapperTemp;
        return { driver: driver, wrapperInstance: wrapperInstance };
    };
    var waitForClose = function (driver) { return eventually(function () { return expect(driver.isOpened()).toBeFalsy(); }); };
    afterEach(function () {
        wrapper.unmount();
    });
    // Skipped: need to add hasArrow() method to Popover driver.
    xit('should have arrow by default', function () {
        var driver = createEnzymeDriver(buildComponent());
        // expect(driver.hasArrow()).toBe(true);
    });
    it('should have helper content (with title)', function () {
        var driver = createEnzymeDriver(buildComponent()).driver;
        expect(driver.getHelperContentDriver().exists()).toBeTruthy();
        expect(driver.getHelperContentDriver().getTitleContent()).toBe('my title');
    });
    describe('width', function () {
        it('should have default width of 444', function () {
            var driver = createEnzymeDriver(buildComponent()).driver;
            expect(driver.getWidth()).toBe('444px');
        });
        it('should have a custom width (which is a string)', function () {
            var width = '500px';
            var driver = createEnzymeDriver(buildComponent({ width: width })).driver;
            expect(driver.getWidth()).toBe(width);
        });
        it('should have a custom width (which is a number)', function () {
            var width = 600;
            var driver = createEnzymeDriver(buildComponent({ width: width })).driver;
            expect(driver.getWidth()).toBe(width + "px");
        });
    });
    describe('close-button', function () {
        it('should have a close-button by default', function () {
            var driver = createEnzymeDriver(buildComponent()).driver;
            expect(driver.hasCloseButton()).toBeTruthy();
        });
    });
    describe('close', function () {
        it('should be opened by default', function () {
            var driver = createEnzymeDriver(buildComponent()).driver;
            expect(driver.isOpened()).toBeTruthy();
        });
        it('should close popover when close-button is clicked', function () { return __awaiter(_this, void 0, void 0, function () {
            var driver;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        driver = createEnzymeDriver(buildComponent()).driver;
                        driver.clickCloseButton();
                        return [4 /*yield*/, waitForClose(driver)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('programatic open/close sanity', function () {
        it('should open and close programatically', function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, driver, wrapperInstance;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = createEnzymeDriver(buildComponent({ initiallyOpened: false })), driver = _a.driver, wrapperInstance = _a.wrapperInstance;
                        expect(driver.isOpened()).toBeFalsy();
                        wrapperInstance.open();
                        expect(driver.isOpened()).toBeTruthy();
                        wrapperInstance.close();
                        return [4 /*yield*/, waitForClose(driver)];
                    case 1:
                        _b.sent();
                        expect(driver.isOpened()).toBeFalsy();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('controlled', function () {
        it('should call onClose but not close', function () { return __awaiter(_this, void 0, void 0, function () {
            var onClose, _a, driver, wrapperInstance;
            return __generator(this, function (_b) {
                onClose = jest.fn();
                _a = createEnzymeDriver(buildComponent({ opened: true, onClose: onClose })), driver = _a.driver, wrapperInstance = _a.wrapperInstance;
                driver.clickCloseButton();
                expect(onClose).toBeCalled();
                expect(driver.isOpened()).toBeTruthy();
                return [2 /*return*/];
            });
        }); });
        it('should not throw error when closeButton clicked and there is no onClose callback', function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, driver, wrapperInstance, click;
            return __generator(this, function (_b) {
                _a = createEnzymeDriver(buildComponent({ opened: true })), driver = _a.driver, wrapperInstance = _a.wrapperInstance;
                click = function () { return driver.clickCloseButton(); };
                expect(click).not.toThrowError();
                return [2 /*return*/];
            });
        }); });
    });
    describe('appendTo', function () {
        it('should be window by default', function () {
            wrapper = enzyme_1.mount(buildComponent());
            expect(wrapper.find(ClosablePopover_1.ClosablePopover).props().appendTo).toBe('window');
        });
    });
    testkitTests_1.runTestkitExistsSuite({
        Element: buildComponent(),
        testkitFactory: testkit_1.floatingHelperTestkitFactory,
        enzymeTestkitFactory: enzyme_2.floatingHelperTestkitFactory
    });
});
//# sourceMappingURL=FloatingHelper.spec.js.map