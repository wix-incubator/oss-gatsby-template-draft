"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var defaults = require("lodash/defaults");
var FloatingHelperContent_driver_1 = require("./FloatingHelperContent.driver");
var _1 = require(".");
var Button_1 = require("../../Button");
var driver_factory_1 = require("wix-ui-test-utils/driver-factory");
var enzyme_1 = require("enzyme");
var noop = function () { return null; };
describe('FloatingHelperContent', function () {
    var createDriver = driver_factory_1.createDriverFactory(FloatingHelperContent_driver_1.floatingHelperContentDriverFactory);
    var FloatingHelperContentBuilder = withDefaultsHOC({
        component: _1.FloatingHelperContent,
        defaultProps: { body: 'this is the body' }
    });
    describe('title prop', function () {
        it('should not have title by default', function () {
            var driver = createDriver(React.createElement(FloatingHelperContentBuilder, null));
            expect(driver.hasTitle()).toBeFalsy();
        });
        it('should have title with proper content', function () {
            var driver = createDriver(React.createElement(FloatingHelperContentBuilder, { title: "title" }));
            expect(driver.hasTitle()).toBeTruthy();
            expect(driver.getTitleContent()).toBe('title');
        });
    });
    describe('body prop', function () {
        it('should have body with simple text content', function () {
            var driver = createDriver(React.createElement(FloatingHelperContentBuilder, { body: "body" }));
            expect(driver.hasBody()).toBeTruthy();
            expect(driver.getBodyContent()).toBe('body');
        });
    });
    describe('action button', function () {
        var actionProps = { actionText: 'Click me !', onActionClick: noop };
        it('should not have action button by default', function () {
            var driver = createDriver(React.createElement(FloatingHelperContentBuilder, null));
            expect(driver.hasActionButton()).toBeFalsy();
        });
        it('should not have action button if only actionText is passed', function () {
            var driver = createDriver(React.createElement(FloatingHelperContentBuilder, { actionText: "Click Me!" }));
            expect(driver.hasActionButton()).toBeFalsy();
        });
        it('should not have action button if only onActionClick is passed', function () {
            var driver = createDriver(React.createElement(FloatingHelperContentBuilder, { onActionClick: noop }));
            expect(driver.hasActionButton()).toBeFalsy();
        });
        it('should not have action button if actionText is an empty string', function () {
            var driver = createDriver(React.createElement(FloatingHelperContentBuilder, { onActionClick: noop, actionText: "" }));
            expect(driver.hasActionButton()).toBeFalsy();
        });
        it('should have action button with correct text', function () {
            var actionText = 'Click Me!';
            var driver = createDriver(React.createElement(FloatingHelperContentBuilder, { actionText: actionText, onActionClick: noop }));
            expect(driver.hasActionButton()).toBeTruthy();
            expect(driver.getActionButtonDriver().getTextContent()).toBe(actionText);
        });
        it('should have button with skin=white and priority=secondary by default', function () {
            var driver = createDriver(React.createElement(FloatingHelperContentBuilder, __assign({}, actionProps)));
            expect(driver.getActionButtonDriver().getSkin()).toBe(Button_1.ButtonSkin.white);
            expect(driver.getActionButtonDriver().getPriority()).toBe(Button_1.ButtonPriority.secondary);
        });
        it('should have button with skin=premium and priority=primary', function () {
            var driver = createDriver(React.createElement(FloatingHelperContentBuilder, __assign({}, actionProps, { actionTheme: _1.ActionButtonTheme.premium })));
            expect(driver.getActionButtonDriver().getSkin()).toBe(Button_1.ButtonSkin.premium);
            expect(driver.getActionButtonDriver().getPriority()).toBe(Button_1.ButtonPriority.primary);
        });
        it('should call onClick when action button clicked', function () {
            var spy = jest.fn();
            var driver = createDriver(React.createElement(FloatingHelperContentBuilder, { actionText: "Click me!", onActionClick: spy }));
            driver.getActionButtonDriver().click();
            expect(spy).toHaveBeenCalledTimes(1);
        });
    });
    describe('image prop', function () {
        it('should not be visible by default', function () {
            var driver = createDriver(React.createElement(FloatingHelperContentBuilder, { actionText: "Click me!" }));
            expect(driver.hasImage()).toBeFalsy();
        });
        it('should render the image', function () {
            var driver = createDriver(React.createElement(FloatingHelperContentBuilder, { image: React.createElement("div", null, "\uD83E\uDD14") }));
            expect(driver.hasImage()).toBeTruthy();
            expect(driver.getImage()).toEqual(enzyme_1.mount(React.createElement("div", null, "\uD83E\uDD14")).getDOMNode());
        });
    });
});
// TODO: consider putting this in 'test/utils'
/**
 * Create a Component with applied default props.
 * The new component can receive Partial<P> instead of P.
 */
function withDefaultsHOC(_a) {
    var component = _a.component, defaultProps = _a.defaultProps;
    return function (partialProps) {
        return React.createElement(component, defaults({}, partialProps, defaultProps));
    };
}
//# sourceMappingURL=FloatingHelperContent.spec.js.map