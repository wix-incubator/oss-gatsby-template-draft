"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var prop_types_1 = require("prop-types");
var shallowequal = require("shallowequal");
var Tooltip_1 = require("../Tooltip");
var FullTextView_st_css_1 = require("./FullTextView.st.css");
var isEllipsisActive = function (node) { return node && node.offsetWidth < node.scrollWidth; };
var FullTextView = /** @class */ (function (_super) {
    __extends(FullTextView, _super);
    function FullTextView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isEllipsisActive: false
        };
        _this.handleTextRef = function (node) { return _this.textNode = node; };
        _this.updateEllipsesState = function () {
            clearTimeout(_this.ellipsesTimeout);
            _this.ellipsesTimeout = setTimeout(function () {
                _this.setState({ isEllipsisActive: isEllipsisActive(_this.textNode) });
            }, 30);
        };
        return _this;
    }
    FullTextView.prototype.componentDidMount = function () {
        window.addEventListener('resize', this.updateEllipsesState);
        this.updateEllipsesState();
    };
    FullTextView.prototype.componentDidUpdate = function (prevProps) {
        // if props changed, then we want to re-check node for ellipsis state
        // and we can not do such check in render, because we want to check already rendered node
        if (!shallowequal(prevProps, this.props)) {
            this.updateEllipsesState();
        }
    };
    FullTextView.prototype.componentWillUnmount = function () {
        window.removeEventListener('resize', this.updateEllipsesState);
    };
    FullTextView.prototype.renderText = function () {
        return (React.createElement("span", __assign({}, FullTextView_st_css_1.default('root', {}, this.props), { style: { maxWidth: this.props.maxWidth }, ref: this.handleTextRef }), this.props.children));
    };
    FullTextView.prototype.render = function () {
        if (!this.state.isEllipsisActive) {
            return this.renderText();
        }
        return (React.createElement(Tooltip_1.Tooltip, { content: this.props.children }, this.renderText()));
    };
    FullTextView.displayName = 'FullTextView';
    FullTextView.propTypes = {
        /** max width of the text */
        maxWidth: prop_types_1.oneOfType([prop_types_1.number, prop_types_1.string]),
        /** any nodes to be rendered (usually text nodes) */
        children: prop_types_1.any
    };
    return FullTextView;
}(React.Component));
exports.FullTextView = FullTextView;
;
//# sourceMappingURL=FullTextView.js.map