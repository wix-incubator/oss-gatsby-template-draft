"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var driver_factory_1 = require("wix-ui-test-utils/driver-factory");
var enzyme_1 = require("wix-ui-test-utils/enzyme");
var vanilla_1 = require("wix-ui-test-utils/vanilla");
var enzyme_2 = require("enzyme");
var FullTextView_driver_1 = require("./FullTextView.driver");
var FullTextView_1 = require("./FullTextView");
var testkit_1 = require("../../testkit");
var enzyme_3 = require("../../testkit/enzyme");
describe('FullTextView', function () {
    var createDriver = driver_factory_1.createDriverFactory(FullTextView_driver_1.fullTextViewDriverFactory);
    it('should render a span tag by default', function () {
        var wrapper = createDriver(React.createElement(FullTextView_1.FullTextView, null, "Hello World"));
        expect(wrapper.getTagName()).toBe('span');
    });
    it('should display full content on hover and hide it on leave in tooltip', function () { return __awaiter(_this, void 0, void 0, function () {
        var content, component;
        return __generator(this, function (_a) {
            content = (React.createElement("div", null,
                React.createElement("span", null, "Delete this super awesome thing"),
                React.createElement("i", null, "?")));
            component = enzyme_2.mount(React.createElement(FullTextView_1.FullTextView, { maxWidth: 0 }, content));
            expect(component.find('[data-hook="popover-content"]').length).toBe(0);
            component.setState({ isEllipsisActive: true });
            component.simulate('mouseEnter');
            expect(component.find('[data-hook="popover-content"]').at(0).text()).toBe('Delete this super awesome thing?');
            return [2 /*return*/];
        });
    }); });
    describe('testkit', function () {
        it('should exist', function () {
            expect(vanilla_1.isTestkitExists(React.createElement(FullTextView_1.FullTextView, null, "Hello World"), testkit_1.fullTextViewTestkitFactory)).toBe(true);
        });
    });
    describe('enzyme testkit', function () {
        it('should exist', function () {
            expect(enzyme_1.isEnzymeTestkitExists(React.createElement(FullTextView_1.FullTextView, null, "Hello World"), enzyme_3.fullTextViewTestkitFactory, enzyme_2.mount)).toBe(true);
        });
    });
});
//# sourceMappingURL=FullTextView.spec.js.map