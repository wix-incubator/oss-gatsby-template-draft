"use strict";
/* global describe it expect */
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var TimePicker_driver_1 = require("./TimePicker.driver");
var TimePicker_1 = require("./TimePicker");
var driver_factory_1 = require("wix-ui-test-utils/driver-factory");
var enzyme_1 = require("wix-ui-test-utils/enzyme");
var dom_test_container_1 = require("wix-ui-core/dist/test/dom-test-container");
var vanilla_1 = require("wix-ui-test-utils/vanilla");
var enzyme_2 = require("enzyme");
var testkit_1 = require("../../testkit");
var enzyme_3 = require("../../testkit/enzyme");
describe('TimePicker', function () {
    var createDriver = driver_factory_1.createDriverFactory(TimePicker_driver_1.timePickerDriverFactory);
    describe('time display', function () {
        it('should render given value', function () {
            var driver = createDriver(React.createElement(TimePicker_1.TimePicker, { value: "12:34" }));
            expect(driver.getValue()).toBe('12:34');
        });
        it('should render --:-- when no value given', function () {
            var driver = createDriver(React.createElement(TimePicker_1.TimePicker, null));
            expect(driver.getValue()).toBe('--:--');
        });
        it('should allow rendering time in 24 hours mode', function () {
            var props = {
                value: '23:59',
                disableAmPm: true
            };
            var driver = createDriver(React.createElement(TimePicker_1.TimePicker, __assign({}, props)));
            expect(driver.getValue()).toBe(props.value);
        });
        it('should display am/pm indicator when in 12 hours mode', function () {
            var props = {
                value: '15:04',
                disableAmPm: false
            };
            var driver = createDriver(React.createElement(TimePicker_1.TimePicker, __assign({}, props)));
            expect(driver.isAmPmIndicatorExist()).toBeTruthy();
            expect(driver.getValue()).toBe('03:04');
        });
        it('should display AM indicator when in 12 hours mode and the time displayed is AM', function () {
            var props = {
                value: '11:59',
                disableAmPm: false
            };
            var driver = createDriver(React.createElement(TimePicker_1.TimePicker, __assign({}, props)));
            expect(driver.getAmPmIndicatorText()).toBe('am');
        });
        it('should display AM indicator when in 12 hours mode and the time displayed is PM', function () {
            var props = {
                value: '19:27',
                disableAmPm: false
            };
            var driver = createDriver(React.createElement(TimePicker_1.TimePicker, __assign({}, props)));
            expect(driver.getAmPmIndicatorText()).toBe('pm');
        });
    });
    describe('`width` prop', function () {
        it('should not pass inline styles prop', function () {
            var driver = createDriver(React.createElement(TimePicker_1.TimePicker, { width: "432px" }));
            expect(driver.getInlineStyle().width).toEqual('432px');
        });
    });
    describe('`style` prop', function () {
        it('should pass through the style prop', function () {
            var driver = createDriver(React.createElement(TimePicker_1.TimePicker, { style: { width: 543 } }));
            expect(driver.getInlineStyle().width).toEqual('543px');
        });
        it('should not override the width prop (if passed)', function () {
            var driver = createDriver(React.createElement(TimePicker_1.TimePicker, { style: { width: 543 }, width: "111px" }));
            expect(driver.getInlineStyle().width).toEqual('111px');
        });
    });
    it('should support focus() and blur() methods', function () { return __awaiter(_this, void 0, void 0, function () {
        var container, reactInstance, inputElement;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    container = new dom_test_container_1.ReactDOMTestContainer().unmountAfterEachTest();
                    container.create();
                    return [4 /*yield*/, container.renderWithRef(React.createElement(TimePicker_1.TimePicker, null))];
                case 1:
                    reactInstance = _a.sent();
                    inputElement = container.componentNode.querySelector('input');
                    expect(document.activeElement).not.toBe(inputElement);
                    reactInstance.focus();
                    expect(document.activeElement).toBe(inputElement);
                    reactInstance.blur();
                    expect(document.activeElement).not.toBe(inputElement);
                    return [2 /*return*/];
            }
        });
    }); });
    describe('testkits', function () {
        it('should exist', function () {
            expect(vanilla_1.isTestkitExists(React.createElement(TimePicker_1.TimePicker, null), testkit_1.timePickerTestkitFactory)).toBe(true);
        });
        it('should exist for enzyme', function () {
            expect(enzyme_1.isEnzymeTestkitExists(React.createElement(TimePicker_1.TimePicker, null), enzyme_3.timePickerTestkitFactory, enzyme_2.mount)).toBe(true);
        });
    });
});
//# sourceMappingURL=TimePicker.spec.js.map