"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ToggleSwitch_driver_1 = require("./ToggleSwitch.driver");
var _1 = require("./");
var driver_factory_1 = require("wix-ui-test-utils/driver-factory");
var enzyme_1 = require("wix-ui-test-utils/enzyme");
var vanilla_1 = require("wix-ui-test-utils/vanilla");
var enzyme_2 = require("enzyme");
var testkit_1 = require("../../testkit");
var enzyme_3 = require("../../testkit/enzyme");
var constants_1 = require("./constants");
describe('ToggleSwitch', function () {
    var createDriver = driver_factory_1.createDriverFactory(ToggleSwitch_driver_1.toggleSwitchDriverFactory);
    describe('skin prop', function () {
        it("should be " + constants_1.SKINS.standard + " by default", function () {
            var wrapper = createDriver(React.createElement(_1.ToggleSwitch, null));
            expect(wrapper.getSkin()).toBe(constants_1.SKINS.standard);
        });
        Object.keys(constants_1.SKINS).forEach(function (skin) {
            it("should be " + skin, function () {
                var wrapper = createDriver(React.createElement(_1.ToggleSwitch, { skin: skin }));
                expect(wrapper.getSkin()).toBe(skin);
            });
        });
    });
    describe('size prop', function () {
        it("should be " + constants_1.SIZES.large + " by default", function () {
            var wrapper = createDriver(React.createElement(_1.ToggleSwitch, null));
            expect(wrapper.getSize()).toBe(constants_1.SIZES.large);
        });
        Object.keys(constants_1.SIZES).forEach(function (size) {
            it("should be " + size, function () {
                var wrapper = createDriver(React.createElement(_1.ToggleSwitch, { size: size }));
                expect(wrapper.getSize()).toBe(size);
            });
        });
    });
    describe('knobIcons', function () {
        var getSvgViewBoxSize = function (wrapper) {
            return Number(wrapper.getKnobIcon().querySelector('svg').getAttribute('viewBox').slice(4, 6));
        };
        describe('checkedIcon', function () {
            it('should be bigger when when size=large comparing to size=medium', function () {
                var largeIconwrapper = createDriver(React.createElement(_1.ToggleSwitch, { checked: true, size: "large" }));
                var mediumIconWrapper = createDriver(React.createElement(_1.ToggleSwitch, { checked: true, size: "medium" }));
                var largeViewBoxSize = getSvgViewBoxSize(largeIconwrapper);
                var mediumViewBoxSize = getSvgViewBoxSize(mediumIconWrapper);
                expect(largeViewBoxSize).toBeGreaterThan(mediumViewBoxSize);
            });
            it('should not be visible when size=small', function () {
                var wrapper = createDriver(React.createElement(_1.ToggleSwitch, { size: "small" }));
                expect(wrapper.hasKnobIcon()).toBe(false);
            });
        });
        describe('uncheckedIcon', function () {
            it('should be bigger when when size=large comparing to size=medium', function () {
                var largeIconwrapper = createDriver(React.createElement(_1.ToggleSwitch, { size: "large" }));
                var mediumIconWrapper = createDriver(React.createElement(_1.ToggleSwitch, { size: "medium" }));
                var largeViewBoxSize = getSvgViewBoxSize(largeIconwrapper);
                var mediumViewBoxSize = getSvgViewBoxSize(mediumIconWrapper);
                expect(largeViewBoxSize).toBeGreaterThan(mediumViewBoxSize);
            });
            it('should not be visible when size=small', function () {
                var wrapper = createDriver(React.createElement(_1.ToggleSwitch, { size: "small" }));
                expect(wrapper.hasKnobIcon()).toBe(false);
            });
        });
    });
    describe('block props', function () {
        it('should not pass inline styles prop', function () {
            var styles = { root: { color: 'green' } };
            var wrapper = createDriver(React.createElement(_1.ToggleSwitch, { styles: styles, size: "small" }));
            expect(wrapper.getRootStyles().color).not.toBe('green');
        });
    });
    describe('testkit', function () {
        it('should exist', function () {
            expect(vanilla_1.isTestkitExists(React.createElement(_1.ToggleSwitch, null), testkit_1.toggleSwitchTestkitFactory)).toBe(true);
        });
    });
    describe('enzyme testkit', function () {
        it('should exist', function () {
            expect(enzyme_1.isEnzymeTestkitExists(React.createElement(_1.ToggleSwitch, null), enzyme_3.toggleSwitchTestkitFactory, enzyme_2.mount)).toBe(true);
        });
    });
});
//# sourceMappingURL=ToggleSwitch.spec.js.map