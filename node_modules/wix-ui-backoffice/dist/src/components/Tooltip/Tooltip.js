"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Tooltip_1 = require("wix-ui-core/Tooltip");
var Tooltip_st_css_1 = require("./Tooltip.st.css");
var withStylable_1 = require("wix-ui-core/withStylable");
var noop = function () { return null; };
var defaultProps = {
    appendTo: 'scrollParent',
    placement: 'top',
    alignment: 'center',
    showTrigger: 'mouseenter',
    hideTrigger: 'mouseleave',
    showDelay: 200,
    hideDelay: 0,
    zIndex: 2000,
    maxWidth: '204px',
    onClickOutside: noop,
    onShow: noop,
    onHide: noop,
    active: false,
    theme: 'light',
    disabled: false,
    children: null,
    size: 'normal',
    shouldCloseOnClickOutside: false,
    textAlign: 'left',
    relative: false,
    bounce: false
};
var TooltipBO = withStylable_1.withStylable(Tooltip_1.Tooltip, Tooltip_st_css_1.default, function (_a) {
    var appendTo = _a.appendTo, placement = _a.placement, alignment = _a.alignment, theme = _a.theme, showTrigger = _a.showTrigger, hideTrigger = _a.hideTrigger, active = _a.active, bounce = _a.bounce, disabled = _a.disabled, size = _a.size, relative = _a.relative, shouldUpdatePosition = _a.shouldUpdatePosition;
    return (_b = {},
        _b["placement-" + placement] = true,
        _b[alignment] = true,
        _b[theme] = true,
        _b[showTrigger] = true,
        _b[hideTrigger] = true,
        _b.active = active,
        _b.bounce = bounce,
        _b.disabled = disabled,
        _b.appendTo = appendTo,
        _b[size] = true,
        _b.relative = relative,
        _b.shouldUpdatePosition = shouldUpdatePosition,
        _b);
    var _b;
}, defaultProps);
exports.Tooltip = function (props) {
    var minWidth = props.minWidth, textAlign = props.textAlign, maxWidth = props.maxWidth, color = props.color, lineHeight = props.lineHeight, zIndex = props.zIndex, padding = props.padding, content = props.content, rest = __rest(props, ["minWidth", "textAlign", "maxWidth", "color", "lineHeight", "zIndex", "padding", "content"]);
    var wrappedContent = React.createElement("div", { style: { minWidth: minWidth, textAlign: textAlign, maxWidth: maxWidth, color: color, lineHeight: lineHeight, zIndex: zIndex, padding: padding } }, content);
    return React.createElement(TooltipBO, __assign({}, rest, { content: wrappedContent }));
};
exports.Tooltip.displayName = 'Tooltip';
//# sourceMappingURL=Tooltip.js.map