"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var prop_types_1 = require("prop-types");
var Text_st_css_1 = require("./Text.st.css");
/**
 * Text
 */
exports.Text = function (props) {
    var children = props.children, ellipsis = props.ellipsis, tagName = props.tagName, forceHideTitle = props.forceHideTitle;
    return React.createElement(tagName, __assign({ title: typeof children === 'string' && ellipsis && !forceHideTitle ? children : null }, Text_st_css_1.default('root', { ellipsis: ellipsis }, props)), children);
};
exports.Text.displayName = 'Text';
exports.Text.defaultProps = {
    tagName: 'span'
};
exports.Text.propTypes = {
    /** should the text be ellipsed or not */
    ellipsis: prop_types_1.bool,
    /** should hide the title tooltip that is shown on mouse hover when using the ellipsis prop */
    forceHideTitle: prop_types_1.bool,
    /** tag name that will be rendered */
    tagName: prop_types_1.string,
    /** any nodes to be rendered (usually text nodes) */
    children: prop_types_1.any
};
//# sourceMappingURL=Text.js.map