"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Text_driver_1 = require("./Text.driver");
var enzyme_1 = require("wix-ui-test-utils/enzyme");
var driver_factory_1 = require("wix-ui-test-utils/driver-factory");
var vanilla_1 = require("wix-ui-test-utils/vanilla");
var _1 = require("./");
var testkit_1 = require("../../../testkit");
var enzyme_2 = require("../../../testkit/enzyme");
var enzyme_3 = require("enzyme");
describe('Text', function () {
    var createDriver = driver_factory_1.createDriverFactory(Text_driver_1.textDriverFactory);
    describe('ellipsis attribute', function () {
        it('should not have ellipsis by default', function () {
            var driver = createDriver(React.createElement(_1.Text, null, "Hello World"));
            expect(driver.hasEllipsis()).toBeFalsy();
        });
        it('should have ellipsis', function () {
            var driver = createDriver(React.createElement(_1.Text, { ellipsis: true }, "Hello World"));
            expect(driver.hasEllipsis()).toBeTruthy();
        });
    });
    describe('title attribute', function () {
        it('should not have title attribute by default', function () {
            var driver = createDriver(React.createElement(_1.Text, null, "Hello World"));
            expect(driver.hasTitleAttribute()).toBeFalsy();
        });
        it('should have title attribute when has ellipsis', function () {
            var driver = createDriver(React.createElement(_1.Text, { ellipsis: true }, "Hello World"));
            expect(driver.hasTitleAttribute()).toBeTruthy();
            expect(driver.getTitle()).toBe('Hello World');
        });
        it('should not have title attribute when has ellipsis and children is an element', function () {
            var driver = createDriver(React.createElement(_1.Text, { ellipsis: true },
                React.createElement("span", null, "Hello World")));
            expect(driver.hasTitleAttribute()).toBeFalsy();
        });
        it('should not have title attribute when has ellipsis and forceHideTitle is true', function () {
            var driver = createDriver(React.createElement(_1.Text, { ellipsis: true, forceHideTitle: true }, "Hello World"));
            expect(driver.hasTitleAttribute()).toBeFalsy();
        });
    });
    describe('tagName prop', function () {
        it('should be span by default', function () {
            var driver = createDriver(React.createElement(_1.Text, null, "Hello"));
            expect(driver.getTagName()).toBe('span');
        });
        it('should be configueable', function () {
            var driver = createDriver(React.createElement(_1.Text, { tagName: "h1" }, "Hello"));
            expect(driver.getTagName()).toBe('h1');
        });
    });
    describe('children prop', function () {
        it('should be rendered when given as a string', function () {
            var children = 'Hello World';
            var driver = createDriver(React.createElement(_1.Text, null, children));
            expect(driver.getText()).toBe(children);
        });
        it('should be rendered when given as an element', function () {
            var children = React.createElement("div", null, "Hello World");
            var driver = createDriver(React.createElement(_1.Text, null, children));
            expect(driver.getText()).toBe('<div>Hello World</div>');
        });
    });
    describe('testkit', function () {
        it('should exist', function () {
            expect(vanilla_1.isTestkitExists(React.createElement(_1.Text, null, "Hello World"), testkit_1.coreTextTestkitFactory)).toBe(true);
        });
    });
    describe('enzyme testkit', function () {
        it('should exist', function () {
            expect(enzyme_1.isEnzymeTestkitExists(React.createElement(_1.Text, null, "Hello World"), enzyme_2.coreTextTestkitFactory, enzyme_3.mount)).toBe(true);
        });
    });
});
//# sourceMappingURL=Text.spec.js.map