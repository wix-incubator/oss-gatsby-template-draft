import { WrapperData } from 'wix-ui-test-utils/enzyme';
export declare const counterBadgeTestkitFactory: (obj: WrapperData) => {
    exists: () => boolean;
    getType: () => any;
    getContent: () => any;
    getContentText: () => any;
};
import { BadgeDriver } from '../components/Badge/Badge.driver';
export declare const badgeTestkitFactory: (obj: WrapperData) => BadgeDriver;
export { BadgeDriver };
import { LinearProgressBarDriver } from '../components/LinearProgressBar/LinearProgressBar.driver';
export declare const linearProgressBarTestkitFactory: (obj: WrapperData) => LinearProgressBarDriver;
export { LinearProgressBarDriver };
import { CircularProgressBarDriver } from '../components/CircularProgressBar/CircularProgressBar.driver';
export declare const circularProgressBarTestkitFactory: (obj: WrapperData) => CircularProgressBarDriver;
export { CircularProgressBarDriver };
import { HeadingDriver } from '../components/Heading/Heading.driver';
export declare const headingTestkitFactory: (obj: WrapperData) => HeadingDriver;
export { HeadingDriver };
import { ButtonDriver } from '../components/Button/Button.driver';
export declare const buttonTestkitFactory: (obj: WrapperData) => ButtonDriver;
export { ButtonDriver };
import { CloseButtonDriver } from '../components/CloseButton/CloseButton.driver';
export declare const closeButtonTestkitFactory: (obj: WrapperData) => CloseButtonDriver;
export { CloseButtonDriver };
export declare const checkboxTestkitFactory: (obj: WrapperData) => {
    element: () => any;
    exists: () => boolean;
    click: () => void;
    keyDown: (key: string) => any;
    mouseEnter: () => any;
    mouseLeave: () => any;
    mouseDown: () => any;
    focus: () => any;
    isChecked: () => boolean;
    isIndeterminate: () => boolean;
    isDisabled: () => boolean;
    children: () => Element;
    tickmark: () => Element;
    input: () => HTMLInputElement;
    hasErrorState: () => boolean;
    hasFocusState: () => boolean;
    hasReadOnlyState: () => boolean;
};
import { TextDriver as CoreTextDriver } from '../components/core/CoreText/Text.driver';
export declare const coreTextTestkitFactory: (obj: WrapperData) => CoreTextDriver;
export { CoreTextDriver };
import { UITextDriver } from '../components/StylableUIText/UIText.driver';
export declare const uiTextTestkitFactory: (obj: WrapperData) => UITextDriver;
export { UITextDriver };
import { TextDriver } from '../components/Text/Text.driver';
export declare const textTestkitFactory: (obj: WrapperData) => TextDriver;
export { TextDriver };
import { FullTextViewDriver } from '../components/FullTextView/FullTextView.driver';
export declare const fullTextViewTestkitFactory: (obj: WrapperData) => FullTextViewDriver;
export { FullTextViewDriver };
export declare const autocompleteTestkitFactory: (obj: WrapperData) => {
    exists: () => boolean;
    hasStyleState: (stateName: any) => boolean;
    getInput: () => any;
    getValue: () => any;
    getPlaceholder: () => any;
    getPrefix: () => any;
    getSuffix: () => any;
    isDisabled: () => any;
    isReadOnly: () => any;
    setValue: (value: any) => void;
    focus: () => any;
    blur: () => any;
    keyDown: (key: any) => any;
} & {
    exists: () => boolean;
    getOptionsCount: () => any;
    getSelectedOptionsCount: () => number;
    optionAt: (index: number) => {
        exists: () => boolean;
        click: () => any;
        mouseEnter: () => any;
        className: () => any;
        isHovered: () => boolean;
        isSelected: () => boolean;
        isDisabled: () => boolean;
        getText: () => any;
        getElement: () => any;
    };
} & {
    exists: () => boolean;
    getTargetElement: () => Element;
    getContentElement: () => any;
    isTargetElementExists: () => boolean;
    isContentElementExists: () => boolean;
    mouseEnter: () => any;
    mouseLeave: () => any;
    click: () => any;
    getArrowOffset: () => {
        top: string;
        left: string;
        right: string;
        bottom: string;
    };
    inlineStyles: () => any;
    getElementId: () => any;
};
export declare const toggleSwitchTestkitFactory: (obj: WrapperData) => {
    getSize: () => string;
    getSkin: () => string;
    exists: () => boolean;
    click: () => void;
    isChecked: () => any;
    isDisabled: () => any;
    getKnobIcon: () => any;
    hasKnobIcon: () => boolean;
    getId: () => any;
    getTabIndex: () => any;
    getRootStyles: () => CSSStyleDeclaration;
    getTrackStyles: () => CSSStyleDeclaration;
    getKnobStyles: () => CSSStyleDeclaration;
    getKnobIconStyles: () => CSSStyleDeclaration;
};
import { CounterBadgeDriver } from '../components/StylableCounterBadge/CounterBadge.driver';
export declare const stylableCounterBadgeTestkitFactory: (obj: WrapperData) => CounterBadgeDriver;
export { CounterBadgeDriver };
export declare const labelWithOptionsTestkitFactory: (obj: WrapperData) => {
    exists: () => boolean;
    getOptionsCount: () => any;
    getSelectedOptionsCount: () => number;
    optionAt: (index: number) => {
        exists: () => boolean;
        click: () => any;
        mouseEnter: () => any;
        className: () => any;
        isHovered: () => boolean;
        isSelected: () => boolean;
        isDisabled: () => boolean;
        getText: () => any;
        getElement: () => any;
    };
} & {
    exists: () => boolean;
    getTargetElement: () => Element;
    getContentElement: () => any;
    isTargetElementExists: () => boolean;
    isContentElementExists: () => boolean;
    mouseEnter: () => any;
    mouseLeave: () => any;
    click: () => any;
    getArrowOffset: () => {
        top: string;
        left: string;
        right: string;
        bottom: string;
    };
    inlineStyles: () => any;
    getElementId: () => any;
} & {
    exists: () => boolean;
    getLabelText: () => any;
    getId: () => any;
    getForAttribute: () => any;
    isDisabled: () => boolean;
    click: () => any;
    keyDown: (key: any) => any;
    hasEllipsis: () => boolean;
} & {
    getSuffix: () => any;
    isRequired: () => boolean;
    isError: () => boolean;
    isDisabled: () => boolean;
    checkboxDriverAt: (index: number) => {
        element: () => any;
        exists: () => boolean;
        click: () => void;
        keyDown: (key: string) => any;
        mouseEnter: () => any;
        mouseLeave: () => any;
        mouseDown: () => any;
        focus: () => any;
        isChecked: () => boolean;
        isIndeterminate: () => boolean;
        isDisabled: () => boolean;
        children: () => Element;
        tickmark: () => Element;
        input: () => HTMLInputElement;
        hasErrorState: () => boolean;
        hasFocusState: () => boolean;
        hasReadOnlyState: () => boolean;
    };
};
export declare const labelTestkitFactory: (obj: WrapperData) => {
    getSize: () => string;
    exists: () => boolean;
    getLabelText: () => any;
    getId: () => any;
    getForAttribute: () => any;
    isDisabled: () => boolean;
    click: () => any;
    keyDown: (key: any) => any;
    hasEllipsis: () => boolean;
};
import { FloatingHelperDriver } from '../components/FloatingHelper/FloatingHelper.driver';
export declare const floatingHelperTestkitFactory: (obj: WrapperData) => FloatingHelperDriver;
export { FloatingHelperDriver };
import { ThumbnailDriver } from '../components/Thumbnail/Thumbnail.driver';
export declare const thumbnailTestkitFactory: (obj: WrapperData) => ThumbnailDriver;
export { ThumbnailDriver };
export declare const addressInputTestkitFactory: (obj: WrapperData) => {
    exists: () => boolean;
    hasStyleState: (stateName: any) => boolean;
    getInput: () => any;
    getValue: () => any;
    getPlaceholder: () => any;
    getPrefix: () => any;
    getSuffix: () => any;
    isDisabled: () => any;
    isReadOnly: () => any;
    setValue: (value: any) => void;
    focus: () => any;
    blur: () => any;
    keyDown: (key: any) => any;
} & {
    exists: () => boolean;
    getOptionsCount: () => any;
    getSelectedOptionsCount: () => number;
    optionAt: (index: number) => {
        exists: () => boolean;
        click: () => any;
        mouseEnter: () => any;
        className: () => any;
        isHovered: () => boolean;
        isSelected: () => boolean;
        isDisabled: () => boolean;
        getText: () => any;
        getElement: () => any;
    };
} & {
    exists: () => boolean;
    getTargetElement: () => Element;
    getContentElement: () => any;
    isTargetElementExists: () => boolean;
    isContentElementExists: () => boolean;
    mouseEnter: () => any;
    mouseLeave: () => any;
    click: () => any;
    getArrowOffset: () => {
        top: string;
        left: string;
        right: string;
        bottom: string;
    };
    inlineStyles: () => any;
    getElementId: () => any;
};
export declare const timePickerTestkitFactory: (obj: WrapperData) => {
    getValue: () => any;
    isAmPmIndicatorExist: () => any;
    getAmPmIndicatorText: () => any;
    exists: () => boolean;
    element: () => any;
    getInputElement: () => any;
    getInlineStyle: () => CSSStyleDeclaration;
    isDisabled: () => any;
    getInputType: () => any;
    setValue: (value: any) => void;
    keyDown: (key: any) => any;
    focus: () => any;
    blur: () => any;
    getTickers: () => any;
    clickTickerUp: () => any;
    clickTickerDown: () => any;
};
