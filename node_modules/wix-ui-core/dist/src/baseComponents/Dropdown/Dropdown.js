"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var react_onclickoutside_1 = require("react-onclickoutside");
var Dropdown_st_css_1 = require("./Dropdown.st.css");
var Popover_1 = require("../../components/Popover");
var DropdownContent_1 = require("../DropdownContent");
var constants_1 = require("./constants");
var isEqual = require('lodash/isEqual');
/**
 * Dropdown
 */
var DropdownComponent = /** @class */ (function (_super) {
    __extends(DropdownComponent, _super);
    function DropdownComponent(props) {
        var _this = _super.call(this, props) || this;
        _this.dropdownContentRef = null;
        _this.state = { isOpen: false, selectedIds: [] };
        _this.close = _this.close.bind(_this);
        _this.onKeyDown = _this.onKeyDown.bind(_this);
        _this.onOptionClick = _this.onOptionClick.bind(_this);
        return _this;
    }
    DropdownComponent.prototype.componentWillMount = function () {
        this.initializeSelectedOptions(this.props);
    };
    DropdownComponent.prototype.componentWillReceiveProps = function (props) {
        if (!isEqual(props.initialSelectedIds, this.props.initialSelectedIds)) {
            this.initializeSelectedOptions(props);
        }
    };
    DropdownComponent.prototype.initializeSelectedOptions = function (props) {
        var initialSelectedIds = props.initialSelectedIds, options = props.options, onInitialSelectedOptionsSet = props.onInitialSelectedOptionsSet;
        var selectedOptions = (initialSelectedIds || [])
            .map(function (id) { return options.find(function (option) { return id === option.id; }); })
            .filter(function (option) { return option && !option.isDisabled && option.isSelectable; });
        var selectedIds = selectedOptions.map(function (x) { return x && x.id; });
        this.setState({
            selectedIds: selectedIds
        });
        onInitialSelectedOptionsSet && onInitialSelectedOptionsSet(selectedOptions);
    };
    DropdownComponent.prototype.handleClickOutside = function () {
        this.close();
    };
    DropdownComponent.prototype.open = function (onOpen) {
        if (onOpen === void 0) { onOpen = function () { return null; }; }
        if (this.state.isOpen) {
            onOpen && onOpen();
        }
        else {
            this.setState({ isOpen: true }, onOpen);
        }
    };
    DropdownComponent.prototype.close = function () {
        if (this.state.isOpen) {
            this.setState({ isOpen: false });
        }
    };
    DropdownComponent.prototype.onKeyboardSelect = function () {
        var selectedOption = this.dropdownContentRef ? this.dropdownContentRef.onKeyboardSelect() : null;
        this.onOptionClick(selectedOption);
    };
    DropdownComponent.prototype.isClosingKey = function (key) {
        return key === 'Tab' || key === 'Enter' || key === 'Escape';
    };
    DropdownComponent.prototype.onKeyDown = function (evt) {
        var _this = this;
        var eventKey = evt.key;
        if (!this.state.isOpen && this.isClosingKey(eventKey)) {
            return;
        }
        this.open(function () {
            _this.dropdownContentRef && _this.dropdownContentRef.onKeyDown(eventKey);
            switch (eventKey) {
                case 'Enter': {
                    _this.onKeyboardSelect();
                    var multi = _this.props.multi;
                    !multi && _this.close();
                    break;
                }
                case 'Tab': {
                    _this.onKeyboardSelect();
                    _this.close();
                    break;
                }
                case 'Escape': {
                    _this.close();
                    break;
                }
                default:
                    break;
            }
        });
    };
    DropdownComponent.prototype.onOptionClick = function (option) {
        var _a = this.props, onSelect = _a.onSelect, onDeselect = _a.onDeselect, multi = _a.multi;
        var selectedIds = this.state.selectedIds;
        var newState = {
            isOpen: multi,
            selectedIds: selectedIds
        };
        var callback = onSelect;
        if (multi) { // Multi select
            if (option) {
                // if option was clicked (could be null when Autocomplete receives a new string)
                if (selectedIds.includes(option.id)) {
                    // if clicked a selected option, unselect it
                    newState.selectedIds = selectedIds.filter(function (x) { return x !== option.id; });
                    callback = onDeselect;
                }
                else {
                    // if clicked a new option, add it to selection
                    newState.selectedIds = selectedIds.concat([option.id]);
                }
            }
        }
        else { // Single select
            if (option) {
                // if option was clicked (could be null when Autocomplete receives a new string)
                if (selectedIds.includes(option.id)) {
                    // if clicked on the selected item, exit and do nothing
                    return this.close();
                }
                else {
                    // if clicked on a new option, make it the selected
                    newState.selectedIds = [option.id];
                }
            }
            else {
                // if non existing option selected, unselect existing ones
                newState.selectedIds = [];
            }
        }
        this.setState(newState, function () { return callback(option); });
    };
    DropdownComponent.prototype.render = function () {
        var _this = this;
        var _a = this.props, openTrigger = _a.openTrigger, placement = _a.placement, options = _a.options, children = _a.children, showArrow = _a.showArrow, fixedFooter = _a.fixedFooter, fixedHeader = _a.fixedHeader, disabled = _a.disabled, timeout = _a.timeout, forceContentElementVisibility = _a.forceContentElementVisibility, inlineStyles = _a.style, id = _a.id;
        var _b = this.state, isOpen = _b.isOpen, selectedIds = _b.selectedIds;
        var hasContent = Boolean((options && options.length) || fixedHeader || fixedFooter);
        return (React.createElement(Popover_1.Popover, __assign({}, Dropdown_st_css_1.default('root', {}, this.props), { placement: placement, shown: forceContentElementVisibility || (isOpen && !disabled && hasContent), showArrow: showArrow, timeout: timeout, onClick: !disabled && openTrigger === constants_1.CLICK ? function () { return _this.open(); } : undefined, onMouseEnter: !disabled && openTrigger === constants_1.HOVER ? function () { return _this.open(); } : undefined, onKeyDown: !disabled ? this.onKeyDown : undefined, onMouseLeave: !disabled && openTrigger === constants_1.HOVER ? this.close : undefined, style: inlineStyles, id: id }),
            React.createElement(Popover_1.Popover.Element, null, children),
            React.createElement(Popover_1.Popover.Content, null,
                React.createElement(DropdownContent_1.DropdownContent, { className: Dropdown_st_css_1.default.dropdownContent, ref: function (dropdownContent) { return _this.dropdownContentRef = dropdownContent; }, options: options, fixedFooter: fixedFooter, fixedHeader: fixedHeader, selectedIds: selectedIds, onOptionClick: this.onOptionClick }))));
    };
    DropdownComponent.displayName = 'Dropdown';
    return DropdownComponent;
}(React.PureComponent));
exports.DropdownComponent = DropdownComponent;
exports.Dropdown = react_onclickoutside_1.default(DropdownComponent);
//# sourceMappingURL=Dropdown.js.map