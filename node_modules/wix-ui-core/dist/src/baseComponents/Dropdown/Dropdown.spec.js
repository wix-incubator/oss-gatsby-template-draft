"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var eventually = require("wix-eventually");
var dom_test_container_1 = require("../../../test/dom-test-container");
var Dropdown_driver_1 = require("./Dropdown.driver");
var _1 = require("./");
var constants_1 = require("./constants");
var enzyme_1 = require("enzyme");
var test_utils_1 = require("react-dom/test-utils");
var OptionsExample_1 = require("../DropdownOption/OptionsExample");
describe('Dropdown', function () {
    var createDriver = new dom_test_container_1.ReactDOMTestContainer()
        .unmountAfterEachTest()
        .createLegacyRenderer(Dropdown_driver_1.dropdownDriverFactory);
    var options = OptionsExample_1.generateOptions();
    var createDropdown = function (props) {
        if (props === void 0) { props = {}; }
        return (React.createElement(_1.Dropdown, __assign({ placement: "top", openTrigger: constants_1.CLICK }, Object.assign({
            options: [],
            onSelect: function () { return null; },
            onDeselect: function () { return null; },
            onInitialSelectedOptionsSet: function () { return null; },
            initialSelectedIds: [],
        }, props)),
            React.createElement("span", null, "Dropdown")));
    };
    it('should render default dropdown', function () {
        var driver = createDriver(createDropdown());
        expect(driver.isTargetElementExists()).toBeTruthy();
        expect(driver.isContentElementExists()).toBeFalsy();
    });
    it('should display content element', function () {
        var driver = createDriver(createDropdown({ forceContentElementVisibility: true }));
        expect(driver.isContentElementExists()).toBeTruthy();
    });
    describe('openTrigger', function () {
        it('should show content on click', function () {
            var driver = createDriver(createDropdown({ options: options }));
            driver.click();
            expect(driver.isContentElementExists()).toBeTruthy();
        });
        it('should not hide content on another click', function () { return __awaiter(_this, void 0, void 0, function () {
            var driver;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        driver = createDriver(createDropdown({ options: options }));
                        driver.click();
                        driver.click();
                        return [4 /*yield*/, eventually(function () { return expect(driver.isContentElementExists()).toBeTruthy(); })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it('should show content on hover', function () { return __awaiter(_this, void 0, void 0, function () {
            var driver;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        driver = createDriver(createDropdown({ options: options, openTrigger: constants_1.HOVER }));
                        driver.mouseEnter();
                        expect(driver.isContentElementExists()).toBeTruthy();
                        driver.mouseLeave();
                        return [4 /*yield*/, eventually(function () { return expect(driver.isContentElementExists()).toBeFalsy(); })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('onSelect', function () {
        it('should be called when selection changed', function () {
            var onSelect = jest.fn();
            var driver = createDriver(createDropdown({ options: options, onSelect: onSelect }));
            driver.click();
            driver.optionAt(0).click();
            expect(onSelect).toHaveBeenCalledWith(options[0]);
        });
        it('should not be called when selecting disabled item', function () {
            var onSelect = jest.fn();
            var driver = createDriver(createDropdown({ options: options, onSelect: onSelect }));
            driver.click();
            driver.optionAt(2).click();
            expect(onSelect).not.toHaveBeenCalled();
        });
        it('should not be called when selecting separator item', function () {
            var onSelect = jest.fn();
            var driver = createDriver(createDropdown({ options: options, onSelect: onSelect }));
            driver.click();
            driver.optionAt(5).click();
            expect(onSelect).not.toHaveBeenCalled();
        });
        it('should call onSelect when selection is empty then changed', function () {
            var onSelect = jest.fn();
            var driver = createDriver(createDropdown({ options: options, onSelect: onSelect }));
            driver.click();
            driver.optionAt(0).click();
            expect(onSelect).toHaveBeenCalledWith(options[0]);
        });
    });
    describe('onDeselect', function () {
        it('should call onDeselect when option is unselected', function () {
            var onDeselect = jest.fn();
            var driver = createDriver(createDropdown({
                initialSelectedIds: [0],
                options: options,
                onDeselect: onDeselect,
                multi: true
            }));
            driver.click();
            driver.optionAt(0).click();
            expect(onDeselect).toHaveBeenCalledWith(options[0]);
        });
    });
    describe('Initially selected options', function () {
        it('should be selected', function () {
            var driver = createDriver(createDropdown({
                options: options,
                initialSelectedIds: [0, 1],
                forceContentElementVisibility: true,
            }));
            expect(driver.optionAt(0).isSelected()).toBeTruthy();
            expect(driver.optionAt(1).isSelected()).toBeTruthy();
            expect(driver.getSelectedOptionsCount()).toEqual(2);
        });
    });
    describe('multiple selection', function () {
        it('when enabled should allow selection of more than one option', function () {
            var driver = createDriver(createDropdown({
                options: options,
                multi: true,
                forceContentElementVisibility: true,
            }));
            driver.optionAt(0).click();
            driver.optionAt(1).click();
            expect(driver.optionAt(0).isSelected()).toBeTruthy();
            expect(driver.optionAt(1).isSelected()).toBeTruthy();
            expect(driver.getSelectedOptionsCount()).toEqual(2);
        });
        it('when disabled should NOT allow selection of more than one option', function () {
            var driver = createDriver(createDropdown({
                options: options,
                multi: false,
                initialSelectedIds: [0],
                forceContentElementVisibility: true,
            }));
            driver.optionAt(1).click();
            expect(driver.optionAt(1).isSelected()).toBeTruthy();
            expect(driver.getSelectedOptionsCount()).toEqual(1);
        });
    });
    describe('Dropdown content edge cases', function () {
        it('should not open dropdown content if options list is empty', function () {
            var driver = createDriver(createDropdown({ options: [] }));
            driver.click();
            expect(driver.isContentElementExists()).toBeFalsy();
        });
        it('should open dropdown content if options list is empty and fixedHeader exists', function () {
            var driver = createDriver(createDropdown({ options: [], fixedHeader: 'Fixed' }));
            driver.click();
            expect(driver.isContentElementExists()).toBeTruthy();
        });
        it('should open dropdown content if options list is empty and fixedFooter exists', function () {
            var driver = createDriver(createDropdown({ options: [], fixedFooter: 'Fixed' }));
            driver.click();
            expect(driver.isContentElementExists()).toBeTruthy();
        });
        it('Should display options when they exist', function () {
            var wrapper = enzyme_1.mount(React.createElement(_1.Dropdown, { onSelect: function () { return null; }, initialSelectedIds: [], onDeselect: function () { return null; }, onInitialSelectedOptionsSet: function () { return null; }, placement: "top", openTrigger: constants_1.CLICK, options: [] },
                React.createElement("span", null, "Dropdown")));
            var driver = Dropdown_driver_1.dropdownDriverFactory({
                element: wrapper.children().at(0).getDOMNode(),
                eventTrigger: test_utils_1.Simulate
            });
            driver.click();
            expect(driver.isContentElementExists()).toBeFalsy();
            wrapper.setProps({ options: options });
            expect(driver.isContentElementExists()).toBeTruthy();
        });
    });
});
//# sourceMappingURL=Dropdown.spec.js.map