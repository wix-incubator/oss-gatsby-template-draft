"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var DropdownContent_st_css_1 = require("./DropdownContent.st.css");
var DropdownOption_1 = require("../DropdownOption");
var NOT_HOVERED_INDEX = -1;
/**
 * DropdownContent
 */
var DropdownContent = /** @class */ (function (_super) {
    __extends(DropdownContent, _super);
    function DropdownContent(props) {
        var _this = _super.call(this, props) || this;
        _this.optionsContainerRef = null;
        _this.mouseCoords = { screenX: -1, screenY: -1 };
        _this.state = { hoveredIndex: NOT_HOVERED_INDEX };
        _this.onMouseMove = _this.onMouseMove.bind(_this);
        return _this;
    }
    DropdownContent.prototype.setHoveredIndex = function (index) {
        if (this.state.hoveredIndex !== index) {
            this.setState({
                hoveredIndex: index
            });
        }
    };
    DropdownContent.prototype.isValidOptionForSelection = function (option) {
        return option.isSelectable && !option.isDisabled;
    };
    DropdownContent.prototype.hoverNextItem = function (interval) {
        var options = this.props.options;
        if (!options.find(this.isValidOptionForSelection)) {
            return;
        }
        var hoveredIndex = this.state.hoveredIndex;
        while (true) {
            hoveredIndex += interval;
            if (hoveredIndex === options.length) {
                hoveredIndex = 0;
            }
            else if (hoveredIndex < 0) {
                hoveredIndex = options.length - 1;
            }
            if (this.isValidOptionForSelection(options[hoveredIndex])) {
                break;
            }
        }
        if (this.optionsContainerRef) {
            var hoveredOption = this.optionsContainerRef.childNodes[hoveredIndex];
            var hoveredOptionHeight = hoveredOption.offsetHeight;
            var hoveredOptionTop = hoveredOption.offsetTop - 1;
            var _a = this.optionsContainerRef, optionsContainerScrollTop = _a.scrollTop, optionsContainerClientHeight = _a.clientHeight;
            // If hovered option is not visible
            if (!(optionsContainerScrollTop <= hoveredOptionTop && (optionsContainerScrollTop + optionsContainerClientHeight) > hoveredOptionTop + hoveredOptionHeight)) {
                if (this.optionsContainerRef.scrollTop < hoveredOptionTop) {
                    this.optionsContainerRef.scrollTop = hoveredOptionHeight + hoveredOptionTop - optionsContainerClientHeight;
                }
                else {
                    this.optionsContainerRef.scrollTop = hoveredOptionTop;
                }
            }
        }
        this.setHoveredIndex(hoveredIndex);
    };
    DropdownContent.prototype.onKeyboardSelect = function () {
        var options = this.props.options;
        var hoveredIndex = this.state.hoveredIndex;
        var isValidIndex = hoveredIndex >= 0 && hoveredIndex < options.length;
        return isValidIndex ? options[hoveredIndex] : null;
    };
    DropdownContent.prototype.onKeyDown = function (eventKey) {
        switch (eventKey) {
            case 'ArrowUp': {
                return this.hoverNextItem(-1);
            }
            case 'ArrowDown': {
                return this.hoverNextItem(1);
            }
            case 'ArrowLeft':
            case 'ArrowRight': return;
            default: this.setHoveredIndex(NOT_HOVERED_INDEX);
        }
    };
    DropdownContent.prototype.onMouseMove = function (evt) {
        this.mouseCoords.screenX = evt.screenX;
        this.mouseCoords.screenY = evt.screenY;
    };
    DropdownContent.prototype.onMouseEnter = function (evt, index) {
        if (this.mouseCoords.screenX !== evt.screenX || this.mouseCoords.screenY !== evt.screenY) {
            this.setHoveredIndex(index);
        }
    };
    DropdownContent.prototype.render = function () {
        var _this = this;
        var _a = this.props, fixedHeader = _a.fixedHeader, fixedFooter = _a.fixedFooter, options = _a.options, selectedIds = _a.selectedIds, onOptionClick = _a.onOptionClick;
        var hoveredIndex = this.state.hoveredIndex;
        return (React.createElement("div", __assign({}, DropdownContent_st_css_1.default('root', {}, this.props), { onMouseMove: this.onMouseMove, tabIndex: 1000 }),
            fixedHeader,
            React.createElement("div", { className: DropdownContent_st_css_1.default.optionsContainer, ref: function (optionsContainer) { return _this.optionsContainerRef = optionsContainer; } }, (options || []).map(function (option, index) { return (React.createElement(DropdownOption_1.DropdownOption, { className: DropdownContent_st_css_1.default.dropdownOption, "data-hook": "option", key: option.id, option: option, isHovered: hoveredIndex === index, isSelected: (selectedIds || []).includes(option.id), onClickHandler: _this.isValidOptionForSelection(option) ? function () { return onOptionClick(option); } : undefined, onMouseEnterHandler: _this.isValidOptionForSelection(option) ? function (evt) { return _this.onMouseEnter(evt, index); } : undefined })); })),
            fixedFooter));
    };
    DropdownContent.displayName = 'DropdownContent';
    return DropdownContent;
}(React.PureComponent));
exports.DropdownContent = DropdownContent;
//# sourceMappingURL=DropdownContent.js.map