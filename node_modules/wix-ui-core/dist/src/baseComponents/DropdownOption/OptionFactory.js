"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Divider_1 = require("../../components/Divider");
var prop_types_1 = require("prop-types");
var DropdownOption_st_css_1 = require("./DropdownOption.st.css");
var uniqueId = require('lodash/uniqueId');
exports.optionPropType = prop_types_1.shape({
    id: prop_types_1.oneOfType([prop_types_1.string, prop_types_1.number]).isRequired,
    isDisabled: prop_types_1.bool,
    isSelectable: prop_types_1.bool,
    value: prop_types_1.string,
    render: prop_types_1.func.isRequired
});
var createOption = function (option) {
    if (option === void 0) { option = null; }
    return Object.assign({
        id: option && (option.id || option.id === 0) ? option.id : uniqueId('Option'),
        isDisabled: false,
        isSelectable: true,
        value: null,
        render: function (val) { return val; }
    }, option);
};
var escapeRegExp = function (s) { return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'); };
var hightlightMatches = function (option, searchTerm) {
    var re = new RegExp("(" + escapeRegExp(searchTerm) + ")", 'gi');
    var parts = option.value.split(re).map(function (part, i) {
        return i % 2 ? React.createElement("mark", { className: DropdownOption_st_css_1.default.highlight, key: i }, part) : part;
    });
    return createOption({
        id: option.id,
        isDisabled: option.isDisabled,
        isSelectable: option.isSelectable,
        value: option.value,
        render: function () { return option.render(parts); }
    });
};
exports.OptionFactory = {
    create: createOption,
    createDivider: function (_a) {
        var _b = _a === void 0 ? {} : _a, className = _b.className, value = _b.value;
        return createOption({
            id: uniqueId('Divider'),
            isDisabled: false,
            isSelectable: false,
            render: value ? function () { return React.createElement(Divider_1.Divider, { className: className }, value); } : function () { return React.createElement(Divider_1.Divider, { className: className }); }
        });
    },
    createHighlighted: function (option, hightlightValue) {
        return option.value && hightlightValue ? hightlightMatches(option, hightlightValue) : option;
    }
};
//# sourceMappingURL=OptionFactory.js.map