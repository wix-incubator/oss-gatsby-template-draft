"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var _1 = require("./");
var Divider_1 = require("../../components/Divider");
var DropdownOption_st_css_1 = require("./DropdownOption.st.css");
describe('OptionFactory', function () {
    var value = 'value';
    it('should create default option', function () {
        var option = _1.OptionFactory.create();
        expect(option.id).toContain('Option');
        expect(option.isDisabled).toBeFalsy();
        expect(option.isSelectable).toBeTruthy();
        expect(option.value).toBeNull();
        expect(option.render(option.value)).toBeNull();
    });
    it('should create option with id', function () {
        var option = _1.OptionFactory.create({ id: 5 });
        expect(option.id).toEqual(5);
        expect(option.isDisabled).toBeFalsy();
        expect(option.isSelectable).toBeTruthy();
        expect(option.value).toBeNull();
        expect(option.render(option.value)).toBeNull();
    });
    it('should create option with disabled', function () {
        var option = _1.OptionFactory.create({ isDisabled: true });
        expect(option.id).toContain('Option');
        expect(option.isDisabled).toBeTruthy();
        expect(option.isSelectable).toBeTruthy();
        expect(option.value).toBeNull();
        expect(option.render(option.value)).toBeNull();
    });
    it('should create option with selectable false', function () {
        var option = _1.OptionFactory.create({ isSelectable: false });
        expect(option.id).toContain('Option');
        expect(option.isDisabled).toBeFalsy();
        expect(option.isSelectable).toBeFalsy();
        expect(option.value).toBeNull();
        expect(option.render(option.value)).toBeNull();
    });
    it('should create option with value', function () {
        var option = _1.OptionFactory.create({ value: value });
        expect(option.id).toContain('Option');
        expect(option.isDisabled).toBeFalsy();
        expect(option.isSelectable).toBeTruthy();
        expect(option.value).toEqual(value);
        expect(option.render(option.value)).toEqual(value);
    });
    it('should create option with render function', function () {
        var render = function () { return value; };
        var option = _1.OptionFactory.create({ render: render });
        expect(option.id).toContain('Option');
        expect(option.isDisabled).toBeFalsy();
        expect(option.isSelectable).toBeTruthy();
        expect(option.value).toBeNull();
        expect(option.render(option.value)).toEqual(value);
    });
    it('should create divider without content', function () {
        var option = _1.OptionFactory.createDivider({ className: 'className' });
        expect(option.id).toContain('Divider');
        expect(option.isDisabled).toBeFalsy();
        expect(option.isSelectable).toBeFalsy();
        expect(option.render(value)).toEqual(React.createElement(Divider_1.Divider, { className: 'className' }));
    });
    it('should create divider with content', function () {
        var option = _1.OptionFactory.createDivider({ value: value });
        expect(option.id).toContain('Divider');
        expect(option.isDisabled).toBeFalsy();
        expect(option.isSelectable).toBeFalsy();
        expect(option.render(value)).toEqual(React.createElement(Divider_1.Divider, { className: undefined }, "value"));
    });
    it('should create highlighted option', function () {
        var existingOption = _1.OptionFactory.create({ value: value });
        var option = _1.OptionFactory.createHighlighted(existingOption, 'lu');
        expect(option.id).toContain('Option');
        expect(option.isDisabled).toBeFalsy();
        expect(option.isSelectable).toBeTruthy();
        expect(option.render(value)).toEqual(['va', React.createElement("mark", { className: DropdownOption_st_css_1.default.highlight, key: 1 }, "lu"), 'e']);
    });
    it('should create highlighted option with divider', function () {
        var existingOption = _1.OptionFactory.createDivider();
        var option = _1.OptionFactory.createHighlighted(existingOption, 'lu');
        expect(option.id).toContain('Divider');
        expect(option.isDisabled).toBeFalsy();
        expect(option.isSelectable).toBeFalsy();
        expect(option.render(value)).toEqual(React.createElement(Divider_1.Divider, { className: undefined }));
    });
});
//# sourceMappingURL=OptionFactory.spec.js.map