"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var IframesManager_1 = require("./IframesManager/IframesManager");
var handlersName_1 = require("./handlersName");
var utils_1 = require("./utils");
var GoogleMapsIframeClient = /** @class */ (function () {
    function GoogleMapsIframeClient() {
        var _this = this;
        this._iframesManager = new IframesManager_1.IframesManager();
        this._promisesMap = new Map();
        this.handleMessage = function (event) {
            var data = event.data;
            if (data.requestId && _this._promisesMap.has(data.requestId)) {
                var promise = _this._promisesMap.get(data.requestId);
                data.status === 'OK' ? promise.resolve(data.results) : promise.reject();
            }
        };
        window.addEventListener('message', this.handleMessage, false);
    }
    GoogleMapsIframeClient.prototype.autocomplete = function (apiKey, lang, request) {
        var _this = this;
        var requestIframe;
        if (this._iframesManager.hasIframe(apiKey, lang)) {
            requestIframe = this._iframesManager.getIframe(apiKey, lang);
        }
        else {
            requestIframe = this._iframesManager.addIframe(apiKey, lang);
        }
        var requestId = utils_1.generateID();
        var requestPromise = new Promise(function (resolve, reject) {
            _this._promisesMap.set(requestId, { requestPromise: requestPromise, resolve: resolve, reject: reject });
        });
        requestIframe.postMessage({ request: request, requestId: requestId, method: handlersName_1.autocompleteHandlerName }, '*');
        return requestPromise;
    };
    GoogleMapsIframeClient.prototype.geocode = function (apiKey, lang, request) {
        var _this = this;
        var requestIframe;
        if (this._iframesManager.hasIframe(apiKey, lang)) {
            requestIframe = this._iframesManager.getIframe(apiKey, lang);
        }
        else {
            requestIframe = this._iframesManager.addIframe(apiKey, lang);
        }
        var requestId = utils_1.generateID();
        var requestPromise = new Promise(function (resolve, reject) {
            _this._promisesMap.set(requestId, { requestPromise: requestPromise, resolve: resolve, reject: reject });
        });
        requestIframe.postMessage({ request: request, requestId: requestId, method: handlersName_1.geocodeHandlerName }, '*');
        return requestPromise;
    };
    GoogleMapsIframeClient.prototype.placeDetails = function (apiKey, lang, request) {
        var _this = this;
        var requestIframe;
        if (this._iframesManager.hasIframe(apiKey, lang)) {
            requestIframe = this._iframesManager.getIframe(apiKey, lang);
        }
        else {
            requestIframe = this._iframesManager.addIframe(apiKey, lang);
        }
        var requestId = utils_1.generateID();
        var requestPromise = new Promise(function (resolve, reject) {
            _this._promisesMap.set(requestId, { requestPromise: requestPromise, resolve: resolve, reject: reject });
        });
        requestIframe.postMessage({ request: request, requestId: requestId, method: handlersName_1.placeDetailsHandlerName }, '*');
        return requestPromise;
    };
    return GoogleMapsIframeClient;
}());
exports.GoogleMapsIframeClient = GoogleMapsIframeClient;
//# sourceMappingURL=GoogleMapsIframeClient.js.map