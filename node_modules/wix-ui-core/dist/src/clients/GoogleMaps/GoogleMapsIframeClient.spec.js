"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var GoogleMapsIframeClient_1 = require("./GoogleMapsIframeClient");
var handlersName_1 = require("./handlersName");
var IframeTestUtils_1 = require("./IframeTestUtils");
var GoogleMapsIframeClient = /** @class */ (function (_super) {
    __extends(GoogleMapsIframeClient, _super);
    function GoogleMapsIframeClient() {
        var _this = _super.call(this) || this;
        _this._iframesManager = new IframeTestUtils_1.IframesManagerMock();
        return _this;
    }
    return GoogleMapsIframeClient;
}(GoogleMapsIframeClient_1.GoogleMapsIframeClient));
var iframeManagerPrototype = IframeTestUtils_1.IframesManagerMock.prototype;
describe('GoogleMapsIframeClient', function () {
    var client;
    var mockApiKey = 'a';
    var mockLang = 'en';
    it('should return a resolved promise once the status sent by iframesManager is OK', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    iframeManagerPrototype.hasIframe.mockImplementationOnce(function () { return true; });
                    iframeManagerPrototype.getIframe.mockImplementationOnce(function () { return ({
                        postMessage: function (requestObj) {
                            var targetOrigin = '*';
                            var requestId = requestObj.requestId;
                            global.postMessage({ requestId: requestId, results: [], status: 'OK' }, targetOrigin);
                        }
                    }); });
                    client = new GoogleMapsIframeClient();
                    return [4 /*yield*/, expect(client.autocomplete(mockApiKey, mockLang)).resolves.toEqual([])];
                case 1:
                    _a.sent();
                    expect(iframeManagerPrototype.getIframe).toBeCalled();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should add an iframe once if 2 request with different google methods are using same apiKey and language', function () {
        var postMessageMock = jest.fn();
        iframeManagerPrototype.hasIframe.mockImplementationOnce(function () { return false; });
        iframeManagerPrototype.addIframe.mockImplementationOnce(function () { return ({
            postMessage: postMessageMock
        }); });
        client = new GoogleMapsIframeClient();
        client.autocomplete(mockApiKey, mockLang);
        iframeManagerPrototype.hasIframe.mockImplementationOnce(function () { return true; });
        iframeManagerPrototype.getIframe.mockImplementation(function () { return ({
            postMessage: postMessageMock
        }); });
        client.geocode(mockApiKey, mockLang);
        expect(iframeManagerPrototype.addIframe).toHaveBeenCalledTimes(1);
    });
    it('should call postMessage with method name geocode when geocode is called', function () {
        var postMessageMock = jest.fn();
        iframeManagerPrototype.hasIframe.mockImplementationOnce(function () { return false; });
        iframeManagerPrototype.addIframe.mockImplementationOnce(function () { return ({
            postMessage: postMessageMock
        }); });
        client = new GoogleMapsIframeClient();
        client.geocode(mockApiKey, mockLang);
        var args = postMessageMock.mock.calls[0];
        var requestArgs = args[0];
        expect(requestArgs.method).toEqual(handlersName_1.geocodeHandlerName);
    });
    it('should call postMessage with method name autocomplete when autocomplete is called', function () {
        var postMessageMock = jest.fn();
        iframeManagerPrototype.hasIframe.mockImplementationOnce(function () { return false; });
        iframeManagerPrototype.addIframe.mockImplementationOnce(function () { return ({
            postMessage: postMessageMock
        }); });
        client = new GoogleMapsIframeClient();
        client.autocomplete(mockApiKey, mockLang);
        var args = postMessageMock.mock.calls[0];
        var requestArgs = args[0];
        expect(requestArgs.method).toEqual(handlersName_1.autocompleteHandlerName);
    });
    it('should call postMessage with method name placeDetails when placeDetails is called', function () {
        var postMessageMock = jest.fn();
        iframeManagerPrototype.hasIframe.mockImplementationOnce(function () { return false; });
        iframeManagerPrototype.addIframe.mockImplementationOnce(function () { return ({
            postMessage: postMessageMock
        }); });
        client = new GoogleMapsIframeClient();
        client.placeDetails(mockApiKey, mockLang);
        var args = postMessageMock.mock.calls[0];
        var requestArgs = args[0];
        expect(requestArgs.method).toEqual(handlersName_1.placeDetailsHandlerName);
    });
    it('should return a rejected promise once the status sent by iframesManager is ERROR', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    iframeManagerPrototype.hasIframe.mockImplementationOnce(function () { return true; });
                    iframeManagerPrototype.getIframe.mockImplementationOnce(function () { return ({
                        postMessage: function (requestObj) {
                            var targetOrigin = '*';
                            var requestId = requestObj.requestId;
                            global.postMessage({ requestId: requestId, results: [], status: 'ERROR' }, targetOrigin);
                        }
                    }); });
                    client = new GoogleMapsIframeClient();
                    return [4 /*yield*/, expect(client.autocomplete(mockApiKey, mockLang, '')).rejects.toBeUndefined()];
                case 1:
                    _a.sent();
                    expect(iframeManagerPrototype.getIframe).toBeCalled();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should return results and trigger addIframe if the iframe does not exist', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    iframeManagerPrototype.hasIframe.mockImplementationOnce(function () { return false; });
                    iframeManagerPrototype.addIframe.mockImplementationOnce(function () { return ({
                        postMessage: function (requestObj) {
                            var targetOrigin = '*';
                            var requestId = requestObj.requestId;
                            global.postMessage({ requestId: requestId, results: [], status: 'OK' }, targetOrigin);
                        }
                    }); });
                    client = new GoogleMapsIframeClient();
                    return [4 /*yield*/, expect(client.autocomplete(mockApiKey, mockLang)).resolves.toEqual([])];
                case 1:
                    _a.sent();
                    expect(iframeManagerPrototype.addIframe).toBeCalled();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should return a rejected promise and trigger addIframe if the iframe does not exist', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    iframeManagerPrototype.hasIframe.mockImplementationOnce(function () { return false; });
                    iframeManagerPrototype.addIframe.mockImplementationOnce(function () { return ({
                        postMessage: function (requestObj) {
                            var targetOrigin = '*';
                            var requestId = requestObj.requestId;
                            global.postMessage({ requestId: requestId, results: [], status: 'ERROR' }, targetOrigin);
                        }
                    }); });
                    client = new GoogleMapsIframeClient();
                    return [4 /*yield*/, expect(client.autocomplete(mockApiKey, mockLang)).rejects.toBeUndefined()];
                case 1:
                    _a.sent();
                    expect(iframeManagerPrototype.addIframe).toBeCalled();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should resolve 2 requests', function () { return __awaiter(_this, void 0, void 0, function () {
        var firstRequest, secondRequest;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    firstRequest = 'first';
                    secondRequest = 'second';
                    iframeManagerPrototype.hasIframe.mockImplementation(function () { return true; });
                    iframeManagerPrototype.getIframe.mockImplementation(function () { return ({
                        postMessage: function (requestObj) {
                            var targetOrigin = '*';
                            var requestId = requestObj.requestId, request = requestObj.request;
                            var timeout = request === firstRequest ? 20 : 10;
                            setTimeout(function () { return global.postMessage({ requestId: requestId, results: [request], status: 'OK' }, targetOrigin); }, timeout);
                        }
                    }); });
                    client = new GoogleMapsIframeClient();
                    return [4 /*yield*/, expect(client.autocomplete(mockApiKey, mockLang, secondRequest)).resolves.toEqual([secondRequest])];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, expect(client.autocomplete(mockApiKey, mockLang, firstRequest)).resolves.toEqual([firstRequest])];
                case 2:
                    _a.sent();
                    iframeManagerPrototype.hasIframe.mockRestore();
                    iframeManagerPrototype.getIframe.mockRestore();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should reject first requests and resolve the second one', function () { return __awaiter(_this, void 0, void 0, function () {
        var firstRequest, secondRequest;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    firstRequest = 'first';
                    secondRequest = 'second';
                    iframeManagerPrototype.hasIframe.mockImplementation(function () { return true; });
                    iframeManagerPrototype.getIframe.mockImplementation(function () { return ({
                        postMessage: function (requestObj) {
                            var targetOrigin = '*';
                            var requestId = requestObj.requestId, request = requestObj.request;
                            var timeout = request === firstRequest ? 20 : 10;
                            var status = request === firstRequest ? 'OK' : 'ERROR';
                            setTimeout(function () { return global.postMessage({ requestId: requestId, results: [request], status: status }, targetOrigin); }, timeout);
                        }
                    }); });
                    client = new GoogleMapsIframeClient();
                    return [4 /*yield*/, expect(client.autocomplete(mockApiKey, mockLang, secondRequest)).rejects.toBeUndefined()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, expect(client.autocomplete(mockApiKey, mockLang, firstRequest)).resolves.toEqual([firstRequest])];
                case 2:
                    _a.sent();
                    iframeManagerPrototype.hasIframe.mockRestore();
                    iframeManagerPrototype.getIframe.mockRestore();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should reject first requests and resolve the second one', function () { return __awaiter(_this, void 0, void 0, function () {
        var firstRequest, secondRequest;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    firstRequest = 'first';
                    secondRequest = 'second';
                    iframeManagerPrototype.hasIframe.mockImplementation(function () { return true; });
                    iframeManagerPrototype.getIframe.mockImplementation(function () { return ({
                        postMessage: function (requestObj) {
                            var targetOrigin = '*';
                            var requestId = requestObj.requestId, request = requestObj.request;
                            var timeout = request === firstRequest ? 20 : 10;
                            var status = request === firstRequest ? 'OK' : 'ERROR';
                            setTimeout(function () { return global.postMessage({ requestId: requestId, results: [request], status: status }, targetOrigin); }, timeout);
                        }
                    }); });
                    client = new GoogleMapsIframeClient();
                    return [4 /*yield*/, expect(client.autocomplete(mockApiKey, mockLang, secondRequest)).rejects.toBeUndefined()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, expect(client.autocomplete(mockApiKey, mockLang, firstRequest)).resolves.toEqual([firstRequest])];
                case 2:
                    _a.sent();
                    iframeManagerPrototype.hasIframe.mockRestore();
                    iframeManagerPrototype.getIframe.mockRestore();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should call postMessage with request & origin parameters', function () {
        var postMessageMock = jest.fn();
        var address = '1 Broadway NYC';
        iframeManagerPrototype.hasIframe.mockImplementationOnce(function () { return true; });
        iframeManagerPrototype.getIframe.mockImplementationOnce(function () { return ({
            postMessage: postMessageMock
        }); });
        client = new GoogleMapsIframeClient();
        client.autocomplete(mockApiKey, mockLang, address);
        var args = postMessageMock.mock.calls[0];
        var requestArg = args[0];
        var targetOrigin = args[1];
        expect(requestArg.requestId).toBeDefined();
        expect(requestArg.request).toBe(address);
        expect(targetOrigin).toBe('*');
    });
});
//# sourceMappingURL=GoogleMapsIframeClient.spec.js.map