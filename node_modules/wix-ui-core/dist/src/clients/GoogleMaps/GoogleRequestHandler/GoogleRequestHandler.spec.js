"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var GoogleRequestHandler_1 = require("./GoogleRequestHandler");
var IframeTestUtils_1 = require("../IframeTestUtils");
var handlerNames = require("../handlersName");
var dummyGoogleMapsMock, mockRequestId, mockAutocompleteResult, eventEmitterMock, googleMock, postMessageMock, initRequestHandler, googleSpy, getPlacePredictionsSpy, geoCodeSpy, getDetailsSpy, mockGetDetailsResult, mockGeocodeResult;
describe('googleRequestHandler', function () { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        beforeEach(function () {
            postMessageMock = jest.fn();
            dummyGoogleMapsMock = IframeTestUtils_1.GoogleMapsMock();
            mockRequestId = 'a';
            mockAutocompleteResult = ['a'];
            mockGetDetailsResult = {
                geometry: {
                    location: {
                        lat: function () { return 53.46102819999999; },
                        lng: function () { return -2.2461541000000125; }
                    }
                },
                icon: 'https://maps.gstatic.com/mapfiles/place_api/icons/shopping-71.png',
                id: '043fda0f408c31b200eaf6e161e4fe3adf51b25c'
            };
            mockGeocodeResult = [{
                    geometry: {
                        location: {
                            lat: function () { return 39.902508; },
                            lng: function () { return -75.28446199999999; }
                        },
                        locationType: 'ROOFTOP',
                        viewport: {
                            northeast: {
                                lat: function () { return 39.9038569802915; },
                                lng: function () { return -75.28311301970849; }
                            },
                            southwest: {
                                lat: function () { return 39.9011590197085; },
                                lng: function () { return -75.2858109802915; }
                            }
                        }
                    },
                    placeId: 'ChIJnYWtvK_DxokRLIqoK6qTKDk'
                }];
            eventEmitterMock = new IframeTestUtils_1.EventEmitterMock();
            googleMock = IframeTestUtils_1.GoogleMapsMock({
                getPlacePredictions: function (request, callback) {
                    callback(mockAutocompleteResult, dummyGoogleMapsMock.maps.GeocoderStatus.OK);
                }
            }, {
                geocode: function (request, callback) {
                    callback(mockGeocodeResult, dummyGoogleMapsMock.maps.GeocoderStatus.OK);
                }
            }, {
                getDetails: function (request, callback) {
                    callback(mockGetDetailsResult, dummyGoogleMapsMock.maps.GeocoderStatus.OK);
                }
            });
            geoCodeSpy = jest.fn();
            getDetailsSpy = jest.fn();
            getPlacePredictionsSpy = jest.fn();
            googleSpy = IframeTestUtils_1.GoogleMapsMock({
                getPlacePredictions: getPlacePredictionsSpy
            }, {
                geocode: geoCodeSpy
            }, {
                getDetails: getDetailsSpy
            });
            initRequestHandler = GoogleRequestHandler_1.googleRequestHandler(eventEmitterMock, handlerNames);
        });
        it('should call google getPlacePredictions', function () {
            initRequestHandler(googleSpy);
            eventEmitterMock.triggerMessage({
                data: {
                    method: handlerNames.autocompleteHandlerName,
                    requestId: mockRequestId
                },
                source: {
                    postMessage: postMessageMock
                }
            });
            expect(getPlacePredictionsSpy).toBeCalled();
        });
        it('should call google geocode', function () {
            initRequestHandler(googleSpy);
            eventEmitterMock.triggerMessage({
                data: {
                    method: handlerNames.geocodeHandlerName,
                    requestId: mockRequestId
                },
                source: {
                    postMessage: postMessageMock
                }
            });
            expect(geoCodeSpy).toBeCalled();
        });
        it('should call google getDetails', function () {
            initRequestHandler(googleSpy);
            eventEmitterMock.triggerMessage({
                data: {
                    method: handlerNames.placeDetailsHandlerName,
                    requestId: mockRequestId
                },
                source: {
                    postMessage: postMessageMock
                }
            });
            expect(getDetailsSpy).toBeCalled();
        });
        it('should return google response to our request once google has been initialized', function () {
            initRequestHandler(googleMock);
            eventEmitterMock.triggerMessage({
                data: {
                    method: handlerNames.autocompleteHandlerName,
                    requestId: mockRequestId
                },
                source: {
                    postMessage: postMessageMock
                }
            });
            expect(postMessageMock).toHaveBeenCalledWith({
                results: mockAutocompleteResult,
                status: dummyGoogleMapsMock.maps.GeocoderStatus.OK,
                requestId: mockRequestId
            }, '*');
        });
        it('should return google response to our getPlacesPredictions request when the request is posted before google initialization', function () {
            eventEmitterMock.triggerMessage({
                data: {
                    method: handlerNames.autocompleteHandlerName,
                    requestId: mockRequestId
                },
                source: {
                    postMessage: postMessageMock
                }
            });
            initRequestHandler(googleMock);
            expect(postMessageMock).toHaveBeenCalledWith({
                results: mockAutocompleteResult,
                status: dummyGoogleMapsMock.maps.GeocoderStatus.OK,
                requestId: mockRequestId
            }, '*');
        });
        it('should return google response to our geocode request when the request is posted before google initialization', function () {
            eventEmitterMock.triggerMessage({
                data: {
                    method: handlerNames.geocodeHandlerName,
                    requestId: mockRequestId
                },
                source: {
                    postMessage: postMessageMock
                }
            });
            initRequestHandler(googleMock);
            expect(postMessageMock).toHaveBeenCalledWith({ results: mockGeocodeResult, status: dummyGoogleMapsMock.maps.GeocoderStatus.OK, requestId: mockRequestId }, '*');
        });
        it('should return google response to our getDetails request when the request is posted before google initialization', function () {
            eventEmitterMock.triggerMessage({
                data: {
                    method: handlerNames.placeDetailsHandlerName,
                    requestId: mockRequestId
                },
                source: {
                    postMessage: postMessageMock
                }
            });
            initRequestHandler(googleMock);
            expect(postMessageMock).toHaveBeenCalledWith({ results: mockGetDetailsResult, status: dummyGoogleMapsMock.maps.GeocoderStatus.OK, requestId: mockRequestId }, '*');
        });
        it('should return google response to our requests when the request is posted before google initialization and there is more than 1 request', function () {
            var secondMockRequestId = mockRequestId + mockRequestId;
            eventEmitterMock.triggerMessage({
                data: {
                    method: handlerNames.autocompleteHandlerName,
                    requestId: mockRequestId
                },
                source: {
                    postMessage: postMessageMock
                }
            });
            eventEmitterMock.triggerMessage({
                data: {
                    method: handlerNames.autocompleteHandlerName,
                    requestId: secondMockRequestId
                },
                source: {
                    postMessage: postMessageMock
                }
            });
            initRequestHandler(googleMock);
            expect(postMessageMock).toHaveBeenCalledTimes(2);
            expect(postMessageMock).toHaveBeenCalledWith({
                results: mockAutocompleteResult,
                status: dummyGoogleMapsMock.maps.GeocoderStatus.OK,
                requestId: mockRequestId
            }, '*');
            expect(postMessageMock).toHaveBeenCalledWith({
                results: mockAutocompleteResult,
                status: dummyGoogleMapsMock.maps.GeocoderStatus.OK,
                requestId: secondMockRequestId
            }, '*');
        });
        it('should return google response to our diffrent requests when posted before google initialization', function () {
            var secondMockRequestId = mockRequestId + mockRequestId;
            eventEmitterMock.triggerMessage({
                data: {
                    method: handlerNames.autocompleteHandlerName,
                    requestId: mockRequestId
                },
                source: {
                    postMessage: postMessageMock
                }
            });
            eventEmitterMock.triggerMessage({
                data: {
                    method: handlerNames.placeDetailsHandlerName,
                    requestId: secondMockRequestId
                },
                source: {
                    postMessage: postMessageMock
                }
            });
            initRequestHandler(googleMock);
            expect(postMessageMock).toHaveBeenCalledTimes(2);
            expect(postMessageMock).toHaveBeenCalledWith({
                results: mockAutocompleteResult,
                status: dummyGoogleMapsMock.maps.GeocoderStatus.OK,
                requestId: mockRequestId
            }, '*');
            expect(postMessageMock).toHaveBeenCalledWith({
                results: mockGetDetailsResult,
                status: dummyGoogleMapsMock.maps.GeocoderStatus.OK,
                requestId: secondMockRequestId
            }, '*');
        });
        it('should return google response for our requests when one is called before initialization and the other after', function () {
            eventEmitterMock.triggerMessage({
                data: {
                    method: handlerNames.autocompleteHandlerName,
                    requestId: mockRequestId
                },
                source: {
                    postMessage: postMessageMock
                }
            });
            initRequestHandler(googleMock);
            expect(postMessageMock).toHaveBeenCalledTimes(1);
            expect(postMessageMock).toHaveBeenCalledWith({
                results: mockAutocompleteResult,
                status: dummyGoogleMapsMock.maps.GeocoderStatus.OK,
                requestId: mockRequestId
            }, '*');
            var secondMockRequestId = mockRequestId + mockRequestId;
            eventEmitterMock.triggerMessage({
                data: {
                    method: handlerNames.autocompleteHandlerName,
                    requestId: secondMockRequestId
                },
                source: {
                    postMessage: postMessageMock
                }
            });
            expect(postMessageMock).toHaveBeenCalledTimes(2);
            expect(postMessageMock).toHaveBeenCalledWith({
                results: mockAutocompleteResult,
                status: dummyGoogleMapsMock.maps.GeocoderStatus.OK,
                requestId: secondMockRequestId
            }, '*');
        });
        it('should wrap request with an object if needed', function () {
            var input = 'input';
            initRequestHandler(googleSpy);
            eventEmitterMock.triggerMessage({
                data: {
                    method: handlerNames.autocompleteHandlerName,
                    requestId: mockRequestId,
                    request: input
                },
                source: {
                    postMessage: postMessageMock
                }
            });
            expect(getPlacePredictionsSpy.mock.calls[0][0]).toEqual({ input: input });
        });
        it('should not wrap request if it is already wrapped', function () {
            var input = 'input';
            initRequestHandler(googleSpy);
            eventEmitterMock.triggerMessage({
                data: {
                    method: handlerNames.autocompleteHandlerName,
                    requestId: mockRequestId,
                    request: { input: input }
                },
                source: {
                    postMessage: postMessageMock
                }
            });
            expect(getPlacePredictionsSpy.mock.calls[0][0]).toEqual({ input: input });
        });
        it('should return a serializable response for geocode', function () {
            initRequestHandler(googleMock);
            eventEmitterMock.triggerMessage({
                data: {
                    method: handlerNames.geocodeHandlerName,
                    requestId: mockRequestId
                },
                source: {
                    postMessage: postMessageMock
                }
            });
            var args = postMessageMock.mock.calls[0][0];
            var serializedArgs = JSON.parse(JSON.stringify(args));
            expect(serializedArgs).toEqual(args);
        });
        it('should return a serializable response for placeDetails', function () {
            initRequestHandler(googleMock);
            eventEmitterMock.triggerMessage({
                data: {
                    method: handlerNames.placeDetailsHandlerName,
                    requestId: mockRequestId
                },
                source: {
                    postMessage: postMessageMock
                }
            });
            var args = postMessageMock.mock.calls[0][0];
            var serializedArgs = JSON.parse(JSON.stringify(args));
            expect(serializedArgs).toEqual(args);
        });
        return [2 /*return*/];
    });
}); });
//# sourceMappingURL=GoogleRequestHandler.spec.js.map