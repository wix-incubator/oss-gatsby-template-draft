"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var LANGUAGE_PARAM_NAME = 'language';
var API_KEY_PARAM_NAME = 'key';
exports.getIframes = function () { return document.querySelectorAll('iframe'); };
exports.getIframeWithLangAndApiKey = function (lang, apiKey) {
    return document.querySelector("iframe[data-lang=" + lang + "][data-api-key=" + apiKey + "]");
};
exports.isIframeVisible = function (iframe) { return iframe.style.display !== 'none'; };
exports.triggerIframeInitAutocomplete = function (mockedGoogleInstance, lang, apiKey) {
    var iframe = exports.getIframeWithLangAndApiKey(lang, apiKey);
    var iframeWindow = iframe.contentWindow;
    iframeWindow.initAutocomplete(mockedGoogleInstance);
};
exports.GoogleMapsMock = function (autocompleteInstance, geocoderInstance, placesServiceInstance) {
    return {
        maps: {
            Map: function () {
                return {};
            },
            places: {
                AutocompleteService: function () { return autocompleteInstance; },
                PlacesService: function () { return placesServiceInstance; },
                PlacesServiceStatus: {
                    OK: 'OK',
                    ZERO_RESULTS: 'ZERO_RESULTS'
                },
                AutocompleteServiceStatus: {
                    OK: 'OK',
                    ERROR: 'ERROR',
                    ZERO_RESULTS: 'ZERO_RESULTS'
                }
            },
            Geocoder: function () { return geocoderInstance; },
            GeocoderStatus: {
                OK: 'OK',
                ZERO_RESULTS: 'ZERO_RESULTS'
            }
        }
    };
};
var EventEmitterMock = /** @class */ (function () {
    function EventEmitterMock() {
        this.eventListeners = [];
    }
    EventEmitterMock.prototype.addEventListener = function (eventName, callback) {
        this.eventListeners.push(callback);
    };
    EventEmitterMock.prototype.triggerMessage = function (event) {
        this.eventListeners.forEach(function (callback) { return callback(event); });
    };
    return EventEmitterMock;
}());
exports.EventEmitterMock = EventEmitterMock;
function IframesManagerMock() {
    return;
}
exports.IframesManagerMock = IframesManagerMock;
IframesManagerMock.prototype = {
    addIframe: jest.fn(),
    getIframe: jest.fn(),
    hasIframe: jest.fn(),
    removeAllIframes: jest.fn(),
};
//# sourceMappingURL=IframeTestUtils.js.map