"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var IframesManager_1 = require("./IframesManager");
var IframeTestUtils_1 = require("../IframeTestUtils");
var iframesManager;
var IframeManagerWithHTTPStub = /** @class */ (function (_super) {
    __extends(IframeManagerWithHTTPStub, _super);
    function IframeManagerWithHTTPStub() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // Override the method that injects scripts into the iframe, because we
    // don't want to fetch HTTP resources over the network in the tests.
    IframeManagerWithHTTPStub.prototype.populateIframe = function () {
        return;
    };
    return IframeManagerWithHTTPStub;
}(IframesManager_1.IframesManager));
describe('IframesManager', function () {
    beforeEach(function () {
        iframesManager = new IframeManagerWithHTTPStub();
    });
    afterEach(function () {
        iframesManager.removeAllIframes();
    });
    it('should add invisible iframe to the DOM when trying to add an iframe with same key', function () {
        var apiKey = 'a';
        var lang = 'en';
        iframesManager.addIframe(apiKey, lang);
        iframesManager.addIframe(apiKey, lang);
        var iframe = IframeTestUtils_1.getIframeWithLangAndApiKey(lang, apiKey);
        expect(IframeTestUtils_1.getIframes().length).toEqual(1);
        expect(iframe).toBeDefined();
        expect(IframeTestUtils_1.isIframeVisible(iframe)).toEqual(false);
    });
    it('should return an postMessageable object when calling adding of getting iframe', function () {
        var apiKey = 'a';
        var lang = 'en';
        var eventEmitter = iframesManager.addIframe(apiKey, lang);
        expect(eventEmitter.postMessage).toBeDefined();
        eventEmitter = iframesManager.getIframe(apiKey, lang);
        expect(eventEmitter.postMessage).toBeDefined();
    });
    it('should create 2 iframes on the dom as 2 requests are using 2 different apiKeys', function () {
        var firstApiKey = 'a';
        var secondApiKey = 'b';
        var lang = 'en';
        iframesManager.addIframe(firstApiKey, lang);
        iframesManager.addIframe(secondApiKey, lang);
        expect(IframeTestUtils_1.getIframes().length).toEqual(2);
        expect(IframeTestUtils_1.getIframeWithLangAndApiKey(lang, firstApiKey)).toBeDefined();
        expect(IframeTestUtils_1.getIframeWithLangAndApiKey(lang, secondApiKey)).toBeDefined();
    });
    it('should create 2 iframes on the dom as 2 requests are using 2 different langs', function () {
        var apiKey = 'a';
        var firstLang = 'en';
        var secondLang = 'fr';
        iframesManager.addIframe(apiKey, firstLang);
        iframesManager.addIframe(apiKey, secondLang);
        expect(IframeTestUtils_1.getIframes().length).toEqual(2);
        expect(IframeTestUtils_1.getIframeWithLangAndApiKey(firstLang, apiKey)).toBeDefined();
        expect(IframeTestUtils_1.getIframeWithLangAndApiKey(secondLang, apiKey)).toBeDefined();
    });
    it('should create 2 iframes on the DOM as 2 requests are using 2 different langs & apiKeys', function () {
        var firstApiKey = 'a';
        var secondApiKey = 'b';
        var firstLang = 'en';
        var secondLang = 'fr';
        iframesManager.addIframe(firstApiKey, firstLang);
        iframesManager.addIframe(secondApiKey, secondLang);
        expect(IframeTestUtils_1.getIframes().length).toEqual(2);
        expect(IframeTestUtils_1.getIframeWithLangAndApiKey(firstLang, firstApiKey)).toBeDefined();
        expect(IframeTestUtils_1.getIframeWithLangAndApiKey(secondLang, secondApiKey)).toBeDefined();
    });
});
//# sourceMappingURL=IframesManager.spec.js.map