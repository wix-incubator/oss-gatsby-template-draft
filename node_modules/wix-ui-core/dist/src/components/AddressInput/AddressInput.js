"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var AddressInput_st_css_1 = require("./AddressInput.st.css");
var prop_types_1 = require("prop-types");
var InputWithOptions_1 = require("../../baseComponents/InputWithOptions/InputWithOptions");
var DropdownOption_1 = require("../../baseComponents/DropdownOption");
var types_1 = require("../../clients/GoogleMaps/types");
exports.Handler = types_1.Handler;
var google2address_1 = require("../../clients/GoogleMaps/google2address/google2address");
var first = require('lodash/first');
var map = require('lodash/map');
var filter = require('lodash/filter');
var intersection = require('lodash/intersection');
var throttle = require('lodash/throttle');
var isArray = require('lodash/isArray');
function filterAddressesByType(addresses, filterTypes) {
    return (filterTypes && filterTypes.length > 0) ? filter(addresses, function (address) { return intersection(address.types, filterTypes).length > 0; }) : addresses;
}
function formatAddressOutput(google, description, rawInputValue) {
    google2address_1.trySetStreetNumberIfNotReceived(google, rawInputValue);
    return {
        originValue: description,
        googleResult: google,
        address: google2address_1.google2address(google)
    };
}
function createAutocompleteRequest(input, props) {
    var countryCode = props.countryCode, types = props.types;
    var result = { input: input };
    if (typeof countryCode === 'string') {
        result.componentRestrictions = { country: countryCode.toLowerCase() };
    }
    if (types) {
        result.types = types;
    }
    return result;
}
/**
 * AddressInput
 */
var AddressInput = /** @class */ (function (_super) {
    __extends(AddressInput, _super);
    function AddressInput(props) {
        var _this = _super.call(this, props) || this;
        _this.unmounted = false;
        _this.addressRequestId = 0;
        _this.geocodeRequestId = 0;
        _this.placeDetailsRequestId = 0;
        _this._getAddressOptions = props.throttleInterval === 0 ? _this._getAddressOptions.bind(_this) : throttle(_this._getAddressOptions, props.throttleInterval);
        _this._handleOnChange = _this._handleOnChange.bind(_this);
        _this._handleOnManualInput = _this._handleOnManualInput.bind(_this);
        _this._onSelect = _this._onSelect.bind(_this);
        _this._handleOnBlur = _this._handleOnBlur.bind(_this);
        _this._renderOption = _this._renderOption.bind(_this);
        _this._createOptionFromAddress = _this._createOptionFromAddress.bind(_this);
        _this.currentAddressRequest = Promise.resolve();
        _this.state = { options: [], inputValue: props.value || '' };
        return _this;
    }
    AddressInput.prototype.componentDidMount = function () {
        this.client = new this.props.Client();
    };
    AddressInput.prototype.componentWillUnmount = function () {
        this.unmounted = true;
    };
    AddressInput.prototype.componentWillReceiveProps = function (nextProps) {
        if (nextProps.value !== this.props.value) {
            this.setState({ inputValue: nextProps.value });
        }
    };
    AddressInput.prototype.focus = function () {
        this.inputRef.focus();
    };
    AddressInput.prototype.blur = function () {
        this.inputRef.blur();
    };
    AddressInput.prototype._getAddressOptions = function (input) {
        return __awaiter(this, void 0, void 0, function () {
            var requestId, resolveCurrentAddressRequest, _a, apiKey, lang, filterTypes, locationIcon, results, filteredResults, options;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        requestId = ++this.addressRequestId;
                        this.currentAddressRequest = new Promise(function (resolve) { return resolveCurrentAddressRequest = resolve; });
                        _a = this.props, apiKey = _a.apiKey, lang = _a.lang, filterTypes = _a.filterTypes, locationIcon = _a.locationIcon;
                        return [4 /*yield*/, this.client.autocomplete(apiKey, lang, createAutocompleteRequest(input, this.props))];
                    case 1:
                        results = _b.sent();
                        filteredResults = filterAddressesByType(results, filterTypes);
                        options = map(filteredResults, this._createOptionFromAddress);
                        if (!this.unmounted && requestId === this.addressRequestId) {
                            this.setState({ options: options }, resolveCurrentAddressRequest);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    AddressInput.prototype._getGeocode = function (placeId, description, rawInputValue) {
        return __awaiter(this, void 0, void 0, function () {
            var requestId, _a, apiKey, lang, region, request, geocode;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        requestId = ++this.geocodeRequestId;
                        _a = this.props, apiKey = _a.apiKey, lang = _a.lang, region = _a.countryCode;
                        request = placeId ? { placeId: placeId, region: region } : { address: rawInputValue };
                        return [4 /*yield*/, this.client.geocode(apiKey, lang, request)];
                    case 1:
                        geocode = _b.sent();
                        if (requestId === this.geocodeRequestId) {
                            this.props.onSelect(formatAddressOutput(first(geocode), description, rawInputValue));
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    AddressInput.prototype._getPlaceDetails = function (placeId, description, rawInputValue) {
        return __awaiter(this, void 0, void 0, function () {
            var requestId, _a, apiKey, lang, placeDetails;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        requestId = ++this.placeDetailsRequestId;
                        _a = this.props, apiKey = _a.apiKey, lang = _a.lang;
                        return [4 /*yield*/, this.client.placeDetails(apiKey, lang, { placeId: placeId })];
                    case 1:
                        placeDetails = _b.sent();
                        if (requestId === this.placeDetailsRequestId) {
                            this.props.onSelect(formatAddressOutput(placeDetails, description, rawInputValue));
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    AddressInput.prototype._onSelect = function (option) {
        var handler = this.props.handler;
        var inputValue = this.state.inputValue;
        if (!option && !inputValue) {
            this.props.onSelect(null);
        }
        else if (!option) {
            this._getGeocode(null, null, inputValue);
        }
        else if (handler === types_1.Handler.geocode && option) {
            this._getGeocode(option.id, option.value, inputValue);
        }
        else if (handler === types_1.Handler.places) {
            this._getPlaceDetails(option.id, option.value, inputValue);
        }
    };
    AddressInput.prototype._handleOnChange = function (e) {
        var onChange = this.props.onChange;
        var value = e.target.value;
        onChange && onChange(e);
        this.setState({ inputValue: value });
        if (value) {
            this._getAddressOptions(value);
        }
        else {
            this.setState({ options: [] });
        }
    };
    AddressInput.prototype._handleOnManualInput = function (value) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, onManualInput, fallbackToManual;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.props, onManualInput = _a.onManualInput, fallbackToManual = _a.fallbackToManual;
                        onManualInput && onManualInput(value);
                        return [4 /*yield*/, this.currentAddressRequest];
                    case 1:
                        _b.sent();
                        if (fallbackToManual && this.state.options.length === 0) {
                            this._onSelect(null);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    AddressInput.prototype._handleOnBlur = function () {
        var _a = this.props, onBlur = _a.onBlur, clearSuggestionsOnBlur = _a.clearSuggestionsOnBlur;
        onBlur && onBlur();
        if (clearSuggestionsOnBlur) {
            this.setState({ options: [] });
        }
    };
    AddressInput.prototype._renderOption = function (val) {
        var locationIcon = this.props.locationIcon;
        return (React.createElement("div", { className: AddressInput_st_css_1.default.option },
            locationIcon && React.createElement("div", { className: AddressInput_st_css_1.default.iconWrapper, "data-hook": "location-icon-wrapper" }, locationIcon),
            React.createElement("div", { className: AddressInput_st_css_1.default.optionContent }, val)));
    };
    AddressInput.prototype._createOptionFromAddress = function (address) {
        return DropdownOption_1.OptionFactory.create({
            id: address.place_id,
            value: address.description,
            render: this._renderOption
        });
    };
    AddressInput.prototype._options = function () {
        var _a = this.props, forceOptions = _a.forceOptions, locationIcon = _a.locationIcon;
        if (isArray(forceOptions) && forceOptions.length > 0) {
            return map(forceOptions, this._createOptionFromAddress);
        }
        else {
            return this.state.options;
        }
    };
    AddressInput.prototype.render = function () {
        var _this = this;
        var _a = this.props, placeholder = _a.placeholder, onKeyDown = _a.onKeyDown, onFocus = _a.onFocus, forceContentElementVisibility = _a.forceContentElementVisibility, readOnly = _a.readOnly, disabled = _a.disabled, inlineStyles = _a.style, suffix = _a.suffix, fixedFooter = _a.fixedFooter, id = _a.id;
        var options = this._options();
        var inputProps = {
            onChange: this._handleOnChange,
            onKeyDown: onKeyDown,
            onFocus: onFocus,
            onBlur: this._handleOnBlur,
            placeholder: placeholder,
            readOnly: readOnly,
            disabled: disabled,
            value: this.state.inputValue,
            suffix: suffix,
            ref: function (ref) { return _this.inputRef = ref; }
        };
        var states = {};
        var hasOptions = options.length > 0;
        var timeout = hasOptions ? 150 : 0;
        return (React.createElement(InputWithOptions_1.InputWithOptions, __assign({}, AddressInput_st_css_1.default('root', states, this.props), { onSelect: this._onSelect, options: options, inputProps: inputProps, onManualInput: this._handleOnManualInput, timeout: timeout, forceContentElementVisibility: forceContentElementVisibility, style: inlineStyles, fixedFooter: hasOptions && fixedFooter, id: id })));
    };
    AddressInput.displayName = 'AddressInput';
    AddressInput.propTypes = {
        /** Maps client, should implement autocomplete, geocode and placeDetails methods */
        Client: prop_types_1.func.isRequired,
        /** Handler for when an option is selected */
        onSelect: prop_types_1.func.isRequired,
        /** Maps API key */
        apiKey: prop_types_1.string.isRequired,
        /** Maps language */
        lang: prop_types_1.string.isRequired,
        /** Address handler - geocode or places */
        handler: prop_types_1.oneOf([types_1.Handler.geocode, types_1.Handler.places]),
        /** Limit addresses to certain country */
        countryCode: prop_types_1.string,
        /** Placeholder to display */
        placeholder: prop_types_1.string,
        /** Sets the input to disabled */
        disabled: prop_types_1.bool,
        /** Sets the input to readOnly */
        readOnly: prop_types_1.bool,
        /** Standard input onChange callback */
        onChange: prop_types_1.func,
        /** Standard input onKeyDown callback */
        onKeyDown: prop_types_1.func,
        /** Standard input onFocus callback */
        onFocus: prop_types_1.func,
        /** Standard input onBlur callback */
        onBlur: prop_types_1.func,
        /** Remove previously fetched addresses upon blur */
        clearSuggestionsOnBlur: prop_types_1.bool,
        /** Callback when the user pressed the Enter key or Tab key after he wrote in the Input field - meaning the user selected something not in the list  */
        onManualInput: prop_types_1.func,
        /** Lower level filtering of autocomplete result types (see [here](https://developers.google.com/places/supported_types) for list)  */
        filterTypes: prop_types_1.arrayOf(prop_types_1.string),
        /** Limit the autocomplete to specific types (see [here](https://developers.google.com/places/supported_types#table3) for list) */
        types: prop_types_1.arrayOf(prop_types_1.string),
        /** Inputs value */
        value: prop_types_1.string,
        /** If set to `true`, we will attempt to get a Google location from the input's text if there are no suggestions. This is useful when looking for locations for which google does not give suggestions - for example: Apartment/Apt  */
        fallbackToManual: prop_types_1.bool,
        /** If set to true, content element will always be visible, used for preview mode */
        forceContentElementVisibility: prop_types_1.bool,
        /** Options to override default one, used for preview mode */
        forceOptions: prop_types_1.array,
        /** Options to override default throttle value (ms), 0 used to disable throttle. Default value is 150 */
        throttleInterval: prop_types_1.number,
        /** Node to be rendered in front of each suggestion */
        locationIcon: prop_types_1.node,
        /** Inline styles */
        style: prop_types_1.object,
        /** Suffix for input */
        suffix: prop_types_1.node,
        /** Fixed footer in content element */
        fixedFooter: prop_types_1.node,
        /** Id */
        id: prop_types_1.string
    };
    AddressInput.defaultProps = {
        handler: types_1.Handler.geocode,
        throttleInterval: 150
    };
    return AddressInput;
}(React.PureComponent));
exports.AddressInput = AddressInput;
//# sourceMappingURL=AddressInput.js.map