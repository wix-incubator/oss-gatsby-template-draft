"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function createAddress(description, types) {
    if (types === void 0) { types = []; }
    return {
        description: description,
        place_id: "place_id" + description.toLowerCase().replace(/ /g, ''),
        types: types
    };
}
exports.createAddress = createAddress;
function createGeocode(placeId, formattedAddress) {
    return {
        address_components: [],
        formatted_address: formattedAddress,
        geometry: {
            location: {
                lat: 40.7127753,
                lng: -74.0059728
            }
        },
        place_id: placeId,
        types: []
    };
}
exports.createGeocode = createGeocode;
function createPlaceDetails(placeId, formattedAddress) {
    return {
        address_components: [],
        adr_address: 'adr_address',
        formatted_address: formattedAddress,
        geometry: {
            location: {
                lat: 1.0,
                lng: -1.0
            }
        },
        html_attributions: 'html_attributions',
        icon: 'icon',
        id: 'id',
        name: 'name',
        photos: 'photos',
        place_id: placeId,
        reference: 'reference',
        types: [],
        url: 'url',
        utc_offset: 'utc_offset',
        scope: 'scope'
    };
}
exports.createPlaceDetails = createPlaceDetails;
var GoogleMapsClientStub = /** @class */ (function () {
    function GoogleMapsClientStub() {
    }
    GoogleMapsClientStub.prototype.autocomplete = function (apiKey, lang, request) {
        var addresses = GoogleMapsClientStub.addresses;
        var delay = GoogleMapsClientStub.addressesDelay;
        if (GoogleMapsClientStub.addressesPromise) {
            var promise = GoogleMapsClientStub.addressesPromise;
            GoogleMapsClientStub.addressesPromise = null;
            return promise.then(function () { return addresses; });
        }
        return new Promise(function (resolve, reject) { return setTimeout(function () { return resolve(addresses); }, delay); });
    };
    GoogleMapsClientStub.prototype.geocode = function (apiKey, lang, request) {
        var geocode = GoogleMapsClientStub.geocode;
        var delay = GoogleMapsClientStub.geocodeDelay;
        if (GoogleMapsClientStub.geocodePromise) {
            var promise = GoogleMapsClientStub.geocodePromise;
            GoogleMapsClientStub.geocodePromise = null;
            return promise.then(function () { return geocode; });
        }
        return new Promise(function (resolve, reject) { return setTimeout(function () { return resolve(geocode); }, delay); });
    };
    GoogleMapsClientStub.prototype.placeDetails = function (apiKey, lang, request) {
        var placeDetails = GoogleMapsClientStub.placeDetails;
        var delay = GoogleMapsClientStub.placeDetailsDelay;
        if (GoogleMapsClientStub.placeDetailsPromise) {
            var promise = GoogleMapsClientStub.placeDetailsPromise;
            GoogleMapsClientStub.placeDetailsPromise = null;
            return promise.then(function () { return placeDetails; });
        }
        return new Promise(function (resolve, reject) { return setTimeout(function () { return resolve(placeDetails); }, delay); });
    };
    GoogleMapsClientStub.setAddresses = function (addresses, addressesDelay) {
        if (addressesDelay === void 0) { addressesDelay = 0; }
        GoogleMapsClientStub.addresses = addresses;
        GoogleMapsClientStub.addressesDelay = addressesDelay;
    };
    GoogleMapsClientStub.setAddressesPromise = function (addresses) {
        var resolve = null, reject = null;
        GoogleMapsClientStub.setAddresses(addresses);
        GoogleMapsClientStub.addressesPromise = new Promise(function (res, rej) {
            resolve = res;
            reject = rej;
        });
        return { resolve: resolve, reject: reject };
    };
    GoogleMapsClientStub.setGeocode = function (geocode, geocodeDelay) {
        if (geocodeDelay === void 0) { geocodeDelay = 0; }
        GoogleMapsClientStub.geocode = [geocode];
        GoogleMapsClientStub.geocodeDelay = geocodeDelay;
    };
    GoogleMapsClientStub.setGeocodePromise = function (geocode) {
        var resolve = null, reject = null;
        GoogleMapsClientStub.setGeocode(geocode);
        GoogleMapsClientStub.geocodePromise = new Promise(function (res, rej) {
            resolve = res;
            reject = rej;
        });
        return { resolve: resolve, reject: reject };
    };
    GoogleMapsClientStub.setPlaceDetails = function (placeDetails, placeDetailsDelay) {
        if (placeDetailsDelay === void 0) { placeDetailsDelay = 0; }
        GoogleMapsClientStub.placeDetails = placeDetails;
        GoogleMapsClientStub.placeDetailsDelay = placeDetailsDelay;
    };
    GoogleMapsClientStub.setPlaceDetailsPromise = function (placeDetails) {
        var resolve = null, reject = null;
        GoogleMapsClientStub.setPlaceDetails(placeDetails);
        GoogleMapsClientStub.placeDetailsPromise = new Promise(function (res, rej) {
            resolve = res;
            reject = rej;
        });
        return { resolve: resolve, reject: reject };
    };
    GoogleMapsClientStub.reset = function () {
        GoogleMapsClientStub.addresses = [];
        GoogleMapsClientStub.addressesDelay = 0;
        GoogleMapsClientStub.geocode = null;
        GoogleMapsClientStub.geocodeDelay = 0;
        GoogleMapsClientStub.placeDetails = null;
        GoogleMapsClientStub.placeDetailsDelay = 0;
    };
    GoogleMapsClientStub.addresses = [];
    GoogleMapsClientStub.geocode = [];
    GoogleMapsClientStub.placeDetails = null;
    return GoogleMapsClientStub;
}());
exports.GoogleMapsClientStub = GoogleMapsClientStub;
//# sourceMappingURL=GoogleMapsClientStub.js.map