"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Autocomplete_st_css_1 = require("./Autocomplete.st.css");
var InputWithOptions_1 = require("../../baseComponents/InputWithOptions");
var OptionFactory_1 = require("../../baseComponents/DropdownOption/OptionFactory");
var prop_types_1 = require("prop-types");
var createDivider = function (value) {
    if (value === void 0) { value = null; }
    return OptionFactory_1.OptionFactory.createDivider({ className: Autocomplete_st_css_1.default.divider, value: value });
};
var Autocomplete = /** @class */ (function (_super) {
    __extends(Autocomplete, _super);
    function Autocomplete(props) {
        var _this = _super.call(this, props) || this;
        _this.state = { inputValue: '' };
        _this._onSelect = _this._onSelect.bind(_this);
        _this._onInputChange = _this._onInputChange.bind(_this);
        _this._onInitialSelectedOptionsSet = _this._onInitialSelectedOptionsSet.bind(_this);
        return _this;
    }
    Autocomplete.prototype._onInputChange = function (event) {
        if (this.state.inputValue !== event.target.value) {
            this.setState({
                inputValue: event.target.value
            });
            var onChange = this.props.onChange;
            onChange && onChange(event);
        }
    };
    Autocomplete.prototype._onSelect = function (option) {
        if (this.state.inputValue !== option.value) {
            this.setState({
                inputValue: option.value
            });
            var onSelect = this.props.onSelect;
            onSelect && onSelect(option);
        }
    };
    Autocomplete.prototype._createInputProps = function () {
        var inputValue = this.state.inputValue;
        var _a = this.props, autoFocus = _a.autoFocus, disabled = _a.disabled, onBlur = _a.onBlur, onFocus = _a.onFocus, placeholder = _a.placeholder, error = _a.error, prefix = _a.prefix, suffix = _a.suffix;
        return {
            value: inputValue,
            onChange: this._onInputChange,
            autoFocus: autoFocus,
            disabled: disabled,
            onBlur: onBlur,
            onFocus: onFocus,
            placeholder: placeholder,
            error: error,
            suffix: suffix,
            prefix: prefix
        };
    };
    Autocomplete.prototype._onInitialSelectedOptionsSet = function (options) {
        var selectedValue = options.length ? options[0].value : '';
        if (selectedValue && this.state.inputValue !== selectedValue) {
            this.setState({
                inputValue: selectedValue
            });
        }
    };
    Autocomplete.prototype.render = function () {
        var _a = this.props, options = _a.options, initialSelectedId = _a.initialSelectedId, fixedHeader = _a.fixedHeader, fixedFooter = _a.fixedFooter, onManualInput = _a.onManualInput, disabled = _a.disabled;
        var inputProps = this._createInputProps();
        return (React.createElement(InputWithOptions_1.InputWithOptions, __assign({}, Autocomplete_st_css_1.default('root', { disabled: disabled }, this.props), { onSelect: this._onSelect, initialSelectedIds: initialSelectedId || initialSelectedId === 0 ? [initialSelectedId] : null, onInitialSelectedOptionsSet: this._onInitialSelectedOptionsSet, fixedHeader: fixedHeader, fixedFooter: fixedFooter, onManualInput: onManualInput, options: options, inputProps: inputProps })));
    };
    Autocomplete.displayName = 'Autocomplete';
    Autocomplete.propTypes = {
        /** The dropdown options array */
        options: prop_types_1.arrayOf(OptionFactory_1.optionPropType).isRequired,
        /** Handler for when an option is selected */
        onSelect: prop_types_1.func,
        /** initial selected option id */
        initialSelectedId: prop_types_1.oneOfType([prop_types_1.number, prop_types_1.string]),
        /** An element that always appears at the top of the options */
        fixedHeader: prop_types_1.node,
        /** An element that always appears at the bottom of the options */
        fixedFooter: prop_types_1.node,
        /** Callback when the user pressed the Enter key or Tab key after he wrote in the Input field - meaning the user selected something not in the list  */
        onManualInput: prop_types_1.func,
        /** Standard React Input autoFocus (focus the element on mount) */
        autoFocus: prop_types_1.bool,
        /** Makes the component disabled */
        disabled: prop_types_1.bool,
        /** Standard input onBlur callback */
        onBlur: prop_types_1.func,
        /** Standard input onChange callback */
        onChange: prop_types_1.func,
        /** Standard input onFocus callback */
        onFocus: prop_types_1.func,
        /** Placeholder to display */
        placeholder: prop_types_1.string,
        /** Is in error state / error message */
        error: prop_types_1.oneOfType([prop_types_1.string, prop_types_1.bool]),
        /** Prefix */
        prefix: prop_types_1.node,
        /** Suffix */
        suffix: prop_types_1.node,
    };
    Autocomplete.createOption = OptionFactory_1.OptionFactory.create;
    Autocomplete.createDivider = createDivider;
    return Autocomplete;
}(React.PureComponent));
exports.Autocomplete = Autocomplete;
//# sourceMappingURL=Autocomplete.js.map