"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var dom_test_container_1 = require("../../../test/dom-test-container");
var Autocomplete_driver_1 = require("./Autocomplete.driver");
var _1 = require(".");
var OptionsExample_1 = require("../../baseComponents/DropdownOption/OptionsExample");
var testkit_1 = require("../../testkit");
var enzyme_1 = require("../../testkit/enzyme");
var enzyme_2 = require("wix-ui-test-utils/enzyme");
var vanilla_1 = require("wix-ui-test-utils/vanilla");
var enzyme_3 = require("enzyme");
describe('Autocomplete', function () {
    var createDriver = new dom_test_container_1.ReactDOMTestContainer()
        .unmountAfterEachTest()
        .createLegacyRenderer(Autocomplete_driver_1.autocompleteDriverFactory);
    var options = OptionsExample_1.generateOptions(function (args) {
        if (args === void 0) { args = {}; }
        return _1.Autocomplete.createDivider(args.value);
    });
    it('should render autocomplete', function () {
        var driver = createDriver(React.createElement(_1.Autocomplete, { options: options }));
        expect(driver.isTargetElementExists()).toBeTruthy();
        expect(driver.isContentElementExists()).toBeFalsy();
    });
    it('should initialize autocomplete with value', function () {
        var driver = createDriver(React.createElement(_1.Autocomplete, { initialSelectedId: 1, options: options }));
        expect(driver.getValue()).toEqual('value1');
    });
    it('should not filter anything without predicate function', function () {
        var driver = createDriver(React.createElement(_1.Autocomplete, { options: options }));
        driver.click();
        expect(driver.getOptionsCount()).toBe(options.length);
    });
    ['ArrowUp', 'ArrowDown'].forEach(function (key) {
        it("should not filter items according to predicate function when pressing " + key, function () {
            var driver = createDriver(React.createElement(_1.Autocomplete, { options: options }));
            driver.keyDown(key);
            expect(driver.getOptionsCount()).toBe(options.length);
        });
    });
    it('should show all items when focusing even if some text exist', function () {
        var driver = createDriver(React.createElement(_1.Autocomplete, { options: options }));
        driver.setValue('very');
        driver.click();
        expect(driver.getOptionsCount()).toBe(options.length);
    });
    describe('testkit', function () {
        it('should exist', function () {
            expect(vanilla_1.isTestkitExists(React.createElement(_1.Autocomplete, { options: [] }), testkit_1.autocompleteTestkitFactory)).toBe(true);
        });
    });
    describe('enzyme testkit', function () {
        it('should exist', function () {
            expect(enzyme_2.isEnzymeTestkitExists(React.createElement(_1.Autocomplete, { options: [] }), enzyme_1.autocompleteTestkitFactory, enzyme_3.mount)).toBe(true);
        });
    });
});
//# sourceMappingURL=Autocomplete.spec.js.map