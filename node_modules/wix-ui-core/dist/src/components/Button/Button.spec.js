"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var dom_test_container_1 = require("../../../test/dom-test-container");
var Button_driver_1 = require("./Button.driver");
var testkit_1 = require("../../testkit");
var enzyme_1 = require("../../testkit/enzyme");
var _1 = require("./");
var testkitTests_1 = require("../../common/testkitTests");
describe('Button', function () {
    var createDriver = new dom_test_container_1.ReactDOMTestContainer()
        .unmountAfterEachTest()
        .createLegacyRenderer(Button_driver_1.buttonDriverFactory);
    describe('type prop', function () {
        it('should be passed down', function () {
            var type = 'button';
            var driver = createDriver(React.createElement(_1.Button, { type: type }));
            expect(driver.getType()).toBe(type);
        });
    });
    describe('onClick prop', function () {
        it('should be called on click', function () {
            var onClick = jest.fn();
            var driver = createDriver(React.createElement(_1.Button, { onClick: onClick }));
            driver.click();
            expect(onClick).toBeCalled();
        });
    });
    describe('disabled prop', function () {
        it('should be falsy by default', function () {
            var driver = createDriver(React.createElement(_1.Button, null));
            expect(driver.isDisabled()).toBe(false);
        });
        it('should not call onClick when truthy', function () {
            var onClick = jest.fn();
            var driver = createDriver(React.createElement(_1.Button, { onClick: onClick, disabled: true }));
            driver.click();
            expect(driver.isDisabled()).toBe(true);
            expect(onClick).toHaveBeenCalledTimes(0);
        });
    });
    describe('children', function () {
        it('should be rendered', function () {
            var content = 'Click me';
            var driver = createDriver(React.createElement(_1.Button, null, content));
            expect(driver.getTextContent()).toBe(content);
        });
    });
    testkitTests_1.runTestkitExistsSuite({
        Element: React.createElement(_1.Button, null),
        testkitFactory: testkit_1.buttonTestkitFactory,
        enzymeTestkitFactory: enzyme_1.buttonTestkitFactory
    });
});
//# sourceMappingURL=Button.spec.js.map