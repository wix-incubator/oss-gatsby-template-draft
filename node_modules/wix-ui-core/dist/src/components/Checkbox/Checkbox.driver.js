"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var test_utils_1 = require("stylable/test-utils");
var Checkbox_st_css_1 = require("./Checkbox.st.css");
exports.checkboxDriverFactory = function (_a) {
    var element = _a.element, eventTrigger = _a.eventTrigger;
    var utils = new test_utils_1.StylableDOMUtil(Checkbox_st_css_1.default, element);
    var hasStyleState = function (state) { return utils.hasStyleState(element, state); };
    var input = utils.select('.nativeCheckbox');
    return {
        /** returns the element */
        element: function () { return element; },
        /** checks if element exists */
        exists: function () { return !!element; },
        /** click on the element */
        click: function () {
            // jsdom doesn't simulate checkboxes well: checkbox.click() updates .checked even
            // if the component is controlled, it also doesn't generate onChange() and doesn't
            // respect .disabled
            if (!input.disabled && !input.readOnly) {
                eventTrigger.change(input);
            }
        },
        /** presses on the elemet */
        keyDown: function (key) { return eventTrigger.keyDown(input, { key: key }); },
        /** trigger mouseenter on the element */
        mouseEnter: function () { return eventTrigger.mouseEnter(element); },
        /** trigger mouseleave on the element */
        mouseLeave: function () { return eventTrigger.mouseLeave(element); },
        /** trigger mousedown on the element */
        mouseDown: function () { return eventTrigger.mouseDown(element); },
        /** trigger focus on the element */
        focus: function () { return eventTrigger.focus(utils.select('.nativeCheckbox')); },
        /** checks if the tickmark exists, i.e. the checkbox is checked */
        isChecked: function () { return hasStyleState('checked'); },
        /** returns true if the element has indeterminate state */
        isIndeterminate: function () { return hasStyleState('indeterminate'); },
        /** returns if the element is disabled */
        isDisabled: function () { return hasStyleState('disabled'); },
        /** returns the checkbox children */
        children: function () { return utils.select('.childContainer'); },
        /** returns the checkbox tickmark */
        tickmark: function () { return utils.select('.box').firstElementChild; },
        /** returns the checkbox native input */
        input: function () { return input; },
        /** returns true if the element has error state */
        hasErrorState: function () { return hasStyleState('error'); },
        /** returns true if the element has focus state */
        hasFocusState: function () { return hasStyleState('focus'); },
        /** returns true if the element has error state */
        hasReadOnlyState: function () { return hasStyleState('readonly'); },
    };
};
//# sourceMappingURL=Checkbox.driver.js.map