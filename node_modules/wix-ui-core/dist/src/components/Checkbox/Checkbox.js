"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Checkbox_st_css_1 = require("./Checkbox.st.css");
var utils_1 = require("../../utils");
var Checkbox = /** @class */ (function (_super) {
    __extends(Checkbox, _super);
    function Checkbox() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.focusedByMouse = false;
        _this.state = { isFocused: false, focusVisible: false };
        _this.handleMouseDown = function (e) {
            //When clicking on the label, the input loses focus style state and then gains it again.
            //To prevent this we disable the default mouse down behavior and set the state to true
            if (!_this.props.disabled) {
                e.preventDefault();
                _this.focusedByMouse = true;
                _this.setState({ isFocused: true });
            }
        };
        _this.handleChange = function (e) {
            _this.props.onChange(__assign({ checked: !_this.props.checked }, e));
        };
        _this.handleInputKeyDown = function () {
            _this.setState({ focusVisible: true });
        };
        _this.handleInputBlur = function () {
            _this.state.isFocused && _this.setState({ isFocused: false, focusVisible: false });
            _this.focusedByMouse = false;
        };
        _this.handleInputFocus = function () {
            _this.setState({ isFocused: true, focusVisible: !_this.focusedByMouse });
        };
        return _this;
    }
    Checkbox.prototype.render = function () {
        var _this = this;
        var _a = this.props, checked = _a.checked, disabled = _a.disabled, error = _a.error, indeterminate = _a.indeterminate, indeterminateIcon = _a.indeterminateIcon, checkedIcon = _a.checkedIcon, uncheckedIcon = _a.uncheckedIcon;
        return (React.createElement("label", __assign({}, Checkbox_st_css_1.default('root', { checked: checked, disabled: disabled, focus: this.state.isFocused, readonly: this.props.readOnly, error: error, indeterminate: indeterminate, 'focus-visible': this.state.focusVisible }, this.props), { onMouseDown: this.handleMouseDown }),
            React.createElement("input", { type: "checkbox", className: Checkbox_st_css_1.default.nativeCheckbox, onClick: function (e) { return e.stopPropagation(); }, onChange: this.handleChange, onKeyDown: this.handleInputKeyDown, onFocus: this.handleInputFocus, onBlur: this.handleInputBlur, ref: function (ref) { return _this.checkbox = ref; }, 
                //temp fix
                checked: checked, disabled: disabled, readOnly: this.props.readOnly, tabIndex: this.props.tabIndex, id: this.props.id, required: this.props.required, autoFocus: this.props.autoFocus, name: this.props.name, "aria-controls": this.props['aria-controls'] }),
            React.createElement("span", { className: Checkbox_st_css_1.default.box }, this.props.indeterminate ? indeterminateIcon :
                this.props.checked ? checkedIcon :
                    uncheckedIcon),
            this.props.children ? (React.createElement("div", { className: Checkbox_st_css_1.default.childContainer }, this.props.children)) : null));
    };
    Checkbox.displayName = 'Checkbox';
    Checkbox.defaultProps = {
        onChange: utils_1.noop,
        checked: false,
        indeterminate: false,
        tabIndex: 0
    };
    return Checkbox;
}(React.Component));
exports.Checkbox = Checkbox;
//# sourceMappingURL=Checkbox.js.map