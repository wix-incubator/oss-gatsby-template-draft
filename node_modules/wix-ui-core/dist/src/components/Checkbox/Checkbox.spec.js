"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Checkbox_driver_1 = require("./Checkbox.driver");
var dom_test_container_1 = require("../../../test/dom-test-container");
var Checkbox_1 = require("./Checkbox");
var tickSVG = (React.createElement("span", { "data-name": "custom-tickmark" }, "1"));
function delay(millis) {
    return new Promise(function (resolve) { return setTimeout(resolve, millis); });
}
describe('Checkbox', function () {
    var createDriver = new dom_test_container_1.ReactDOMTestContainer()
        .unmountAfterEachTest()
        .createLegacyRenderer(Checkbox_driver_1.checkboxDriverFactory);
    describe('Basic behavior', function () {
        it('should render', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, null));
            expect(checkbox.exists()).toBe(true);
        });
        it('is not checked by default', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, null));
            expect(checkbox.isChecked()).toBe(false);
        });
        it('is checked when passing the checked prop', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { checked: true }));
            expect(checkbox.isChecked()).toBe(true);
        });
        it('renders given children', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, null,
                React.createElement("span", null, "covfefe")));
            expect(checkbox.children().textContent).toContain('covfefe');
        });
        it('calls onChange when clicked', function () {
            var onChange = jest.fn();
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { onChange: onChange }));
            checkbox.click();
            expect(onChange).toHaveBeenCalledTimes(1);
            expect(onChange).toHaveBeenCalledWith(expect.objectContaining({ checked: true }));
        });
        it('displays the given custom tick icon when checked', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { checkedIcon: tickSVG, checked: true }));
            expect(checkbox.tickmark()).toBeDefined();
            expect(checkbox.tickmark().getAttribute('data-name')).toBe('custom-tickmark');
        });
    });
    describe('Indeterminate', function () {
        it('has indeterminate state when indeterminate', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { indeterminate: true }));
            expect(checkbox.isIndeterminate()).toBe(true);
        });
        it('displays the given custom tick icon when indeterminate', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { indeterminateIcon: tickSVG, indeterminate: true }));
            expect(checkbox.tickmark()).toBeDefined();
            expect(checkbox.tickmark().getAttribute('data-name')).toBe('custom-tickmark');
        });
    });
    describe('Accessibility', function () {
        it('renders a native input behind the scene', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, null));
            var nativeInput = checkbox.input();
            expect(nativeInput).toBeDefined();
            expect(nativeInput).toBeInstanceOf(HTMLInputElement);
            expect(nativeInput.getAttribute('type')).toBe('checkbox');
            expect(nativeInput.checked).toBe(false);
        });
        it('passes the checked value to the input', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { checked: true }));
            expect(checkbox.input().checked).toBe(true);
        });
        it('passes "aria-controls" value to the intput', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { "aria-controls": '123,345' }));
            expect(checkbox.input().getAttribute('aria-controls')).toBe('123,345');
        });
    });
    describe('Form element', function () {
        it('passes the name prop to the input', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { name: "shlomi" }));
            expect(checkbox.input().getAttribute('name')).toBe('shlomi');
        });
        it('passes the id prop to the input', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { id: "covfefe" }));
            expect(checkbox.input().getAttribute('id')).toBe('covfefe');
        });
        it('passes tabindex 0 to the input by default', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, null));
            expect(checkbox.input().getAttribute('tabIndex')).toBe('0');
        });
        it('passes the tabindex value to the input', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { tabIndex: 666 }));
            expect(checkbox.input().getAttribute('tabIndex')).toBe('666');
        });
        it('passes the required value to the input', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { required: true }));
            expect(checkbox.input().required).toBe(true);
        });
        it('passes the autoFocus prop to the input', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { autoFocus: true }));
            // Elements in inactive windows cannot gain focus, however on .focus()
            // call they still become the active element.
            expect(document.activeElement).toBe(checkbox.input());
        });
        it('has error style state', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { error: true }));
            expect(checkbox.hasErrorState()).toBe(true);
        });
    });
    describe('Disabled', function () {
        it('does not call onChange when disabled', function () {
            var onChange = jest.fn();
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { disabled: true, onChange: onChange }));
            checkbox.click();
            expect(onChange).not.toHaveBeenCalled();
        });
        it('disables the input when disabled', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { disabled: true }));
            expect(checkbox.input().disabled).toBe(true);
        });
        it('can be checked when disabled', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { disabled: true, checked: true }));
            expect(checkbox.isChecked()).toBe(true);
            expect(checkbox.input().checked).toBe(true);
        });
        it('can be indeterminate when disabled', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { disabled: true, indeterminate: true }));
            expect(checkbox.isIndeterminate()).toBe(true);
        });
        it('has disable css state when disabled', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { disabled: true }));
            expect(checkbox.isDisabled()).toBe(true);
        });
        it('can not be focused when disabled', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { disabled: true }));
            checkbox.mouseDown();
            expect(checkbox.hasFocusState()).toBe(false);
        });
    });
    describe('Readonly', function () {
        it('does not call onChange when readonly', function () {
            var onChange = jest.fn();
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { readOnly: true, onChange: onChange }));
            checkbox.click();
            expect(onChange).not.toHaveBeenCalled();
        });
        it('is can be checked when readonly', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { readOnly: true, checked: true }));
            expect(checkbox.isChecked()).toBe(true);
            expect(checkbox.input().checked).toBe(true);
        });
        it('is can be indeterminate when readonly', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { readOnly: true, indeterminate: true }));
            expect(checkbox.isIndeterminate()).toBe(true);
        });
        it('has disable css state when readonly', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, { readOnly: true }));
            expect(checkbox.hasReadOnlyState()).toBe(true);
        });
    });
    describe('Focus', function () {
        it('has focus css state when focused', function () {
            var checkbox = createDriver(React.createElement(Checkbox_1.Checkbox, null));
            checkbox.focus();
            expect(checkbox.hasFocusState()).toBe(true);
        });
    });
});
//# sourceMappingURL=Checkbox.spec.js.map