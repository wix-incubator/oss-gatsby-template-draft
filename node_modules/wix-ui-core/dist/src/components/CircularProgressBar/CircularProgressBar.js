"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var prop_types_1 = require("prop-types");
var CircularProgressBar_st_css_1 = require("./CircularProgressBar.st.css");
var Arc_1 = require("./Arc");
var FULL_PROGRESS = 100;
var NO_PROGRESS = 0;
var VIEWBOX_SIZE = 54;
var resolveIndicationElement = function (props) {
    var wrapped = function (dataHook, children) {
        return React.createElement("div", { "data-hook": dataHook, className: CircularProgressBar_st_css_1.default.statusIndicator }, children);
    };
    if (props.error && props.errorIcon) {
        return wrapped('error-icon', props.errorIcon);
    }
    if (props.value === FULL_PROGRESS && props.successIcon) {
        return wrapped('success-icon', props.successIcon);
    }
};
var normalizeValue = function (value) {
    return typeof value === 'number' ? value : parseInt(value, 10) ? parseInt(value, 10) : NO_PROGRESS;
};
var normalizeSize = function (size) {
    var intSize = typeof size === 'number' ? size : parseInt(size, 10);
    return intSize && intSize > 0 ? intSize : VIEWBOX_SIZE;
};
var renderArcs = function (props) {
    var value = props.value, size = props.size;
    var normalizedSize = normalizeSize(size);
    var normalizedValue = normalizeValue(value);
    return (React.createElement("div", { className: CircularProgressBar_st_css_1.default.arcsContainer, style: { width: normalizedSize + "px", height: normalizedSize + "px" } },
        resolveIndicationElement(props),
        React.createElement(Arc_1.Arc, { "data-hook": 'progressarc-background', value: FULL_PROGRESS, className: CircularProgressBar_st_css_1.default.backArc, strokeWidth: 4, size: normalizedSize }),
        React.createElement(Arc_1.Arc, { "data-hook": 'progressarc-foreground', value: normalizedValue, className: CircularProgressBar_st_css_1.default.foreArc, strokeWidth: 4, size: normalizedSize })));
};
var normalizeProps = function (props) {
    var value = normalizeValue(props.value);
    if (value >= FULL_PROGRESS) {
        return __assign({}, props, { value: FULL_PROGRESS });
    }
    if (value < NO_PROGRESS) {
        return __assign({}, props, { value: NO_PROGRESS });
    }
    return __assign({}, props, { value: value });
};
exports.CircularProgressBar = function (props) {
    var error = props.error, showProgressIndication = props.showProgressIndication;
    var _props = normalizeProps(props);
    var success = _props.value === FULL_PROGRESS;
    var value = error && _props.errorLabel ? _props.errorLabel : Math.floor(_props.value) + "%";
    return (React.createElement("div", __assign({}, CircularProgressBar_st_css_1.default('root', { error: error, success: success }, _props)),
        renderArcs(_props),
        showProgressIndication &&
            React.createElement("div", { "data-hook": "progress-indicator", className: CircularProgressBar_st_css_1.default.progressIndicator }, value)));
};
exports.CircularProgressBar.displayName = 'CircularProgressBar';
exports.CircularProgressBar.propTypes = {
    value: prop_types_1.oneOfType([prop_types_1.number, prop_types_1.string]),
    error: prop_types_1.bool,
    errorLabel: prop_types_1.string,
    showProgressIndication: prop_types_1.bool,
    errorIcon: prop_types_1.element,
    successIcon: prop_types_1.element,
    size: prop_types_1.oneOfType([prop_types_1.number, prop_types_1.string]),
};
exports.CircularProgressBar.defaultProps = {
    value: NO_PROGRESS,
    size: VIEWBOX_SIZE,
};
//# sourceMappingURL=CircularProgressBar.js.map