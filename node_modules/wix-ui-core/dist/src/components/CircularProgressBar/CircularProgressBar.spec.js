"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var CircularProgressBar_driver_1 = require("./CircularProgressBar.driver");
var dom_test_container_1 = require("../../../test/dom-test-container");
var _1 = require("./");
var testkitTests_1 = require("../../common/testkitTests");
var testkit_1 = require("../../testkit");
var enzyme_1 = require("../../testkit/enzyme");
describe('CircularProgressBar', function () {
    var createDriver = new dom_test_container_1.ReactDOMTestContainer().unmountAfterEachTest()
        .createLegacyRenderer(CircularProgressBar_driver_1.circularProgressBarDriverFactory);
    var defaultProps = {
        value: 40
    };
    it('should exist', function () {
        var driver = createDriver(React.createElement(_1.CircularProgressBar, __assign({}, defaultProps)));
        expect(driver.exists()).toBe(true);
    });
    it('should show success icon when reaching 100%', function () {
        var driver = createDriver(React.createElement(_1.CircularProgressBar, __assign({}, __assign({}, defaultProps, { value: 100, successIcon: React.createElement("div", null) }))));
        expect(driver.isSuccessIconDisplayed()).toBe(true);
    });
    it('should not show percentages value when showProgressIndication is false', function () {
        var driver = createDriver(React.createElement(_1.CircularProgressBar, __assign({}, __assign({}, defaultProps, { value: 50 }))));
        expect(driver.isPercentagesProgressDisplayed()).toBe(false);
    });
    it('should show error icon on failure', function () {
        var driver = createDriver(React.createElement(_1.CircularProgressBar, __assign({}, __assign({}, defaultProps, { error: true, errorIcon: React.createElement("div", null) }))));
        expect(driver.isErrorIconDisplayed()).toBe(true);
    });
    describe('when with progress indication', function () {
        var driver;
        var props = defaultProps;
        beforeEach(function () {
            props = __assign({}, defaultProps, { showProgressIndication: true });
        });
        it('should show success icon when reaching 100% and value passed as string', function () {
            driver = createDriver(React.createElement(_1.CircularProgressBar, __assign({}, __assign({}, props, { value: '100', successIcon: React.createElement("div", null) }))));
            expect(driver.isSuccessIconDisplayed()).toBe(true);
        });
        it('should show success icon and percentage when reaching 100%', function () {
            driver = createDriver(React.createElement(_1.CircularProgressBar, __assign({}, __assign({}, props, { value: 100, successIcon: React.createElement("div", null) }))));
            expect(driver.isSuccessIconDisplayed()).toBe(true);
            expect(driver.getValue()).toBe('100%');
        });
        it('should show percentages value of 100 when passing value above 100', function () {
            driver = createDriver(React.createElement(_1.CircularProgressBar, __assign({}, __assign({}, props, { value: 140, successIcon: React.createElement("div", null) }))));
            expect(driver.isSuccessIconDisplayed()).toBe(true);
            expect(driver.getValue()).toBe('100%');
        });
        it('should show percentage when error label and icon are not provided', function () {
            driver = createDriver(React.createElement(_1.CircularProgressBar, __assign({}, __assign({}, props, { value: 33, error: true, errorIcon: null }))));
            expect(driver.isErrorIconDisplayed()).toBe(false);
            expect(driver.getValue()).toBe('33%');
        });
        it('should show errorLabel when error icon is not provided', function () {
            driver = createDriver(React.createElement(_1.CircularProgressBar, __assign({}, __assign({}, props, { value: 33, error: true, errorLabel: 'Failed', errorIcon: null }))));
            expect(driver.isErrorIconDisplayed()).toBe(false);
            expect(driver.getValue()).toBe('Failed');
        });
        it('should show error icon and percentage when encountering an error without an errorLabel', function () {
            driver = createDriver(React.createElement(_1.CircularProgressBar, __assign({}, __assign({}, props, { value: 100, error: true, errorIcon: React.createElement("div", null) }))));
            expect(driver.isErrorIconDisplayed()).toBe(true);
            expect(driver.getValue()).toBe('100%');
        });
        it('should show error icon and errorLabel when encountering an error', function () {
            driver = createDriver(React.createElement(_1.CircularProgressBar, __assign({}, __assign({}, props, { value: 100, error: true, errorLabel: 'Failed', errorIcon: React.createElement("div", null) }))));
            expect(driver.isErrorIconDisplayed()).toBe(true);
            expect(driver.getValue()).toBe('Failed');
        });
        it('should show percentages value while in progress', function () {
            driver = createDriver(React.createElement(_1.CircularProgressBar, __assign({}, __assign({}, props, { value: 50 }))));
            expect(driver.getValue()).toBe('50%');
        });
        it('should show percentages value of 0 when passing value below 0', function () {
            driver = createDriver(React.createElement(_1.CircularProgressBar, __assign({}, __assign({}, props, { value: -1 }))));
            expect(driver.getValue()).toBe('0%');
        });
        it('should show percentages value of 0 when not passing a value', function () {
            driver = createDriver(React.createElement(_1.CircularProgressBar, __assign({}, { showProgressIndication: true })));
            expect(driver.getValue()).toBe('0%');
        });
        it('should show value in percentages rounded down', function () {
            var floatValue = 3.9;
            var floatValueRoundDown = Math.floor(floatValue);
            driver = createDriver(React.createElement(_1.CircularProgressBar, __assign({}, __assign({}, props, { value: floatValue }))));
            expect(driver.getValue()).toBe(floatValueRoundDown + "%");
        });
    });
    testkitTests_1.runTestkitExistsSuite({
        Element: React.createElement(_1.CircularProgressBar, { value: 0 }),
        testkitFactory: testkit_1.circularProgressBarTestkitFactory,
        enzymeTestkitFactory: enzyme_1.circularProgressBarTestkitFactory
    });
});
//# sourceMappingURL=CircularProgressBar.spec.js.map