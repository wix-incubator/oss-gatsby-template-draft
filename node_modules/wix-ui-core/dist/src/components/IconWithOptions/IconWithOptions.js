"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var IconWithOptions_st_css_1 = require("./IconWithOptions.st.css");
var Dropdown_1 = require("../../baseComponents/Dropdown");
var DropdownOption_1 = require("../../baseComponents/DropdownOption");
var constants_1 = require("../../baseComponents/Dropdown/constants");
var prop_types_1 = require("prop-types");
/**
 * IconWithOptions
 */
exports.IconWithOptions = function (props) {
    var placement = props.placement, options = props.options, openTrigger = props.openTrigger, onSelect = props.onSelect, onDeselect = props.onDeselect, initialSelectedIds = props.initialSelectedIds, multi = props.multi, iconUrl = props.iconUrl, fixedHeader = props.fixedHeader, fixedFooter = props.fixedFooter;
    return (React.createElement(Dropdown_1.Dropdown, __assign({}, IconWithOptions_st_css_1.default('root', {}, props), { options: options, placement: placement, openTrigger: openTrigger, multi: multi, onSelect: onSelect, onInitialSelectedOptionsSet: function () { return null; }, showArrow: true, fixedFooter: fixedFooter, fixedHeader: fixedHeader, onDeselect: onDeselect, initialSelectedIds: initialSelectedIds }),
        React.createElement("img", { src: iconUrl, tabIndex: 5 })));
};
exports.IconWithOptions.displayName = 'IconWithOptions';
exports.IconWithOptions.defaultProps = {
    openTrigger: constants_1.HOVER,
    placement: 'bottom',
    multi: false,
    initialSelectedIds: [],
    onSelect: function () { return null; },
    onDeselect: function () { return null; }
};
exports.IconWithOptions.propTypes = {
    /** The location to display the content */
    placement: prop_types_1.oneOf(['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start']),
    /** The dropdown options array */
    options: prop_types_1.arrayOf(DropdownOption_1.optionPropType).isRequired,
    /** Trigger type to open the content */
    openTrigger: prop_types_1.oneOf(['click', 'hover']),
    /** Handler for when an option is selected */
    onSelect: prop_types_1.func,
    /** Handler for when an option is deselected */
    onDeselect: prop_types_1.func,
    /** initial selected option ids */
    initialSelectedIds: prop_types_1.arrayOf(prop_types_1.oneOfType([prop_types_1.number, prop_types_1.string])),
    /** set true for multiple selection, false for single */
    multi: prop_types_1.bool,
    /** An element that always appears at the top of the options */
    fixedHeader: prop_types_1.node,
    /** An element that always appears at the bottom of the options */
    fixedFooter: prop_types_1.node,
    /** Icon url to display */
    iconUrl: prop_types_1.string.isRequired
};
//# sourceMappingURL=IconWithOptions.js.map