"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropTypes = require("prop-types");
var Input_st_css_1 = require("./Input.st.css");
var Input = /** @class */ (function (_super) {
    __extends(Input, _super);
    function Input() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            focus: false,
        };
        _this.handleFocus = function (event) {
            _this.setState({ focus: true });
            _this.props.onFocus(event);
        };
        _this.handleBlur = function (event) {
            _this.setState({ focus: false });
            _this.props.onBlur(event);
        };
        return _this;
    }
    Input.prototype.render = function () {
        var _this = this;
        var focus = this.state.focus;
        var _a = this.props, error = _a.error, disabled = _a.disabled, prefix = _a.prefix, autoComplete = _a.autoComplete, autoFocus = _a.autoFocus, onChange = _a.onChange, onClick = _a.onClick, onMouseDown = _a.onMouseDown, onMouseUp = _a.onMouseUp, onMouseMove = _a.onMouseMove, onDragStart = _a.onDragStart, onKeyDown = _a.onKeyDown, onKeyPress = _a.onKeyPress, onKeyUp = _a.onKeyUp, placeholder = _a.placeholder, readOnly = _a.readOnly, tabIndex = _a.tabIndex, required = _a.required, type = _a.type, value = _a.value, suffix = _a.suffix, maxLength = _a.maxLength, id = _a.id, name = _a.name, inlineStyle = _a.style;
        return (React.createElement("div", __assign({}, Input_st_css_1.default('root', { disabled: disabled, error: !!error && !disabled, focus: focus }, this.props), { style: inlineStyle }),
            prefix,
            React.createElement("input", { ref: function (input) { return _this.input = input; }, autoComplete: autoComplete, autoFocus: autoFocus, disabled: disabled, className: Input_st_css_1.default.nativeInput, maxLength: maxLength, onBlur: this.handleBlur, onChange: onChange, onFocus: this.handleFocus, onClick: onClick, onMouseDown: onMouseDown, onMouseUp: onMouseUp, onMouseMove: onMouseMove, onDragStart: onDragStart, onKeyDown: onKeyDown, onKeyPress: onKeyPress, onKeyUp: onKeyUp, placeholder: placeholder, readOnly: readOnly, required: required, tabIndex: tabIndex, type: type, value: value, id: id, name: name }),
            suffix));
    };
    Input.prototype.focus = function () { this.input.focus(); };
    Input.prototype.blur = function () { this.input.blur(); };
    Input.prototype.select = function () { this.input.select(); };
    Input.displayName = 'Input';
    Input.propTypes = {
        /** Wrapper class name */
        className: PropTypes.string,
        /** Error state / Error message */
        error: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
        /** Prefix */
        prefix: PropTypes.node,
        /** Suffix */
        suffix: PropTypes.node,
        autoComplete: PropTypes.oneOf(['on', 'off']),
        autoFocus: PropTypes.bool,
        disabled: PropTypes.bool,
        maxLength: PropTypes.number,
        onBlur: PropTypes.func,
        onChange: PropTypes.func,
        onFocus: PropTypes.func,
        onClick: PropTypes.func,
        onMouseDown: PropTypes.func,
        onMouseUp: PropTypes.func,
        onMouseMove: PropTypes.func,
        onDragStart: PropTypes.func,
        onKeyDown: PropTypes.func,
        onKeyPress: PropTypes.func,
        onKeyUp: PropTypes.func,
        placeholder: PropTypes.string,
        readOnly: PropTypes.bool,
        required: PropTypes.bool,
        tabIndex: PropTypes.number,
        type: PropTypes.string,
        value: PropTypes.string,
        id: PropTypes.string,
        name: PropTypes.string,
        style: PropTypes.object,
    };
    Input.defaultProps = {
        type: 'text',
        onFocus: function () { return null; },
        onBlur: function () { return null; },
        onChange: function () { return null; }
    };
    return Input;
}(React.Component));
exports.Input = Input;
//# sourceMappingURL=Input.js.map