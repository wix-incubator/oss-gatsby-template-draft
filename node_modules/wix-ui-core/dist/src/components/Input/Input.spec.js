"use strict";
/* global describe it expect */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var test_utils_1 = require("react-dom/test-utils");
var test_utils_2 = require("stylable/test-utils");
var dom_test_container_1 = require("../../../test/dom-test-container");
var Input_1 = require("./Input");
var Input_private_driver_1 = require("./Input.private.driver");
var Input_st_css_1 = require("./Input.st.css");
var stylableUtil = new test_utils_2.StylableDOMUtil(Input_st_css_1.default);
describe('Input', function () {
    var container = new dom_test_container_1.ReactDOMTestContainer().unmountAfterEachTest();
    var render = function (jsx) {
        return container.renderWithRef(jsx)
            .then(function (ref) { return new Input_private_driver_1.InputDriver(container.componentNode, ref); });
    };
    describe('Style states', function () {
        it('should support disabled state', function () { return __awaiter(_this, void 0, void 0, function () {
            var input;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Input_1.Input, { disabled: true }))];
                    case 1:
                        input = _a.sent();
                        expect(stylableUtil.hasStyleState(input.root, 'disabled')).toBe(true);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should support error state', function () { return __awaiter(_this, void 0, void 0, function () {
            var input;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Input_1.Input, { error: true }))];
                    case 1:
                        input = _a.sent();
                        expect(stylableUtil.hasStyleState(input.root, 'error')).toBe(true);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should support focus state', function () { return __awaiter(_this, void 0, void 0, function () {
            var input;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Input_1.Input, null))];
                    case 1:
                        input = _a.sent();
                        test_utils_1.Simulate.focus(input.input);
                        expect(stylableUtil.hasStyleState(input.root, 'focus')).toBe(true);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    it('should pass attributes to the native input', function () { return __awaiter(_this, void 0, void 0, function () {
        var input;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, render(React.createElement(Input_1.Input, { autoComplete: "on", disabled: true, maxLength: 10, placeholder: "placeholder", readOnly: true, required: true, tabIndex: 1, type: "password", value: "hunter2" }))];
                case 1:
                    input = (_a.sent()).input;
                    expect(input.autocomplete).toBe('on');
                    expect(input.disabled).toBe(true);
                    expect(input.maxLength).toBe(10);
                    expect(input.placeholder).toBe('placeholder');
                    expect(input.readOnly).toBe(true);
                    expect(input.required).toBe(true);
                    expect(input.tabIndex).toBe(1);
                    expect(input.type).toBe('password');
                    expect(input.value).toBe('hunter2');
                    return [2 /*return*/];
            }
        });
    }); });
    it('should render prefix and suffix', function () { return __awaiter(_this, void 0, void 0, function () {
        var input;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, render(React.createElement(Input_1.Input, { prefix: React.createElement("div", null, "PREFIX"), suffix: React.createElement("div", null, "SUFFIX") }))];
                case 1:
                    input = _a.sent();
                    expect(input.prefix.textContent).toBe('PREFIX');
                    expect(input.suffix.textContent).toBe('SUFFIX');
                    return [2 /*return*/];
            }
        });
    }); });
    describe('Imperative API', function () {
        it('should support focus() and blur() methods', function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, input, instance;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Input_1.Input, null))];
                    case 1:
                        _a = _b.sent(), input = _a.input, instance = _a.instance;
                        expect(document.activeElement).not.toBe(input);
                        instance.focus();
                        expect(document.activeElement).toBe(input);
                        instance.blur();
                        expect(document.activeElement).not.toBe(input);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should support select() method', function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, input, instance;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Input_1.Input, { value: "123" }))];
                    case 1:
                        _a = _b.sent(), input = _a.input, instance = _a.instance;
                        expect(input.selectionStart).toBe(input.selectionEnd);
                        instance.select();
                        expect(input.selectionStart).toBe(0);
                        expect(input.selectionEnd).toBe(3);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('`style` prop', function () {
        it('should set inline style on input', function () { return __awaiter(_this, void 0, void 0, function () {
            var styles, driver;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        styles = {
                            width: '100px',
                            background: 'blue',
                            color: 'green',
                            display: 'inline-flex'
                        };
                        return [4 /*yield*/, render(React.createElement(Input_1.Input, { style: styles }))];
                    case 1:
                        driver = _a.sent();
                        expect(driver.root.style).toEqual(expect.objectContaining(styles));
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
//# sourceMappingURL=Input.spec.js.map