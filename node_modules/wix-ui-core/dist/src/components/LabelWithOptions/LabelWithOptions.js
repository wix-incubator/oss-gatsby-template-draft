"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var LabelWithOptions_st_css_1 = require("./LabelWithOptions.st.css");
var prop_types_1 = require("prop-types");
var Dropdown_1 = require("../../baseComponents/Dropdown");
var Checkbox_1 = require("../Checkbox");
var DropdownOption_1 = require("../../baseComponents/DropdownOption");
var Label_1 = require("../Label");
var constants_1 = require("../../baseComponents/Dropdown/constants");
var utils_1 = require("../../utils");
var createDivider = function (value) {
    if (value === void 0) { value = null; }
    return DropdownOption_1.OptionFactory.createDivider({ className: LabelWithOptions_st_css_1.default.divider, value: value });
};
/**
 * LabelWithOptions
 */
var LabelWithOptions = /** @class */ (function (_super) {
    __extends(LabelWithOptions, _super);
    function LabelWithOptions() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { isDirty: false, selectedIds: [] };
        _this.onInitialSelectedOptionsSet = function (options) {
            _this.setState({
                selectedIds: _this.props.initialSelectedIds
            });
        };
        _this.onSelect = function (option) {
            var selectedIds = _this.state.selectedIds;
            var _a = _this.props, onSelect = _a.onSelect, multi = _a.multi;
            _this.setState({
                selectedIds: multi ? selectedIds.concat([option.id]) : [option.id],
                isDirty: true
            }, function () { return onSelect(option); });
        };
        _this.onDeselect = function (option) {
            _this.setState({
                selectedIds: _this.state.selectedIds.filter(function (id) { return id !== option.id; }),
                isDirty: true
            }, function () { return _this.props.onDeselect(option); });
        };
        _this.createOptions = function () {
            if (!_this.props.checkbox) {
                return _this.props.options;
            }
            return _this.props.options.map(function (option) {
                var newOption = {
                    id: option.id,
                    isDisabled: option.isDisabled,
                    isSelectable: option.isSelectable,
                    value: option.value,
                    render: null
                };
                var checked = _this.state.selectedIds.includes(option.id);
                newOption.render = option.isSelectable ?
                    function (value) { return (React.createElement("div", { className: LabelWithOptions_st_css_1.default.optionContainer, "data-hook": "checkbox-option-container" },
                        React.createElement(Checkbox_1.Checkbox, { disabled: option.isDisabled, checked: checked, className: LabelWithOptions_st_css_1.default.checkbox }),
                        option.render(value))); }
                    : option.render;
                return newOption;
            });
        };
        _this.createLabel = function () {
            var selectedIds = _this.state.selectedIds;
            return (selectedIds && selectedIds.length) ?
                _this.props.options.filter(function (option) { return selectedIds.includes(option.id); }).map(function (option) { return option.value; }).join(', ') :
                _this.props.placeholder;
        };
        return _this;
    }
    LabelWithOptions.prototype.render = function () {
        var _a = this.props, initialSelectedIds = _a.initialSelectedIds, disabled = _a.disabled, required = _a.required, renderSuffix = _a.renderSuffix, fixedFooter = _a.fixedFooter, fixedHeader = _a.fixedHeader, multi = _a.multi, checkbox = _a.checkbox, ellipsis = _a.ellipsis;
        var _b = this.state, selectedIds = _b.selectedIds, isDirty = _b.isDirty;
        var error = !disabled && required && isDirty && selectedIds.length === 0;
        return (React.createElement(Dropdown_1.Dropdown, __assign({}, LabelWithOptions_st_css_1.default('root', { required: required && !disabled, error: error, disabled: disabled, checkbox: checkbox }, this.props), { multi: multi, placement: "bottom-start", initialSelectedIds: initialSelectedIds, options: this.createOptions(), openTrigger: constants_1.CLICK, fixedFooter: fixedFooter, fixedHeader: fixedHeader, onInitialSelectedOptionsSet: this.onInitialSelectedOptionsSet, onSelect: this.onSelect, onDeselect: this.onDeselect, disabled: disabled }),
            React.createElement("div", { className: LabelWithOptions_st_css_1.default.selection },
                React.createElement(Label_1.Label, { className: (LabelWithOptions_st_css_1.default.label + " " + (selectedIds && selectedIds.length ? '' : LabelWithOptions_st_css_1.default.placeholder)).trim(), ellipsis: ellipsis, "data-hook": "label" }, this.createLabel()),
                renderSuffix(error))));
    };
    LabelWithOptions.displayName = 'LabelWithOptions';
    LabelWithOptions.propTypes = {
        /** The dropdown options array */
        options: prop_types_1.arrayOf(DropdownOption_1.optionPropType).isRequired,
        /** set true for multiple selection, false for single */
        multi: prop_types_1.bool,
        /** Handler for when an option is selected */
        onSelect: prop_types_1.func,
        /** Handler for when an option is deselected */
        onDeselect: prop_types_1.func,
        /** initial selected option ids */
        initialSelectedIds: prop_types_1.arrayOf(prop_types_1.oneOfType([prop_types_1.number, prop_types_1.string])),
        /** An element that always appears at the top of the options */
        fixedHeader: prop_types_1.node,
        /** An element that always appears at the bottom of the options */
        fixedFooter: prop_types_1.node,
        /** Makes the component disabled */
        disabled: prop_types_1.bool,
        /** Placeholder to display */
        placeholder: prop_types_1.string,
        /** if set to true an error will be rendered when no options are selected */
        required: prop_types_1.bool,
        /** If set to true, the label will display an ellipsis when overflowing */
        ellipsis: prop_types_1.bool,
        /** Suffix */
        renderSuffix: prop_types_1.func,
        /** Display checkbox items in the dropdown menu*/
        checkbox: prop_types_1.bool
    };
    LabelWithOptions.defaultProps = {
        initialSelectedIds: [],
        multi: false,
        onSelect: utils_1.noop,
        onDeselect: utils_1.noop,
        renderSuffix: utils_1.noop
    };
    LabelWithOptions.createOption = DropdownOption_1.OptionFactory.create;
    LabelWithOptions.createDivider = createDivider;
    return LabelWithOptions;
}(React.PureComponent));
exports.LabelWithOptions = LabelWithOptions;
//# sourceMappingURL=LabelWithOptions.js.map