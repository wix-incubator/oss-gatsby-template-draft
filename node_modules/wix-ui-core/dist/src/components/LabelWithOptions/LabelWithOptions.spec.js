"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var dom_test_container_1 = require("../../../test/dom-test-container");
var LabelWithOptions_driver_1 = require("./LabelWithOptions.driver");
var _1 = require("./");
var OptionsExample_1 = require("../../baseComponents/DropdownOption/OptionsExample");
var testkit_1 = require("../../testkit");
var enzyme_1 = require("../../testkit/enzyme");
var enzyme_2 = require("wix-ui-test-utils/enzyme");
var vanilla_1 = require("wix-ui-test-utils/vanilla");
var enzyme_3 = require("enzyme");
describe('LabelWithOptions', function () {
    var createDriver = new dom_test_container_1.ReactDOMTestContainer()
        .unmountAfterEachTest()
        .createLegacyRenderer(LabelWithOptions_driver_1.labelWithOptionsDriverFactory);
    var options = OptionsExample_1.generateOptions();
    var createLabelWithOptions = function (props) { return (React.createElement(_1.LabelWithOptions, __assign({ renderSuffix: function (isError) { return (React.createElement("div", { "data-hook": "suffix" }, isError ? 'error!' : 'no errors')); } }, props))); };
    it('should render the label in default state', function () {
        var driver = createDriver(createLabelWithOptions({ options: options }));
        expect(driver.isTargetElementExists()).toBeTruthy();
        expect(driver.isContentElementExists()).toBeFalsy();
        expect(driver.isRequired()).toBeFalsy();
        expect(driver.getSuffix().innerHTML).toEqual('no errors');
    });
    it('should display dropdown when open', function () {
        var driver = createDriver(createLabelWithOptions({ options: options }));
        driver.click();
        expect(driver.isContentElementExists()).toBeTruthy();
    });
    it('should pass options to dropdown', function () {
        var driver = createDriver(createLabelWithOptions({ options: options }));
        driver.click();
        expect(driver.getOptionsCount()).toEqual(options.length);
    });
    describe('when no value is selected', function () {
        it('should show default value', function () {
            var selectedOptions = [options[0], options[1]];
            var driver = createDriver(createLabelWithOptions({
                options: options,
                initialSelectedIds: selectedOptions.map(function (option) { return option.id; }),
            }));
            var expectedLabelText = selectedOptions.map(function (option) { return option.value; }).join(', ');
            expect(driver.getLabelText()).toEqual(expectedLabelText);
        });
        it('should show placeholder if there\'s no default', function () {
            var placeholder = 'Please select an item';
            var driver = createDriver(createLabelWithOptions({
                options: [],
                placeholder: placeholder,
            }));
            expect(driver.getLabelText()).toEqual(placeholder);
        });
    });
    describe('when clicking label', function () {
        var driver;
        beforeEach(function () {
            driver = createDriver(createLabelWithOptions({ options: options }));
            driver.click();
        });
        it('should open dropdown', function () {
            expect(driver.isContentElementExists()).toBeTruthy();
        });
    });
    describe('when disabled', function () {
        var driver;
        beforeEach(function () {
            driver = createDriver(createLabelWithOptions({ options: options, disabled: true }));
        });
        it('should not allow opening dropdown', function () {
            driver.click();
            expect(driver.isContentElementExists()).toBeFalsy();
        });
        it('should apply disabled style to label', function () {
            expect(driver.isDisabled()).toBeTruthy();
        });
    });
    describe('when hitting Arrow Down key', function () {
        var driver;
        beforeEach(function () {
            driver = createDriver(createLabelWithOptions({ options: options }));
            driver.keyDown('ArrowDown');
        });
        it('should open dropdown if closed', function () {
            expect(driver.isContentElementExists()).toBeTruthy();
        });
    });
    describe('when selecting options', function () {
        it('should display selected options in label', function () {
            var driver = createDriver(createLabelWithOptions({
                options: options,
                multi: true
            }));
            var selectedOptions = [options[0], options[4]];
            driver.click();
            driver.optionAt(0).click();
            driver.optionAt(4).click();
            var expectedLabelText = selectedOptions.map(function (option) { return option.value; }).join(', ');
            expect(driver.getLabelText()).toEqual(expectedLabelText);
        });
        it('should call onSelect', function () {
            var onSelect = jest.fn();
            var driver = createDriver(createLabelWithOptions({ options: options, onSelect: onSelect }));
            driver.click();
            driver.optionAt(0).click();
            expect(onSelect).toHaveBeenCalledWith(options[0]);
        });
        it('allows picking only one option when multi prop is false', function () {
            var driver = createDriver(React.createElement(_1.LabelWithOptions, { options: OptionsExample_1.generateOptions(), multi: false }));
            driver.click();
            driver.optionAt(0).click();
            driver.click();
            driver.optionAt(4).click();
            expect(driver.getLabelText()).toEqual(options[4].value);
        });
    });
    describe('when deselecting options', function () {
        it('should display updated options in label', function () {
            var selectedOptions = [options[0], options[1]];
            var driver = createDriver(createLabelWithOptions({
                options: options,
                multi: true,
                initialSelectedIds: selectedOptions.map(function (option) { return option.id; })
            }));
            driver.click();
            driver.optionAt(0).click();
            var expectedLabelText = selectedOptions[1].value;
            expect(driver.getLabelText()).toEqual(expectedLabelText);
        });
        it('should call onDeselect', function () {
            var onDeselect = jest.fn();
            var driver = createDriver(createLabelWithOptions({ options: options, multi: true, onDeselect: onDeselect, initialSelectedIds: [0] }));
            driver.click();
            driver.optionAt(0).click();
            expect(onDeselect).toHaveBeenCalledWith(options[0]);
        });
    });
    describe('when selection is required', function () {
        var driver;
        beforeEach(function () {
            driver = createDriver(createLabelWithOptions({
                options: options,
                required: true,
            }));
        });
        it('should be displayed as required', function () {
            expect(driver.isRequired()).toBeTruthy();
        });
        it('should not be error', function () {
            expect(driver.isError()).toBeFalsy();
        });
    });
    describe('when invalid', function () {
        var driver;
        beforeEach(function () {
            driver = createDriver(createLabelWithOptions({ options: options, multi: true, required: true, initialSelectedIds: [0, 1] }));
            driver.click();
            driver.optionAt(0).click();
            driver.optionAt(1).click();
        });
        it('should apply error style', function () {
            expect(driver.isError()).toBeTruthy();
        });
        it('should render suffix with error', function () {
            expect(driver.getSuffix().innerHTML).toEqual('error!');
        });
    });
    describe('checkbox', function () {
        it('displays a checkbox when given the prop', function () {
            var driver = createDriver(React.createElement(_1.LabelWithOptions, { checkbox: true, options: OptionsExample_1.generateOptions() }));
            driver.click();
            expect(driver.checkboxDriverAt(0).exists()).toBe(true);
        });
        it('does not display a checkbox next to a non selectable item', function () {
            var driver = createDriver(React.createElement(_1.LabelWithOptions, { checkbox: true, options: [{ id: 'fake', value: 'bla', isSelectable: false, isDisabled: false, render: function () { return React.createElement("span", null, "bla"); } }] }));
            driver.click();
            expect(driver.checkboxDriverAt(0).exists()).toBe(false);
        });
        it('marks the checkbox as checked when an option is selected', function () {
            var driver = createDriver(React.createElement(_1.LabelWithOptions, { checkbox: true, multi: true, options: OptionsExample_1.generateOptions() }));
            driver.click();
            driver.optionAt(0).click();
            expect(driver.checkboxDriverAt(0).isChecked()).toBe(true);
        });
        it('marks the checkbox as disabled if the option is disabled', function () {
            var driver = createDriver(React.createElement(_1.LabelWithOptions, { checkbox: true, options: [{ id: 'test', value: 'test', isSelectable: true, isDisabled: true, render: function () { return React.createElement("span", null, "test"); } }] }));
            driver.click();
            expect(driver.checkboxDriverAt(0).isDisabled()).toBe(true);
        });
    });
    describe('testkit', function () {
        it('should exist', function () {
            expect(vanilla_1.isTestkitExists(React.createElement(_1.LabelWithOptions, { options: [] }), testkit_1.labelWithOptionsTestkitFactory)).toBe(true);
        });
    });
    describe('enzyme testkit', function () {
        it('should exist', function () {
            expect(enzyme_2.isEnzymeTestkitExists(React.createElement(_1.LabelWithOptions, { options: [] }), enzyme_1.labelWithOptionsTestkitFactory, enzyme_3.mount)).toBe(true);
        });
    });
});
//# sourceMappingURL=LabelWithOptions.spec.js.map