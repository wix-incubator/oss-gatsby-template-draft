"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var prop_types_1 = require("prop-types");
var LinearProgressBar_st_css_1 = require("./LinearProgressBar.st.css");
var FULL_PROGRESS = 100;
var NO_PROGRESS = 0;
var resolveIndicationElement = function (props) {
    var wrapped = function (dataHook, children) {
        return React.createElement("div", { "data-hook": dataHook, className: LinearProgressBar_st_css_1.default.indicationContainer }, children);
    };
    if (props.error && props.errorIcon) {
        return wrapped('error-icon', props.errorIcon);
    }
    if (props.value === FULL_PROGRESS && props.successIcon) {
        return wrapped('success-icon', props.successIcon);
    }
    return wrapped('progress-percentages', React.createElement("span", null, props.value + "%"));
};
var renderBarSection = function (value) {
    var progressWidth = { width: value + "%" };
    return (React.createElement("div", { className: LinearProgressBar_st_css_1.default.barContainer },
        React.createElement("div", { "data-hook": "progressbar-background", className: LinearProgressBar_st_css_1.default.barBackground }),
        React.createElement("div", { "data-hook": "progressbar-foreground", style: progressWidth, className: LinearProgressBar_st_css_1.default.barForeground })));
};
var normalizeProps = function (props) {
    var value = parseInt(props.value);
    if (props.value >= FULL_PROGRESS) {
        return __assign({}, props, { value: FULL_PROGRESS });
    }
    if (props.value < 0) {
        return __assign({}, props, { value: NO_PROGRESS });
    }
    return __assign({}, props, { value: value });
};
exports.LinearProgressBar = function (props) {
    var error = props.error, showProgressIndication = props.showProgressIndication;
    var _props = normalizeProps(props);
    var success = _props.value === FULL_PROGRESS;
    return (React.createElement("div", __assign({}, LinearProgressBar_st_css_1.default('root', { error: error, success: success }, _props)),
        renderBarSection(_props.value),
        showProgressIndication && React.createElement("div", { "data-hook": "progress-indicator", className: LinearProgressBar_st_css_1.default.progressIndicationSection }, resolveIndicationElement(_props))));
};
exports.LinearProgressBar.displayName = 'LinearProgressBar';
exports.LinearProgressBar.propTypes = {
    value: prop_types_1.oneOfType([prop_types_1.number, prop_types_1.string]),
    error: prop_types_1.bool,
    showProgressIndication: prop_types_1.bool,
    errorIcon: prop_types_1.element,
    successIcon: prop_types_1.element,
};
exports.LinearProgressBar.defaultProps = {
    value: 0,
};
//# sourceMappingURL=LinearProgressBar.js.map