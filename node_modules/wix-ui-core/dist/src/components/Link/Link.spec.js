"use strict";
/* global describe it expect jest */
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var dom_test_container_1 = require("../../../test/dom-test-container");
var Link_driver_1 = require("./Link.driver");
var Link_1 = require("./Link");
var testkit_1 = require("../../testkit");
var enzyme_1 = require("../../testkit/enzyme");
var testkitTests_1 = require("../../common/testkitTests");
describe('Link', function () {
    var createDriver = new dom_test_container_1.ReactDOMTestContainer()
        .unmountAfterEachTest()
        .createLegacyRenderer(Link_driver_1.linkDriverFactory);
    it('should be defined', function () {
        var link = createDriver(React.createElement(Link_1.Link, null));
        expect(link.exists()).toBe(true);
    });
    it('should render anchor by default', function () {
        var link = createDriver(React.createElement(Link_1.Link, null));
        expect(link.isAnchor()).toBe(true);
    });
    describe('`href` prop', function () {
        it('should render `href` attribute', function () {
            var link = createDriver(React.createElement(Link_1.Link, { href: "test" }));
            expect(link.getAttribute('href')).toBe('test');
        });
        it('should not add `href` attribute when prop missing', function () {
            var link = createDriver(React.createElement(Link_1.Link, null));
            expect(link.getAttribute('href')).toBe(undefined);
        });
    });
    describe('`children` prop', function () {
        it('should be rendered as-is', function () {
            var link = createDriver(React.createElement(Link_1.Link, null, "hello!"));
            expect(link.getChildren()).toBe('hello!');
        });
        it('should render span when children is an anchor', function () {
            var link = createDriver(React.createElement(Link_1.Link, null,
                React.createElement("a", null, "hello")));
            expect(link.getChildren()).toBe('<a>hello</a>');
            expect(link.isAnchor()).toBe(false);
        });
    });
    describe('`onClick` prop', function () {
        it('should call given function', function () {
            var spy = jest.fn();
            var link = createDriver(React.createElement(Link_1.Link, { onClick: spy }));
            link.trigger('click');
            expect(spy.mock.calls.length).toBe(1);
        });
    });
    describe('`className` prop', function () {
        it('should be ignored', function () {
            var link = createDriver(React.createElement(Link_1.Link, { className: "hello" }));
            expect(link.getAttribute('class')).not.toBe('hello');
        });
    });
    describe('other props', function () {
        it('should be passed without modification', function () {
            var onFocusSpy = jest.fn();
            var onBlurSpy = jest.fn();
            var onKeyDownSpy = jest.fn();
            var link = createDriver(React.createElement(Link_1.Link, { target: "wix", "data-hook": "hooked", onFocus: onFocusSpy, onBlur: onBlurSpy, onKeyDown: onKeyDownSpy }, "hello"));
            expect(link.getAttribute('target')).toEqual('wix');
            expect(link.getAttribute('data-hook')).toEqual('hooked');
            link.trigger('focus');
            link.trigger('blur');
            link.trigger('keyDown', { keyCode: 13 });
            expect(onFocusSpy.mock.calls.length).toEqual(1);
            expect(onBlurSpy.mock.calls.length).toEqual(1);
            expect(onKeyDownSpy.mock.calls[0][0].keyCode).toEqual(13);
        });
    });
    testkitTests_1.runTestkitExistsSuite({
        Element: React.createElement(Link_1.Link, null),
        testkitFactory: testkit_1.linkTestkitFactory,
        enzymeTestkitFactory: enzyme_1.linkTestkitFactory
    });
});
//# sourceMappingURL=Link.spec.js.map