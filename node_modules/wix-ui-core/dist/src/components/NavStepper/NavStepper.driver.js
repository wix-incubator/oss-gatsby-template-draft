"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var test_utils_1 = require("react-dom/test-utils");
var test_utils_2 = require("stylable/test-utils");
var NavStep_st_css_1 = require("./NavStep.st.css");
var NavStepperDriver = /** @class */ (function () {
    function NavStepperDriver(element) {
        var _this = this;
        this.element = element;
        this.styleUtil = new test_utils_2.StylableDOMUtil(NavStep_st_css_1.default);
        this.hasStyleState = function (step, state) { return _this.styleUtil.hasStyleState(step, state); };
        this.stepAt = function (index) { return _this.element.getElementsByTagName('li')[index]; };
        /** checks if a step is active */
        this.isStepActive = function (index) { return _this.hasStyleState(_this.stepAt(index), 'active'); };
        /** checks if a step is disabled */
        this.isStepDisabled = function (index) { return _this.hasStyleState(_this.stepAt(index), 'disabled'); };
        /** checks if a step is visited */
        this.isStepVisited = function (index) { return _this.hasStyleState(_this.stepAt(index), 'visited'); };
        /** returns text content of a step */
        this.stepContentAt = function (index) { return _this.stepAt(index).textContent; };
        this.clickOnStep = function (index) { return test_utils_1.Simulate.click(_this.stepAt(index)); };
    }
    Object.defineProperty(NavStepperDriver.prototype, "root", {
        /**  returns the root element */
        get: function () {
            return this.element;
        },
        enumerable: true,
        configurable: true
    });
    /** checks if the stepper exists */
    NavStepperDriver.prototype.exists = function () {
        return !!this.element;
    };
    Object.defineProperty(NavStepperDriver.prototype, "activeStep", {
        /** returns the active step element */
        get: function () {
            var _this = this;
            return Array.from(this.element.getElementsByTagName('li')).find(function (step) { return _this.hasStyleState(step, 'active'); });
        },
        enumerable: true,
        configurable: true
    });
    return NavStepperDriver;
}());
exports.NavStepperDriver = NavStepperDriver;
;
exports.navStepperDriverFactory = function (_a) {
    var element = _a.element;
    return new NavStepperDriver(element);
};
//# sourceMappingURL=NavStepper.driver.js.map