"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var dom_test_container_1 = require("../../../test/dom-test-container");
var NavStepper_driver_1 = require("./NavStepper.driver");
var NavStepper_1 = require("./NavStepper");
describe('NavStepper', function () {
    var container = new dom_test_container_1.ReactDOMTestContainer().unmountAfterEachTest();
    var render = function (jsx) {
        return container.render(jsx)
            .then(function () { return new NavStepper_driver_1.NavStepperDriver(container.componentNode); });
    };
    it('should render a <nav> with an ordered list of items', function () { return __awaiter(_this, void 0, void 0, function () {
        var driver;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, render(React.createElement(NavStepper_1.NavStepper, { activeStep: 0 },
                        React.createElement(NavStepper_1.NavStepper.Step, null, "First Step")))];
                case 1:
                    driver = _a.sent();
                    expect(driver.root.tagName).toBe('NAV');
                    expect(driver.root.firstElementChild.tagName).toBe('OL');
                    expect(driver.stepContentAt(0)).toBe('First Step');
                    return [2 /*return*/];
            }
        });
    }); });
    it('should pass active state to active step child', function () { return __awaiter(_this, void 0, void 0, function () {
        var driver;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, render(React.createElement(NavStepper_1.NavStepper, { activeStep: 0 },
                        React.createElement(NavStepper_1.NavStepper.Step, null, "First Step"),
                        React.createElement(NavStepper_1.NavStepper.Step, null, "Second Step")))];
                case 1:
                    driver = _a.sent();
                    expect(driver.isStepActive(0)).toBe(true);
                    expect(driver.isStepActive(1)).toBe(false);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should set aria-current attribute to active step child', function () { return __awaiter(_this, void 0, void 0, function () {
        var driver;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, render(React.createElement(NavStepper_1.NavStepper, { activeStep: 0 },
                        React.createElement(NavStepper_1.NavStepper.Step, null, "First Step")))];
                case 1:
                    driver = _a.sent();
                    expect(driver.activeStep.attributes['aria-current'].value).toBe('page');
                    return [2 /*return*/];
            }
        });
    }); });
    it('should pass disabled state to disabled children', function () { return __awaiter(_this, void 0, void 0, function () {
        var driver;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, render(React.createElement(NavStepper_1.NavStepper, { activeStep: 0 },
                        React.createElement(NavStepper_1.NavStepper.Step, null, "First Step"),
                        React.createElement(NavStepper_1.NavStepper.Step, { disabled: true }, "Second Step")))];
                case 1:
                    driver = _a.sent();
                    expect(driver.isStepDisabled(0)).toBe(false);
                    expect(driver.isStepDisabled(1)).toBe(true);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should pass visited state to children', function () { return __awaiter(_this, void 0, void 0, function () {
        var driver;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, render(React.createElement(NavStepper_1.NavStepper, { activeStep: 1 },
                        React.createElement(NavStepper_1.NavStepper.Step, null, "First Step"),
                        React.createElement(NavStepper_1.NavStepper.Step, null, "Second Step")))];
                case 1:
                    driver = _a.sent();
                    expect(driver.isStepVisited(0)).toBe(true);
                    expect(driver.isStepVisited(1)).toBe(false);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should allow child to override its own state', function () { return __awaiter(_this, void 0, void 0, function () {
        var driver;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, render(React.createElement(NavStepper_1.NavStepper, { activeStep: 1 },
                        React.createElement(NavStepper_1.NavStepper.Step, { visited: false }, "First Step"),
                        React.createElement(NavStepper_1.NavStepper.Step, null, "Second Step")))];
                case 1:
                    driver = _a.sent();
                    expect(driver.isStepVisited(0)).toBe(false);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should allow child to pass props to the dom element', function () { return __awaiter(_this, void 0, void 0, function () {
        var driver;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, render(React.createElement(NavStepper_1.NavStepper, { activeStep: 0 },
                        React.createElement(NavStepper_1.NavStepper.Step, { value: 5 }, "First Step")))];
                case 1:
                    driver = _a.sent();
                    expect(driver.activeStep.value).toBe(5);
                    return [2 /*return*/];
            }
        });
    }); });
    it('notifies on step click', function () { return __awaiter(_this, void 0, void 0, function () {
        var spy, driver;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    spy = jest.fn();
                    return [4 /*yield*/, render(React.createElement(NavStepper_1.NavStepper, { activeStep: 0, onStepClick: spy },
                            React.createElement(NavStepper_1.NavStepper.Step, null, "First Step"),
                            React.createElement(NavStepper_1.NavStepper.Step, null, "Second Step")))];
                case 1:
                    driver = _a.sent();
                    expect(spy).not.toHaveBeenCalled();
                    driver.clickOnStep(1);
                    expect(spy.mock.calls[0]).toEqual(expect.arrayContaining([1]));
                    return [2 /*return*/];
            }
        });
    }); });
    it('should not notify when clicking on the active step', function () { return __awaiter(_this, void 0, void 0, function () {
        var spy, driver;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    spy = jest.fn();
                    return [4 /*yield*/, render(React.createElement(NavStepper_1.NavStepper, { activeStep: 0, onStepClick: spy },
                            React.createElement(NavStepper_1.NavStepper.Step, null, "First Step"),
                            React.createElement(NavStepper_1.NavStepper.Step, null, "Second Step")))];
                case 1:
                    driver = _a.sent();
                    driver.clickOnStep(0);
                    expect(spy).not.toHaveBeenCalled();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should not notify when clicking on a disabled step', function () { return __awaiter(_this, void 0, void 0, function () {
        var spy, driver;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    spy = jest.fn();
                    return [4 /*yield*/, render(React.createElement(NavStepper_1.NavStepper, { activeStep: 0, onStepClick: spy },
                            React.createElement(NavStepper_1.NavStepper.Step, null, "First Step"),
                            React.createElement(NavStepper_1.NavStepper.Step, { disabled: true }, "Second Step")))];
                case 1:
                    driver = _a.sent();
                    driver.clickOnStep(1);
                    expect(spy).not.toHaveBeenCalled();
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=NavStepper.spec.js.map