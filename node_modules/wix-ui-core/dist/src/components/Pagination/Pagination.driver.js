"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var test_utils_1 = require("stylable/test-utils");
var Pagination_st_css_1 = require("./Pagination.st.css");
var utils = new test_utils_1.StylableDOMUtil(Pagination_st_css_1.default);
var hasStyleState = function (element, state) { return utils.hasStyleState(element, state); };
exports.paginationDriverFactory = function (_a) {
    var root = _a.element, simulate = _a.eventTrigger;
    var pageStrip = root.querySelector('[data-hook="page-strip"]');
    var getNavButton = function (name) { return (root.querySelector("[data-hook=" + name + "]")); };
    var getInput = function () { return root.querySelector('[data-hook="page-input"]'); };
    var getPageByNumber = function (n) { return (pageStrip.firstElementChild.querySelector("[data-hook~=page-" + n + "]")); };
    var getPageElements = function () { return Array.from(pageStrip.firstElementChild.children); };
    return {
        /** Returns the root element*/
        root: root,
        /** Returns whether the element exists */
        exists: function () { return !!root; },
        /** Simulates events */
        simulate: simulate,
        /** Returns the container of page elements */
        getPageStrip: function () { return root.querySelector('[data-hook="page-strip"]'); },
        /** Returns displayed page elements */
        getPages: function () { return getPageElements(); },
        /** Returns the text content of the displayed pages in "pages" mode */
        getPageLabels: function () { return getPageElements().map(function (p) { return p.textContent; }); },
        /** Returns the page element given its index in the page strip */
        getPageByIndex: function (idx) { return getPageElements()[idx] || null; },
        /** Returns the page element given page number */
        getPageByNumber: getPageByNumber,
        /** Returns the page element currently selected */
        getCurrentPage: function () { return root.querySelector('[data-hook~="current-page"]'); },
        /** Returns the element for the navigation button - acceptable values are 'first', 'last', 'previous' or 'next' */
        getNavButton: getNavButton,
        /** Returns the page input element in "input" mode */
        getPageInput: getInput,
        /** Returns the total amount of pages displayed in "input" mode */
        getTotalPagesField: function () { return root.querySelector('[data-hook="total-pages"]'); },
        /** Simulates clicking a nav button */
        clickNavButton: function (name) { return simulate.click(getNavButton(name)); },
        /** Simulates clicking a page in "pages" mode */
        clickPage: function (page) { return simulate.click(getPageByNumber(page)); },
        click: function () { return simulate.click(root); },
        /** Simulates changing the value of the input field in "input" mode */
        changeInput: function (newValue) {
            var input = getInput();
            input.value = newValue;
            simulate.change(input);
        },
        /** Simulates committing the input field value in "input" mode */
        commitInput: function () { return simulate.keyDown(getInput(), { keyCode: 13 }); },
        /** Simulates blur in the input field in "input" mode */
        blurInput: function () { return simulate.blur(getInput()); },
        /** Checks if the input has an error */
        inputHasError: function () { return hasStyleState(root, 'error'); }
    };
};
//# sourceMappingURL=Pagination.driver.js.map