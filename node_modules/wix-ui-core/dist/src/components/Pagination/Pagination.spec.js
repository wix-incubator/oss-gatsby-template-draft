"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var test_utils_1 = require("react-dom/test-utils");
var test_utils_2 = require("stylable/test-utils");
var react_helpers_1 = require("wix-ui-test-utils/react-helpers");
var Pagination_1 = require("./Pagination");
var Pagination_private_driver_1 = require("./Pagination.private.driver");
var Pagination_st_css_1 = require("./Pagination.st.css");
var PaginationTest_st_css_1 = require("./PaginationTest.st.css");
var dom_test_container_1 = require("../../../test/dom-test-container");
var stylableUtil = new test_utils_2.StylableDOMUtil(Pagination_st_css_1.default);
function spaceForPages(n) {
    // Assuming we use styles from PaginationTest.st.css
    var buttonWidth = 30;
    var buttonMargin = 5;
    return (n + 2) * (buttonWidth + 2 * buttonMargin) - (2 * buttonMargin);
}
describe('Pagination', function () {
    var container = new dom_test_container_1.ReactDOMTestContainer().unmountAfterEachTest();
    var render = function (jsx) {
        return container.render(jsx)
            .then(function () { return new Pagination_private_driver_1.PaginationDriver(container.componentNode); });
    };
    describe('Accessibility', function () {
        it('has <nav> as the root node', function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 5 }))];
                    case 1:
                        p = _a.sent();
                        expect(p.root.tagName).toEqual('NAV');
                        return [2 /*return*/];
                }
            });
        }); });
        it('has role=navigation', function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 5 }))];
                    case 1:
                        p = _a.sent();
                        expect(p.root.getAttribute('role')).toEqual('navigation');
                        return [2 /*return*/];
                }
            });
        }); });
        it('has aria-label', function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 5 }))];
                    case 1:
                        p = _a.sent();
                        expect(p.root.getAttribute('aria-label'))
                            .toEqual('Pagination Navigation');
                        return [2 /*return*/];
                }
            });
        }); });
        it('has correct order of elements for screen readers', function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 5, showFirstLastNavButtons: true }))];
                    case 1:
                        p = _a.sent();
                        expect(p.nextButton.compareDocumentPosition(p.previousButton))
                            .toEqual(Node.DOCUMENT_POSITION_FOLLOWING);
                        expect(p.previousButton.compareDocumentPosition(p.pageStrip))
                            .toEqual(Node.DOCUMENT_POSITION_FOLLOWING);
                        expect(p.pageStrip.compareDocumentPosition(p.firstButton))
                            .toEqual(Node.DOCUMENT_POSITION_FOLLOWING);
                        expect(p.firstButton.compareDocumentPosition(p.lastButton))
                            .toEqual(Node.DOCUMENT_POSITION_FOLLOWING);
                        return [2 /*return*/];
                }
            });
        }); });
        it('has aria-label attribute on pages', function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 3 }))];
                    case 1:
                        p = _a.sent();
                        expect(p.getPage(1).getAttribute('aria-label')).toEqual('Page 1');
                        expect(p.getPage(2).getAttribute('aria-label')).toEqual('Page 2');
                        expect(p.getPage(3).getAttribute('aria-label')).toEqual('Page 3');
                        return [2 /*return*/];
                }
            });
        }); });
        it('has aria-label on the input field', function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { paginationMode: "input", totalPages: 5 }))];
                    case 1:
                        p = _a.sent();
                        expect(p.input.getAttribute('aria-label'))
                            .toEqual('Page number, select a number between 1 and 5');
                        return [2 /*return*/];
                }
            });
        }); });
        it('has aria-label on navigation buttons', function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 3, showFirstLastNavButtons: true }))];
                    case 1:
                        p = _a.sent();
                        expect(p.firstButton.getAttribute('aria-label')).toEqual('First Page');
                        expect(p.lastButton.getAttribute('aria-label')).toEqual('Last Page');
                        expect(p.previousButton.getAttribute('aria-label')).toEqual('Previous Page');
                        expect(p.nextButton.getAttribute('aria-label')).toEqual('Next Page');
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('Page numbers mode', function () {
        it('selects the first page by default', function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 5 }))];
                    case 1:
                        p = _a.sent();
                        expect(p.currentPage.textContent).toBe('1');
                        return [2 /*return*/];
                }
            });
        }); });
        it('selects given currentPage', function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 5, currentPage: 5 }))];
                    case 1:
                        p = _a.sent();
                        expect(p.currentPage.textContent).toBe('5');
                        return [2 /*return*/];
                }
            });
        }); });
        it('calls onChange on page click', function () { return __awaiter(_this, void 0, void 0, function () {
            var onChange, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onChange = jest.fn();
                        return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 5, currentPage: 1, onChange: onChange }))];
                    case 1:
                        p = _a.sent();
                        test_utils_1.Simulate.click(p.getPage(5));
                        expect(onChange).toHaveBeenCalledWith(expect.objectContaining({ page: 5 }));
                        return [2 /*return*/];
                }
            });
        }); });
        it('does not call onChange on current page click', function () { return __awaiter(_this, void 0, void 0, function () {
            var onChange, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onChange = jest.fn();
                        return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 5, currentPage: 1, onChange: onChange }))];
                    case 1:
                        p = _a.sent();
                        test_utils_1.Simulate.click(p.getPage(1));
                        return [4 /*yield*/, react_helpers_1.sleep(10)];
                    case 2:
                        _a.sent();
                        expect(onChange).not.toBeCalled();
                        return [2 /*return*/];
                }
            });
        }); });
        it('does not call onChange when disabled', function () { return __awaiter(_this, void 0, void 0, function () {
            var onChange, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onChange = jest.fn();
                        return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 5, currentPage: 1, onChange: onChange, showFirstLastNavButtons: true, disabled: true }))];
                    case 1:
                        p = _a.sent();
                        test_utils_1.Simulate.click(p.getPage(2));
                        test_utils_1.Simulate.click(p.firstButton);
                        test_utils_1.Simulate.click(p.lastButton);
                        test_utils_1.Simulate.click(p.nextButton);
                        test_utils_1.Simulate.click(p.previousButton);
                        return [4 /*yield*/, react_helpers_1.sleep(10)];
                    case 2:
                        _a.sent();
                        expect(onChange).not.toBeCalled();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('Input field mode', function () {
        it('shows the input field with the current page', function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { paginationMode: "input", totalPages: 5 }))];
                    case 1:
                        p = _a.sent();
                        expect(p.input.value).toEqual('1');
                        return [2 /*return*/];
                }
            });
        }); });
        it('does not show the total amount of pages by default', function () { return __awaiter(_this, void 0, void 0, function () {
            var totalPagesLabel;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { paginationMode: "input", totalPages: 5 }))];
                    case 1:
                        totalPagesLabel = (_a.sent()).totalPagesLabel;
                        expect(totalPagesLabel).toBe(null);
                        return [2 /*return*/];
                }
            });
        }); });
        it('shows the total amount of pages if showInputModeTotalPages=true', function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { paginationMode: "input", totalPages: 5, showInputModeTotalPages: true }))];
                    case 1:
                        p = _a.sent();
                        expect(p.totalPagesLabel.textContent).toEqual('5');
                        return [2 /*return*/];
                }
            });
        }); });
        it('calls onChange on Enter press', function () { return __awaiter(_this, void 0, void 0, function () {
            var onChange, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onChange = jest.fn();
                        return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { paginationMode: "input", totalPages: 5, onChange: onChange }))];
                    case 1:
                        p = _a.sent();
                        p.changeInput('5');
                        p.commitInput();
                        expect(onChange).toHaveBeenCalledWith(expect.objectContaining({ page: 5 }));
                        return [2 /*return*/];
                }
            });
        }); });
        it('does not call onChange with an empty value', function () { return __awaiter(_this, void 0, void 0, function () {
            var onChange, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onChange = jest.fn();
                        return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { paginationMode: "input", totalPages: 5, onChange: onChange }))];
                    case 1:
                        p = _a.sent();
                        p.changeInput('');
                        p.commitInput();
                        return [4 /*yield*/, react_helpers_1.sleep(10)];
                    case 2:
                        _a.sent();
                        expect(onChange).not.toBeCalled();
                        return [2 /*return*/];
                }
            });
        }); });
        it('does not call onChange with an out-of-range value', function () { return __awaiter(_this, void 0, void 0, function () {
            var onChange, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onChange = jest.fn();
                        return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { paginationMode: "input", totalPages: 5, onChange: onChange }))];
                    case 1:
                        p = _a.sent();
                        p.changeInput('6');
                        p.commitInput();
                        return [4 /*yield*/, react_helpers_1.sleep(10)];
                    case 2:
                        _a.sent();
                        expect(onChange).not.toBeCalled();
                        return [2 /*return*/];
                }
            });
        }); });
        it('does not call onChange with the current page number', function () { return __awaiter(_this, void 0, void 0, function () {
            var onChange, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onChange = jest.fn();
                        return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { paginationMode: "input", totalPages: 5, currentPage: 1, onChange: onChange }))];
                    case 1:
                        p = _a.sent();
                        p.changeInput('1');
                        p.commitInput();
                        return [4 /*yield*/, react_helpers_1.sleep(10)];
                    case 2:
                        _a.sent();
                        expect(onChange).not.toBeCalled();
                        return [2 /*return*/];
                }
            });
        }); });
        it('does not call onChange with a non-numeric value', function () { return __awaiter(_this, void 0, void 0, function () {
            var onChange, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onChange = jest.fn();
                        return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { paginationMode: "input", totalPages: 5, currentPage: 1 }))];
                    case 1:
                        p = _a.sent();
                        p.changeInput('five');
                        p.commitInput();
                        return [4 /*yield*/, react_helpers_1.sleep(10)];
                    case 2:
                        _a.sent();
                        expect(onChange).not.toBeCalled();
                        return [2 /*return*/];
                }
            });
        }); });
        it('reverts cleared input to the current page on blur', function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { paginationMode: "input", totalPages: 5, currentPage: 1 }))];
                    case 1:
                        p = _a.sent();
                        test_utils_1.Simulate.focus(p.input);
                        p.changeInput('');
                        expect(p.input.value).toBe('');
                        test_utils_1.Simulate.blur(p.input);
                        expect(p.input.value).toBe('1');
                        return [2 /*return*/];
                }
            });
        }); });
        it('disables the input in disabled mode', function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { paginationMode: "input", totalPages: 5, disabled: true }))];
                    case 1:
                        p = _a.sent();
                        expect(p.input.disabled).toBe(true);
                        return [2 /*return*/];
                }
            });
        }); });
        it('adds error state after pressing Enter if the input has invalid value ' +
            'and removes the error state on entry', function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { paginationMode: "input", totalPages: 5 }))];
                    case 1:
                        p = _a.sent();
                        p.changeInput('6');
                        p.commitInput();
                        expect(stylableUtil.hasStyleState(p.root, 'error')).toBe(true);
                        p.changeInput('1');
                        expect(stylableUtil.hasStyleState(p.root, 'error')).toBe(false);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('Navigation buttons', function () {
        it('shows only next and previous buttons by default', function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 3 }))];
                    case 1:
                        p = _a.sent();
                        expect(p.previousButton).toBeTruthy();
                        expect(p.nextButton).toBeTruthy();
                        expect(p.firstButton).toBe(null);
                        expect(p.lastButton).toBe(null);
                        return [2 /*return*/];
                }
            });
        }); });
        it('shows first and last buttons when showFirstLastNavButtons is on', function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 3, showFirstLastNavButtons: true }))];
                    case 1:
                        p = _a.sent();
                        expect(p.firstButton).toBeTruthy();
                        expect(p.lastButton).toBeTruthy();
                        return [2 /*return*/];
                }
            });
        }); });
        it('each of the buttons triggers onChange', function () { return __awaiter(_this, void 0, void 0, function () {
            var onChange, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onChange = jest.fn();
                        return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 5, currentPage: 3, showFirstLastNavButtons: true, onChange: onChange }))];
                    case 1:
                        p = _a.sent();
                        test_utils_1.Simulate.click(p.previousButton);
                        expect(onChange).lastCalledWith(expect.objectContaining({ page: 2 }));
                        test_utils_1.Simulate.click(p.nextButton);
                        expect(onChange).lastCalledWith(expect.objectContaining({ page: 4 }));
                        test_utils_1.Simulate.click(p.firstButton);
                        expect(onChange).lastCalledWith(expect.objectContaining({ page: 1 }));
                        test_utils_1.Simulate.click(p.lastButton);
                        expect(onChange).lastCalledWith(expect.objectContaining({ page: 5 }));
                        return [2 /*return*/];
                }
            });
        }); });
        it('disables first and previous buttons when on the first page', function () { return __awaiter(_this, void 0, void 0, function () {
            var onChange, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onChange = jest.fn();
                        return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 5, currentPage: 1, showFirstLastNavButtons: true }))];
                    case 1:
                        p = _a.sent();
                        test_utils_1.Simulate.click(p.previousButton);
                        test_utils_1.Simulate.click(p.firstButton);
                        return [4 /*yield*/, react_helpers_1.sleep(10)];
                    case 2:
                        _a.sent();
                        expect(onChange).not.toBeCalled();
                        return [2 /*return*/];
                }
            });
        }); });
        it('disables next and last buttons when on the last page', function () { return __awaiter(_this, void 0, void 0, function () {
            var onChange, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onChange = jest.fn();
                        return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 5, currentPage: 5, showFirstLastNavButtons: true }))];
                    case 1:
                        p = _a.sent();
                        test_utils_1.Simulate.click(p.nextButton);
                        test_utils_1.Simulate.click(p.lastButton);
                        return [4 /*yield*/, react_helpers_1.sleep(10)];
                    case 2:
                        _a.sent();
                        expect(onChange).not.toBeCalled();
                        return [2 /*return*/];
                }
            });
        }); });
        it('allows to customize button text', function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 5, showFirstLastNavButtons: true, firstLabel: "first-label", previousLabel: "previous-label", nextLabel: "next-label", lastLabel: "last-label" }))];
                    case 1:
                        p = _a.sent();
                        expect(p.firstButton.textContent).toEqual('first-label');
                        expect(p.previousButton.textContent).toEqual('previous-label');
                        expect(p.nextButton.textContent).toEqual('next-label');
                        expect(p.lastButton.textContent).toEqual('last-label');
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('Keyboard and mouse interaction', function () {
        it('allows to select items using Space and Enter', function () { return __awaiter(_this, void 0, void 0, function () {
            var onChange, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onChange = jest.fn();
                        return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 3, currentPage: 1, onChange: onChange }))];
                    case 1:
                        p = _a.sent();
                        test_utils_1.Simulate.keyDown(p.nextButton, { keyCode: 0 });
                        test_utils_1.Simulate.keyDown(p.getPage(2), { keyCode: 0 });
                        expect(onChange).not.toBeCalled();
                        test_utils_1.Simulate.keyDown(p.nextButton, { keyCode: 32 });
                        test_utils_1.Simulate.keyDown(p.nextButton, { keyCode: 13 });
                        test_utils_1.Simulate.keyDown(p.getPage(2), { keyCode: 32 });
                        test_utils_1.Simulate.keyDown(p.getPage(2), { keyCode: 13 });
                        expect(onChange).toHaveBeenCalledTimes(4);
                        return [2 /*return*/];
                }
            });
        }); });
        it('allows to select items using mouse', function () { return __awaiter(_this, void 0, void 0, function () {
            var onChange, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onChange = jest.fn();
                        return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 3, currentPage: 1, onChange: onChange }))];
                    case 1:
                        p = _a.sent();
                        test_utils_1.Simulate.click(p.nextButton);
                        test_utils_1.Simulate.click(p.getPage(2));
                        expect(onChange).toHaveBeenCalledTimes(2);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    // There tests depend on layout and are for browser environment only.
    describe.skip('Responsiveness', function () {
        it("shows all pages if there is enough room", function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { className: PaginationTest_st_css_1.default.root, responsive: true, width: spaceForPages(9), showFirstPage: true, showLastPage: true, currentPage: 5, totalPages: 9 }))];
                    case 1:
                        p = _a.sent();
                        expect(p.pageLabels).toEqual(['1', '2', '3', '4', '5', '6', '7', '8', '9']);
                        return [2 /*return*/];
                }
            });
        }); });
        it("starts adding ellipsis if there is not enough room", function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { className: PaginationTest_st_css_1.default.root, responsive: true, width: spaceForPages(9) - 1, showFirstPage: true, showLastPage: true, currentPage: 5, totalPages: 9 }))];
                    case 1:
                        p = _a.sent();
                        expect(p.pageLabels).toEqual(['1', '2', '3', '4', '5', '6', '...', '9']);
                        return [2 /*return*/];
                }
            });
        }); });
        it("doesn't try to include the first and the last page when not explicitly asked to", function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { className: PaginationTest_st_css_1.default.root, responsive: true, width: spaceForPages(7), currentPage: 5, totalPages: 9 }))];
                    case 1:
                        p = _a.sent();
                        expect(p.pageLabels).toEqual(['2', '3', '4', '5', '6', '7', '8']);
                        return [2 /*return*/];
                }
            });
        }); });
        it("shows ellipsis before the last page if the current page is close to the beginning", function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { className: PaginationTest_st_css_1.default.root, responsive: true, width: spaceForPages(7), showFirstPage: true, showLastPage: true, currentPage: 4, totalPages: 9 }))];
                    case 1:
                        p = _a.sent();
                        expect(p.pageLabels).toEqual(['1', '2', '3', '4', '5', '...', '9']);
                        return [2 /*return*/];
                }
            });
        }); });
        it("show ellipsis after the first page if the current page is close to the end", function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { className: PaginationTest_st_css_1.default.root, responsive: true, width: spaceForPages(7), showFirstPage: true, showLastPage: true, currentPage: 6, totalPages: 9 }))];
                    case 1:
                        p = _a.sent();
                        expect(p.pageLabels).toEqual(['1', '...', '5', '6', '7', '8', '9']);
                        return [2 /*return*/];
                }
            });
        }); });
        it("show ellipsis on each side if the current page is somewhere in the middle", function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { className: PaginationTest_st_css_1.default.root, responsive: true, width: spaceForPages(7), showFirstPage: true, showLastPage: true, currentPage: 5, totalPages: 9 }))];
                    case 1:
                        p = _a.sent();
                        expect(p.pageLabels).toEqual(['1', '...', '4', '5', '6', '...', '9']);
                        return [2 /*return*/];
                }
            });
        }); });
        it("gives higher priority to first and last page than to prev and next", function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { className: PaginationTest_st_css_1.default.root, responsive: true, width: spaceForPages(5), showFirstPage: true, showLastPage: true, currentPage: 5, totalPages: 9 }))];
                    case 1:
                        p = _a.sent();
                        expect(p.pageLabels).toEqual(['1', '...', '5', '...', '9']);
                        return [2 /*return*/];
                }
            });
        }); });
        it("doesn't show ellipses if there's too little space for them", function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { className: PaginationTest_st_css_1.default.root, responsive: true, width: spaceForPages(3), showFirstPage: true, showLastPage: true, currentPage: 5, totalPages: 9 }))];
                    case 1:
                        p = _a.sent();
                        expect(p.pageLabels).toEqual(['4', '5', '6']);
                        return [2 /*return*/];
                }
            });
        }); });
        it("always shows the current page even if there's not enough space for it", function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { className: PaginationTest_st_css_1.default.root, responsive: true, width: spaceForPages(0.5), showFirstPage: true, showLastPage: true, currentPage: 5, totalPages: 9 }))];
                    case 1:
                        p = _a.sent();
                        expect(p.pageLabels).toEqual(['5']);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    it('adds IDs to the elements if ID prefix is provided', function () { return __awaiter(_this, void 0, void 0, function () {
        var p;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { id: "$", totalPages: 3, showFirstLastNavButtons: true }))];
                case 1:
                    p = _a.sent();
                    expect(p.firstButton.getAttribute('id')).toBe('$navButtonFirst');
                    expect(p.previousButton.getAttribute('id')).toBe('$navButtonPrevious');
                    expect(p.nextButton.getAttribute('id')).toBe('$navButtonNext');
                    expect(p.lastButton.getAttribute('id')).toBe('$navButtonLast');
                    expect(p.pageStrip.getAttribute('id')).toBe('$pageStrip');
                    return [2 /*return*/];
            }
        });
    }); });
    it('does not add ID to the root if ID prefix is not provided', function () { return __awaiter(_this, void 0, void 0, function () {
        var p;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 3 }))];
                case 1:
                    p = _a.sent();
                    expect(p.root.hasAttribute('id')).toBe(false);
                    return [2 /*return*/];
            }
        });
    }); });
    it('allows to customize the gap text', function () { return __awaiter(_this, void 0, void 0, function () {
        var p;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 5, maxPagesToShow: 4, showLastPage: true, gapLabel: React.createElement("em", null, "*") }))];
                case 1:
                    p = _a.sent();
                    expect(p.pageLabels).toEqual(['1', '2', '*', '5']);
                    return [2 /*return*/];
            }
        });
    }); });
    it('adds URLs to the pages according to desired format', function () { return __awaiter(_this, void 0, void 0, function () {
        var p;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 3, currentPage: 1, pageUrl: function (n) { return "https://example.com/" + n + "/"; }, showFirstLastNavButtons: true }))];
                case 1:
                    p = _a.sent();
                    expect(p.firstButton.getAttribute('href')).toBe(null);
                    expect(p.previousButton.getAttribute('href')).toBe(null);
                    expect(p.nextButton.getAttribute('href')).toEqual('https://example.com/2/');
                    expect(p.lastButton.getAttribute('href')).toEqual('https://example.com/3/');
                    expect(p.getPage(1).getAttribute('href')).toEqual(null);
                    expect(p.getPage(2).getAttribute('href')).toEqual('https://example.com/2/');
                    expect(p.getPage(3).getAttribute('href')).toEqual('https://example.com/3/');
                    return [2 /*return*/];
            }
        });
    }); });
    it('calls onClick when clicking on the component', function () { return __awaiter(_this, void 0, void 0, function () {
        var onClick, p;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    onClick = jest.fn();
                    return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 3, onClick: onClick }))];
                case 1:
                    p = _a.sent();
                    test_utils_1.Simulate.click(p.root);
                    expect(onClick).toHaveBeenCalled();
                    return [2 /*return*/];
            }
        });
    }); });
    it('calls onDoubcleClick when double clicking on the component', function () { return __awaiter(_this, void 0, void 0, function () {
        var onDoubleClick, p;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    onDoubleClick = jest.fn();
                    return [4 /*yield*/, render(React.createElement(Pagination_1.Pagination, { totalPages: 3, onDoubleClick: onDoubleClick }))];
                case 1:
                    p = _a.sent();
                    test_utils_1.Simulate.doubleClick(p.root);
                    expect(onDoubleClick).toHaveBeenCalled();
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=Pagination.spec.js.map