"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Pagination_1 = require("./Pagination");
exports.measureAndSetRootMinWidth = function (compNode, paginationMode, idPrefix) {
    if (idPrefix === void 0) { idPrefix = ''; }
    compNode.style.minWidth = '';
    compNode.style.minHeight = '';
    var getById = function (id) { return compNode.querySelector("#" + Pagination_1.getId(idPrefix, id)); };
    var getMinWidth = function (elmnt) { return elmnt ? parseInt(window.getComputedStyle(elmnt).minWidth, 10) : 0; };
    var getWidthWithMargins = function (element) {
        if (!element) {
            return 0;
        }
        var style = window.getComputedStyle(element);
        return parseInt(style.marginRight, 10) +
            element.offsetWidth +
            parseInt(style.marginLeft, 10);
    };
    var getHeightWithMargins = function (element) {
        if (!element) {
            return 0;
        }
        var style = window.getComputedStyle(element);
        return parseInt(style.marginBottom, 10) +
            element.offsetHeight +
            parseInt(style.marginTop, 10);
    };
    var navButtonsMinWidth = getWidthWithMargins(getById('navButtonNext')) +
        getWidthWithMargins(getById('navButtonPrevious')) +
        getWidthWithMargins(getById('navButtonFirst')) +
        getWidthWithMargins(getById('navButtonLast'));
    var selectionMinWidth = 0;
    var minHeight = 0;
    if (paginationMode === 'pages') {
        // means we're in "pages" pagination mode
        selectionMinWidth = getMinWidth(getById('pageStrip'));
        minHeight = Math.max(getHeightWithMargins(getById('pageStrip')), getHeightWithMargins(getById('navButtonNext')));
    }
    else {
        // means we're in "input" pagination mode
        selectionMinWidth = getWidthWithMargins(getById('totalPages')) +
            getWidthWithMargins(getById('slash')) +
            getWidthWithMargins(getById('pageInput'));
        minHeight = Math.max(getHeightWithMargins(getById('pageInput')), getHeightWithMargins(getById('navButtonNext')));
    }
    compNode.style.minWidth = navButtonsMinWidth + selectionMinWidth + 'px';
    compNode.style.minHeight = minHeight + 'px';
};
//# sourceMappingURL=root-min-width.js.map