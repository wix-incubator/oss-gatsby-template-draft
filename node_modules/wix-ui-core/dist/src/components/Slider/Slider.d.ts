/// <reference types="react" />
import * as React from 'react';
export interface SliderProps {
    min?: number;
    max?: number;
    value?: number;
    onChange?: (x: any) => void;
    onBlur?: () => void;
    onFocus?: () => void;
    orientation?: 'horizontal' | 'vertical';
    step?: number;
    stepType?: 'value' | 'count';
    tooltipPosition?: 'normal' | 'across';
    tooltipVisibility?: 'none' | 'always' | 'hover';
    tickMarksPosition?: 'normal' | 'middle' | 'across';
    tickMarksShape?: 'none' | 'line' | 'dot';
    tooltipPrefix?: string;
    tooltipSuffix?: string;
    trackSize?: number;
    thumbShape?: 'circle' | 'square' | 'rectangle' | 'bar';
    disabled?: boolean;
    readOnly?: boolean;
    dir?: string;
    style?: Style;
}
export interface Style {
    width?: number;
    height?: number;
}
export interface SliderState {
    dragging: boolean;
    mouseDown: boolean;
    thumbHover: boolean;
    inKeyPress: boolean;
}
export declare class Slider extends React.PureComponent<SliderProps, SliderState> {
    static displayName: string;
    root: HTMLDivElement;
    track: HTMLDivElement;
    static propTypes: Object;
    static defaultProps: {
        min: number;
        max: number;
        value: number;
        stepType: string;
        thumbShape: string;
        orientation: string;
        disabled: boolean;
        readOnly: boolean;
        tooltipVisibility: string;
        tooltipPosition: string;
        tooltipPrefix: string;
        tooltipSuffix: string;
        tickMarksPosition: string;
        tickMarksShape: string;
        dir: string;
        onFocus: any;
        onBlur: any;
        style: {
            width: number;
            height: number;
        };
    };
    state: {
        dragging: boolean;
        mouseDown: boolean;
        thumbHover: boolean;
        inKeyPress: boolean;
    };
    componentDidMount(): void;
    componentWillUnmount(): void;
    focus(): void;
    blur(): void;
    getStartPos(): "left" | "right";
    calcDiscreteStepValue(min: any, max: any, step: any, stepType: any): any;
    getStepValue(): any;
    isShallowEqual(v: any, o: any): boolean;
    getSliderSize(): number;
    getSliderLength(): number;
    getThumbSize(): {
        width: number;
        height: number;
    };
    getThumbSizeMainAxis(): number;
    getThumbSizeCrossAxis(): number;
    setTrackNode: (track: any) => void;
    handleBlur: () => void;
    handleMouseDown: () => void;
    handleMouseUp: () => void;
    handleKeyDown: (ev: any) => void;
    handleMouseMove: (ev: any) => void;
    handleChange(value: any): void;
    handleThumbEnter: () => void;
    handleThumbLeave: () => void;
    clamp(val: any, min: any, max: any): number;
    isRtl(): boolean;
    isVertical(): boolean;
    isContinuous(): boolean;
    moveThumbByMouse: (ev: any) => void;
    shouldShowTooltip(): boolean;
    calcThumbProgressPosition(): string;
    calcTrackFillPosition(): string;
    calcThumbCrossPosition(): string;
    calcThumbPosition(): {
        bottom: string;
        left: number;
        top?: undefined;
    } | {
        [x: string]: string | number;
        top: number;
        bottom?: undefined;
        left?: undefined;
    };
    floorValue(value: any, precision?: number): number;
    renderTooltip(): JSX.Element;
    ticksShown(): boolean;
    getInnerOffsets(): {
        offsetHeight?: undefined;
        offsetTop?: undefined;
        offsetWidth?: undefined;
        offsetLeft?: undefined;
    } | {
        offsetHeight: any;
        offsetTop: any;
        offsetWidth?: undefined;
        offsetLeft?: undefined;
    } | {
        offsetWidth: any;
        offsetLeft: any;
        offsetHeight?: undefined;
        offsetTop?: undefined;
    };
    getInnerDims(): any;
    render(): JSX.Element;
}
