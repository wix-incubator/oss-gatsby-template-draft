"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropTypes = require("prop-types");
var Slider_st_css_1 = require("./Slider.st.css");
var Thumb = /** @class */ (function (_super) {
    __extends(Thumb, _super);
    function Thumb() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Thumb.prototype.render = function () {
        var _a = this.props, shape = _a.shape, thumbSize = _a.thumbSize;
        var ThumbShape = thumbShapes[shape];
        return (React.createElement("div", { "data-hook": "thumb", className: Slider_st_css_1.default.thumb, onMouseEnter: this.props.onMouseEnter, onMouseLeave: this.props.onMouseLeave, style: __assign({}, this.props.thumbPosition, thumbSize) },
            React.createElement(ThumbShape.component, null),
            this.props.children));
    };
    Thumb.propTypes = {
        shape: PropTypes.string.isRequired,
        thumbPosition: PropTypes.object.isRequired,
        thumbSize: PropTypes.object.isRequired,
        onMouseEnter: PropTypes.func.isRequired,
        onMouseLeave: PropTypes.func.isRequired,
    };
    return Thumb;
}(React.Component));
exports.Thumb = Thumb;
function getThumbSize(shape) {
    var rest = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        rest[_i - 1] = arguments[_i];
    }
    return (_a = thumbShapes[shape]).getThumbSize.apply(_a, rest);
    var _a;
}
exports.getThumbSize = getThumbSize;
var CircleThumb = /** @class */ (function (_super) {
    __extends(CircleThumb, _super);
    function CircleThumb() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CircleThumb.prototype.render = function () {
        return (React.createElement("div", __assign({}, Slider_st_css_1.default('thumbShape', { shapeType: 'circle' }), { style: { borderRadius: '50%' } })));
    };
    return CircleThumb;
}(React.PureComponent));
var RectangleThumb = /** @class */ (function (_super) {
    __extends(RectangleThumb, _super);
    function RectangleThumb() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RectangleThumb.prototype.render = function () {
        return (React.createElement("div", __assign({}, Slider_st_css_1.default('thumbShape', { shapeType: 'rectangle' }))));
    };
    return RectangleThumb;
}(React.PureComponent));
var SquareThumb = /** @class */ (function (_super) {
    __extends(SquareThumb, _super);
    function SquareThumb() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SquareThumb.prototype.render = function () {
        return (React.createElement("div", __assign({}, Slider_st_css_1.default('thumbShape', { shapeType: 'square' }))));
    };
    return SquareThumb;
}(React.PureComponent));
var BarThumb = /** @class */ (function (_super) {
    __extends(BarThumb, _super);
    function BarThumb() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BarThumb.prototype.render = function () {
        return (React.createElement("div", __assign({}, Slider_st_css_1.default('thumbShape', { shapeType: 'bar' }))));
    };
    return BarThumb;
}(React.PureComponent));
var thumbShapes = {
    circle: {
        component: CircleThumb,
        getThumbSize: function (sliderSize) { return ({ width: sliderSize, height: sliderSize }); }
    },
    rectangle: {
        component: RectangleThumb,
        getThumbSize: function (sliderSize, isVertical) {
            return (_a = {},
                _a[isVertical ? 'height' : 'width'] = 1.5 * sliderSize,
                _a[isVertical ? 'width' : 'height'] = sliderSize,
                _a);
            var _a;
        }
    },
    square: {
        component: SquareThumb,
        getThumbSize: function (sliderSize) { return ({ width: sliderSize, height: sliderSize }); }
    },
    bar: {
        component: BarThumb,
        getThumbSize: function (sliderSize, isVertical) {
            return (_a = {},
                _a[isVertical ? 'height' : 'width'] = 0.5 * sliderSize,
                _a[isVertical ? 'width' : 'height'] = sliderSize,
                _a);
            var _a;
        }
    }
};
//# sourceMappingURL=Thumb.js.map