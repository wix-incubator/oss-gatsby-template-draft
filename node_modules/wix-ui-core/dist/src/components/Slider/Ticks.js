"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Ticks = /** @class */ (function (_super) {
    __extends(Ticks, _super);
    function Ticks() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Ticks.prototype.calcMaximumTickDensity = function () {
        if (this.props.tickMarksShape === 'line') {
            return 1 / 8;
        }
        return 1 / 16;
    };
    Ticks.prototype.calcStep = function () {
        var _a = this.props, step = _a.step, min = _a.min, max = _a.max, trackSize = _a.trackSize;
        var totalTickCount = (max - min) / Number(step);
        var density = Math.min(totalTickCount / trackSize, this.calcMaximumTickDensity());
        var adjustedStep = (max - min) / (trackSize * density);
        return adjustedStep;
    };
    Ticks.prototype.renderTick = function (i, min, max, vertical, thumbSize, pStyle) {
        var tickMarksShape = this.props.tickMarksShape;
        var pct = (i - min) / (max - min);
        var val = "calc(" + pct + " * calc(100% - " + thumbSize + "px) + " + thumbSize / 2 + "px)";
        return (React.createElement("div", __assign({}, pStyle('tick', { tickMarksShape: tickMarksShape }), { key: i, "data-hook": "tick", onClick: this.props.onTickClick, style: vertical ? { bottom: val } : { left: val } })));
    };
    Ticks.prototype.render = function () {
        var _a = this.props, min = _a.min, max = _a.max, thumbSize = _a.thumbSize, vertical = _a.vertical, trackSize = _a.trackSize, pStyle = _a.pStyle;
        if (!trackSize) {
            return null;
        }
        var step = this.calcStep();
        var ticks = [];
        for (var i = min; i < max; i += step) {
            ticks.push(this.renderTick(i, min, max, vertical, thumbSize, pStyle));
        }
        ticks.push(this.renderTick(max, min, max, vertical, thumbSize, pStyle));
        return (React.createElement("div", { "data-hook": "ticks-wrapper" }, ticks));
    };
    return Ticks;
}(React.PureComponent));
exports.Ticks = Ticks;
//# sourceMappingURL=Ticks.js.map