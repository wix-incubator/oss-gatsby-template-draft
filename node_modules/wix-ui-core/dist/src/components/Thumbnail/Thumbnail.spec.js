"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Thumbnail_driver_1 = require("./Thumbnail.driver");
var _1 = require("./");
var dom_test_container_1 = require("../../../test/dom-test-container");
var enzyme_1 = require("wix-ui-test-utils/enzyme");
var vanilla_1 = require("wix-ui-test-utils/vanilla");
var enzyme_2 = require("enzyme");
var testkit_1 = require("../../testkit");
var enzyme_3 = require("../../testkit/enzyme");
describe('Thumbnail', function () {
    var createDriver = new dom_test_container_1.ReactDOMTestContainer()
        .unmountAfterEachTest()
        .createLegacyRenderer(Thumbnail_driver_1.thumbnailDriverFactory);
    describe('children prop', function () {
        it('should be rendered', function () {
            var driver = createDriver(React.createElement(_1.Thumbnail, null,
                React.createElement("div", null, "hello")));
            expect(driver.getContent().outerHTML).toBe('<div>hello</div>');
        });
    });
    describe('onClick prop', function () {
        it('should be called when clicked', function () {
            var onClick = jest.fn();
            var driver = createDriver(React.createElement(_1.Thumbnail, { onClick: onClick },
                React.createElement("div", null)));
            driver.click();
            expect(onClick).toBeCalled();
        });
    });
    describe('selected prop', function () {
        it('should not be selected by default', function () {
            var driver = createDriver(React.createElement(_1.Thumbnail, null,
                React.createElement("div", null)));
            expect(driver.isSelected()).toEqual(false);
        });
        it('should be selected', function () {
            var driver = createDriver(React.createElement(_1.Thumbnail, { selected: true },
                React.createElement("div", null)));
            expect(driver.isSelected()).toEqual(true);
        });
    });
    describe('disabled prop', function () {
        it('should not be disabled by default', function () {
            var driver = createDriver(React.createElement(_1.Thumbnail, null,
                React.createElement("div", null)));
            expect(driver.isDisabled()).toEqual(false);
        });
        it('should be disabled', function () {
            var driver = createDriver(React.createElement(_1.Thumbnail, { disabled: true },
                React.createElement("div", null)));
            expect(driver.isDisabled()).toEqual(true);
        });
    });
    describe('selectedIcon prop', function () {
        it('should not have icon by default', function () {
            var driver = createDriver(React.createElement(_1.Thumbnail, null,
                React.createElement("div", null)));
            expect(driver.hasSelectedIcon()).toEqual(false);
        });
        it('should not display icon when not selected', function () {
            var driver = createDriver(React.createElement(_1.Thumbnail, { selectedIcon: "\u2705" },
                React.createElement("div", null)));
            expect(driver.hasSelectedIcon()).toEqual(false);
        });
        it('should display icon when selected', function () {
            var driver = createDriver(React.createElement(_1.Thumbnail, { selected: true, selectedIcon: "\u2705" },
                React.createElement("div", null)));
            expect(driver.hasSelectedIcon()).toEqual(true);
        });
        it('should render the given icon when selected', function () {
            var driver = createDriver(React.createElement(_1.Thumbnail, { selected: true, selectedIcon: React.createElement("div", null, "hey") },
                React.createElement("div", null)));
            expect(driver.getSelectedIcon().outerHTML).toBe(enzyme_2.mount(React.createElement("div", null, "hey")).html());
        });
    });
    describe('testkit', function () {
        it('should exist', function () {
            expect(vanilla_1.isTestkitExists(React.createElement(_1.Thumbnail, null,
                React.createElement("div", null)), testkit_1.thumbnailTestkitFactory)).toBe(true);
        });
    });
    describe('enzyme testkit', function () {
        it('should exist', function () {
            expect(enzyme_1.isEnzymeTestkitExists(React.createElement(_1.Thumbnail, null,
                React.createElement("div", null)), enzyme_3.thumbnailTestkitFactory, enzyme_2.mount)).toBe(true);
        });
    });
});
//# sourceMappingURL=Thumbnail.spec.js.map