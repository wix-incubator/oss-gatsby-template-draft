/// <reference types="react" />
import * as React from 'react';
import { Input, InputProps } from '../Input';
import { FIELD, AmPmOptions } from './constants';
export declare type TimePickerProps = Pick<InputProps, 'disabled'> & {
    /**
     *  Callback function when user changes the value of the component.
     *  Will be called only with valid values (this component is semi-controlled)
     */
    onChange?: (value: string) => void;
    /** Standard input onFocus callback */
    onFocus?: React.FocusEventHandler<HTMLElement>;
    /** Standard input onBlur callback */
    onBlur?: React.FocusEventHandler<HTMLElement>;
    /** Use native (input type = 'time') interaction */
    useNativeInteraction?: boolean;
    /** Display and interact as AM/PM instead of 24 hour */
    useAmPm?: AmPmOptions;
    /** Interval in minutes to increase / decrease the time when on minutes or external */
    step?: number;
    /** Time in 24hour format according to the spec 23:59(:59(.999)) (https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#times). Can be null */
    value?: string;
    /** What to display for the up ticker. Will only be shown if tickerDownIcon is also provided */
    tickerUpIcon?: React.ReactNode;
    /** What to display for the down ticker. Will only be shown if tickerUpIcon is also provided */
    tickerDownIcon?: React.ReactNode;
    /** Is it an error state */
    error?: boolean;
    /** custom width of component. Goes into inline style so any css distance value allowed */
    style?: React.CSSProperties;
};
export interface TimePickerState {
    value: string;
    focus: boolean;
}
/**
 * Time Picker - following the Chrome on Mac behavior (mostly)
 */
export declare class TimePicker extends React.PureComponent<TimePickerProps, TimePickerState> {
    static displayName: string;
    /**
     * Tracks when focus is lost from the element or from the entire page -
     * We don't want focus to move if we left the page
     */
    _shouldHighlightOnFocus: boolean;
    /**
     * Tracks when the user started typing in a numerical field, to switch
     * behavior on first type and on subsequent types
     */
    _hasStartedTyping: boolean;
    /** For disabling select and drag */
    _mouseDown: boolean;
    /** To keep track of where to increment / decrement externally (ticker) */
    _lastFocusedField: FIELD;
    /** Reference to the input component */
    _inputRef: Input;
    static defaultProps: {
        onChange: () => any;
        useNativeInteraction: boolean;
        useAmPm: AmPmOptions;
        step: number;
        value: any;
    };
    static propTypes: Object;
    constructor(props: any);
    state: {
        value: string;
        focus: boolean;
    };
    componentWillReceiveProps(nextProps: any): void;
    _highlightField(DOMelement: HTMLInputElement, field: FIELD): void;
    _onMouseDown(e: any): void;
    _onMouseUp(e: any): void;
    _onMouseMove(e: any): void;
    _onClick(e: any): void;
    _onBlur(e: any): void;
    _onFocus(e: any): void;
    _onKeyDown(e: any): void;
    _increment(field?: FIELD): void;
    _decrement(field?: FIELD): void;
    focus(): void;
    blur(): void;
    render(): JSX.Element;
}
