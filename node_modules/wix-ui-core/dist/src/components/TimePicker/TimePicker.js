"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var prop_types_1 = require("prop-types");
var omit = require('lodash/omit');
var Tickers_1 = require("./Tickers");
var Input_1 = require("../Input");
var TimePicker_st_css_1 = require("./TimePicker.st.css");
var constants_1 = require("./constants");
var utils_1 = require("./utils");
// TODO: make all _prefix private when the parser won't choke on it
/**
 * Time Picker - following the Chrome on Mac behavior (mostly)
 */
var TimePicker = /** @class */ (function (_super) {
    __extends(TimePicker, _super);
    function TimePicker(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            value: _this.props.value && utils_1.isValidTime(_this.props.value) ? _this.props.value.substr(0, 5) : constants_1.NULL_TIME,
            focus: false
        };
        _this._shouldHighlightOnFocus = true;
        _this._hasStartedTyping = false;
        _this._mouseDown = false;
        _this._lastFocusedField = constants_1.FIELD.BEFORE;
        _this._inputRef = null;
        _this._highlightField = _this._highlightField.bind(_this);
        _this._onMouseDown = _this._onMouseDown.bind(_this);
        _this._onMouseUp = _this._onMouseUp.bind(_this);
        _this._onMouseMove = _this._onMouseMove.bind(_this);
        _this._onClick = _this._onClick.bind(_this);
        _this._onBlur = _this._onBlur.bind(_this);
        _this._onFocus = _this._onFocus.bind(_this);
        _this._onKeyDown = _this._onKeyDown.bind(_this);
        _this._increment = _this._increment.bind(_this);
        _this._decrement = _this._decrement.bind(_this);
        return _this;
    }
    TimePicker.prototype.componentWillReceiveProps = function (nextProps) {
        var value = nextProps.value;
        if (this.props.value !== value) {
            if (!value || !utils_1.isValidTime(value)) {
                value = constants_1.NULL_TIME;
            }
            this.setState({ value: value.substr(0, 5) });
        }
    };
    TimePicker.prototype._highlightField = function (DOMelement, field) {
        var startPos = (field - 1) * 3;
        if (startPos < 0) {
            return;
        }
        DOMelement.setSelectionRange(startPos, startPos + 2);
    };
    TimePicker.prototype._onMouseDown = function (e) {
        this._shouldHighlightOnFocus = false;
        this._hasStartedTyping = false;
        this._mouseDown = true;
    };
    TimePicker.prototype._onMouseUp = function (e) {
        this._mouseDown = false;
    };
    TimePicker.prototype._onMouseMove = function (e) {
        if (this._mouseDown) {
            e.preventDefault();
        }
    };
    TimePicker.prototype._onClick = function (e) {
        var _this = this;
        // Highlighting on click instead of mousedown because the selectionStart isn't set yet
        e.preventDefault();
        var elem = e.target;
        var field = utils_1.getFieldFromPos(elem.selectionStart);
        // Using setTimeout because otherwise mouse clicking on a selection will de-select :/
        setTimeout(function () { return _this._highlightField(elem, field); }, 0);
    };
    TimePicker.prototype._onBlur = function (e) {
        var _this = this;
        this._shouldHighlightOnFocus = e.target !== document.activeElement;
        this._hasStartedTyping = false;
        this._lastFocusedField = utils_1.getFieldFromPos(e.target.selectionStart);
        // Validate on blur and call onChange if needed
        var value = this.state.value;
        var _a = this.props, onChange = _a.onChange, useAmPm = _a.useAmPm;
        if (value === constants_1.NULL_TIME) {
            if (!!this.props.value) {
                onChange(null);
            }
        }
        else if (utils_1.isValidTime(value, useAmPm !== constants_1.AmPmOptions.None)) {
            if (this.props.value !== value) {
                onChange(value);
            }
        }
        else {
            var _b = utils_1.parseTime(value), hour = _b.hour, minute = _b.minute;
            var nHour = parseInt(hour) || 0;
            var nMinute = parseInt(minute) || 0;
            if (nMinute > 59) {
                nMinute = 59;
            }
            value = utils_1.leftpad(nHour) + ":" + utils_1.leftpad(nMinute);
            this.setState({ value: value }, function () { if (value !== _this.props.value) {
                onChange(value);
            } });
        }
        this.setState({ focus: false });
        this.props.onBlur && this.props.onBlur(e);
    };
    TimePicker.prototype._onFocus = function (e) {
        if (this._shouldHighlightOnFocus) {
            var elem = e.target;
            this._highlightField(elem, constants_1.FIELD.HOUR);
            this._hasStartedTyping = false;
        }
        this.setState({ focus: true });
        this.props.onFocus && this.props.onFocus(e);
    };
    TimePicker.prototype._onKeyDown = function (e) {
        /*
          Respond to:
          - tab
          - numbers
          - case-insensitive A, P (for am/pm)
          - arrow keys
          - delete and backspace
        */
        var _this = this;
        if (e.altKey || e.ctrlKey || e.metaKey) {
            return;
        }
        var elem = e.target;
        var startPos = elem.selectionStart;
        var _a = this.props, useAmPm = _a.useAmPm, onChange = _a.onChange;
        var value = this.state.value;
        var currentField = utils_1.getFieldFromPos(startPos);
        var isAmPm = useAmPm !== constants_1.AmPmOptions.None;
        // Checking for TAB first because it's the only key that might have default behavior
        // Shift focus between fields if tab is pressed, or use regular behavior if the field is on the edge
        // i.e., tabbing while on AM/PM or shift+tab on hour
        if (e.key === 'Tab') {
            currentField += e.shiftKey ? -1 : 1;
            if (currentField === constants_1.FIELD.HOUR || currentField === constants_1.FIELD.MINUTE || currentField === constants_1.FIELD.AMPM && isAmPm) {
                e.preventDefault();
                this._highlightField(elem, currentField);
            }
            return;
        }
        // Block other input default behavior
        e.preventDefault();
        // Handle numeric input
        if (/^[0-9]$/.test(e.key)) {
            var num = parseInt(e.key);
            var _b = utils_1.parseTime(value), hour = _b.hour, minute = _b.minute;
            if (currentField === constants_1.FIELD.HOUR) {
                if (this._hasStartedTyping) {
                    var nHour = parseInt("" + hour[1] + num);
                    if (nHour > 12 && isAmPm) {
                        nHour = 12;
                    }
                    if (nHour > 23) {
                        nHour = 23;
                    }
                    hour = "" + nHour;
                    currentField = constants_1.FIELD.MINUTE;
                    this._hasStartedTyping = false;
                }
                else {
                    if ((num > 1 && isAmPm) || num > 2) {
                        currentField = constants_1.FIELD.MINUTE;
                    }
                    else {
                        this._hasStartedTyping = true;
                    }
                    hour = e.key;
                }
            }
            else if (currentField === constants_1.FIELD.MINUTE) {
                if (this._hasStartedTyping) {
                    minute = "" + parseInt("" + minute[1] + num);
                }
                else {
                    this._hasStartedTyping = true;
                    minute = e.key;
                }
            }
            value = utils_1.leftpad(hour) + ":" + utils_1.leftpad(minute);
            this.setState({ value: value }, function () {
                _this._highlightField(elem, currentField);
                if (utils_1.isValidTime(value)) {
                    onChange(value);
                }
            });
            return;
        }
        this._hasStartedTyping = false;
        // All the rest: arrow keys, tab, delete, backspace, A/P
        switch (e.key) {
            // Change focus on arrow left or right
            case 'ArrowLeft': {
                currentField -= 1;
                if (currentField === constants_1.FIELD.BEFORE) {
                    currentField = constants_1.FIELD.HOUR;
                }
                this._highlightField(elem, currentField);
                break;
            }
            case 'ArrowRight': {
                currentField += 1;
                if (currentField === constants_1.FIELD.AMPM && !isAmPm) {
                    currentField = constants_1.FIELD.MINUTE;
                }
                if (currentField === constants_1.FIELD.AFTER) {
                    currentField = constants_1.FIELD.AMPM;
                }
                this._highlightField(elem, currentField);
                break;
            }
            // Increment or decrement for up/down arrows
            case 'ArrowUp':
            case 'ArrowDown': {
                var step = this.props.step;
                value = e.key === 'ArrowUp'
                    ? utils_1.increment({ value: value, field: currentField, step: step })
                    : utils_1.decrement({ value: value, field: currentField, step: step });
                this.setState({ value: value }, function () {
                    _this._highlightField(elem, currentField);
                    if (utils_1.isValidTime(value)) {
                        onChange(value);
                    }
                });
                break;
            }
            // AM / PM only if on relevant field
            case 'a':
            case 'A':
            case 'p':
            case 'P': {
                if (currentField !== constants_1.FIELD.AMPM) {
                    break;
                }
                var hour = utils_1.parseTime(value).hour;
                var nHour = parseInt(hour);
                if (nHour < 12 && (e.key === 'p' || e.key === 'P') ||
                    nHour > 11 && (e.key === 'a' || e.key === 'A')) {
                    value = utils_1.increment({ value: value, field: constants_1.FIELD.AMPM });
                    this.setState({ value: value }, function () {
                        _this._highlightField(elem, constants_1.FIELD.AMPM);
                        onChange(value);
                    });
                }
                break;
            }
            // Change field to BLANK on delete or backspace. Ignore if field is AM/PM
            case 'Delete':
            case 'Backspace': {
                var _c = utils_1.parseTime(value), hour = _c.hour, minute = _c.minute;
                var callback = function () {
                    if (_this.state.value === constants_1.NULL_TIME) {
                        onChange(null);
                    }
                    _this._highlightField(elem, currentField);
                };
                if (currentField === constants_1.FIELD.HOUR) {
                    this.setState({ value: constants_1.BLANK + ":" + minute }, callback);
                }
                if (currentField === constants_1.FIELD.MINUTE) {
                    this.setState({ value: hour + ":" + constants_1.BLANK }, callback);
                }
                break;
            }
            default:
        }
    };
    TimePicker.prototype._increment = function (field) {
        var value = this.state.value;
        var _a = this.props, step = _a.step, onChange = _a.onChange;
        value = utils_1.increment({ value: value, field: field || this._lastFocusedField || constants_1.FIELD.MINUTE, step: step });
        this.setState({ value: value });
        if (utils_1.isValidTime(value)) {
            onChange(value);
        }
    };
    TimePicker.prototype._decrement = function (field) {
        var value = this.state.value;
        var _a = this.props, step = _a.step, onChange = _a.onChange;
        value = utils_1.decrement({ value: value, field: field || this._lastFocusedField || constants_1.FIELD.MINUTE, step: step });
        this.setState({ value: value });
        if (utils_1.isValidTime(value)) {
            onChange(value);
        }
    };
    TimePicker.prototype.focus = function () {
        this._inputRef.focus();
    };
    TimePicker.prototype.blur = function () {
        this._inputRef.blur();
    };
    TimePicker.prototype.render = function () {
        var _this = this;
        var _a = this.props, useNativeInteraction = _a.useNativeInteraction, useAmPm = _a.useAmPm, tickerUpIcon = _a.tickerUpIcon, tickerDownIcon = _a.tickerDownIcon, inlineStyle = _a.style, rest = __rest(_a, ["useNativeInteraction", "useAmPm", "tickerUpIcon", "tickerDownIcon", "style"]);
        var passThroughProps = omit(rest, [
            'onChange',
            'step',
            'value',
        ]);
        if (useNativeInteraction) {
            var _b = this.props, propsValue = _b.value, onChange_1 = _b.onChange;
            var sanitizedValue = propsValue && utils_1.isValidTime(propsValue) ? propsValue.substr(0, 5) : '';
            return (React.createElement(Input_1.Input, __assign({}, passThroughProps, TimePicker_st_css_1.default('root', {}, this.props), { type: "time", value: sanitizedValue, onChange: function (e) { return onChange_1(e.target.value); } })));
        }
        var _c = this.state, value = _c.value, focus = _c.focus;
        if (useAmPm !== constants_1.AmPmOptions.None) {
            value = utils_1.convertToAmPm({ value: value, strings: constants_1.AmPmStrings[useAmPm] });
        }
        var tickers = tickerUpIcon && tickerDownIcon && (React.createElement(Tickers_1.Tickers, { className: TimePicker_st_css_1.default.tickers, onIncrement: function () { return _this._increment(); }, onDecrement: function () { return _this._decrement(); }, tickerUpIcon: tickerUpIcon, tickerDownIcon: tickerDownIcon }));
        return (React.createElement(Input_1.Input, __assign({}, passThroughProps, TimePicker_st_css_1.default('root', { focus: focus }, this.props), { ref: function (ref) { return _this._inputRef = ref; }, type: "text", value: value, suffix: tickers, onKeyDown: this._onKeyDown, onFocus: this._onFocus, onBlur: this._onBlur, onMouseDown: this._onMouseDown, onMouseUp: this._onMouseUp, onMouseMove: this._onMouseMove, onClick: this._onClick, onDragStart: function (e) { return e.stopPropagation(); }, style: inlineStyle })));
    };
    TimePicker.displayName = 'TimePicker';
    TimePicker.defaultProps = {
        onChange: function () { return null; },
        useNativeInteraction: false,
        useAmPm: constants_1.AmPmOptions.None,
        step: 1,
        value: null
    };
    TimePicker.propTypes = __assign({}, Input_1.Input.propTypes, { 
        /**
         *  Callback function when user changes the value of the component.
         *  Will be called only with valid values (this component is semi-controlled)
         */
        onChange: prop_types_1.func, 
        /** Standard input onFocus callback */
        onFocus: prop_types_1.func, 
        /** Standard input onBlur callback */
        onBlur: prop_types_1.func, 
        /** Use native (input type = 'time') interaction */
        useNativeInteraction: prop_types_1.bool, 
        /** Display and interact as AM/PM instead of 24 hour */
        useAmPm: prop_types_1.oneOf([constants_1.AmPmOptions.None, constants_1.AmPmOptions.Lowercase, constants_1.AmPmOptions.Uppercase, constants_1.AmPmOptions.Capitalized]), 
        /** Interval in minutes to increase / decrease the time when on minutes or external */
        step: function (props, propName, componentName) {
            var step = props[propName];
            if (typeof step === 'undefined' || step === null) {
                return null;
            }
            if (typeof step !== 'number') {
                return new Error("Invalid prop '" + propName + "' supplied to '" + componentName + "': [" + step + "] is not a number.");
            }
            var integerStep = Math.trunc(step);
            if (integerStep !== step) {
                return new Error("Invalid prop '" + propName + "' supplied to '" + componentName + "': [" + step + "] is not an integer.");
            }
            if (integerStep < 1 || integerStep > 60) {
                return new Error("Invalid prop '" + propName + "' supplied to '" + componentName + "': [" + step + "] is not in range 1-60.");
            }
        }, 
        /** Time in 24hour format according to the spec 23:59(:59(.999)) (https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#times). Can be null */
        value: function (props, propName, componentName) {
            var value = props[propName];
            if (value !== null && !utils_1.isValidTime(value)) {
                return new Error("Invalid prop '" + propName + "' supplied to '" + componentName + "': [" + value + "] is not valid, must be in 23:59(:59(.999)) format.\n          For details see https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#times");
            }
        }, 
        /** What to display for the up ticker. Will only be shown if tickerDownIcon is also provided */
        tickerUpIcon: prop_types_1.node, 
        /** What to display for the down ticker. Will only be shown if tickerUpIcon is also provided */
        tickerDownIcon: prop_types_1.node });
    return TimePicker;
}(React.PureComponent));
exports.TimePicker = TimePicker;
//# sourceMappingURL=TimePicker.js.map