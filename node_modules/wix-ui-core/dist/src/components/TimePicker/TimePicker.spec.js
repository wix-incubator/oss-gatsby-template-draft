"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var enzyme_1 = require("enzyme");
var dom_test_container_1 = require("../../../test/dom-test-container");
var index_1 = require("./index");
var constants_1 = require("./constants");
var utils_1 = require("./utils");
var TimePicker_driver_1 = require("./TimePicker.driver");
var test_utils_1 = require("stylable/test-utils");
var TimePicker_st_css_1 = require("./TimePicker.st.css");
var stylableUtil = new test_utils_1.StylableDOMUtil(TimePicker_st_css_1.default);
describe('TimePicker', function () {
    var createDriver = new dom_test_container_1.ReactDOMTestContainer()
        .unmountAfterEachTest()
        .createLegacyRenderer(TimePicker_driver_1.timePickerDriverFactory);
    var SOME_VALUE = '10:04';
    describe('onChange prop', function () {
        it('should be called with a new time when a new valid time is set', function () {
            var onChange = jest.fn();
            var driver = createDriver(React.createElement(index_1.TimePicker, { value: "10:00", onChange: onChange }));
            driver.focus();
            driver.keyDown('ArrowDown');
            expect(onChange).toBeCalledWith('09:00');
        });
        it('should be called with null when deleting a valid time to "--:--"', function () {
            var onChange = jest.fn();
            var driver = createDriver(React.createElement(index_1.TimePicker, { value: SOME_VALUE, onChange: onChange }));
            driver.focus();
            driver.keyDown('Delete');
            driver.keyDown('Tab');
            driver.keyDown('Delete');
            expect(onChange).toBeCalledWith(null);
        });
        it('should not be called when only one field is deleted', function () {
            var onChange = jest.fn();
            var driver = createDriver(React.createElement(index_1.TimePicker, { value: SOME_VALUE, onChange: onChange }));
            driver.focus();
            driver.keyDown('Delete');
            expect(onChange).not.toBeCalled();
        });
        it('should be called when only one field is deleted and then blurred', function () {
            var onChange = jest.fn();
            var driver = createDriver(React.createElement(index_1.TimePicker, { value: "10:00", onChange: onChange }));
            driver.focus();
            driver.keyDown('Delete');
            driver.blur();
            expect(onChange).toBeCalledWith('00:00');
        });
    });
    describe('onFocus and onBlur props', function () {
        it('should call the onFocus prop when focused', function () {
            var onFocus = jest.fn();
            var driver = createDriver(React.createElement(index_1.TimePicker, { onFocus: onFocus }));
            driver.focus();
            expect(onFocus).toHaveBeenCalled();
        });
        it('should call the onBlur prop when blurred', function () {
            var onBlur = jest.fn();
            var driver = createDriver(React.createElement(index_1.TimePicker, { onBlur: onBlur }));
            driver.focus();
            driver.blur();
            expect(onBlur).toHaveBeenCalled();
        });
    });
    describe('useNativeInteraction prop', function () {
        it('should default to false', function () {
            var driver = createDriver(React.createElement(index_1.TimePicker, null));
            expect(driver.getInputType()).toEqual('text');
        });
        it('should send empty string value instead of null value', function () {
            var driver = createDriver(React.createElement(index_1.TimePicker, { useNativeInteraction: true, value: null }));
            expect(driver.getValue()).toEqual('');
        });
        it('should use type = "text" for false', function () {
            var driver = createDriver(React.createElement(index_1.TimePicker, { useNativeInteraction: false }));
            expect(driver.getInputType()).toEqual('text');
        });
        it('should use type = "time" for true', function () {
            var driver = createDriver(React.createElement(index_1.TimePicker, { useNativeInteraction: true }));
            expect(driver.getInputType()).toEqual('time');
        });
        it('should crop the time value to HH:MM format', function () {
            var driver = createDriver(React.createElement(index_1.TimePicker, { useNativeInteraction: true, value: "12:12:12" }));
            expect(driver.getValue()).toEqual('12:12');
        });
    });
    describe('useAmPm prop', function () {
        it('should use none as default', function () {
            var driver = createDriver(React.createElement(index_1.TimePicker, { value: SOME_VALUE }));
            expect(driver.getValue()).toEqual(SOME_VALUE);
        });
        it('should display time in 24-hour format when AmPmOptions.None', function () {
            var driver = createDriver(React.createElement(index_1.TimePicker, { value: SOME_VALUE, useAmPm: constants_1.AmPmOptions.None }));
            expect(driver.getValue()).toEqual(SOME_VALUE);
        });
        it('should display time in lowercase 12-hour format when AmPmOptions.Lowercase', function () {
            var driver = createDriver(React.createElement(index_1.TimePicker, { value: SOME_VALUE, useAmPm: constants_1.AmPmOptions.Lowercase }));
            expect(driver.getValue()).toEqual(utils_1.convertToAmPm({ value: SOME_VALUE, strings: constants_1.AmPmStrings[constants_1.AmPmOptions.Lowercase] }));
        });
        it('should display time in uppercase 12-hour format when AmPmOptions.Uppercase', function () {
            var driver = createDriver(React.createElement(index_1.TimePicker, { value: SOME_VALUE, useAmPm: constants_1.AmPmOptions.Uppercase }));
            expect(driver.getValue()).toEqual(utils_1.convertToAmPm({ value: SOME_VALUE, strings: constants_1.AmPmStrings[constants_1.AmPmOptions.Uppercase] }));
        });
        it('should display time in capitalized 12-hour format when AmPmOptions.Capitalized', function () {
            var driver = createDriver(React.createElement(index_1.TimePicker, { value: SOME_VALUE, useAmPm: constants_1.AmPmOptions.Capitalized }));
            expect(driver.getValue()).toEqual(utils_1.convertToAmPm({ value: SOME_VALUE, strings: constants_1.AmPmStrings[constants_1.AmPmOptions.Capitalized] }));
        });
    });
    describe('step prop', function () {
        it('should default to 1 minute', function () {
            var driver = createDriver(React.createElement(index_1.TimePicker, { value: SOME_VALUE }));
            driver.focus();
            driver.keyDown('Tab');
            driver.keyDown('Tab');
            driver.keyDown('ArrowUp');
            expect(driver.getValue()).toEqual('10:05');
        });
        it('should increment value by 5 minutes when step is set to 5', function () {
            var driver = createDriver(React.createElement(index_1.TimePicker, { value: SOME_VALUE, step: 5 }));
            driver.focus();
            driver.keyDown('Tab');
            driver.keyDown('Tab');
            driver.keyDown('ArrowUp');
            expect(driver.getValue()).toEqual('10:09');
        });
        it('should increment hour value by 1', function () {
            var driver = createDriver(React.createElement(index_1.TimePicker, { value: SOME_VALUE }));
            driver.focus();
            driver.keyDown('ArrowUp');
            expect(driver.getValue()).toEqual('11:04');
        });
        it('should increment hour value by 1 when step is set to 60', function () {
            var driver = createDriver(React.createElement(index_1.TimePicker, { value: SOME_VALUE, step: 60 }));
            driver.focus();
            driver.keyDown('ArrowUp');
            expect(driver.getValue()).toEqual('11:04');
        });
    });
    describe('value prop', function () {
        it('should use blank "--:--" as default', function () {
            var driver = createDriver(React.createElement(index_1.TimePicker, null));
            expect(driver.getValue()).toEqual('--:--');
        });
        it('should set the value according to the value prop HH:MM format', function () {
            var driver = createDriver(React.createElement(index_1.TimePicker, { value: SOME_VALUE }));
            expect(driver.getValue()).toEqual(SOME_VALUE);
        });
        it('should set the value according to the value prop HH:MM:SS format', function () {
            var driver = createDriver(React.createElement(index_1.TimePicker, { value: "12:34:56" }));
            expect(driver.getValue()).toEqual('12:34');
        });
        it('should set the value according to the value prop HH:MM:SS.mmm format', function () {
            var driver = createDriver(React.createElement(index_1.TimePicker, { value: "12:34:56.789" }));
            expect(driver.getValue()).toEqual('12:34');
        });
        it('should set the value when a new value is sent', function () {
            var ValueContainer = /** @class */ (function (_super) {
                __extends(ValueContainer, _super);
                function ValueContainer(props) {
                    var _this = _super.call(this, props) || this;
                    _this.state = { value: _this.props.value };
                    _this.timePickerRef = React.createRef();
                    _this.setValue = _this.setValue.bind(_this);
                    return _this;
                }
                ValueContainer.prototype.setValue = function (value) { this.setState({ value: value }); };
                ValueContainer.prototype.render = function () { return (React.createElement(index_1.TimePicker, { ref: this.timePickerRef, value: this.state.value })); };
                return ValueContainer;
            }(React.Component));
            var container = enzyme_1.mount(React.createElement(ValueContainer, { value: SOME_VALUE }));
            var inputElement = container.find('input').getDOMNode();
            expect(inputElement.value).toEqual(SOME_VALUE);
            var NEW_VALUE = '13:13';
            container.instance().setValue(NEW_VALUE);
            expect(inputElement.value).toEqual(NEW_VALUE);
        });
        describe('invalid values', function () {
            var stub;
            beforeEach(function () { return stub = jest.spyOn(console, 'error').mockImplementation(function () { return null; }); });
            afterEach(function () { return stub.mockRestore(); });
            it('should validate the prop and console.error if not valid', function () {
                var driver = createDriver(React.createElement(index_1.TimePicker, { value: 'a' }));
                expect(stub).toHaveBeenCalled();
            });
            it('should show blank when value is invalid', function () {
                var driver = createDriver(React.createElement(index_1.TimePicker, { value: 'a' }));
                expect(driver.getValue()).toEqual('--:--');
            });
            it('should show blank when value is invalid time', function () {
                var driver = createDriver(React.createElement(index_1.TimePicker, { value: '12:60' }));
                expect(driver.getValue()).toEqual('--:--');
            });
            it('should send empty string value instead of invalid value when using native interaction', function () {
                var driver = createDriver(React.createElement(index_1.TimePicker, { useNativeInteraction: true, value: "a" }));
                expect(driver.getValue()).toEqual('');
            });
        });
    });
    describe('style prop', function () {
        it('should set inline style on input', function () {
            var inlineStyle = { width: '123px' };
            var driver = createDriver(React.createElement(index_1.TimePicker, { style: inlineStyle }));
            expect(driver.getInlineStyle()).toEqual(expect.objectContaining(inlineStyle));
        });
    });
    describe('tickers', function () {
        var tickerUpIcon = React.createElement("div", { "data-hook": "ticker-up" });
        var tickerDownIcon = React.createElement("div", { "data-hook": "ticker-down" });
        it('should render tickers when both tickerUpIcon and tickerDownIcon are supplied', function () {
            var driver = createDriver(React.createElement(index_1.TimePicker, { tickerUpIcon: tickerUpIcon, tickerDownIcon: tickerDownIcon }));
            expect(driver.getTickers()).toBeTruthy();
        });
        it('should NOT render tickers if both tickerUpIcon and tickerDownIcon are not supplied', function () {
            var driver = createDriver(React.createElement(index_1.TimePicker, { tickerDownIcon: tickerDownIcon }));
            expect(driver.getTickers()).toBeFalsy();
        });
        it('should call onChange with correct value when up ticker is clicked and valid time is set', function () {
            var onChangeSpy = jest.fn();
            var driver = createDriver(React.createElement(index_1.TimePicker, { value: SOME_VALUE, tickerUpIcon: tickerUpIcon, tickerDownIcon: tickerDownIcon, onChange: onChangeSpy }));
            driver.clickTickerUp();
            expect(onChangeSpy).toHaveBeenCalledWith('10:05');
        });
        it('should call onChange with correct value when down ticker is clicked and valid time is set', function () {
            var onChangeSpy = jest.fn();
            var driver = createDriver(React.createElement(index_1.TimePicker, { value: SOME_VALUE, tickerUpIcon: tickerUpIcon, tickerDownIcon: tickerDownIcon, onChange: onChangeSpy }));
            driver.clickTickerDown();
            expect(onChangeSpy).toHaveBeenCalledWith('10:03');
        });
        it('should NOT call onChange with correct value when up ticker is clicked and invalid time is set, but should update the display', function () {
            var onChangeSpy = jest.fn();
            var driver = createDriver(React.createElement(index_1.TimePicker, { tickerUpIcon: tickerUpIcon, tickerDownIcon: tickerDownIcon, onChange: onChangeSpy }));
            driver.clickTickerUp();
            expect(onChangeSpy).not.toHaveBeenCalled();
            expect(driver.getValue()).toEqual('--:01');
        });
        it('should NOT call onChange with correct value when down ticker is clicked and invalid time is set, but should update the display', function () {
            var onChangeSpy = jest.fn();
            var driver = createDriver(React.createElement(index_1.TimePicker, { tickerUpIcon: tickerUpIcon, tickerDownIcon: tickerDownIcon, onChange: onChangeSpy }));
            driver.clickTickerDown();
            expect(onChangeSpy).not.toHaveBeenCalled();
            expect(driver.getValue()).toEqual('--:59');
        });
    });
    it('should support focus state', function () {
        var driver = createDriver(React.createElement(index_1.TimePicker, null));
        expect(stylableUtil.hasStyleState(driver.element(), 'focus')).toBeFalsy();
        driver.focus();
        expect(stylableUtil.hasStyleState(driver.element(), 'focus')).toBeTruthy();
        driver.blur();
        expect(stylableUtil.hasStyleState(driver.element(), 'focus')).toBeFalsy();
    });
});
//# sourceMappingURL=TimePicker.spec.js.map