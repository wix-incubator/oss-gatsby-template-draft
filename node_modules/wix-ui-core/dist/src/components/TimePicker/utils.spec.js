"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("./constants");
var utils_1 = require("./utils");
describe('TimePicker utils', function () {
    describe('leftpad', function () {
        it('should return "00" for an empty string', function () {
            expect(utils_1.leftpad('')).toEqual('00');
        });
        it('should return "04" for an input of "4"', function () {
            expect(utils_1.leftpad('4')).toEqual('04');
        });
        it('should return "14" for an input of "14"', function () {
            expect(utils_1.leftpad('14')).toEqual('14');
        });
        it('should return "14" for an input of "214"', function () {
            expect(utils_1.leftpad('214')).toEqual('14');
        });
    });
    describe('parseTime', function () {
        it('should return hour = 10 and minutes = 45 from an input of "10:45"', function () {
            var _a = utils_1.parseTime('10:45'), hour = _a.hour, minute = _a.minute;
            expect(hour).toEqual('10');
            expect(minute).toEqual('45');
        });
    });
    describe('increment', function () {
        describe('field = hour', function () {
            it('should return "01:--" for input of "--:--", default step', function () {
                expect(utils_1.increment({ value: constants_1.NULL_TIME, field: constants_1.FIELD.HOUR })).toEqual("01:" + constants_1.BLANK);
            });
            it('should return "01:--" for input of "00:--", default step', function () {
                expect(utils_1.increment({ value: "00:" + constants_1.BLANK, field: constants_1.FIELD.HOUR })).toEqual("01:" + constants_1.BLANK);
            });
            it('should return "00:--" for input of "23:--", default step', function () {
                expect(utils_1.increment({ value: "23:" + constants_1.BLANK, field: constants_1.FIELD.HOUR })).toEqual("00:" + constants_1.BLANK);
            });
            it('should return "01:00" for input of "00:00", default step', function () {
                expect(utils_1.increment({ value: '00:00', field: constants_1.FIELD.HOUR })).toEqual('01:00');
            });
            it('should increment by one hour for any step value', function () {
                expect(utils_1.increment({ value: '00:00', field: constants_1.FIELD.HOUR, step: 20 })).toEqual('01:00');
            });
        });
        describe('field = minute', function () {
            it('should return "--:01" for input of "--:--", default step', function () {
                expect(utils_1.increment({ value: constants_1.NULL_TIME, field: constants_1.FIELD.MINUTE })).toEqual(constants_1.BLANK + ":01");
            });
            it('should return "--:01" for input of "--:00", default step', function () {
                expect(utils_1.increment({ value: constants_1.BLANK + ":00", field: constants_1.FIELD.MINUTE })).toEqual(constants_1.BLANK + ":01");
            });
            it('should return "--:00" for input of "--:59", default step', function () {
                expect(utils_1.increment({ value: constants_1.BLANK + ":59", field: constants_1.FIELD.MINUTE })).toEqual(constants_1.BLANK + ":00");
            });
            it('should return "10:40" for input of "10:20", step = 20', function () {
                expect(utils_1.increment({ value: '10:20', field: constants_1.FIELD.MINUTE, step: 20 })).toEqual('10:40');
            });
            it('should return "11:14" for input of "10:30", step = 44', function () {
                expect(utils_1.increment({ value: '10:30', field: constants_1.FIELD.MINUTE, step: 44 })).toEqual('11:14');
            });
        });
        describe('field = ampm', function () {
            it('should return "--:--" for input of "--:--"', function () {
                expect(utils_1.increment({ value: constants_1.NULL_TIME, field: constants_1.FIELD.AMPM })).toEqual(constants_1.NULL_TIME);
            });
            it('should return "--:10" for input of "--:10"', function () {
                expect(utils_1.increment({ value: constants_1.BLANK + ":10", field: constants_1.FIELD.AMPM })).toEqual(constants_1.BLANK + ":10");
            });
            it('should return "22:--" for input of "10:--"', function () {
                expect(utils_1.increment({ value: "10:" + constants_1.BLANK, field: constants_1.FIELD.AMPM })).toEqual("22:" + constants_1.BLANK);
            });
            it('should return "22:15" for input of "10:15"', function () {
                expect(utils_1.increment({ value: '10:15', field: constants_1.FIELD.AMPM })).toEqual('22:15');
            });
            it('should return "10:15" for input of "22:15"', function () {
                expect(utils_1.increment({ value: '22:15', field: constants_1.FIELD.AMPM })).toEqual('10:15');
            });
        });
    });
    describe('decrement', function () {
        describe('field = hour', function () {
            it('should return "23:--" for input of "--:--", default step', function () {
                expect(utils_1.decrement({ value: constants_1.NULL_TIME, field: constants_1.FIELD.HOUR })).toEqual("23:" + constants_1.BLANK);
            });
            it('should return "23:--" for input of "00:--", default step', function () {
                expect(utils_1.decrement({ value: "00:" + constants_1.BLANK, field: constants_1.FIELD.HOUR })).toEqual("23:" + constants_1.BLANK);
            });
            it('should return "22:--" for input of "23:--", default step', function () {
                expect(utils_1.decrement({ value: "23:" + constants_1.BLANK, field: constants_1.FIELD.HOUR })).toEqual("22:" + constants_1.BLANK);
            });
            it('should return "23:00" for input of "00:00", default step', function () {
                expect(utils_1.decrement({ value: '00:00', field: constants_1.FIELD.HOUR })).toEqual('23:00');
            });
            it('should return "23:00" for input of "00:00", step = 20', function () {
                expect(utils_1.decrement({ value: '00:00', field: constants_1.FIELD.HOUR, step: 20 })).toEqual('23:00');
            });
        });
        describe('field = minute', function () {
            it('should return "--:59" for input of "--:--", default step', function () {
                expect(utils_1.decrement({ value: constants_1.NULL_TIME, field: constants_1.FIELD.MINUTE })).toEqual(constants_1.BLANK + ":59");
            });
            it('should return "--:59" for input of "--:00", default step', function () {
                expect(utils_1.decrement({ value: constants_1.BLANK + ":00", field: constants_1.FIELD.MINUTE })).toEqual(constants_1.BLANK + ":59");
            });
            it('should return "--:58" for input of "--:59", default step', function () {
                expect(utils_1.decrement({ value: constants_1.BLANK + ":59", field: constants_1.FIELD.MINUTE })).toEqual(constants_1.BLANK + ":58");
            });
            it('should return "10:20" for input of "10:40", step = 20', function () {
                expect(utils_1.decrement({ value: '10:40', field: constants_1.FIELD.MINUTE, step: 20 })).toEqual('10:20');
            });
            it('should return "10:30" for input of "11:14", step = 44', function () {
                expect(utils_1.decrement({ value: '11:14', field: constants_1.FIELD.MINUTE, step: 44 })).toEqual('10:30');
            });
        });
        describe('field = ampm', function () {
            it('should return "--:--" for input of "--:--"', function () {
                expect(utils_1.decrement({ value: constants_1.NULL_TIME, field: constants_1.FIELD.AMPM })).toEqual(constants_1.NULL_TIME);
            });
            it('should return "--:10" for input of "--:10"', function () {
                expect(utils_1.decrement({ value: constants_1.BLANK + ":10", field: constants_1.FIELD.AMPM })).toEqual(constants_1.BLANK + ":10");
            });
            it('should return "22:--" for input of "10:--"', function () {
                expect(utils_1.decrement({ value: "10:" + constants_1.BLANK, field: constants_1.FIELD.AMPM })).toEqual("22:" + constants_1.BLANK);
            });
            it('should return "22:15" for input of "10:15"', function () {
                expect(utils_1.decrement({ value: '10:15', field: constants_1.FIELD.AMPM })).toEqual('22:15');
            });
            it('should return "10:15" for input of "22:15"', function () {
                expect(utils_1.decrement({ value: '22:15', field: constants_1.FIELD.AMPM })).toEqual('10:15');
            });
        });
    });
    describe('isValidTime', function () {
        describe('24-hour values', function () {
            it('should return true for 00:00', function () { return expect(utils_1.isValidTime('00:00')).toBeTruthy(); });
            it('should return true for 23:59', function () { return expect(utils_1.isValidTime('23:59')).toBeTruthy(); });
            it('should return true for 00:00:00', function () { return expect(utils_1.isValidTime('00:00:00')).toBeTruthy(); });
            it('should return true for 00:00:00.000', function () { return expect(utils_1.isValidTime('00:00:00.000')).toBeTruthy(); });
            it('should return false for 0000', function () { return expect(utils_1.isValidTime('0000')).toBeFalsy(); });
            it('should return false for 00;00', function () { return expect(utils_1.isValidTime('00;00')).toBeFalsy(); });
            it('should return false for z0:00', function () { return expect(utils_1.isValidTime('z0:00')).toBeFalsy(); });
            it('should return false for 24:00', function () { return expect(utils_1.isValidTime('24:00')).toBeFalsy(); });
            it('should return false for --:--', function () { return expect(utils_1.isValidTime('--:--')).toBeFalsy(); });
        });
        describe('12-hour values', function () {
            it('should return true for 12:00', function () { return expect(utils_1.isValidTime('12:00', true)).toBeTruthy(); });
            it('should return true for 12:59', function () { return expect(utils_1.isValidTime('12:59', true)).toBeTruthy(); });
            it('should return true for 12:00:00', function () { return expect(utils_1.isValidTime('12:00:00', true)).toBeTruthy(); });
            it('should return true for 12:00:00.000', function () { return expect(utils_1.isValidTime('12:00:00.000', true)).toBeTruthy(); });
            it('should return false for 0000', function () { return expect(utils_1.isValidTime('0000', true)).toBeFalsy(); });
            it('should return false for 00;00', function () { return expect(utils_1.isValidTime('00;00', true)).toBeFalsy(); });
            it('should return false for 00:00:00', function () { return expect(utils_1.isValidTime('00:00:00', true)).toBeFalsy(); });
            it('should return false for z0:00', function () { return expect(utils_1.isValidTime('z0:00', true)).toBeFalsy(); });
            it('should return false for 13:00', function () { return expect(utils_1.isValidTime('13:00', true)).toBeFalsy(); });
            it('should return false for 00:00', function () { return expect(utils_1.isValidTime('00:00', true)).toBeFalsy(); });
            it('should return false for --:--', function () { return expect(utils_1.isValidTime('--:--', true)).toBeFalsy(); });
        });
    });
    describe('convertToAmPm', function () {
        it('should return "12:00 AM" for "00:00"', function () { return expect(utils_1.convertToAmPm({ value: '00:00' })).toEqual('12:00 AM'); });
        it('should return "11:59 AM" for "11:59"', function () { return expect(utils_1.convertToAmPm({ value: '11:59' })).toEqual('11:59 AM'); });
        it('should return "12:00 PM" for "12:00"', function () { return expect(utils_1.convertToAmPm({ value: '12:00' })).toEqual('12:00 PM'); });
        it('should return "11:59 PM" for "23:59"', function () { return expect(utils_1.convertToAmPm({ value: '23:59' })).toEqual('11:59 PM'); });
        it('should return "12:00 am" for "00:00" with lowercase strings', function () { return expect(utils_1.convertToAmPm({ value: '00:00', strings: { am: 'am', pm: 'pm' } })).toEqual('12:00 am'); });
        it('should return "12:00 pm" for "12:00" with lowercase strings', function () { return expect(utils_1.convertToAmPm({ value: '12:00', strings: { am: 'am', pm: 'pm' } })).toEqual('12:00 pm'); });
    });
    describe('getFieldFromPos', function () {
        it('should return FIELD.HOUR for 0', function () { return expect(utils_1.getFieldFromPos(0)).toEqual(constants_1.FIELD.HOUR); });
        it('should return FIELD.HOUR for 1', function () { return expect(utils_1.getFieldFromPos(1)).toEqual(constants_1.FIELD.HOUR); });
        it('should return FIELD.HOUR for 2', function () { return expect(utils_1.getFieldFromPos(2)).toEqual(constants_1.FIELD.HOUR); });
        it('should return FIELD.MINUTE for 3', function () { return expect(utils_1.getFieldFromPos(3)).toEqual(constants_1.FIELD.MINUTE); });
        it('should return FIELD.MINUTE for 4', function () { return expect(utils_1.getFieldFromPos(4)).toEqual(constants_1.FIELD.MINUTE); });
        it('should return FIELD.MINUTE for 5', function () { return expect(utils_1.getFieldFromPos(5)).toEqual(constants_1.FIELD.MINUTE); });
        it('should return FIELD.AMPM for 6', function () { return expect(utils_1.getFieldFromPos(6)).toEqual(constants_1.FIELD.AMPM); });
        it('should return FIELD.AMPM for 7', function () { return expect(utils_1.getFieldFromPos(7)).toEqual(constants_1.FIELD.AMPM); });
        it('should return FIELD.AMPM for 8', function () { return expect(utils_1.getFieldFromPos(8)).toEqual(constants_1.FIELD.AMPM); });
        it('should return FIELD.AFTER for 9', function () { return expect(utils_1.getFieldFromPos(9)).toEqual(constants_1.FIELD.AFTER); });
    });
});
//# sourceMappingURL=utils.spec.js.map