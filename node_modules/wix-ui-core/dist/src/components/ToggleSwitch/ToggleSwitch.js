"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var propTypes = require("prop-types");
var ToggleSwitch_st_css_1 = require("./ToggleSwitch.st.css");
/**
 * Toggle Switch
 */
var ToggleSwitch = /** @class */ (function (_super) {
    __extends(ToggleSwitch, _super);
    function ToggleSwitch() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            focus: false,
            focusVisible: false
        };
        // We don't want to show outline when the component is focused by mouse.
        _this.focusedByMouse = false;
        _this.handleKeyDown = function (e) {
            // Pressing any key should make the focus visible, even if the checkbox
            // was initially focused by mouse.
            _this.setState({ focusVisible: true });
        };
        // Doesn't get invoked if the input is disabled.
        _this.handleMouseDown = function (e) {
            if (e.button === 0) {
                _this.focusedByMouse = true;
            }
        };
        _this.handleFocus = function (e) {
            _this.setState({ focus: true, focusVisible: !_this.focusedByMouse });
        };
        _this.handleBlur = function (e) {
            _this.setState({ focus: false, focusVisible: false });
            _this.focusedByMouse = false;
        };
        return _this;
    }
    ToggleSwitch.prototype.render = function () {
        var _a = this.props, checked = _a.checked, disabled = _a.disabled, inlineStyles = _a.styles;
        return (React.createElement("div", __assign({}, ToggleSwitch_st_css_1.default('root', {
            checked: checked,
            disabled: disabled,
            focus: this.state.focus,
            'focus-visible': this.state.focusVisible
        }, this.props), { style: inlineStyles.root }),
            React.createElement("div", { className: ToggleSwitch_st_css_1.default.track, style: inlineStyles.track }),
            React.createElement("div", { className: ToggleSwitch_st_css_1.default.knob, style: inlineStyles.knob },
                React.createElement("div", { className: ToggleSwitch_st_css_1.default.knobIcon, style: inlineStyles.knobIcon }, checked ? this.props.checkedIcon : this.props.uncheckedIcon)),
            React.createElement("input", { id: this.props.id, className: ToggleSwitch_st_css_1.default.input, type: "checkbox", checked: checked, disabled: disabled, tabIndex: this.props.tabIndex, onChange: this.props.onChange, onFocus: this.handleFocus, onBlur: this.handleBlur, onMouseDown: this.handleMouseDown, onKeyDown: this.handleKeyDown })));
    };
    ToggleSwitch.displayName = 'ToggleSwitch';
    ToggleSwitch.propTypes = {
        /** Is the toggleSwitch checked or not */
        checked: propTypes.bool,
        /** Is the toggleSwitch disabled or not */
        disabled: propTypes.bool,
        /** Tab index */
        tabIndex: propTypes.number,
        /** Callback function when user changes the value of the component */
        onChange: propTypes.func,
        /** Inline styles for various parts of the switch */
        styles: propTypes.object,
        /** The ID attribute to put on the toggle */
        id: propTypes.string,
        /** Icon inside of the knob when checked */
        checkedIcon: propTypes.node,
        /** Icon inside of the knob when unchecked */
        uncheckedIcon: propTypes.node
    };
    ToggleSwitch.defaultProps = {
        checked: false,
        styles: {},
        tabIndex: 0,
        onChange: function () { return null; }
    };
    return ToggleSwitch;
}(React.PureComponent));
exports.ToggleSwitch = ToggleSwitch;
//# sourceMappingURL=ToggleSwitch.js.map