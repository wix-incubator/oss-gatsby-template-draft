"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ToggleSwitch_driver_1 = require("./ToggleSwitch.driver");
var enzyme_1 = require("wix-ui-test-utils/enzyme");
var dom_test_container_1 = require("../../../test/dom-test-container");
var vanilla_1 = require("wix-ui-test-utils/vanilla");
var _1 = require("./");
var testkit_1 = require("../../testkit");
var enzyme_2 = require("../../testkit/enzyme");
var enzyme_3 = require("enzyme");
describe('ToggleSwitch', function () {
    var createDriver = new dom_test_container_1.ReactDOMTestContainer()
        .unmountAfterEachTest()
        .createLegacyRenderer(ToggleSwitch_driver_1.toggleSwitchDriverFactory);
    describe('checked prop', function () {
        it('should be controlled', function () {
            var driver = createDriver(React.createElement(_1.ToggleSwitch, null));
            expect(driver.isChecked()).toBe(false);
            driver.click();
            expect(driver.isChecked()).toBe(false);
        });
        it('should pass down to input when checked', function () {
            var driver = createDriver(React.createElement(_1.ToggleSwitch, { checked: true }));
            expect(driver.isChecked()).toBe(true);
        });
        it('should pass down to input when not checked', function () {
            var driver = createDriver(React.createElement(_1.ToggleSwitch, { checked: false }));
            expect(driver.isChecked()).toBe(false);
        });
    });
    describe('onChange prop', function () {
        it('should be called when the input is clicked', function () {
            var onChange = jest.fn();
            var driver = createDriver(React.createElement(_1.ToggleSwitch, { checked: false, onChange: onChange }));
            driver.click();
            expect(onChange).toBeCalled();
        });
    });
    describe('disabled prop', function () {
        it('should not be disabled by default', function () {
            var driver = createDriver(React.createElement(_1.ToggleSwitch, null));
            expect(driver.isDisabled()).toBe(false);
        });
        it('should not be clickable when disabled and unchecked', function () {
            var onChange = jest.fn();
            var driver = createDriver(React.createElement(_1.ToggleSwitch, { checked: false, onChange: onChange, disabled: true }));
            driver.click();
            expect(onChange).toHaveBeenCalledTimes(0);
            expect(driver.isChecked()).toBe(false);
        });
        it('should not be clickable when disabled and checked', function () {
            var onChange = jest.fn();
            var driver = createDriver(React.createElement(_1.ToggleSwitch, { checked: true, onChange: onChange, disabled: true }));
            driver.click();
            expect(onChange).toHaveBeenCalledTimes(0);
            expect(driver.isChecked()).toBe(true);
        });
    });
    describe('attributes', function () {
        it('should apply user specified id', function () {
            var testId = 'testId';
            var driver = createDriver(React.createElement(_1.ToggleSwitch, { id: testId }));
            expect(driver.getId()).toBe(testId);
        });
        it('should have tabIndex=0 by default', function () {
            var driver = createDriver(React.createElement(_1.ToggleSwitch, null));
            expect(driver.getTabIndex()).toBe(0);
        });
        it('should apply user specified tabIndex', function () {
            var driver = createDriver(React.createElement(_1.ToggleSwitch, { tabIndex: 7 }));
            expect(driver.getTabIndex()).toBe(7);
        });
    });
    describe('icons', function () {
        it('should not have unchecked icon by default', function () {
            var driver = createDriver(React.createElement(_1.ToggleSwitch, null));
            expect(driver.getKnobIcon().innerHTML).toBe('');
        });
        it('should not have checked icon by default', function () {
            var driver = createDriver(React.createElement(_1.ToggleSwitch, { checked: true }));
            expect(driver.getKnobIcon().innerHTML).toBe('');
        });
        it('should show uncheckedIcon when unchecked', function () {
            var driver = createDriver(React.createElement(_1.ToggleSwitch, { checkedIcon: "\u2705", uncheckedIcon: "\u274E" }));
            expect(driver.getKnobIcon().innerHTML).toBe('❎');
        });
        it('should show checkedIcon when checked', function () {
            var driver = createDriver(React.createElement(_1.ToggleSwitch, { checked: true, checkedIcon: "\u2705", uncheckedIcon: "\u274E" }));
            expect(driver.getKnobIcon().innerHTML).toBe('✅');
        });
    });
    describe('testkit', function () {
        it('should exist', function () {
            expect(vanilla_1.isTestkitExists(React.createElement(_1.ToggleSwitch, null), testkit_1.toggleSwitchTestkitFactory)).toBe(true);
        });
    });
    describe('enzyme testkit', function () {
        it('should exist', function () {
            expect(enzyme_1.isEnzymeTestkitExists(React.createElement(_1.ToggleSwitch, null), enzyme_2.toggleSwitchTestkitFactory, enzyme_3.mount)).toBe(true);
        });
    });
});
//# sourceMappingURL=ToggleSwitch.spec.js.map