"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Tooltip_st_css_1 = require("./Tooltip.st.css");
var react_onclickoutside_1 = require("react-onclickoutside");
var Popover_1 = require("../Popover");
var prop_types_1 = require("prop-types");
var utils_1 = require("../../utils");
var noop = function () { return null; };
/**
 * Tooltip
 */
var TooltipComponent = /** @class */ (function (_super) {
    __extends(TooltipComponent, _super);
    function TooltipComponent(props) {
        var _this = _super.call(this, props) || this;
        _this.state = { isOpen: false };
        _this.open = _this.open.bind(_this);
        _this.close = _this.close.bind(_this);
        return _this;
    }
    TooltipComponent.prototype.handleClickOutside = function () {
        if (this.props.onClickOutside) {
            this.props.onClickOutside();
        }
        if (this.props.shouldCloseOnClickOutside) {
            this.close();
        }
    };
    TooltipComponent.prototype.open = function () {
        if (!this.state.isOpen) {
            this.props.onShow();
            this.setState({ isOpen: true });
        }
    };
    TooltipComponent.prototype.close = function () {
        if (this.state.isOpen && !this.props.shouldCloseOnClickOutside) {
            this.props.onHide();
            this.setState({ isOpen: false });
        }
    };
    TooltipComponent.prototype.render = function () {
        var _a = this.props, placement = _a.placement, content = _a.content, children = _a.children, moveBy = _a.moveBy, timeout = _a.timeout, showArrow = _a.showArrow, moveArrowTo = _a.moveArrowTo, appendTo = _a.appendTo;
        var isOpen = this.state.isOpen;
        return (React.createElement(Popover_1.Popover, __assign({}, Tooltip_st_css_1.default('root', {}, this.props), { placement: placement, shown: isOpen, showArrow: showArrow, onMouseEnter: this.open, onMouseLeave: this.close, timeout: timeout, moveBy: moveBy, moveArrowTo: moveArrowTo, appendTo: appendTo }),
            React.createElement(Popover_1.Popover.Element, null, children),
            React.createElement(Popover_1.Popover.Content, null, content)));
    };
    TooltipComponent.Element = utils_1.createComponentThatRendersItsChildren('Tooltip.Element');
    TooltipComponent.Content = utils_1.createComponentThatRendersItsChildren('Tooltip.Content');
    TooltipComponent.displayName = 'Tooltip';
    TooltipComponent.defaultProps = {
        placement: 'top',
        onShow: noop,
        onHide: noop,
        timeout: 150,
        showArrow: true
    };
    TooltipComponent.propTypes = {
        /** tooltip's placement in relation to the target element */
        placement: Popover_1.PlacementsType,
        /** children to render that will be the target of the tooltip */
        children: prop_types_1.node,
        /** the content to put inside the tooltip */
        content: prop_types_1.node,
        /** object that describes re-positioning of the tooltip */
        moveBy: prop_types_1.object,
        /** offset for the arrow */
        moveArrowTo: prop_types_1.number,
        /** callback to call when the tooltip is shown */
        onShow: prop_types_1.func,
        /** callback to call when the tooltip is being hidden */
        onHide: prop_types_1.func,
        /** Enables calculations in relation to a dom element */
        appendTo: Popover_1.AppendToPropType,
        /** Provides callback to invoke when outside of tooltip is clicked */
        onClickOutside: prop_types_1.func,
        /** If true, makes tooltip close when clicked outside (incase it was open) */
        shouldCloseOnClickOutside: prop_types_1.bool,
        /** Animation timer */
        timeout: prop_types_1.number,
        /** If true, shows the tooltip arrow */
        showArrow: prop_types_1.bool
    };
    return TooltipComponent;
}(React.PureComponent));
exports.TooltipComponent = TooltipComponent;
exports.Tooltip = react_onclickoutside_1.default(TooltipComponent);
//# sourceMappingURL=Tooltip.js.map