"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Video_driver_private_1 = require("./Video.driver.private");
var _1 = require("./");
describe('Video', function () {
    // Since this runs in a browser avoid sending HTTP requests over network.
    var videoUrl = 'data:video/mp4,never-gonna-give-you-up.mp4';
    var videoUrl2 = 'data:video/mp4,never-gonna-let-you-down.mp4';
    var imageUrl = 'data:image/jpeg,never-gonna-run-around.jpg';
    describe('src prop', function () {
        it('should not be present by default', function () {
            var driver = Video_driver_private_1.createDriver(React.createElement(_1.Video, null));
            expect(driver.getSrc()).toBeFalsy();
        });
        it('should set initial value', function () {
            var driver = Video_driver_private_1.createDriver(React.createElement(_1.Video, { src: videoUrl }));
            expect(driver.getSrc()).toBe(videoUrl);
        });
        it('should set array for src', function () {
            var driver = Video_driver_private_1.createDriver(React.createElement(_1.Video, { src: [videoUrl] }));
            expect(driver.getSrc()).toEqual([videoUrl]);
        });
        it('should update value', function () {
            var driver = Video_driver_private_1.createDriver(React.createElement(_1.Video, { src: videoUrl }));
            expect(driver.getSrc()).toBe(videoUrl);
            driver.setProp('src', videoUrl2);
            expect(driver.getSrc()).toBe(videoUrl2);
        });
    });
    describe('width prop', function () {
        it('should not be present by default', function () {
            var driver = Video_driver_private_1.createDriver(React.createElement(_1.Video, null));
            expect(driver.getWidth()).toBeFalsy();
        });
        it('should set initial value', function () {
            var driver = Video_driver_private_1.createDriver(React.createElement(_1.Video, { width: 400 }));
            expect(driver.getWidth()).toBe('400px');
        });
    });
    describe('height prop', function () {
        it('should not be present by default', function () {
            var driver = Video_driver_private_1.createDriver(React.createElement(_1.Video, null));
            expect(driver.getHeight()).toBeFalsy();
        });
        it('should set initial value', function () {
            var driver = Video_driver_private_1.createDriver(React.createElement(_1.Video, { height: 225 }));
            expect(driver.getHeight()).toBe('225px');
        });
    });
    describe('playing prop', function () {
        it('should not playing by default', function () {
            var driver = Video_driver_private_1.createDriver(React.createElement(_1.Video, null));
            expect(driver.isAutoPlaying()).toBe(false);
        });
        it('should set initial value', function () {
            var driver = Video_driver_private_1.createDriver(React.createElement(_1.Video, { playing: true }));
            expect(driver.isAutoPlaying()).toBe(true);
        });
    });
    describe('muted prop', function () {
        it('should not be muted by default', function () {
            var driver = Video_driver_private_1.createDriver(React.createElement(_1.Video, null));
            expect(driver.isMuted()).toBe(false);
        });
        it('should set initial value', function () {
            var driver = Video_driver_private_1.createDriver(React.createElement(_1.Video, { muted: true }));
            expect(driver.isMuted()).toBe(true);
        });
        it('should update value', function () {
            var driver = Video_driver_private_1.createDriver(React.createElement(_1.Video, { muted: true }));
            expect(driver.isMuted()).toBe(true);
            driver.setProp('muted', false);
            expect(driver.isMuted()).toBe(false);
            driver.setProp('muted', true);
            expect(driver.isMuted()).toBe(true);
        });
    });
    describe('cover', function () {
        it('should be present', function () {
            var driver = Video_driver_private_1.createDriver(React.createElement(_1.Video, { poster: imageUrl }));
            expect(driver.hasCover()).toBe(true);
        });
    });
    describe('title', function () {
        it('should be present', function () {
            var driver = Video_driver_private_1.createDriver(React.createElement(_1.Video, { title: "Awesome", poster: imageUrl }));
            expect(driver.getTitle()).toBe('Awesome');
        });
    });
    describe('fillAllSpace', function () {
        it('should set width and height in 100%', function () {
            var driver = Video_driver_private_1.createDriver(React.createElement(_1.Video, { fillAllSpace: true }));
            expect(driver.getRootDOMNode().style.width).toBe('100%');
            expect(driver.getRootDOMNode().style.height).toBe('100%');
        });
    });
    describe('playButton', function () {
        it('should be presented', function () {
            var driver = Video_driver_private_1.createDriver(React.createElement(_1.Video, { poster: imageUrl, playButton: React.createElement("div", { "data-hook": "play-button" }, "Play") }));
            expect(driver.getRootDOMNode().querySelector('[data-hook="play-button"]')).toBeTruthy();
        });
    });
    describe('logo', function () {
        it('should be hidden by default', function () {
            var driver = Video_driver_private_1.createDriver(React.createElement(_1.Video, null));
            expect(driver.getLogoSrc()).toBeFalsy();
        });
        it('should be shown and clickable if callback passed', function () {
            var callback = jest.fn();
            var driver = Video_driver_private_1.createDriver(React.createElement(_1.Video, { onLogoClick: callback }));
            driver.clickLogo();
            expect(callback).toBeCalled();
        });
        it('should be presented', function () {
            var driver = Video_driver_private_1.createDriver(React.createElement(_1.Video, { logoUrl: imageUrl }));
            expect(driver.getLogoSrc()).toBe(imageUrl);
        });
    });
});
//# sourceMappingURL=Video.spec.js.map