"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var _1 = require("./");
var enzyme_1 = require("enzyme");
describe('createHOC function', function () {
    var render = function (Comp) { return enzyme_1.mount(Comp, { attachTo: document.createElement('div') }); };
    // Regular component with state
    var ChildComponent = /** @class */ (function (_super) {
        __extends(ChildComponent, _super);
        function ChildComponent(props) {
            var _this = _super.call(this, props) || this;
            _this.state = { id: _this.props.id };
            _this.boundMethod = _this.boundMethod.bind(_this);
            return _this;
        }
        ChildComponent.staticMethod = function () { return 'staticMethod'; };
        ChildComponent.prototype.unboundMethod = function () { return 'unboundMethod'; };
        ChildComponent.prototype.boundMethod = function () { return this.state.id; };
        ChildComponent.prototype.render = function () { return React.createElement("div", null, "Hello"); };
        ChildComponent.staticVariable = 'staticVariable';
        return ChildComponent;
    }(React.Component));
    // Pure component without state
    var PureChildComponent = /** @class */ (function (_super) {
        __extends(PureChildComponent, _super);
        function PureChildComponent(props) {
            var _this = _super.call(this, props) || this;
            _this.id = props.id;
            _this.boundMethod = _this.boundMethod.bind(_this);
            return _this;
        }
        PureChildComponent.staticMethod = function () { return 'staticMethod'; };
        PureChildComponent.prototype.unboundMethod = function () { return 'unboundMethod'; };
        PureChildComponent.prototype.boundMethod = function () { return this.id; };
        PureChildComponent.prototype.render = function () { return React.createElement("div", null, "Hello"); };
        PureChildComponent.staticVariable = 'staticVariable';
        return PureChildComponent;
    }(React.PureComponent));
    describe('Stateful components', function () {
        var HOCComponent = _1.createHOC(ChildComponent);
        it('should render the wrapped component', function () {
            var wrapper = render(React.createElement(HOCComponent, null));
            expect(wrapper.children().instance()).toBeInstanceOf(ChildComponent);
        });
        it('should place data-hook on the root of the component', function () {
            var wrapper = render(React.createElement(HOCComponent, { dataHook: "my-data-hook" }));
            expect(wrapper.getDOMNode().getAttribute('data-hook')).toBe('my-data-hook');
        });
        it('should place data-class on the root of the component', function () {
            var wrapper = render(React.createElement(HOCComponent, { dataClass: "my-data-class" }));
            expect(wrapper.getDOMNode().getAttribute('data-class')).toBe('my-data-class');
        });
        describe('hoisting', function () {
            it('should hoist static methods', function () {
                expect(HOCComponent.staticMethod()).toEqual('staticMethod');
            });
            it('should hoist static variables', function () {
                expect(HOCComponent.staticVariable).toEqual('staticVariable');
            });
            it('should hoist prototype methods from child to HOC and bind them', function () {
                var wrapper = render(React.createElement(HOCComponent, { id: "some_id" }));
                expect(wrapper.instance().unboundMethod()).toEqual('unboundMethod');
                expect(wrapper.instance().boundMethod()).toEqual('some_id');
            });
        });
    });
    describe('Pure components', function () {
        var HOCComponent = _1.createHOC(PureChildComponent);
        it('should render the wrapped component', function () {
            var wrapper = render(React.createElement(HOCComponent, null));
            expect(wrapper.children().instance()).toBeInstanceOf(PureChildComponent);
        });
        it('should place data-hook on the root of the component', function () {
            var wrapper = render(React.createElement(HOCComponent, { dataHook: "my-data-hook" }));
            expect(wrapper.getDOMNode().getAttribute('data-hook')).toBe('my-data-hook');
        });
        it('should place data-class on the root of the component', function () {
            var wrapper = render(React.createElement(HOCComponent, { dataClass: "my-data-class" }));
            expect(wrapper.getDOMNode().getAttribute('data-class')).toBe('my-data-class');
        });
        describe('hoisting', function () {
            it('should hoist static methods', function () {
                expect(HOCComponent.staticMethod()).toEqual('staticMethod');
            });
            it('should hoist static variables', function () {
                expect(HOCComponent.staticVariable).toEqual('staticVariable');
            });
            it('should hoist prototype methods from child to HOC and bind them', function () {
                var wrapper = render(React.createElement(HOCComponent, { id: "some_id" }));
                expect(wrapper.instance().unboundMethod()).toEqual('unboundMethod');
                expect(wrapper.instance().boundMethod()).toEqual('some_id');
            });
        });
    });
    describe('Stateless components', function () {
        var StatelessChildComponent = function () { return (React.createElement("div", null, "stateless")); };
        var HOCComponent = _1.createHOC(StatelessChildComponent);
        it('should render the wrapped component', function () {
            var wrapper = render(React.createElement(HOCComponent, null));
            // This doesn't work - it is actually an instance of React.StatelessComponent
            // expect(wrapper.children().instance()).toBeInstanceOf(StatelessChildComponent);
            expect(wrapper.children().length).toEqual(1);
            expect(wrapper.children().contains(React.createElement(StatelessChildComponent, null))).toBeTruthy();
        });
        it('should place data-hook on the root of the component', function () {
            var wrapper = render(React.createElement(HOCComponent, { dataHook: "my-data-hook" }));
            expect(wrapper.getDOMNode().getAttribute('data-hook')).toBe('my-data-hook');
        });
        it('should place data-class on the root of the component', function () {
            var wrapper = render(React.createElement(HOCComponent, { dataClass: "my-data-class" }));
            expect(wrapper.getDOMNode().getAttribute('data-class')).toBe('my-data-class');
        });
        // Nothing to hoist on stateless components
    });
    describe('displayName', function () {
        it('should be inheritted from ChildComponent', function () {
            var Component = /** @class */ (function (_super) {
                __extends(Component, _super);
                function Component() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Component.prototype.render = function () {
                    return null;
                };
                Component.displayName = "i'm batman";
                return Component;
            }(React.Component));
            var HocComponent = _1.createHOC(Component);
            var wrapper = render(React.createElement(HocComponent, null));
            expect(wrapper.name()).toEqual("i'm batman");
        });
        it('should be className when displayName is undefined', function () {
            var Spiderman = /** @class */ (function (_super) {
                __extends(Spiderman, _super);
                function Spiderman() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Spiderman.prototype.render = function () {
                    return null;
                };
                return Spiderman;
            }(React.Component));
            var HocComponent = _1.createHOC(Spiderman);
            var wrapper = render(React.createElement(HocComponent, null));
            expect(wrapper.name()).toEqual('Spiderman');
        });
        it('should fallback to `WixComponent` when neither displayName nor className available', function () {
            // component as anonymous function
            var HocComponent = _1.createHOC(function () { return null; });
            var wrapper = render(React.createElement(HocComponent, null));
            expect(wrapper.name()).toEqual('WixComponent');
        });
    });
});
//# sourceMappingURL=createHOC.spec.js.map