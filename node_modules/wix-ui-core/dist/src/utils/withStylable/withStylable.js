"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
function isReactClassComponent(value) {
    return value && isComponentInstance(value.prototype);
}
function isComponentInstance(value) {
    return value && value instanceof React.Component;
}
function withStylableStateful(Component, stylesheet, getState, extendedDefaultProps) {
    return _a = /** @class */ (function (_super) {
            __extends(StylableComponent, _super);
            function StylableComponent() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            StylableComponent.prototype.render = function () {
                var root = _super.prototype.render.call(this);
                if (!root) {
                    return null;
                }
                var className = root.props && root.props.className || '';
                var statesMap = getState(this.props, this.state, this.context);
                var props = stylesheet(("root " + (className ? className : '')).trim(), statesMap);
                return React.cloneElement(root, props);
            };
            return StylableComponent;
        }(Component)),
        _a.defaultProps = Object.assign({}, Component.defaultProps, extendedDefaultProps),
        _a;
    var _a;
}
function withStylableStateless(Component, stylesheet, getState, extendedDefaultProps) {
    var WrapperComponent = function (props) {
        var root = Component(props);
        if (!root) {
            return null;
        }
        var className = root.props && root.props.className || '';
        var statesMap = getState(props);
        var stylableProps = stylesheet(("root " + (className ? className : '')).trim(), statesMap);
        return React.cloneElement(root, stylableProps);
    };
    // Copy static properties
    for (var propName in Component) {
        WrapperComponent[propName] = Component[propName];
    }
    WrapperComponent.defaultProps = Object.assign({}, Component.defaultProps, extendedDefaultProps);
    return WrapperComponent;
}
function withStylable(Component, stylesheet, getState, extendedDefaultProps) {
    if (getState === void 0) { getState = function () { return ({}); }; }
    if (extendedDefaultProps === void 0) { extendedDefaultProps = {}; }
    if (isReactClassComponent(Component)) {
        return withStylableStateful(Component, stylesheet, getState, extendedDefaultProps);
    }
    else {
        return withStylableStateless(Component, stylesheet, getState, extendedDefaultProps);
    }
}
exports.withStylable = withStylable;
//# sourceMappingURL=withStylable.js.map