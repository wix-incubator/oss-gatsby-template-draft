"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDOM = require("react-dom");
var test_utils_1 = require("react-dom/test-utils");
// At the moment our tests support both Jsdom and browser environment.
// The browser test runner provides #root element to render into, and
// in Jsdom we're going to add the container into the body.
function createDOMContainer() {
    var root = document.querySelector('#root') || document.body;
    var div = document.createElement('div');
    root.appendChild(div);
    return div;
}
exports.createDOMContainer = createDOMContainer;
// A wrapper around createDOMContainer to reduce boilerplate when working with
// React components.
var ReactDOMTestContainer = /** @class */ (function () {
    function ReactDOMTestContainer() {
    }
    Object.defineProperty(ReactDOMTestContainer.prototype, "componentNode", {
        get: function () {
            return this.node.firstElementChild;
        },
        enumerable: true,
        configurable: true
    });
    // The container is usually created outside of before() test hook, and the
    // constructor runs before any of the tests, globally. Instead of attaching
    // the DOM element upfront in the constructor and polluting the document we
    // provide this method.
    ReactDOMTestContainer.prototype.create = function () {
        this.node = createDOMContainer();
        return this;
    };
    ReactDOMTestContainer.prototype.destroy = function () {
        this.node.remove();
        return this;
    };
    // We're not returning the result of  ReactDOM.render() because its use
    // is deprecated.
    ReactDOMTestContainer.prototype.render = function (jsx) {
        var _this = this;
        return new Promise(function (resolve) { return ReactDOM.render(jsx, _this.node, resolve); });
    };
    ReactDOMTestContainer.prototype.renderSync = function (jsx) {
        return ReactDOM.render(jsx, this.node);
    };
    // This function's signature should be:
    // <P, T extends React.Component<P>>(jsx: React.ComponentElement<P, T>): Promise<T>;
    // But TypeScript has this weird bug where it can derive the instance type from
    // React.createElement(Component), but cannot derive it from <Component />.
    ReactDOMTestContainer.prototype.renderWithRef = function (jsx) {
        var ref = React.createRef();
        jsx = React.cloneElement(jsx, { ref: ref });
        return this.render(jsx).then(function () { return ref.current; });
    };
    ReactDOMTestContainer.prototype.unmount = function () {
        ReactDOM.unmountComponentAtNode(this.node);
        return this;
    };
    ReactDOMTestContainer.prototype.unmountAfterEachTest = function () {
        var _this = this;
        beforeAll(function () { return _this.create(); });
        afterEach(function () { return _this.unmount(); });
        afterAll(function () { return _this.destroy(); });
        return this;
    };
    ReactDOMTestContainer.prototype.destroyAfterEachTest = function () {
        var _this = this;
        beforeEach(function () { return _this.create(); });
        afterEach(function () { return (_this.unmount(), _this.destroy()); });
        return this;
    };
    // Adapter for drivers written for wix-ui-test-utils/createDriverFactory
    ReactDOMTestContainer.prototype.createLegacyRenderer = function (driverFactory) {
        var _this = this;
        return function (jsx) {
            _this.renderSync(jsx);
            return driverFactory({
                element: _this.componentNode,
                wrapper: _this.node,
                eventTrigger: test_utils_1.Simulate
            });
        };
    };
    return ReactDOMTestContainer;
}());
exports.ReactDOMTestContainer = ReactDOMTestContainer;
//# sourceMappingURL=dom-test-container.js.map