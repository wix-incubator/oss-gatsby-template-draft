/// <reference types="react" />
import * as React from 'react';
import { BaseDriver } from '../driver-factory';
import { MountRendererProps, ReactWrapper } from 'enzyme';
export interface WrapperData {
    wrapper: ReactWrapper;
    dataHook: string;
}
export declare type MountFunctionType = (node: React.ReactElement<any>, options?: MountRendererProps) => ReactWrapper;
export declare type EnzymeDriverFactory<T extends BaseDriver> = (data: {
    element: Element | undefined;
    wrapper: ReactWrapper;
    eventTrigger: any;
}) => T;
export declare function enzymeTestkitFactoryCreator<T extends BaseDriver>(driverFactory: EnzymeDriverFactory<T>): (obj: WrapperData) => T;
export interface Options {
    withoutDataHook?: boolean;
    /** The dataHookPropName exists in order to support legacy CamelCase `dataHook`
     *  which is used in Wix-Style-React, while the current prop name used in
     * `wix-ui-core` is snake-case `data-hook`.
     * */
    dataHookPropName?: 'data-hook' | 'dataHook';
}
/**
 * Checks if the given Element accepts a data hook, and that the testkit factory finds the component's root element using that data hook.
 *
 * This method supports both new snake-case and legacy camelCase data hook prop name (e.g `data-hook` and `dataHook`).
 * The default is to check by both prop name options.
 */
export declare function isEnzymeTestkitExists<T extends BaseDriver>(Element: React.ReactElement<any>, testkitFactory: (obj: WrapperData) => T, mount: MountFunctionType, options?: Options): boolean;
