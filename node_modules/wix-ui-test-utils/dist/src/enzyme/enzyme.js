"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var react_helpers_1 = require("../react-helpers");
function enzymeTestkitFactoryCreator(driverFactory) {
    return function (obj) {
        var eventTrigger = react_helpers_1.reactEventTrigger();
        var regexp = new RegExp("^<[^>]+data-hook=\"" + obj.dataHook + "\"");
        var component = obj.wrapper.findWhere(function (n) { return n.length > 0 && typeof n.type() === 'string' && (regexp).test(n.html()); });
        var element = component.length > 0 ? component.first().getDOMNode() : undefined;
        return driverFactory({ element: element, wrapper: obj.wrapper, eventTrigger: eventTrigger });
    };
}
exports.enzymeTestkitFactoryCreator = enzymeTestkitFactoryCreator;
/**
 * Checks if the given Element accepts a data hook, and that the testkit factory finds the component's root element using that data hook.
 *
 * This method supports both new snake-case and legacy camelCase data hook prop name (e.g `data-hook` and `dataHook`).
 * The default is to check by both prop name options.
 */
function isEnzymeTestkitExists(Element, testkitFactory, mount, options) {
    if (options === void 0) { options = {}; }
    return isEnzymeTestkitExistsInternal(__assign({ Element: Element, testkitFactory: testkitFactory, mount: mount }, options));
}
exports.isEnzymeTestkitExists = isEnzymeTestkitExists;
/**
 * This internal function is only in order to allow separate defaults to each options.
 */
function isEnzymeTestkitExistsInternal(_a) {
    var Element = _a.Element, testkitFactory = _a.testkitFactory, mount = _a.mount, _b = _a.withoutDataHook, withoutDataHook = _b === void 0 ? false : _b, dataHookPropName = _a.dataHookPropName;
    var dataHook = withoutDataHook ? '' : 'myDataHook';
    var extraProps = dataHookPropName ? (_c = {}, _c[dataHookPropName] = dataHook, _c) : { dataHook: dataHook, 'data-hook': dataHook };
    var elementToRender = React.cloneElement(Element, extraProps);
    var wrapper = mount(elementToRender);
    var testkit = testkitFactory({ wrapper: wrapper, dataHook: dataHook });
    return testkit.exists();
    var _c;
}
//# sourceMappingURL=enzyme.js.map