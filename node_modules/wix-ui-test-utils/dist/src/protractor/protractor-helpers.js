"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var protractor_1 = require("protractor");
var encode = global.encodeURIComponent;
/**
 * @deprecated
 * @see createStoryUrl
 */
exports.getStoryUrl = function (kind, story) {
    return exports.createStoryUrl({ kind: kind, story: story });
};
/**
 *
 * @param {StoryUrlParams} params withExamples defaults to true
 */
exports.createStoryUrl = function (_a) {
    var kind = _a.kind, story = _a.story, _b = _a.withExamples, withExamples = _b === void 0 ? true : _b;
    return "iframe.html?selectedKind=" + encode(kind) + "&selectedStory=" + encode(story) + (withExamples ? "&withExamples" : '');
};
exports.scrollToElement = function (element) {
    return protractor_1.browser.executeScript(function (el) { return el.scrollIntoView(); }, element.getWebElement());
};
exports.hasEllipsis = function (element) { return protractor_1.browser.executeScript('return arguments[0].offsetWidth < arguments[0].scrollWidth', element); };
exports.waitForVisibilityOf = function (elements, errorMsg, timeout) {
    if (timeout === void 0) { timeout = 10000; }
    var arrayOfElements = Array.isArray(elements)
        ? elements.slice() : [elements];
    return protractor_1.promise.all(arrayOfElements.map(function (elem) {
        return protractor_1.browser.wait(protractor_1.ExpectedConditions.visibilityOf(elem), timeout, errorMsg);
    }));
};
function isFocused(element) {
    return element.equals(protractor_1.browser.driver.switchTo().activeElement());
}
exports.isFocused = isFocused;
exports.hasAttribute = function (elementFinder, attributeName) {
    return elementFinder.getAttribute(attributeName).then(function (value) { return value !== null; });
};
exports.mouseEnter = function (element) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
    switch (_a.label) {
        case 0: return [4 /*yield*/, protractor_1.browser.actions().mouseMove(element).perform()];
        case 1: return [2 /*return*/, _a.sent()];
    }
}); }); };
exports.mouseLeave = function () { return exports.mouseEnter({ x: 1000, y: 1000 }); };
//# sourceMappingURL=protractor-helpers.js.map