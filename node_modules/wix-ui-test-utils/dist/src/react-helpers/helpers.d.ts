/// <reference types="react" />
import * as React from 'react';
import { Simulate } from 'react-dom/test-utils';
export interface ControlledComponentState {
    value: string;
}
export interface ControlledComponentProps {
    value?: string;
    onChange?: (e: React.ChangeEvent<HTMLElement>) => void;
    [otherProps: string]: any;
}
export interface ControlledEventTarget extends EventTarget {
    value: string;
}
export interface ControlledChangeEvent<T> extends React.ChangeEvent<T> {
    target: ControlledEventTarget & T;
}
export declare const isClassExists: (element: HTMLElement, className: String) => Boolean;
export declare const sleep: (ms: number) => Promise<void>;
export declare function makeControlled<T extends ControlledComponentProps>(Component: React.SFC<T>): {
    new (props: Readonly<ControlledComponentProps>): {
        state: {
            value: string;
        };
        _onChange: (e: ControlledChangeEvent<any>) => void;
        render(): JSX.Element;
        setState<K extends "value">(state: ControlledComponentState | ((prevState: Readonly<ControlledComponentState>, props: Readonly<ControlledComponentProps>) => ControlledComponentState | Pick<ControlledComponentState, K> | null) | Pick<ControlledComponentState, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<{
            children?: React.ReactNode;
        }> & Readonly<ControlledComponentProps>;
        context: any;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
    new (props: ControlledComponentProps, context?: any): {
        state: {
            value: string;
        };
        _onChange: (e: ControlledChangeEvent<any>) => void;
        render(): JSX.Element;
        setState<K extends "value">(state: ControlledComponentState | ((prevState: Readonly<ControlledComponentState>, props: Readonly<ControlledComponentProps>) => ControlledComponentState | Pick<ControlledComponentState, K> | null) | Pick<ControlledComponentState, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<{
            children?: React.ReactNode;
        }> & Readonly<ControlledComponentProps>;
        context: any;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
    defaultProps: {
        value: string;
    };
};
export declare const reactEventTrigger: () => typeof Simulate;
