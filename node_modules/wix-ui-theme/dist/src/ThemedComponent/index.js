"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var pickBy = require('lodash/pickBy');
var ThemedComponent = /** @class */ (function (_super) {
    __extends(ThemedComponent, _super);
    function ThemedComponent(props) {
        var _this = _super.call(this, props) || this;
        var children = props.children, theme = props.theme, propsForTheme = __rest(props, ["children", "theme"]);
        _this.state = { calculatedTheme: getTheme(theme, propsForTheme) };
        return _this;
    }
    ThemedComponent.prototype.componentWillReceiveProps = function (nextProps) {
        var _this = this;
        var children = nextProps.children, theme = nextProps.theme, propsForTheme = __rest(nextProps, ["children", "theme"]);
        var changedProps = pickBy(__assign({ theme: theme }, propsForTheme), function (value, key) { return _this.props[key] !== value; });
        if (Object.keys(changedProps).length > 0) {
            this.setState({ calculatedTheme: getTheme(theme, propsForTheme) });
        }
    };
    ThemedComponent.prototype.render = function () {
        var calculatedTheme = this.state.calculatedTheme;
        return React.cloneElement(this.props.children, { theme: calculatedTheme });
    };
    ThemedComponent.defaultProps = { theme: function () { return ({}); } };
    return ThemedComponent;
}(React.PureComponent));
exports.ThemedComponent = ThemedComponent;
function getTheme(theme, params) {
    return typeof theme === 'function' ? theme(params) : theme;
}
//# sourceMappingURL=index.js.map